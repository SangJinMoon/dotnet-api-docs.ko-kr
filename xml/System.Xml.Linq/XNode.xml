<Type Name="XNode" FullName="System.Xml.Linq.XNode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f001654247344cf25b9ac07d23e7fb08ac4c201a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XNode : System.Xml.Linq.XObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XNode extends System.Xml.Linq.XObject" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNode" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XNode&#xA;Inherits XObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNode abstract : System::Xml::Linq::XObject" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4c4d8-101">XML 트리에서 노드(요소, 주석, 문서 종류, 처리 명령 또는 텍스트 노드)의 추상 개념을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4c4d8-101">Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-102"><xref:System.Xml.Linq.XNode> 다음 형식에 대 한 추상 공통 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-102"><xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XContainer>  
  
-   <xref:System.Xml.Linq.XDocumentType>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="4c4d8-103"><xref:System.Xml.Linq.XContainer> 다음 형식에 대 한 추상 공통 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-103"><xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XDocument>  
  
-   <xref:System.Xml.Linq.XElement>  
  
 <span data-ttu-id="4c4d8-104">파생 된 클래스의 개체 <xref:System.Xml.Linq.XContainer> 자식 노드가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-104">Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c4d8-105"><xref:System.Xml.Linq.XAttribute> 않습니다는 <xref:System.Xml.Linq.XNode>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-105">An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>.</span></span> <span data-ttu-id="4c4d8-106">특성은 요소에 이름/값 쌍의 목록으로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-106">Attributes are maintained as a list of name/value pairs on an element.</span></span>  
  
 <span data-ttu-id="4c4d8-107">예: XML 편집기 또는 XML로 콘텐츠를 저장 하는 워드 프로세서는 복잡 한 XML 응용 프로그램을 작성 하는 경우 노드 수준에서 작업 하는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-107">If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level.</span></span> <span data-ttu-id="4c4d8-108">일반적인 작업이 노드 수준에서 작업 하는 경우에 노드를 추가, 노드 삭제, 노드, 변환 및 노드의 컬렉션을 반환 하는 축 반복 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-108">Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AddAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-109">이 노드 바로 뒤에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-109">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-110">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-110">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-111">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-111">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-112">다음 예제에서는 LINQ 쿼리를 사용 하 여 만들려는 <xref:System.Collections.Generic.IEnumerable%601> 의 <xref:System.Xml.Linq.XElement>,이 메서드에 전달 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-112">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="4c4d8-113">원하는 위치에 트리는 쿼리의 결과 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-113">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
    <Root>  
        <Element1>1</Element1>  
        <Element2>2</Element2>  
        <Element3>3</Element3>  
        <Element4>4</Element4>  
        <Element5>5</Element5>  
    </Root>  
  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
        <Child4>4</Child4>  
        <Child5>5</Child5>  
    </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-114">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-114">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-115">이 노드 뒤에 추가할 단순 콘텐츠 또는 콘텐츠 개체 컬렉션이 포함된 콘텐츠 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-115">A content object that contains simple content or a collection of content objects to be added after this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-116">이 노드 바로 뒤에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-116">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-117">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-117">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-118"><xref:System.Xml.Linq.XObject.Changing> 이벤트</span><span class="sxs-lookup"><span data-stu-id="4c4d8-118"><xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-119">다음 예제에서는이 메서드를 사용 하 여 요소를 트리에 추가 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-119">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-120">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-120">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <NewChild>10</NewChild>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-121">부모 노드가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-121">The parent is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-122">콘텐츠 개체의 매개 변수 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-122">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-123">이 노드 바로 뒤에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-123">Adds the specified content immediately after this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-124">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-124">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-125">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-125">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-126">다음 예제에서는 LINQ 쿼리를 사용 하 여 만들려는 <xref:System.Collections.Generic.IEnumerable%601> 의 <xref:System.Xml.Linq.XElement>,이 메서드에 전달 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-126">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="4c4d8-127">원하는 위치에 트리는 쿼리의 결과 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-127">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-128">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-128">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-129">부모 노드가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-129">The parent is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-130">이 노드 바로 앞에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-130">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-131">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-131">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-132">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-132">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4c4d8-133"><xref:System.Xml.Linq.XContainer> 자식 노트를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-133">The <xref:System.Xml.Linq.XContainer> stores its child notes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-134">즉는 <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-134">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-135">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-135">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-136">다음 예제에서는 LINQ 쿼리를 사용 하 여 만들려는 <xref:System.Collections.Generic.IEnumerable%601> 의 <xref:System.Xml.Linq.XElement>,이 메서드에 전달 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-136">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="4c4d8-137">원하는 위치에 트리는 쿼리의 결과 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-137">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
From el In srcTree.Elements() _  
Where CInt(el) > 3 _  
Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-138">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-138">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-139">이 노드 앞에 추가할 단순 콘텐츠 또는 콘텐츠 개체 컬렉션이 포함된 콘텐츠 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-139">A content object that contains simple content or a collection of content objects to be added before this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-140">이 노드 바로 앞에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-140">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-141">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-141">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-142">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-142">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4c4d8-143"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-143">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-144">즉는 <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-144">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-145">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-145">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-146">다음 예제에서는이 메서드를 사용 하 여 요소를 트리에 추가 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-146">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-147">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-147">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewChild>10</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-148">부모 노드가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-148">The parent is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-149">콘텐츠 개체의 매개 변수 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-149">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-150">이 노드 바로 앞에 지정된 콘텐츠를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-150">Adds the specified content immediately before this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-151">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-151">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-152">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-152">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4c4d8-153"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-153">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-154">즉는 <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-154">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-155">따라서이 함수를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-155">Therefore, using this function might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-156">다음 예제에서는 LINQ 쿼리를 사용 하 여 만들려는 <xref:System.Collections.Generic.IEnumerable%601> 의 <xref:System.Xml.Linq.XElement>,이 메서드에 전달 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-156">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="4c4d8-157">원하는 위치에 트리는 쿼리의 결과 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-157">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-158">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-158">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-159">부모 노드가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-159">The parent is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ancestors">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-160">이 노드의 상위 요소 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-160">Returns a collection of the ancestor elements of this node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-161">필요에 따라 특정 이름 가진 상위 요소에 대 한 필터링 할 노드 이름을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-161">Optionally a node name can be specified to filter for ancestor elements with a specific name.</span></span>  
  
 <span data-ttu-id="4c4d8-162">반환된 컬렉션의 노드 순서는 문서와 반대입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-162">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="4c4d8-163">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-163">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-164">이 노드의 상위 요소 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-164">Returns a collection of the ancestor elements of this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-165">이 노드의 상위 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-165">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-166">이 메서드는 결과에서 자신을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-166">This method does not return itself in the results.</span></span>  
  
 <span data-ttu-id="4c4d8-167">반환된 컬렉션의 노드 순서는 문서와 반대입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-167">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="4c4d8-168">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-168">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-169">다음 예제에서는이 방법을 사용 하 여 노드의 상위 항목을 열거 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-169">The following example uses this method to enumerate the ancestors of a node.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors())  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors()  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-170">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-170">This example produces the following output:</span></span>  
  
```  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c4d8-171">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-171">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-172">이 노드의 필터링된 상위 요소 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-172">Returns a filtered collection of the ancestor elements of this node.</span>
          </span>
          <span data-ttu-id="4c4d8-173">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-173">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-174">이 노드의 상위 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-174">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span>
          </span>
          <span data-ttu-id="4c4d8-175">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-175">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
          <span data-ttu-id="4c4d8-176">반환된 컬렉션의 노드 순서는 문서와 반대입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-176">The nodes in the returned collection are in reverse document order.</span>
          </span>
          <span data-ttu-id="4c4d8-177">이 메서드는 지연된 실행을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-177">This method uses deferred execution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-178">이 메서드는 결과에서 자신을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-178">This method will not return itself in the results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-179">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-179">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors("Child"))  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors("Child")  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-180">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-180">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareDocumentOrder">
      <MemberSignature Language="C#" Value="public static int CompareDocumentOrder (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareDocumentOrder(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareDocumentOrder (n1 As XNode, n2 As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareDocumentOrder(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1">
          <span data-ttu-id="4c4d8-181">비교할 첫 번째 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-181">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="n2">
          <span data-ttu-id="4c4d8-182">비교할 두 번째 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-182">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-183">두 노드를 비교하여 상대적인 XML 문서 순서를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-183">Compares two nodes to determine their relative XML document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-184">노드가 서로 같으면 0, <paramref name="n1" />이 <paramref name="n2" />보다 앞에 나오면 -1, <paramref name="n1" />이 <paramref name="n2" />보다 뒤에 나오면 1이 들어 있는 <see langword="int" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-184">An <see langword="int" /> containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-185"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-185">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-186">즉는 <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> 메서드가 공통 부모를 찾을 때까지 비교 하 고 두 노드의 상위 항목을 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-186">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="4c4d8-187">다음 비교 하 고 두 노드 순서를 결정 하는 공통 부모 자식 노드 목록을 트래버스해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-187">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="4c4d8-188">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-188">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-189">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-189">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1", 1),  
        new XElement("GrandChild2", 2),  
        new XElement("GrandChild3", 3)  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild4", 4),  
        new XElement("GrandChild5", 5),  
        new XElement("GrandChild6", 6)  
    )  
);  
XElement el1 = xmlTree.Descendants("GrandChild2").First();  
XElement el2 = xmlTree.Descendants("GrandChild6").First();  
if (XElement.CompareDocumentOrder(el1, el2) == 0)  
    Console.WriteLine("Compared elements are the same element");  
else if (XElement.CompareDocumentOrder(el1, el2) > 0)  
    Console.WriteLine("el1 is after el2");  
else  
    Console.WriteLine("el1 is before el2");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>  
                <GrandChild1>1</GrandChild1>  
                <GrandChild2>2</GrandChild2>  
                <GrandChild3>3</GrandChild3>  
            </Child1>  
            <Child2>  
                <GrandChild4>4</GrandChild4>  
                <GrandChild5>5</GrandChild5>  
                <GrandChild6>6</GrandChild6>  
            </Child2>  
        </Root>  
  
Dim el1 As XElement = xmlTree...<GrandChild2>(0)  
Dim el2 As XElement = xmlTree...<GrandChild6>(0)  
  
If (XElement.CompareDocumentOrder(el1, el2) = 0) Then  
    Console.WriteLine("Compared elements are the same element")  
ElseIf (XElement.CompareDocumentOrder(el1, el2) > 0) Then  
    Console.WriteLine("el1 is after el2")  
Else  
    Console.WriteLine("el1 is before el2")  
End If  
```  
  
 <span data-ttu-id="4c4d8-190">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-190">This example produces the following output:</span></span>  
  
```  
el1 is before el2  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-191">두 노드가 공통 상위 노드를 공유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-191">The two nodes do not share a common ancestor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateReader">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-192">이 노드에 대한 <see cref="T:System.Xml.XmlReader" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-192">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-193">이 노드에 대한 <see cref="T:System.Xml.XmlReader" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-193">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-194">이 노드 및 하위 요소를 읽는 데 사용할 수 있는 <see cref="T:System.Xml.XmlReader" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-194">An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-195">일반적으로이 방식으로 다른 구성 요소를 제공 하는 경우는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-195">You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4c4d8-196">예를 들어 만들 수 있습니다는 <xref:System.Xml.XmlReader> 에서 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 트리를 선택한 다음 해당 판독기를 전달 <xref:System.Xml.XmlDocument.Load%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-196">For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.</span></span>  
  
 <span data-ttu-id="4c4d8-197">반환 되는 판독기의 모든 <xref:System.Xml.XmlReader.Create%2A> 는 판독기를 정규화 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-197">All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers.</span></span> <span data-ttu-id="4c4d8-198">줄 바꿈 정규화 및 특성의 전체 정규화 항상 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-198">They always perform line break normalization and full normalization of attributes.</span></span> <span data-ttu-id="4c4d8-199">반면,는 <xref:System.Xml.XmlReader> 반환한 <xref:System.Xml.Linq.XNode.CreateReader%2A> 정규화 판독기 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-199">In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader.</span></span> <span data-ttu-id="4c4d8-200">모든 공백은 변환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-200">It does not transform any white space.</span></span> <span data-ttu-id="4c4d8-201">특성 이름 순서 아닌 추가 된 순서에 새 특성 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-201">It also returns attributes in the order that they were added, not in attribute name order.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="4c4d8-202"> 기본 특성 인지 여부에 대 한 정보를 유지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-202"> does not keep information about whether attributes are default attributes.</span></span> <span data-ttu-id="4c4d8-203"><xref:System.Xml.XmlReader.IsDefault%2A> 항상 false 특성 기본 값에서 채워지는지가 여부에 관계 없이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-203"><xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.</span></span>  
  
 <span data-ttu-id="4c4d8-204">`PUBLIC` 및 `SYSTEM` 의사 특성 <xref:System.Xml.Linq.XDocumentType> 통해 사용할 수 없는 <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-204">The `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4c4d8-205">통해 사용할 수 있는는 <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> 매개 변수로 특성의 정규화 된 이름을 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-205">They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method that takes the qualified name of the attribute as a parameter.</span></span> <span data-ttu-id="4c4d8-206">검색 해야 하는 경우는 `PUBLIC` 또는 `SYSTEM` 특성을 사용할지는 <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-206">If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="4c4d8-207">Base64 및 BinHex 데이터 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-207">Base64 and BinHex data are not supported.</span></span> <span data-ttu-id="4c4d8-208">이러한 유형의 데이터를 검색 하려고 하면 (예를 들어 호출 하 여 <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), 판독기를 발생 시킵니다 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-208">If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="4c4d8-209">`xml` 선언을 판독기에서 노출 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-209">The `xml` declaration is not surfaced by the reader.</span></span> <span data-ttu-id="4c4d8-210">를 읽는 동안 발생 하지 것입니다 형식의 노드 <xref:System.Xml.XmlNodeType.XmlDeclaration>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-210">While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-211">다음 예제에서는 XML 트리를 만든 다음, 만들어집니다는 <xref:System.Xml.XmlReader> 를 사용 하 여는 <xref:System.Xml.Linq.XNode.CreateReader%2A> 메서드를 만듭니다는 <xref:System.Xml.XmlDocument> 판독기를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-211">The following example creates an XML tree, creates an <xref:System.Xml.XmlReader> by using the <xref:System.Xml.Linq.XNode.CreateReader%2A> method, and creates an <xref:System.Xml.XmlDocument> by using the reader.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XElement("Root",  
        new XAttribute("Att1", "Attribute Content"),  
        new XElement("Child1", 1),  
        new XElement("Child2", 2)  
    )  
);  
XmlReader reader = xmlTree.CreateReader();  
reader.MoveToContent();  
XmlDocument doc = new XmlDocument();  
XmlNode cd = doc.ReadNode(reader);  
doc.AppendChild(cd);  
Console.WriteLine(doc.OuterXml);  
```  
  
```vb  
Dim xmlTree As XDocument =  _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <Root Att1="Attribute Content">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
Dim reader As XmlReader = xmlTree.CreateReader()  
reader.MoveToContent()  
Dim doc As XmlDocument = New XmlDocument()  
Dim cd As XmlNode = doc.ReadNode(reader)  
doc.AppendChild(cd)  
Console.WriteLine(doc.OuterXml)  
```  
  
 <span data-ttu-id="4c4d8-212">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-212">This example produces the following output:</span></span>  
  
```xml  
<Root Att1="Attribute Content"><Child1>1</Child1><Child2>2</Child2></Root>  
```  
  
 <span data-ttu-id="4c4d8-213">이 메서드에 대 한 또 다른 용도 XSLT 변환을 수행 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-213">Another use for this method is to do an XSLT transformation.</span></span> <span data-ttu-id="4c4d8-214">XML 트리를 만들고 XML 트리에서 <xref:System.Xml.XmlReader>를 만든 다음 새 문서를 만들고 새 문서에 쓸 <xref:System.Xml.XmlWriter>를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-214">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create an <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="4c4d8-215">그런 다음 <xref:System.Xml.XmlReader> 및 <xref:System.Xml.XmlWriter>를 변환에 전달하여 XSLT 변환을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-215">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transformation.</span></span> <span data-ttu-id="4c4d8-216">변환이 성공적으로 완료된 후 새 XML 트리가 변환의 결과로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-216">After the transformation successfully completes, the new XML tree is populated with the results of the transform.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1>  
            <xsl:value-of select='Child1'/>  
            </C1>  
            <C2>  
            <xsl:value-of select='Child2'/>  
            </C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1>  
                    <xsl:value-of select='Child1'/>  
                </C1>  
                <C2>  
                    <xsl:value-of select='Child2'/>  
                </C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
        <Parent>  
            <Child1>Child1 data</Child1>  
            <Child2>Child2 data</Child2>  
        </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="4c4d8-217">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-217">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader (System.Xml.Linq.ReaderOptions readerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader(valuetype System.Xml.Linq.ReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader(System::Xml::Linq::ReaderOptions readerOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerOptions" Type="System.Xml.Linq.ReaderOptions" />
      </Parameters>
      <Docs>
        <param name="readerOptions">
          <span data-ttu-id="4c4d8-218">중복된 네임스페이스를 생략할지 여부를 지정하는 <see cref="T:System.Xml.Linq.ReaderOptions" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-218">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-219">
            <paramref name="readerOptions" /> 매개 변수에서 지정된 옵션을 사용하여 <see cref="T:System.Xml.XmlReader" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-219">Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-220">
            <see cref="T:System.Xml.XmlReader" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-220">An <see cref="T:System.Xml.XmlReader" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeepEquals">
      <MemberSignature Language="C#" Value="public static bool DeepEquals (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeepEquals(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeepEquals (n1 As XNode, n2 As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeepEquals(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1">
          <span data-ttu-id="4c4d8-221">비교할 첫 번째 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-221">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <param name="n2">
          <span data-ttu-id="4c4d8-222">비교할 두 번째 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-222">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-223">모든 하위 노드의 값을 포함하여 두 노드의 값을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-223">Compares the values of two nodes, including the values of all descendant nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-224">노드가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-224">
              <see langword="true" /> if the nodes are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-225">다음 기준을 두 개의 노드가 같은지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-225">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="4c4d8-226">A `null` 노드는 다른 `null` 노드와 아닌 같지만`null` 노드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-226">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="4c4d8-227">두 개의 <xref:System.Xml.Linq.XNode> 는 항상 서로 다른 유형의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-227">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="4c4d8-228">두 개의 <xref:System.Xml.Linq.XText> 노드는 동일한 텍스트를 포함 하는 경우 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-228">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="4c4d8-229">두 개의 <xref:System.Xml.Linq.XElement> 동일한 태그 이름이 동일한 값을 갖는 특성의 동일한 집합 및 (주석을 무시 하 고, 처리 명령) 콘텐츠 노드 두 길이가 같은 시퀀스를 포함 하는 경우 노드는 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-229">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.</span></span>  
  
-   <span data-ttu-id="4c4d8-230">두 개의 <xref:System.Xml.Linq.XDocument> 루트 노드가 같은지 경우 노드는 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-230">Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="4c4d8-231">두 개의 <xref:System.Xml.Linq.XComment> 노드는 동일한 주석 텍스트를 포함 하는 경우 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-231">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="4c4d8-232">두 개의 <xref:System.Xml.Linq.XProcessingInstruction> 노드는 동일한 대상 및 데이터를 서로 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-232">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="4c4d8-233">두 개의 <xref:System.Xml.Linq.XDocumentType> 노드가 서로 같은지 경우는 동일한 이름, 공용 ID, 시스템 ID 및 내부 하위 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-233">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-234">다음 예제에서는이 방법을 사용 하 여 두 XML 트리를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-234">The following example uses this method to compare two XML trees.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2));  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2))  
```  
  
 <span data-ttu-id="4c4d8-235">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-235">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentOrderComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.DocumentOrderComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DocumentOrderComparer As XNodeDocumentOrderComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeDocumentOrderComparer ^ DocumentOrderComparer { System::Xml::Linq::XNodeDocumentOrderComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeDocumentOrderComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-236">두 노드의 상대 위치를 비교할 수 있는 비교자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-236">Gets a comparer that can compare the relative position of two nodes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c4d8-237">두 노드의 상대 위치를 비교할 수 있는 <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-237">An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-238">이 속성은 주로 내부적으로 구현 하기 위한는 <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-238">This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method.</span></span> <span data-ttu-id="4c4d8-239">이 속성을 직접 사용 하지 않고 해당 확장 메서드를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-239">The recommended approach is to use that extension method instead of using this property directly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-240">다음 예제에서는 일부 요소와 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-240">The following example creates an XML tree with some elements.</span></span> <span data-ttu-id="4c4d8-241">그런 다음 만듭니다는 <xref:System.Collections.Generic.List%601> 의 <xref:System.Xml.Linq.XNode> 임의로 XML 트리의 일부 요소를 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-241">It then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Xml.Linq.XNode> that contains some elements from the XML tree at random.</span></span> <span data-ttu-id="4c4d8-242">이 속성을 사용 하 여 검색 목록을 정렬는 <xref:System.Xml.Linq.XNodeDocumentOrderComparer>를 구현 하는 <xref:System.Collections.IComparer?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-242">It sorts the list, using this property to retrieve a <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, which implements the <xref:System.Collections.IComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> interfaces.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
List<XNode> nodeList = new List<XNode>();  
nodeList.Add(xmlTree.Element("Child5"));  
nodeList.Add(xmlTree.Element("Child3"));  
nodeList.Add(xmlTree.Element("Child1"));  
  
// Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer);  
  
foreach (XElement el in nodeList)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeList As List(Of XNode) = New List(Of XNode)()  
nodeList.Add(xmlTree.Element("Child5"))  
nodeList.Add(xmlTree.Element("Child3"))  
nodeList.Add(xmlTree.Element("Child1"))  
  
' Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer)  
  
For Each el In nodeList  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="4c4d8-243">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-243">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child3>3</Child3>  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-244">이 노드 뒤에 있는 형제 요소의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-244">Returns a collection of the sibling elements after this node, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-245">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-245">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-246">이 노드 뒤에 있는 형제 요소의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-246">Returns a collection of the sibling elements after this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-247">이 노드 뒤에 있는 형제 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-247">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-248">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-248">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-249">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-249">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-250">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-250">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-251">다음 예제에서는 일부 복합 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-251">The following example creates an element with some complex content.</span></span> <span data-ttu-id="4c4d8-252">그런 다음이 메서드를 사용 하 여 문서 순서로 노드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-252">It then uses this method to retrieve the nodes in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf()  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-253">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-253">This example produces the following output:</span></span>  
  
```  
Child4  
Child5  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c4d8-254">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-254">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-255">이 노드 뒤에 있는 형제 요소의 필터링된 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-255">Returns a filtered collection of the sibling elements after this node, in document order.</span>
          </span>
          <span data-ttu-id="4c4d8-256">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-256">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-257">이 노드 뒤에 있는 형제 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-257">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span>
          </span>
          <span data-ttu-id="4c4d8-258">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-259">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-259">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-260">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-260">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-261">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-262">다음 예제에서는 일부 복합 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-262">The following example creates an element with some complex content.</span></span> <span data-ttu-id="4c4d8-263">다음이 메서드를 사용 하 여 문서 순서에서 형제 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-263">It then uses this method to retrieve the sibling elements, in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf("Child4");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf("Child4")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-264">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-264">This example produces the following output:</span></span>  
  
```  
Child4  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-265">이 노드 앞에 있는 형제 요소의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-265">Returns a collection of the sibling elements before this node, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-266">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-266">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-267">이 노드 앞에 있는 형제 요소의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-267">Returns a collection of the sibling elements before this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-268">이 노드 앞에 있는 형제 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-268">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-269">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-269">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-270">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-270">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-271">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-271">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-272">다음 예제에서는이 축 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-272">The following example uses this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf()  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-273">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-273">This example produces the following output:</span></span>  
  
```  
Child1  
Child2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4c4d8-274">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-274">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-275">이 노드 앞에 있는 형제 요소의 필터링된 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-275">Returns a filtered collection of the sibling elements before this node, in document order.</span>
          </span>
          <span data-ttu-id="4c4d8-276">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-276">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-277">이 노드 앞에 있는 형제 요소에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span>
          </span>
          <span data-ttu-id="4c4d8-278">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-278">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-279">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-279">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-280">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-280">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-281">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-281">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-282">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-282">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf("Child2");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf("Child2")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4c4d8-283">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-283">This example produces the following output:</span></span>  
  
```  
Child2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeEqualityComparer EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeEqualityComparer EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EqualityComparer As XNodeEqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeEqualityComparer ^ EqualityComparer { System::Xml::Linq::XNodeEqualityComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-284">두 노드의 값이 같은지 비교할 수 있는 비교자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-284">Gets a comparer that can compare two nodes for value equality.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c4d8-285">두 노드의 값이 같은지 비교할 수 있는 <see cref="T:System.Xml.Linq.XNodeEqualityComparer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-285">A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c4d8-286">다음 예제에서는이 속성을 사용 하 여 검색 하는 <xref:System.Xml.Linq.XNodeEqualityComparer>를 구현 하는 <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-286">The following example uses this property to retrieve an <xref:System.Xml.Linq.XNodeEqualityComparer>, which implements the <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> interfaces.</span></span> <span data-ttu-id="4c4d8-287">이 속성을 사용 하는 사전을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-287">It creates a dictionary that uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
Dictionary<XNode, string> nodeDictionary = new Dictionary<XNode, string>(XNode.EqualityComparer);  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information");  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information");  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information");  
  
string str = nodeDictionary[xmlTree.Element("Child3")];  
Console.WriteLine(str);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeDictionary As Dictionary(Of XNode, String) = New Dictionary(Of XNode, String)(XNode.EqualityComparer)  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information")  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information")  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information")  
  
Dim str As String = nodeDictionary(xmlTree.Element("Child3"))  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="4c4d8-288">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-288">This example produces the following output:</span></span>  
  
```  
Child 3 Information  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAfter">
      <MemberSignature Language="C#" Value="public bool IsAfter (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAfter(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAfter (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAfter(System::Xml::Linq::XNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="4c4d8-289">문서 순서를 비교할 <see cref="T:System.Xml.Linq.XNode" /> 입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-289">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-290">문서 순서를 기준으로 현재 노드가 지정된 노드보다 뒤에 나오는지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-290">Determines if the current node appears after a specified node in terms of document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-291">이 노드가 지정된 노드보다 뒤에 나오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-291">
              <see langword="true" /> if this node appears after the specified node; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-292"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-292">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-293">즉는 <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> 메서드가 공통 부모를 찾을 때까지 비교 하 고 두 노드의 상위 항목을 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-293">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="4c4d8-294">다음 비교 하 고 두 노드 순서를 결정 하는 공통 부모 자식 노드 목록을 트래버스해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-294">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="4c4d8-295">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-295">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-296">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-296">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsAfter(child3))  
    Console.WriteLine("Child5 is after Child3");  
else  
    Console.WriteLine("Child5 is not after Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsAfter(child3)) Then  
    Console.WriteLine("Child5 is after Child3")  
Else  
    Console.WriteLine("Child5 is not after Child3")  
End If  
```  
  
 <span data-ttu-id="4c4d8-297">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-297">This example produces the following output:</span></span>  
  
```  
Child5 is after Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBefore">
      <MemberSignature Language="C#" Value="public bool IsBefore (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBefore(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBefore (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsBefore(System::Xml::Linq::XNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <span data-ttu-id="4c4d8-298">문서 순서를 비교할 <see cref="T:System.Xml.Linq.XNode" /> 입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-298">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-299">문서 순서를 기준으로 현재 노드가 지정된 노드보다 앞에 나오는지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-299">Determines if the current node appears before a specified node in terms of document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-300">이 노드가 지정된 노드보다 앞에 나오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-300">
              <see langword="true" /> if this node appears before the specified node; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-301"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-301">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-302">즉는 <xref:System.Xml.Linq.XNode.IsBefore%2A> 메서드가 공통 부모를 찾을 때까지 비교 하 고 두 노드의 상위 항목을 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-302">This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="4c4d8-303">다음 비교 하 고 두 노드 순서를 결정 하는 공통 부모 자식 노드 목록을 트래버스해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-303">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="4c4d8-304">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-304">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-305">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-305">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsBefore(child3))  
    Console.WriteLine("Child5 is before Child3");  
else  
    Console.WriteLine("Child5 is not before Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsBefore(child3)) Then  
    Console.WriteLine("Child5 is before Child3")  
Else  
    Console.WriteLine("Child5 is not before Child3")  
End If  
```  
  
 <span data-ttu-id="4c4d8-306">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-306">This example produces the following output:</span></span>  
  
```  
Child5 is not before Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode NextNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode NextNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.NextNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ NextNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-307">이 노드의 다음 형제 노드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-307">Gets the next sibling node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c4d8-308">다음 형제 노드가 들어 있는 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-308">The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-309">이 경우 <xref:System.Xml.Linq.XNode> 않습니다는 부모 또는 다음 노드가 많은 경우이 속성이 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-309">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-310">다음 예제에서는이 속성을 사용 하 여 노드를 반복 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-310">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.NextNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>Some Text  
            <Child2>2  
                <GrandChild>GrandChild Content</GrandChild>  
            </Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
        </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.NextNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="4c4d8-311">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-311">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Comment   a comment  
NodeType: Element   Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodesAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesAfterSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesAfterSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-312">이 노드 뒤에 있는 형제 노드의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-312">Returns a collection of the sibling nodes after this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-313">이 노드 뒤에 있는 형제 노드에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-313">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-314">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-314">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-315">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-315">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-316">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-316">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-317">다음 예제에서는 XML 트리를 만들고이 축 메서드를 사용 하 여 트리를 쿼리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-317">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesAfterSelf()  
    select node;  
foreach (XNode node in nodes)  
{  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
}  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesAfterSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="4c4d8-318">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-318">This example produces the following output:</span></span>  
  
```  
Node type: Text  More text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodesBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesBeforeSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesBeforeSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-319">이 노드 앞에 있는 형제 노드의 컬렉션을 문서 순으로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-319">Returns a collection of the sibling nodes before this node, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-320">이 노드 앞에 있는 형제 노드에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 문서 순 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-320">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-321">이 메서드가 반환된 된 컬렉션의 형제만 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-321">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="4c4d8-322">하위 항목은 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-322">It does not include descendants.</span></span>  
  
 <span data-ttu-id="4c4d8-323">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-323">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-324">다음 예제에서는 XML 트리를 만들고이 축 메서드를 사용 하 여 트리를 쿼리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-324">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesBeforeSelf()  
    select node;  
foreach (XNode node in nodes)  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _  
    New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesBeforeSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="4c4d8-325">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-325">This example produces the following output:</span></span>  
  
```  
Node type: Text  Text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode PreviousNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode PreviousNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.PreviousNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ PreviousNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-326">이 노드의 이전 형제 노드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-326">Gets the previous sibling node of this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4c4d8-327">이전 형제 노드가 들어 있는 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-327">The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-328">이 경우 <xref:System.Xml.Linq.XNode> 않습니다는 부모 또는 이전 노드가 많은 경우이 속성이 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-328">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`.</span></span>  
  
 <span data-ttu-id="4c4d8-329"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-329">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-330">즉는 <xref:System.Xml.Linq.XNode.PreviousNode%2A> 속성이 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-330">This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-331">따라서이 속성을 사용 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-331">Therefore, using this property might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-332">다음 예제에서는이 속성을 사용 하 여 노드를 반복 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-332">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.PreviousNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>Some Text<Child2>2  
            <GrandChild>GrandChild Content</GrandChild>  
        </Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
    </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.PreviousNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="4c4d8-333">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-333">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Text      Some Text  
NodeType: Element   Child1  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFrom">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNode ReadFrom (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNode ReadFrom(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadFrom (reader As XmlReader) As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNode ^ ReadFrom(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="4c4d8-334">이 <see cref="T:System.Xml.XmlReader" />로 읽어올 노드에 배치된 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-334">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-335">
            <see cref="T:System.Xml.Linq.XNode" />를 사용하여 <see cref="T:System.Xml.XmlReader" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-335">Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-336">판독기에서 읽은 노드 및 해당 하위 노드가 들어 있는 <see cref="T:System.Xml.Linq.XNode" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-336">An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader.</span>
          </span>
          <span data-ttu-id="4c4d8-337">노드의 런타임 형식은 판독기에서 읽은 첫 번째 노드의 형식(<see cref="P:System.Xml.Linq.XObject.NodeType" />)에 따라 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-337">The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-338">메서드를 작성, 노드 컬렉션을 반환 하는 노드는 판독기에서 읽은 되는 각 노드를 생성이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-338">You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader.</span></span> <span data-ttu-id="4c4d8-339">이 메서드를 사용 하면 매우 작은 메모리 사용 공간 매우 큰 XML 파일을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-339">This method enables you to process arbitrarily large XML files with a very small memory footprint.</span></span>  
  
 <span data-ttu-id="4c4d8-340">이 메서드에 전달 하는 판독기 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-340">The reader that you pass to this method might throw exceptions.</span></span> <span data-ttu-id="4c4d8-341"><xref:System.Xml.Linq.XNode.ReadFrom%2A> 모든 catch 하지 않습니다; 판독기에서 throw 된 예외 처리 되지 않은 예외를 호출한 코드로 전달 <xref:System.Xml.Linq.XNode.ReadFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-341"><xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span></span> <span data-ttu-id="4c4d8-342">코드 처리를 준비 해야 특히 <xref:System.Xml.XmlException>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-342">In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.</span></span>  
  
 <span data-ttu-id="4c4d8-343">보다 복잡 한 문서를 스트림 하는 방법의 예제를 보려면 [하는 방법: 헤더 정보에 액세스할 수 있는 XML 조각 스트림](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-343">For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).</span></span>  
  
 <span data-ttu-id="4c4d8-344"><xref:System.Linq.Enumerable.OrderBy%2A>와 같은 특정 표준 쿼리 연산자는 자신의 소스를 반복하고 모든 데이터를 수집하여 정렬한 다음 시퀀스의 첫 번째 항목을 최종적으로 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-344">Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</span></span> <span data-ttu-id="4c4d8-345">첫 번째 항목을 생성 하기 전에 소스를 유형 화 하는 쿼리 연산자를 사용 하면 작은 메모리 사용 공간이 유지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-345">If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.</span></span>  
  
 <span data-ttu-id="4c4d8-346">사용 하는 예제에 대 한 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 작은 메모리 사용 공간을 유지 하면서 매우 큰 XML 문서를 변환할 참조 [하는 방법: 수행 스트리밍 변환의 큰 XML 문서](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-346">For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-347">이 예에서는 라는 Source.xml 다음 XML 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-347">This example uses the following XML file, named Source.xml:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<Root>  
  <Child Key="01">  
    <GrandChild>aaa</GrandChild>  
  </Child>  
  <Child Key="02">  
    <GrandChild>bbb</GrandChild>  
  </Child>  
  <Child Key="03">  
    <GrandChild>ccc</GrandChild>  
  </Child>  
</Root>  
```  
  
 <span data-ttu-id="4c4d8-348">이 예에서는 사용 하는 사용자 지정 축 메서드를 만듭니다 <xref:System.Xml.Linq.XNode.ReadFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-348">This example creates a custom axis method that uses <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span></span> <span data-ttu-id="4c4d8-349">LINQ 쿼리를 사용 하 여 사용자 지정 축을 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-349">You can query the custom axis by using a LINQ query.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c4d8-350">다음 예제에서는 C#의 yield 반환 구문을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-350">The following example uses the yield return construct of C#.</span></span> <span data-ttu-id="4c4d8-351">[!INCLUDE[vb_orcas_long](~/includes/vb-orcas-long-md.md)]에는 동일한 기능이 없기 때문에 이 예제는 C#으로만 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-351">Because there is no equivalent feature in [!INCLUDE[vb_orcas_long](~/includes/vb-orcas-long-md.md)], this example is provided only in C#.</span></span>  
  
```csharp  
class Program  
{  
    static IEnumerable<XElement> StreamRootChildDoc(string uri)  
    {  
        using (XmlReader reader = XmlReader.Create(uri))  
        {  
            reader.MoveToContent();  
            // Parse the file and display each of the nodes.  
            while (reader.Read())  
            {  
                switch (reader.NodeType)  
                {  
                    case XmlNodeType.Element:  
                        if (reader.Name == "Child")  
                        {  
                            XElement el = XElement.ReadFrom(reader) as XElement;  
                            if (el != null)  
                                yield return el;  
                        }  
                        break;  
                }  
            }  
        }  
    }  
  
    static void Main(string[] args)  
    {  
        IEnumerable<string> grandChildData =  
            from el in StreamRootChildDoc("Source.xml")  
            where (int)el.Attribute("Key") > 1  
            select (string)el.Element("GrandChild");  
  
        foreach (string str in grandChildData)  
            Console.WriteLine(str);  
    }  
}  
```  
  
 <span data-ttu-id="4c4d8-352">이 예제의 결과는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-352">This example produces the following output.</span></span>  
  
```  
bbb  
ccc  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-353">
            <see cref="T:System.Xml.XmlReader" />가 인식 가능한 노드 형식에 배치되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-353">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="4c4d8-354">내부 <see cref="T:System.Xml.XmlReader" />에서 예외를 throw한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-354">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadFromAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt; ReadFromAsync (System.Xml.XmlReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XNode&gt; ReadFromAsync(class System.Xml.XmlReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XNode ^&gt; ^ ReadFromAsync(System::Xml::XmlReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-355">부모에서 이 노드를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-355">Removes this node from its parent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-356">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 를 프로그래밍 하거나 하면 안 조작를 쿼리하면 해당 집합의 노드에 대 한 노드 집합을 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-356">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.</span></span> <span data-ttu-id="4c4d8-357">실제로이 의미 해야 하지 노드 집합에 대해 반복 해 서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-357">In practical terms, this means that you should not iterate over a set of nodes and remove them.</span></span> <span data-ttu-id="4c4d8-358">대신, 구체화 해야에 <xref:System.Collections.Generic.List%601> 를 사용 하 여는 <xref:System.Linq.Enumerable.ToList%2A> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-358">Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method.</span></span> <span data-ttu-id="4c4d8-359">그런 다음 노드를 제거할 목록을 반복할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-359">Then, you can iterate over the list to remove the nodes.</span></span> <span data-ttu-id="4c4d8-360">자세한 내용은 참조 [혼합 된 선언적 코드/명령적 코드 버그 (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-360">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
 <span data-ttu-id="4c4d8-361">또는 노드 집합을 제거 하려는 경우 것이 좋습니다를 사용 하 여 <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-361">Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4c4d8-362">이 메서드는 노드 목록에 복사한 다음 노드를 제거할 목록을 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-362">This method copies the nodes to a list, and then iterates over the list to remove the nodes.</span></span>  
  
 <span data-ttu-id="4c4d8-363">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-363">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4c4d8-364"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-364">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-365">즉는 <xref:System.Xml.Linq.XNode.Remove%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-365">This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-366">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-366">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-367">다음 예제에서는 부모에서 노드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-367">The following example removes a node from its parent.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.Remove();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.Remove()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-368">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-368">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4c4d8-369">부모 노드가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-369">The parent is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceWith">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-370">이 노드를 지정된 콘텐츠로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-370">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-371">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-371">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-372">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-372">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4c4d8-373"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-373">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-374">즉는 <xref:System.Xml.Linq.XNode.ReplaceWith%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-374">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must  traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-375">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-375">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-376">다음 예제에서는이 방법을 사용 하 여 서로 다른 내용 노드의 내용을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-376">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-377">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-377">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-378">이 노드를 대체할 콘텐츠입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-378">Content that replaces this node.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-379">이 노드를 지정된 콘텐츠로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-379">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-380">이 메서드는 먼저, 부모에서이 노드를 제거 하 고이 노드 대신이 노드의 부모를 지정된 된 콘텐츠를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-380">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="4c4d8-381"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-381">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-382">즉는 <xref:System.Xml.Linq.XNode.ReplaceWith%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-382">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-383">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-383">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="4c4d8-384">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-384">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-385">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-385">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-386">다음 예제에서는이 방법을 사용 하 여 서로 다른 내용 노드의 내용을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-386">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-387">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-387">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="4c4d8-388">새 콘텐츠의 매개 변수 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-388">A parameter list of the new content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-389">이 노드를 지정된 콘텐츠로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-389">Replaces this node with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-390">이 메서드는 먼저, 부모에서이 노드를 제거 하 고이 노드 대신이 노드의 부모를 지정된 된 콘텐츠를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-390">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="4c4d8-391"><xref:System.Xml.Linq.XContainer> 해당 자식 노드를 단일 연결 목록으로 저장 <xref:System.Xml.Linq.XNode> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-391">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="4c4d8-392">즉는 <xref:System.Xml.Linq.XNode.ReplaceWith%2A> 메서드가 부모 컨테이너 아래의 직접적인 자식 노드 목록 통과 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-392">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="4c4d8-393">따라서이 메서드를 사용 하 여 하면 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-393">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="4c4d8-394">이 메서드에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-394">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4c4d8-395">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-395">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-396">다음 예에서는 결과를 사용 하는 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 이 메서드에 대 한 입력으로 쿼리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-396">The following example shows using the results of a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] query as the input to this method.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith( _  
    From el In srcTree.Elements() _  
    Where (CInt(el) > 3) _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-397">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-397">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-398">이 노드의 XML을 반환하고, 선택적으로 서식 지정을 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-398">Returns the XML for this node, optionally disabling formatting.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4c4d8-399">이 노드의 들여쓰기된 XML을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-399">Returns the indented XML for this node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-400">들여쓰기된 XML이 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-400">A <see cref="T:System.String" /> containing the indented XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c4d8-401">다음 예제에서는이 메서드를 사용 하 여 들여쓴된 XML을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-401">The following example uses this method to retrieve indented XML.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
        </Root>  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4c4d8-402">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-402">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (options As SaveOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="4c4d8-403">형식 지정 동작을 지정하는 <see cref="T:System.Xml.Linq.SaveOptions" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-403">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-404">이 노드의 XML을 반환하고, 선택적으로 서식 지정을 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-404">Returns the XML for this node, optionally disabling formatting.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4c4d8-405">XML이 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-405">A <see cref="T:System.String" /> containing the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c4d8-406">다음 예제에서는이 메서드를 사용 하 여 형식이 지정 되지 않은 및 서식이 지정 된 XML을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-406">The following example uses this method to retrieve unformatted and formatted XML.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root><Child/></Root>");  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting));  
Console.WriteLine("---");  
Console.WriteLine(root.ToString(SaveOptions.None));  
```  
  
```vb  
Dim root As XElement = <Root>  
                           <Child/>  
                       </Root>  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting))  
Console.WriteLine("---")  
Console.WriteLine(root.ToString(SaveOptions.None))  
```  
  
 <span data-ttu-id="4c4d8-407">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-407">This example produces the following output:</span></span>  
  
```  
<Root><Child /></Root>  
---  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public abstract void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="4c4d8-408">이 메서드가 쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-408">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4c4d8-409">이 노드를 <see cref="T:System.Xml.XmlWriter" />로 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4c4d8-409">Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c4d8-410">매우 큰 문서의 스트리밍 변형 수행 하는 코드를 작성 하려면이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-410">You can use this method to write code that does a streaming transform of a very large document.</span></span> <span data-ttu-id="4c4d8-411">자세한 내용은 참조 [하는 방법: 수행 스트리밍 변환의 큰 XML 문서](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-411">For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c4d8-412">다음 예제에서는 <xref:System.Xml.XmlWriter> 에 작성 하는 <xref:System.Text.StringBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-412">The following example creates an <xref:System.Xml.XmlWriter> that writes to a <xref:System.Text.StringBuilder>.</span></span> <span data-ttu-id="4c4d8-413">다음이 메서드를 사용 하 여 두 XML 트리 작성기에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-413">It then uses this method to write two XML trees to the writer.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
    xw.WriteEndElement();  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = <Child>  
                                 <GrandChild>some content</GrandChild>  
                             </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = <AnotherChild>  
                                 <GrandChild>different content</GrandChild>  
                             </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="4c4d8-414">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4c4d8-414">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>