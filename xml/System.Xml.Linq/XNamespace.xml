<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d63d1be3532fb6cb4b14a4a6713ab8119db07ad" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="67d57-101">XML 네임스페이스를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67d57-101">Represents an XML namespace.</span>
      </span>
      <span data-ttu-id="67d57-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67d57-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-103">이 클래스는 네임 스페이스의 XML 구조를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="67d57-104">모든 <xref:System.Xml.Linq.XName> 포함는 <xref:System.Xml.Linq.XNamespace>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="67d57-105">요소가 네임스페이스에 없는 경우에도 요소의 <xref:System.Xml.Linq.XName>에는 여전히 네임스페이스 <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67d57-106"><xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> 속성은 `null`일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="67d57-107">XNamespace 개체 만들기</span><span class="sxs-lookup"><span data-stu-id="67d57-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="67d57-108">만드는 가장 일반적인 방법은 한 <xref:System.Xml.Linq.XNamespace> 개체는 문자열을 할당 하기만 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="67d57-109">그런 다음 더하기 연산자의 재정의 사용 하 여 로컬 이름과 네임 스페이스를 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="67d57-110">다음 예제에서는 이러한 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-111">그러나 Visual basic에서는 일반적으로 선언 합니다 전역 기본 네임 스페이스, 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-112">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="67d57-113">문자열을 할당 한 <xref:System.Xml.Linq.XNamespace> 에서 암시적 변환을 사용 하 여 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="67d57-114">참조 [하는 방법: 네임 스페이스 (C#) (LINQ to XML) 스페이스로 문서 만들기](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) 자세한 내용 및 예제에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="67d57-115">참조 [Visual Basic (LINQ to XML)의 네임 스페이스](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) 의 네임 스페이스를 사용 하 여 대 한 자세한 내용은 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-115">See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="67d57-116">접두사 Namespace를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="67d57-117">네임 스페이스를 선언 하는 특성을 만드는 경우 특성에 지정 된 접두사는 serialize 된 XML에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="67d57-118">접두사가 포함된 네임스페이스를 선언하는 특성을 만들려면 특성 이름의 네임스페이스가 <xref:System.Xml.Linq.XNamespace.Xmlns%2A>이고 특성의 이름이 네임스페이스 접두사인 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="67d57-119">특성 값은 네임스페이스의 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="67d57-120">다음 예제에서는 이러한 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-121">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]네임 스페이스 노드를 만드는 대신, 네임 스페이스를 제어 하려면 접두사, 일반적으로 전역 네임 스페이스 선언을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-121">In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-122">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="67d57-123">자세한 내용은 참조 [하는 방법: Namespace 접두사 제어 (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="67d57-124">기본 Namespace 만들기</span><span class="sxs-lookup"><span data-stu-id="67d57-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="67d57-125">네임 스페이스 될 특성을 특성 이름에 특수 값 "xmlns"의 경우 생성할 때 다음 XML 트리를 serialize 할 때 네임 스페이스 선언 됩니다는 기본 네임 스페이스로.</span><span class="sxs-lookup"><span data-stu-id="67d57-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="67d57-126">네임 스페이스에 "xmlns" 자체의 이름으로 특수 특성이입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="67d57-127">특성의 값은 네임 스페이스 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="67d57-128">다음 예제에서는 네임 스페이스가 기본 네임 스페이스 될 하는 방식에 선언 된 특성이 포함 된 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-129">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 기본 네임 스페이스를 만들려면 네임 스페이스 노드를 만드는 대신 대개 사용 전역 기본 네임 스페이스 선언을:</span><span class="sxs-lookup"><span data-stu-id="67d57-129">In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-130">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="67d57-131">XNamespace 원자화</span><span class="sxs-lookup"><span data-stu-id="67d57-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="67d57-132"><xref:System.Xml.Linq.XNamespace> 개체는 원자화되도록 보장됩니다. 즉, 두 <xref:System.Xml.Linq.XNamespace> 개체가 똑같은 URI를 갖고 있으면 동일한 인스턴스를 공유합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="67d57-133">같음 및 비교 연산자는이 목적을 위해 명시적으로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="67d57-134">확장 된 이름 사용</span><span class="sxs-lookup"><span data-stu-id="67d57-134">Using Expanded Names</span></span>  
 <span data-ttu-id="67d57-135">폼에서 확장된 된 이름을 사용 하는 네임 스페이스 및 로컬 이름을 지정 하는 다른 방법은 `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="67d57-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="67d57-136">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="67d57-137">이 방법에는 성능과 관련된 문제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-137">This approach has performance implications.</span></span> <span data-ttu-id="67d57-138">확장된 이름이 포함된 문자열을 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]에 전달할 때마다 LINQ to XML에서는 이름의 구문을 분석하고 원자화된 네임스페이스를 찾은 다음 원자화된 이름을 찾아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="67d57-139">이 과정에는 CPU 시간이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-139">This process takes CPU time.</span></span> <span data-ttu-id="67d57-140">성능이 중요 한 경우에 다른 방법을 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="67d57-141">Visual Basic을 사용한 권장 되는 방법은 XML 리터럴을 사용 하는 확장 된 이름 사용 하는 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="67d57-142">현재 <see cref="T:System.Xml.Linq.XNamespace" />와 비교할 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-142">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-143">지정한 <see cref="T:System.Xml.Linq.XNamespace" />가 현재 <see cref="T:System.Xml.Linq.XNamespace" />와 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-143">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-144">지정된 <see cref="T:System.Boolean" />가 현재 <see cref="T:System.Xml.Linq.XNamespace" />와 같은지 여부를 나타내는 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-144">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-145">두 <xref:System.Xml.Linq.XNamespace> 동일한 개체를, 동일한 URI를 가져야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-145">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-146">다음 예제에서는 동일한 URI를 참조 하는 두 개의 네임 스페이스를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-146">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-147">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-147">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="67d57-148">네임스페이스 URI가 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-148">A <see cref="T:System.String" /> that contains a namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-149">지정된 URI(Uniform Resource Identifier)에 대한 <see cref="T:System.Xml.Linq.XNamespace" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-149">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-150">지정된 URI로 만든 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-150">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-151">반환 된 <xref:System.Xml.Linq.XNamespace> 원자 개체는 항상 (즉,이에 해당 특정 URI에 대 한 시스템 하나만).</span><span class="sxs-lookup"><span data-stu-id="67d57-151">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-152">다음 예제에서는 가져옵니다는 <xref:System.Xml.Linq.XNamespace> 지정된 된 URI에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-152">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-153">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-153">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67d57-154">이 <see cref="T:System.Xml.Linq.XNamespace" />의 해시 코드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-154">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-155">
            <see cref="T:System.Int32" />에 대한 해시 코드가 들어 있는 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-155">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-156">이 메서드는 해시 함수 역할을 대 한 <xref:System.Xml.Linq.XNamespace>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-156">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="67d57-157">사용할 수 있습니다 <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> 해시 테이블 같은 해시 알고리즘 및 데이터 구조에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-157">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="67d57-158">로컬 이름이 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-158">A <see cref="T:System.String" /> that contains a local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-159">이 <see cref="T:System.Xml.Linq.XName" /> 및 지정된 로컬 이름을 사용하여 만든 <see cref="T:System.Xml.Linq.XNamespace" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-159">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-160">이 <see cref="T:System.Xml.Linq.XName" /> 및 지정된 로컬 이름을 사용하여 만든 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-160">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-161">반환 된 <xref:System.Xml.Linq.XName> 원자 개체는 항상 (즉,이 특정 확장 된 이름에 대 한 시스템에 하나만).</span><span class="sxs-lookup"><span data-stu-id="67d57-161">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-162">다음 예제에서는이 속성을 사용 하 여 검색 하는 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-162">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-163">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-163">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67d57-164">이 네임스페이스의 URI(Uniform Resource Identifier)를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-164">Gets the Uniform Resource Identifier (URI) of this namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67d57-165">네임스페이스의 URI가 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-165">A <see cref="T:System.String" /> that contains the URI of the namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67d57-166">다음 예제에서는이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-166">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-167">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-167">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67d57-168">어떠한 네임스페이스에도 해당하지 않는 <see cref="T:System.Xml.Linq.XNamespace" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-168">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67d57-169">어떠한 네임스페이스에도 해당하지 않는 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-169">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-170">요소 또는 특성이 어떠한 네임 스페이스에 있으면 해당 네임 스페이스는이 속성에서 반환 되는 네임 스페이스에 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-170">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-171">다음 예제에서는 네임 스페이스에 있는 요소를 확인 하려면이 속성을 사용 하 여 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-171">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-172">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-172">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="67d57-173">네임스페이스가 들어 있는 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-173">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="67d57-174">로컬 이름이 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-174">A <see cref="T:System.String" /> that contains the local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-175">
            <see cref="T:System.Xml.Linq.XNamespace" /> 개체를 로컬 이름과 결합하여 <see cref="T:System.Xml.Linq.XName" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-175">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-176">네임스페이스 및 로컬 이름을 사용하여 만든 새 <see cref="T:System.Xml.Linq.XName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-176">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-177">이 연산자는 요소나 특성의 생성에 로컬 이름과 네임 스페이스를 결합 하 여 일반적인 관용구 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-177">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="67d57-178">이 요소는 짧은 변수를 사용 하 여 네임 스페이스를 참조할 수 있다는 점에서 네임 스페이스 접두사의 이점 중 일부를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-178">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="67d57-179">이렇게 하면 XML 트리를 만드는 코드에서 간결해 집니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-179">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="67d57-180">다음 예제에서는 사용을 보여 줍니다.는 `+` 만들려는 연산자는 <xref:System.Xml.Linq.XName> 에서 <xref:System.Xml.Linq.XNamespace> 와 로컬 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-180">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-181">Visual Basic에서 기본 관용구는입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-181">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-182">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-182">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="67d57-183">비교할 첫 번째 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-183">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="67d57-184">비교할 두 번째 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-184">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-185">
            <see cref="T:System.Xml.Linq.XNamespace" />의 두 인스턴스가 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-185">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-186">
            <paramref name="left" />와 <paramref name="right" />가 서로 같은지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-186">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-187">연산자 오버 로드 `==` 및 `!=` 비교 하기 위해 제공 <xref:System.Xml.Linq.XNamespace> 및 문자열 (예를 들어 `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="67d57-187">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="67d57-188">C#의 미리 정의 된 참조 같음 연산자의 참조 변환만 통해 다른 형식으로 변환할 수 하나의 피연산자에 필요 하 고 문자열을 암시적으로 변환 된다고 여겨서는 안 <xref:System.Xml.Linq.XNamespace>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-188">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="67d57-189">다음 예제에서는의 비교는 <xref:System.Xml.Linq.XNamespace> 및 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-189">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-190">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-190">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="67d57-191">네임스페이스 URI가 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-191">A <see cref="T:System.String" /> that contains the namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-192">URI(Uniform Resource Identifier)가 들어 있는 문자열을 <see cref="T:System.Xml.Linq.XNamespace" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-192">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-193">URI 문자열로 만든 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-193">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="67d57-194">다음 예제에서는의 초기화는 <xref:System.Xml.Linq.XNamespace> 문자열을 할당 하 여 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-194">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-195">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-195">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="67d57-196">비교할 첫 번째 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-196">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="67d57-197">비교할 두 번째 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-197">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67d57-198">
            <see cref="T:System.Xml.Linq.XNamespace" />의 두 인스턴스가 다른지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-198">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-199">
            <paramref name="left" />와 <paramref name="right" />가 서로 다른지 여부를 나타내는 <see cref="T:System.Boolean" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-199">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-200">연산자 오버 로드 `==` 및 `!=` 비교 하기 위해 제공 <xref:System.Xml.Linq.XNamespace> 및 문자열 (예를 들어 `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="67d57-200">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="67d57-201">C#의 미리 정의 된 참조 같음 연산자의 참조 변환만 통해 다른 형식으로 변환할 수 하나의 피연산자에 필요 하 고 문자열을 암시적으로 변환 된다고 여겨서는 안 <xref:System.Xml.Linq.XNamespace>합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-201">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="67d57-202">다음 예제에서는의 비교는 <xref:System.Xml.Linq.XNamespace> 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-202">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-203">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-203">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67d57-204">이 <see cref="T:System.Xml.Linq.XNamespace" />의 URI를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-204">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67d57-205">이 <see cref="T:System.Xml.Linq.XNamespace" />의 URI입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-205">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67d57-206">다음 예제에서는 콘솔에는 네임 스페이스를 인쇄 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-206">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-207">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-207">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67d57-208">XML URI(<c>http://www.w3.org/XML/1998/namespace</c>)에 해당하는 <see cref="T:System.Xml.Linq.XNamespace" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-208">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67d57-209">
            <see cref="T:System.Xml.Linq.XNamespace" /> XML URI에 해당 하는 (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-209">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-210">특정 특성의 경우와 같은 표준화 `space`에 `http://www.w3.org/XML/1998/namespace` 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-210">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="67d57-211">W3C 표준이 네임이 스페이스는 XML 트리의 특성으로 선언 될 수 없는 것을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-211">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="67d57-212">항상 XML 파서에서 자동으로 사용할 수 있는 예약된 된 네임 스페이스는</span><span class="sxs-lookup"><span data-stu-id="67d57-212">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-213">만드는 방법을 보여 주는 다음 예제는 `xml:space="preserve"` XML 트리의 특성:</span><span class="sxs-lookup"><span data-stu-id="67d57-213">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-214">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-214">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67d57-215">xmlns URI(<c>http://www.w3.org/2000/xmlns/</c>)에 해당하는 <see cref="T:System.Xml.Linq.XNamespace" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-215">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67d57-216">
            <see cref="T:System.Xml.Linq.XNamespace" /> 에 해당 하는 **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="67d57-216">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67d57-217">네임 스페이스 특성 자체에 있는 네임 스페이스를 선언 하는 경우는 **xmlns** 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-217">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="67d57-218">W3C 표준이 네임이 스페이스는 XML 트리의 특성으로 선언 될 수 없는 것을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-218">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="67d57-219">항상 XML 파서에서 자동으로 사용할 수 있는 예약된 된 네임 스페이스는</span><span class="sxs-lookup"><span data-stu-id="67d57-219">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67d57-220">다음 예제에서는 네임 스페이스를 XML 트리에 추가 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-220">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="67d57-221">네임 스페이스를 선언 하는 특성의 네임 스페이스는이 속성에서 반환 되는 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-221">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="67d57-222">Visual Basic에서 기본 요소가입니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-222">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="67d57-223">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="67d57-223">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>