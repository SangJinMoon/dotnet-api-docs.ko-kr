<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XObject.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac521d2fddfb97fd2308d0e542f7e64ec71a761941f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21d2fddfb97fd2308d0e542f7e64ec71a761941f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XObject">
          <source>Represents a node or an attribute in an XML tree.</source>
          <target state="translated">XML 트리의 노드 또는 특성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>This class is the abstract common base class for <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>.</source>
          <target state="translated">이 클래스는 추상 공통 기본 클래스에 대 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.</source>
          <target state="translated">노드가 변경 될 때 이벤트 발생 및 주석 등 두 클래스 모두에 공통 된 몇 가지 기본 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>Note that annotations are not part of the XML infoset; they are not serialized or deserialized.</source>
          <target state="translated">주석은 XML infoset의 일부가 아니므로 serialize되거나 deserialize되지 않습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the annotation to add.</source>
          <target state="translated">추가할 주석이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Adds an object to the annotation list of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>의 주석 목록에 개체를 추가합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Note that annotations are not part of the infoset; they are not persisted, or displayed by <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ToString%2A&gt;</ph>.</source>
          <target state="translated">주석은; infoset의 일부가 아닌 참고 지속 상태가 아니면에 의해 표시 되지 <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ToString%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element.</source>
          <target state="translated">또한 XML Namespace VB 프로젝트로 가져올 SaveOptions.OmitDuplicateNamespaces 열거형 값을 가진 AddAnnotation를 호출 하는 경우 다음 요소가 하나만 포함 됩니다 모든 요소는 대신 XML Namespace 특성.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Removing duplicate namespaces in XML Literals<ept id="p1">](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XML 리터럴을에 중복 된 네임 스페이스 제거<ept id="p1">](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>The following example adds an annotation to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 추가 하는 주석을 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the annotation to retrieve.</source>
          <target state="translated">검색할 주석의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>Gets the first annotation object of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 첫 번째 주석 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the first annotation object that matches the specified type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no annotation is of the specified type.</source>
          <target state="translated">지정된 형식과 일치하는 첫 번째 주석 개체가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>이거나, 지정된 형식의 주석이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The following example adds an annotation to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 추가 하는 주석을 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>It then retrieves the annotation, specifying the type to retrieve.</source>
          <target state="translated">검색할 유형을 지정 하는 주석을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The type of the annotation to retrieve.</source>
          <target state="translated">검색할 주석의 형식입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>Get the first annotation object of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 첫 번째 주석 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The first annotation object that matches the specified type, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no annotation is of the specified type.</source>
          <target state="translated">지정된 형식과 일치하는 첫 번째 주석 개체이거나, 지정된 형식의 주석이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The following example adds an annotation to an element, and then retrieves it through this method.</source>
          <target state="translated">다음 예제에서는 요소에 주석을 추가 하 고이 메서드를 통해 검색 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the annotations to retrieve.</source>
          <target state="translated">검색할 주석의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>Gets a collection of annotations of the specified type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 주석 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> that contains the annotations that match the specified type for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>에서 지정된 형식과 일치하는 주석이 들어 있는 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>의 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>The following example adds some annotations to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then retrieves a collection of annotations by using this method.</source>
          <target state="translated">에 주석을 몇 개를 추가 하는 다음 예제는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>,이 방법을 사용 하 여 주석 컬렉션을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>The type of the annotations to retrieve.</source>
          <target state="translated">검색할 주석의 형식입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>Gets a collection of annotations of the specified type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 주석 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the annotations for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>의 주석이 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>The following example uses this method to retrieve annotations on an element.</source>
          <target state="translated">다음 예제에서는이 메서드를 사용 하 여 요소에 대 한 주석을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Gets the base URI for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>의 기본 URI를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the base URI for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>의 기본 URI가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Using LINQ to XML, you can deserialize XML in a number of fashions.</source>
          <target state="translated">LINQ to XML 사용 하 여 다양 한 방식으로에서 XML 역직렬화 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>You can parse it from a string, load it from a file, or read it from a <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> or an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">문자열에서 구문 분석 하는 파일에서 로드 하거나에서 읽을 수 있습니다는 <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">모든이 경우에서 LINQ to XML 사용 하 여 하나 또는 다른의 구체적인 하위 클래스가 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Sometimes the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> has the base URI, and sometimes it does not.</source>
          <target state="translated">경우에 따라는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 는 기본 URI를 사용 하 고 그렇지 않은 경우에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>For instance, when loading from a file, the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> knows the base URI, but when reading from an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that was created because of calling the <ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> method, there is no possibility of the <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> reporting a base URI; the XML was in a string.</source>
          <target state="translated">예를 들어, 파일에서 로드 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 에서 읽을 때는 하지만 기본 URI를 알고는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 호출 때문에 만들어진는 <ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> 메서드를의 발생할 가능성이 없습니다는 <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> 에 XML 했습니다; 기본 URI는 보고는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If, when parsing or loading the XML, you specify <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, LINQ to XML will request the base URI for each node as the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> returns the node.</source>
          <target state="translated">구문 분석 또는 XML을 로드 하는 경우 지정할 있습니다 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, LINQ to XML에서 각 노드에 대해 한 기본 URI를 요청에서 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 노드를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node.</source>
          <target state="translated">판독기의 기본 URI가 LINQ to XML LINQ XML 노드를 사용 하 여 정보를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This property returns that information.</source>
          <target state="translated">이 속성은 해당 정보를 반환합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If the underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> does not have the base URI, then this property will return an empty string.</source>
          <target state="translated">경우 내부 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 에 없는 기본 URI를이 속성은 빈 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> when loading an XML tree will result in slower parsing.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> 느린 구문 분석에 XML 트리를 로드할 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree.</source>
          <target state="translated">XML 트리에 대 한 기본 URI를 설정 하는 경우 LINQ to XML 트리의 루트에 주석을 놓습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This property is a computed property, and navigates up the tree to find the base URI.</source>
          <target state="translated">이 속성은 계산 된 속성 및 기본 URI를 찾으려면 트리를 탐색 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>The following example loads the base URI and line information as it loads the file.</source>
          <target state="translated">다음 예제에서는 파일을 로드 되는 기본 URI 및 줄 정보를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>It then prints the base URI and the line information.</source>
          <target state="translated">그런 다음 기본 URI 및 줄 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>.</source>
          <target state="translated">이 예제에서는 XML 문서 <bpt id="p1">[</bpt>샘플 XML 파일: 일반적인 구매 주문(LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Raised when this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> or any of its descendants have changed.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 또는 해당 하위 항목이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Events are raised only when an XML tree is modified, not when it is constructed.</source>
          <target state="translated">이벤트는 만들어질 때가 아니라 XML 트리 수정 될 때만 발생 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">이벤트를 받을 수 있으며에 대 한 참조 하기 전에 이벤트 처리기를 추가할 수 없습니다 전에 이벤트를 이벤트 처리기를 추가 해야 하기 때문에 이것이 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>You cannot get a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.</source>
          <target state="translated">에 대 한 참조를 가져올 수 없습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 트리가 생성 되기 전에 XML입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This means that during functional construction of an XML tree, you will not receive events.</source>
          <target state="translated">이 XML 트리의 함수 생성 하는 동안 표시 되지 않습니다 이벤트 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</source>
          <target state="translated">예기치 않은 결과가 발생할 수 있습니다.이 작업을 수행 하기 때문에 이러한 이벤트 중 하나에서 XML 트리를 수정할 때 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>For example, if you receive a <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.</source>
          <target state="translated">예를 들어, 표시 되 면는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> 이벤트 및 이벤트를 처리 하는 동안 트리에서 노드를 제거, 받을 수는 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</source>
          <target state="translated">이벤트 처리 되는 경우에 이벤트를 수신 하는 노드가 포함 된 것과 다른 XML 트리를 수정 하는 데 유효한 트리를 수정할는 동일한 수정 이벤트가 발생 하는 특정 노드에 영향을 미치지 않는 유효 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</source>
          <target state="translated">그러나 이벤트를 받는 노드를 포함 하는 트리의 영역을 수정 하면 수신 하는 이벤트와 트리에 영향 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>The following example adds an event handler to the root element of an XML tree.</source>
          <target state="translated">다음 예제에서는 XML 트리의 루트 요소에는 이벤트 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>It then modifies the tree, causing LINQ to XML to raise some events.</source>
          <target state="translated">다음 LINQ to XML 일부 이벤트를 발생 시키는 발생 하는 트리를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Events are useful when you want to maintain some aggregate information in an XML tree.</source>
          <target state="translated">XML 트리에 특정 집계 정보를 유지 관리하려는 경우 이벤트가 유용합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>For example, you may want maintain an invoice total that is the sum of the line items of the invoice.</source>
          <target state="translated">예를 들어, 청구서의 개별 품목에 대한 합계인 청구서 총계를 유지 관리하려고 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This example uses events to maintain the total of all of the child elements under the complex element <ph id="ph1">`Items`</ph>.</source>
          <target state="translated">이 예제에서는 이벤트를 사용하여 복합 요소 <ph id="ph1">`Items`</ph> 아래의 모든 자식 요소에 대한 총계를 유지 관리합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="E:System.Xml.Linq.XObject.Changing">
          <source>Raised when this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> or any of its descendants are about to change.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 또는 해당 하위 항목이 변경되기 직전에 발생합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>Events are raised only from modification of an XML tree, not from construction of an XML tree.</source>
          <target state="translated">이벤트는 XML 트리 생성에서가 아니라, XML 트리 수정 되지 않도록만 발생 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">이벤트를 받을 수 있으며에 대 한 참조 하기 전에 이벤트 처리기를 추가할 수 없습니다 전에 이벤트를 이벤트 처리기를 추가 해야는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You can't get a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.</source>
          <target state="translated">에 대 한 참조를 가져올 수 없습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 트리가 생성 되기 전에 XML입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>This means that during functional construction of an XML tree, you will not receive events.</source>
          <target state="translated">이 XML 트리의 함수 생성 하는 동안 표시 되지 않습니다 이벤트 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</source>
          <target state="translated">예기치 않은 결과가 발생할 수 있습니다.이 작업을 수행 하기 때문에 이러한 이벤트 중 하나에서 XML 트리를 수정할 때 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>For example, if you receive a <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.</source>
          <target state="translated">예를 들어, 표시 되 면는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> 이벤트 및 이벤트를 처리 하는 동안 트리에서 노드를 제거, 받을 수는 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</source>
          <target state="translated">이벤트 처리 되는 경우에 이벤트를 수신 하는 노드가 포함 된 것과 다른 XML 트리를 수정 하는 데 유효한 트리를 수정할는 동일한 수정 이벤트가 발생 하는 특정 노드에 영향을 미치지 않는 유효 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</source>
          <target state="translated">그러나 이벤트를 받는 노드를 포함 하는 트리의 영역을 수정 하면 수신 하는 이벤트와 트리에 영향 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>The following example adds an event handler to the root element of an XML tree.</source>
          <target state="translated">다음 예제에서는 XML 트리의 루트 요소에는 이벤트 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>It then modifies the tree, causing LINQ to XML to raise some events.</source>
          <target state="translated">다음 LINQ to XML 일부 이벤트를 발생 시키는 발생 하는 트리를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.Document">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>The following example creates a document with some complex content.</source>
          <target state="translated">다음 예제에서는 일부 복합 콘텐츠를 포함 한 문서를 만듭니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>It then uses this property to retrieve the document for the <ph id="ph1">`Child`</ph> element.</source>
          <target state="translated">그런 다음이 속성에 대 한 문서를 사용 하 여는 <ph id="ph1">`Child`</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Gets the node type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 대한 노드 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>The node type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 대한 노드 형식입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">파생 되는 모든 클래스 때문에 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 포함 한 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> 속성, 컬렉션의 구체적인 서브 클래스에 대해 작동 하는 코드를 작성할 수 있습니다 <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Your code can then test for the node type of each node in the collection.</source>
          <target state="translated">코드 그런 다음 컬렉션에서 각 노드의 노드 형식에 대 한 테스트 수 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>The following example uses this method to retrieve the node type for a variety of nodes.</source>
          <target state="translated">다음 예제에서는이 방법을 사용 하 여 다양 한 노드에 대 한 노드 형식을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.Parent">
          <source>Gets the parent <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>의 부모 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>The parent <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>의 부모 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>If this <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> has no parent element, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 에 부모 요소가 없는이 속성은 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>This property returns the parent element, and as children nodes of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> have no parent element, this property returns <ph id="ph2">`null`</ph> for them.</source>
          <target state="translated">이 속성은 부모 요소를 반환 및 자식 노드를 다른 이름으로 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 가 더 부모 요소가이 속성은 반환 <ph id="ph2">`null`</ph> 하 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>The following example uses this method.</source>
          <target state="translated">다음 예제에서는이 방법을 사용합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of annotations to remove.</source>
          <target state="translated">제거할 주석의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>Removes the annotations of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 주석을 제거합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>The following example creates an element with four annotations on it.</source>
          <target state="translated">다음 예에서는 주석이 네 개 있는 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>It then uses this method to remove two of them.</source>
          <target state="translated">그런 다음이 메서드를 사용 하 여 그 중 두 개를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>The type of annotations to remove.</source>
          <target state="translated">제거할 주석의 형식입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>Removes the annotations of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에서 지정된 형식의 주석을 제거합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>The following example creates an element with four annotations on it.</source>
          <target state="translated">다음 예에서는 주석이 네 개 있는 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>It then uses this method to remove two of them.</source>
          <target state="translated">그런 다음이 메서드를 사용 하 여 그 중 두 개를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>Gets a value indicating whether or not this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> has line information.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 줄 정보가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> has line information, otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 줄 정보가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>You can call this method to determine whether the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contains valid line information.</source>
          <target state="translated">확인 하려면이 메서드를 호출할 수 있는지는 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 유효한 줄 정보를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">이 메서드는 명시적 인터페이스 멤버 구현에 있는 메서드의 <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> 인터페이스 이므로이 메서드를 호출 하려면 캐스팅 하는 데 필요한 <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">이 예제에서는 기본 URI를 설정 하 고 줄 정보를 유지 하는 옵션을 설정 하는 파일, 작은 XML 트리를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">다음 줄 정보를 갖지 않는 다른 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">그런 다음 트리의 각 요소에 대 한 줄 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>Gets the line number that the underlying <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> reported for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>에서 이 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 대해 보고하는 줄 번호를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the line number reported by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>에서 이 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>에 대해 보고한 줄 번호가 들어 있는 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">이 메서드는 명시적 인터페이스 멤버 구현에 있는 메서드의 <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> 인터페이스 이므로이 메서드를 호출 하려면 캐스팅 하는 데 필요한 <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">이 예제에서는 기본 URI를 설정 하 고 줄 정보를 유지 하는 옵션을 설정 하는 파일, 작은 XML 트리를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">다음 줄 정보를 갖지 않는 다른 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">그런 다음 트리의 각 요소에 대 한 줄 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>Gets the line position that the underlying <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> reported for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>에서 이 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>에 대해 보고하는 줄 위치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the line position reported by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>에서 이 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>에 대해 보고한 줄 위치가 들어 있는 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">이 메서드는 명시적 인터페이스 멤버 구현에 있는 메서드의 <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> 인터페이스 이므로이 메서드를 호출 하려면 캐스팅 하는 데 필요한 <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">이 예제에서는 기본 URI를 설정 하 고 줄 정보를 유지 하는 옵션을 설정 하는 파일, 작은 XML 트리를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">다음 줄 정보를 갖지 않는 다른 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">그런 다음 트리의 각 요소에 대 한 줄 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>