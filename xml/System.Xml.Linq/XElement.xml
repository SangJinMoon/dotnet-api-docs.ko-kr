<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="82440-101">XML 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="82440-101">Represents an XML element.</span></span>  <span data-ttu-id="82440-102">사용 정보 및 예제를 보려면 이 페이지의 [XElement 클래스 개요](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)와 설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="82440-102">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-103">이 클래스는 기본 XML 구조가 XML 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="82440-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="82440-104">참조 [XElement 클래스 개요](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) 기타 사용 현황 정보에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-104">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.</span></span>  
  
 <span data-ttu-id="82440-105">요소에는 <xref:System.Xml.Linq.XName>, 필요에 따라 하나 이상의 특성 및 콘텐츠가 포함 될 수도 있습니다 (자세한 내용은 참조 <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span><span class="sxs-lookup"><span data-stu-id="82440-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="82440-106"><xref:System.Xml.Linq.XElement> 다음과 같은 유형의 콘텐츠를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="82440-107">유효한 콘텐츠에 대 한 자세한 내용은 <xref:System.Xml.Linq.XElement>, 참조 [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-108"><xref:System.Xml.Linq.XElement> 파생 <xref:System.Xml.Linq.XContainer>에서 파생 되는 <xref:System.Xml.Linq.XNode>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="82440-109">일부 <xref:System.Xml.Linq.XElement> 메서드는 XAML에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="82440-110">자세한 내용은 [LINQ to XML 동적 속성](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="82440-110">For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-111">다음 예제에서는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-111">The following example creates an XML tree.</span></span> <span data-ttu-id="82440-112">새 요소의 내용은 LINQ 쿼리에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="82440-113">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="82440-114">다음은 동일한 예 있지만 경우 XML은 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="82440-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="82440-115">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-115">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="82440-116">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-117"><see cref="T:System.Xml.Linq.XElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-117">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-118">이 생성자에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-118">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-119">문자열을 암시적 변환이 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-119">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-120">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-120">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="82440-121">일반적인 사용 더하기 연산자 오버 로드를 사용 하는 네임 스페이스의 요소를 만들 때는 <xref:System.Xml.Linq.XNamespace> 및 만들 문자열은 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-121">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-122">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-122">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-123">다음 예제에서는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-123">The following example creates an XML tree.</span></span> <span data-ttu-id="82440-124">새 요소의 내용은 LINQ 쿼리에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-124">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="82440-125">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="82440-126">복사할 <see cref="T:System.Xml.Linq.XElement" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-126">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span></span></param>
        <summary><span data-ttu-id="82440-127">다른 <see cref="T:System.Xml.Linq.XElement" /> 개체를 사용하여 <see cref="T:System.Xml.Linq.XElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-127">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-128">이 생성자에는 요소의 전체 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-128">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-129">다음 예제에서는 XML 트리를 만든 다음는 트리의 복제본을 만듭니다 및 다음 호출 <xref:System.Xml.Linq.XNode.DeepEquals%2A>, 두 XML 트리 같은지 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-129">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="82440-130">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-130">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-131">요소의 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-131">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span></span></param>
        <summary><span data-ttu-id="82440-132">지정된 이름을 사용하여 <see cref="T:System.Xml.Linq.XElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-132">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-133">이 생성자는 콘텐츠 및 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-133">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="82440-134">문자열을 암시적 변환이 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-134">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-135">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-135">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-136">일반적인 사용 더하기 연산자 오버 로드를 사용 하는 네임 스페이스의 요소를 만들 때는 <xref:System.Xml.Linq.XNamespace> 및 만들 문자열은 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-136">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-137">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-137">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-138">다음 예제에서는 콘텐츠 없이 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-138">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="82440-139">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-139">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="82440-140">다음 예제에서는 콘텐츠가 없는 네임 스페이스의 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-140">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="82440-141">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-141">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-142">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-142">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="82440-143">이 <see cref="T:System.Xml.Linq.XStreamingElement" />의 콘텐츠에 대해 반복할 실행되지 않은 쿼리가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-143">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="82440-144"><see cref="T:System.Xml.Linq.XElement" /> 개체를 사용하여 <see cref="T:System.Xml.Linq.XStreamingElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-144">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-145">이 생성자는 지정 된 내용에서 반복 <xref:System.Xml.Linq.XStreamingElement>, 및의 내용에 대해 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-145">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-146">다음 예제에서는 소스 XML 트리를 만든 다음 만듭니다는 <xref:System.Xml.Linq.XStreamingElement> 소스 XML 트리를 쿼리에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-146">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="82440-147">다음 직렬화 된 <xref:System.Xml.Linq.XStreamingElement> 소스 XML 트리를 콘솔에 새 요소를 추가 하 고 serialize 한 다음는 <xref:System.Xml.Linq.XStreamingElement> 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-147">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="82440-148">소스 XML 트리에 새로 추가 된 해당 요소는 첫 번째 serialization에 포함 되어 있지 않지만 두 번째에 연결 되어 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-148">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="82440-149">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-149">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-150">요소 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-150">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="82440-151">요소의 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-151">The contents of the element.</span></span></param>
        <summary><span data-ttu-id="82440-152">지정된 이름 및 콘텐츠를 사용하여 <see cref="T:System.Xml.Linq.XElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-152">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-153">이 생성자는 지정 된 콘텐츠 및 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-153">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="82440-154">문자열을 암시적 변환이 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-154">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-155">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-155">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="82440-156">일반적인 사용 더하기 연산자 오버 로드를 사용 하는 네임 스페이스의 요소를 만들 때는 <xref:System.Xml.Linq.XNamespace> 및 만들 문자열은 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-156">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-157">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-157">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="82440-158">이 생성자에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-158">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-159">다음 예제에서는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-159">The following example creates an XML tree.</span></span> <span data-ttu-id="82440-160">새 요소의 내용은 LINQ 쿼리에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-160">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="82440-161">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-161">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="82440-162">다음 예제에서는 다양 한 유형의 콘텐츠와 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-162">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-163">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-163">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="82440-164">다음 예제에서는 네임 스페이스에 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-164">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-165">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-165">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="82440-166">다음 예제에서는 중첩 된 네임 스페이스와 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-166">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-167">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-167">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-168">요소 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-168">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="82440-169">요소의 초기 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-169">The initial content of the element.</span></span></param>
        <summary><span data-ttu-id="82440-170">지정된 이름 및 콘텐츠를 사용하여 <see cref="T:System.Xml.Linq.XElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-170">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-171">이 생성자는 지정 된 콘텐츠 및 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-171">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="82440-172">문자열을 암시적 변환이 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-172">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-173">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-173">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="82440-174">일반적인 사용 더하기 연산자 오버 로드를 사용 하는 네임 스페이스의 요소를 만들 때는 <xref:System.Xml.Linq.XNamespace> 및 만들 문자열은 <xref:System.Xml.Linq.XName>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-174">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="82440-175">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-175">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="82440-176">이 생성자에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-176">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-177">다음 예제에서는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-177">The following example creates an XML tree.</span></span> <span data-ttu-id="82440-178">새 요소의 내용은 LINQ 쿼리에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-178">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="82440-179">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-179">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="82440-180">다음 예제에서는 다양 한 유형의 콘텐츠와 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-180">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-181">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-181">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="82440-182">다음 예제에서는 네임 스페이스에 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-182">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-183">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-183">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="82440-184">다음 예제에서는 중첩 된 네임 스페이스와 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-184">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-185">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-185">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-186">이 요소와 이 요소의 상위 요소가 포함된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-186">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-187">반환된 된 컬렉션의 요소가 문서 순서의 역순입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-187">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="82440-188">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-188">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-189">이 요소와 이 요소의 상위 요소가 포함된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-189">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <returns><span data-ttu-id="82440-190">이 요소와 이 요소의 상위 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-190">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-191">반환된 된 컬렉션의 요소가 문서 순서의 역순입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-191">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="82440-192">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-192">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-193">다음 예제에서는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-193">The following example creates an XML tree.</span></span> <span data-ttu-id="82440-194">찾은 다음는 `GrandChild` 요소와 요소의 상위 요소에 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-194">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="82440-195">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-195">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-196">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-196">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="82440-197">이 요소와 이 요소의 상위 요소가 포함된 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-197">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="82440-198">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-198">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="82440-199">이 요소와 이 요소의 상위 요소가 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="82440-200">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-200">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-201">반환된 된 컬렉션의 요소가 문서 순서의 역순입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-201">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="82440-202">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-202">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-203">다음 예제에서는이 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-203">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="82440-204">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-204">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-205">가져올 <see cref="T:System.Xml.Linq.XName" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-205">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span></span></param>
        <summary><span data-ttu-id="82440-206">지정된 <see cref="T:System.Xml.Linq.XAttribute" />이 있는 이 <see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Xml.Linq.XName" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-206">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="82440-207">지정된 <see cref="T:System.Xml.Linq.XAttribute" />이 있는 <see cref="T:System.Xml.Linq.XName" />이거나, 지정된 이름의 특성이 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-207">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-208">일부 요소 또는 특성의 컬렉션을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-208">Some  return collections of elements or attributes.</span></span> <span data-ttu-id="82440-209">이 메서드는 단일 특성만을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-209">This method returns only a single attribute.</span></span> <span data-ttu-id="82440-210">이 라고도 *singleton* (달리는 *컬렉션*).</span><span class="sxs-lookup"><span data-stu-id="82440-210">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="82440-211">Visual Basic 사용자 통합된 특성 축을 사용 하 여 지정한 이름 가진 특성의 값을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-211">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-212">다음 예제에서는 특성을 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-212">The following example creates an element with an attribute.</span></span> <span data-ttu-id="82440-213">이 메서드를 사용 하 여 특성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-213">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="82440-214">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-214">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="82440-215">다음은 동일한 예 있지만 경우 XML은 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="82440-215">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="82440-216">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-216">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-217">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-217">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-218">이 요소의 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-218">Returns a collection of attributes of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-219">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-219">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-220">이 요소의 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-220">Returns a collection of attributes of this element.</span></span></summary>
        <returns><span data-ttu-id="82440-221">이 요소에 있는 특성에 대한 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-222">반환된 된 컬렉션에 있는 특성의 요소에 추가 된 순서로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-222">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="82440-223">XML에서 XML 트리를 구문 분석 하는 경우 문서 순서로 특성이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-223">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="82440-224">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-224">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-225">다음 예제에서는 두 개의 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-225">The following example creates an element with two attributes.</span></span> <span data-ttu-id="82440-226">다음 사용 하 여이 요소의 모든 특성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-226">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="82440-227">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-227">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="82440-228">다음은 동일한 예 있지만 경우 XML은 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="82440-228">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="82440-229">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-229">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-230">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-230">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-231">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-231">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="82440-232">이 요소의 필터링된 특성 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-232">Returns a filtered collection of attributes of this element.</span></span> <span data-ttu-id="82440-233">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-233">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="82440-234">이 요소의 특성이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span></span> <span data-ttu-id="82440-235">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-235">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-236">특성 이름은 요소 내에서 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-236">Attribute names must be unique within an element.</span></span> <span data-ttu-id="82440-237">따라서 하나의 특성을 포함 하는 두 컬렉션을 반환할 수 있습니다 또는 빈 컬렉션을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-237">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="82440-238">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-238">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-239">다음 예제에서는이 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-239">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="82440-240">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="82440-241">다음은 동일한 예 있지만 경우 XML은 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="82440-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="82440-242">자세한 내용은 참조 [XML 네임 스페이스로 작업](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-242">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-243">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-244">이 요소와 이 요소의 모든 하위 노드가 문서 순으로 포함된 노드 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-244">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="82440-245">이 요소와 이 요소의 모든 하위 노드가 문서 순으로 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XNode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-245">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-246">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-246">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-247">다음 예제에서는 XML 트리를 만들고이 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-247">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="82440-248">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-248">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-249">이 요소와 이 요소의 모든 하위 요소가 문서 순으로 포함된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-249">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-250">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-250">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-251">이 요소와 이 요소의 모든 하위 요소가 문서 순으로 포함된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-251">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="82440-252">이 요소와 이 요소의 모든 하위 요소가 문서 순으로 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-253">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-253">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-254">다음 예제에서는 XML 트리를 만들고이 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-254">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="82440-255">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-255">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-256">일치시킬 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-256">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="82440-257">이 요소와 이 요소의 모든 하위 요소가 문서 순으로 포함된 필터링된 요소 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-257">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="82440-258">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="82440-259">이 요소와 이 요소의 모든 하위 요소가 문서 순으로 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-259">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="82440-260">일치하는 <see cref="T:System.Xml.Linq.XName" />이 있는 요소만 컬렉션에 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-260">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-261">이 메서드는 지연된 실행을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-262">다음 예제에서는 XML 트리를 만들고이 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="82440-263">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-263">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-264">요소의 빈 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-264">Gets an empty collection of elements.</span></span></summary>
        <value><span data-ttu-id="82440-265">빈 컬렉션이 들어 있는 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-265">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-266">요소의 컬렉션을 반환 하는 메서드를 작성할 때이 속성은 일반적으로 클래스 구현자를 통해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-266">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="82440-267">이 속성의 빈 컬렉션을 가져올 하는 데 사용할 수 메서드가 해야 요소를 반환 하는 <xref:System.Xml.Linq.XElement> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-267">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-268">이 요소의 첫 번째 특성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-268">Gets the first attribute of this element.</span></span></summary>
        <value><span data-ttu-id="82440-269">이 요소의 첫 번째 특성이 들어 있는 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-269">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-270">특성은 요소에 추가 된 순서로 요소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-270">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-271">다음 예제에서는이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-271">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="82440-272">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-272">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-273">이 <see cref="T:System.Xml.Linq.XNamespace" />의 기본 <see cref="T:System.Xml.Linq.XElement" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-273">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="82440-274">이 <see cref="T:System.Xml.Linq.XNamespace" />의 기본 네임스페이스가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-274">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-275">Namespace 선언 하면 XML 트리의 특성으로 유지 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-275">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="82440-276">이러한 특수 특성 기본 네임 스페이스를 포함 하 여 네임 스페이스를 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-276">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="82440-277">이 메서드는 있는 경우, 기본 네임 스페이스를 선언 하는 네임 스페이스 선언의 찾을 하 고 반환 된 <xref:System.Xml.Linq.XNamespace> 기본 네임 스페이스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-277">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="82440-278">기본 네임 스페이스를 선언 하는 특성이 없는 경우이 메서드가 반환 <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-278">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82440-279">를 XML 트리의 네임 스페이스는 XML 트리를 특성으로 지속 되지 않으므로 경우 기본 네임 스페이스를 serialize 하는 경우에 C#을 사용 하 여 XML 트리를 만들 때이 메서드는 기본 네임 스페이스로 네임 스페이스를 보고 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-279">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="82440-280">Visual Basic 및 XML 리터럴을 사용 하 여 XML 트리를 Imports 문을 사용 하 여 기본 네임 스페이스에서 XML을 만들 경우 만들 때 다음 네임 스페이스 특성 트리에서 Visual Basic 컴파일러에 의해 만들어지고이 메서드는 해당 네임 스페이스를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-280">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-281">다음 예제에서는 기본 네임 스페이스가 있는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-281">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="82440-282">그런 다음이 메서드를 사용 하 여 기본 네임 스페이스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-282">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-283">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-283">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="82440-284">조회할 네임스페이스 접두사가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-284">A string that contains the namespace prefix to look up.</span></span></param>
        <summary><span data-ttu-id="82440-285">이 <see cref="T:System.Xml.Linq.XElement" />의 특정 접두사에 연결된 네임스페이스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-285">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="82440-286">이 <see cref="T:System.Xml.Linq.XNamespace" />의 접두사에 연결된 네임스페이스의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-286">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-287">이 메서드는이 요소에 대 한 범위에 있는 네임 스페이스 특성에 대 한 XML 트리를 통해 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-287">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="82440-288">Namespace 접두사는 XML 트리에 있는 네임 스페이스 특성에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-288">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-289">다음 예제에서는 접두사가 연결 된 네임 스페이스가 있는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-289">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="82440-290">그런 다음이 메서드를 사용 하 여는 <xref:System.Xml.Linq.XNamespace> 접두사에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-290">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="82440-291">대개 사용 Visual Basic을 사용 하는 경우는 [GetXmlNamespace 연산자](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) 다음과 같이 연산자</span><span class="sxs-lookup"><span data-stu-id="82440-291">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-292">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-292">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="82440-293">조회할 <see cref="T:System.Xml.Linq.XNamespace" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-293">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span></span></param>
        <summary><span data-ttu-id="82440-294">이 <see cref="T:System.Xml.Linq.XElement" />의 네임스페이스에 연결된 접두사를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-294">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="82440-295">네임스페이스 접두사가 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-295">A <see cref="T:System.String" /> that contains the namespace prefix.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-296">이 메서드는이 요소에 대 한 범위에 있는 네임 스페이스 특성에 대 한 XML 트리를 통해 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-296">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="82440-297">Namespace 접두사는 XML 트리에 있는 네임 스페이스 특성에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-297">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="82440-298">네임 스페이스는 기본 네임 스페이스를 네임 스페이스에 대 한 접두사인 경우이 메서드가 null을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-298">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-299">다음 예제에서는 접두사가 포함 된 네임 스페이스를 포함 하는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-299">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="82440-300">그런 다음이 메서드를 사용 하 여 네임 스페이스에 대 한 접두사 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-300">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="82440-301">이 예에서는 문자열을 암시적으로 변환 <xref:System.Xml.Linq.XNamespace> 이 메서드를 호출할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-301">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-302">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-302">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-303">이 요소에 특성이 하나 이상 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-303">Gets a value indicating whether this element has at least one attribute.</span></span></summary>
        <value>
          <span data-ttu-id="82440-304">이 요소에 특성이 최소한 하나 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-304"><see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82440-305">다음 예제에서는이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-305">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="82440-306">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-306">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-307">이 요소에 자식 요소가 하나 이상 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-307">Gets a value indicating whether this element has at least one child element.</span></span></summary>
        <value>
          <span data-ttu-id="82440-308">이 요소에 자식 요소가 최소한 하나 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-308"><see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82440-309">다음 예제에서는이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-309">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="82440-310">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-310">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-311">이 요소에 콘텐츠가 없는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-311">Gets a value indicating whether this element contains no content.</span></span></summary>
        <value>
          <span data-ttu-id="82440-312">이 요소에 콘텐츠가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-312"><see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-313">Note 태그 사이 콘텐츠가 없는 시작 및 끝 태그를 포함 하는 요소는 빈 요소 여야 하는으로 간주 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-313">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="82440-314">길이가 있음</span><span class="sxs-lookup"><span data-stu-id="82440-314">It has content with no length.</span></span> <span data-ttu-id="82440-315">시작 태그를 포함 하 고 종료 된 빈 요소로 표현 하는 요소에만 비어 있는 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-315">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-316">다음 예제에서는 다양 한 XML 트리를 만들고 각 트리에서이 속성의 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-316">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="82440-317">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-317">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-318">이 요소의 마지막 특성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-318">Gets the last attribute of this element.</span></span></summary>
        <value><span data-ttu-id="82440-319">이 요소의 마지막 특성이 들어 있는 <see cref="T:System.Xml.Linq.XAttribute" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-319">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-320">특성은 요소에 추가 된 순서로 요소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-320">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-321">다음 예제에서는 세 개의 특성이 있는 XML 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-321">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="82440-322">그런 다음 마지막 특성 출력으로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="82440-322">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="82440-323">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-323">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-324">URI로 지정된 파일, <see cref="T:System.Xml.Linq.XElement" /> 또는 <see cref="T:System.IO.TextReader" />를 사용하여 새 <see cref="T:System.Xml.XmlReader" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-324">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-325">로드를이 메서드의 오버 로드 중 하나를 사용할 수는 <xref:System.Xml.Linq.XElement> 파일에서 한 <xref:System.IO.TextReader>, 또는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-325">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="82440-326">만들려는 <xref:System.Xml.Linq.XElement> 에서 XML을 포함 하는 문자열을 사용 하 여 <xref:System.Xml.Linq.XElement.Parse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-326">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="82440-327">XML 데이터가 포함된 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-327">The stream that contains the XML data.</span></span></param>
        <summary><span data-ttu-id="82440-328">지정된 스트림을 사용하여 새 <see cref="T:System.Xml.Linq.XElement" /> 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-328">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span></span></summary>
        <returns><span data-ttu-id="82440-329">스트림에 포함된 데이터를 읽는 데 사용되는 <see cref="T:System.Xml.Linq.XElement" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-329">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-330">로드 옵션을 제어 하려는 경우 사용 하 여는 <xref:System.Xml.Linq.XElement.Load%2A> 오버 로드를 <xref:System.Xml.Linq.LoadOptions> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-330">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="82440-331">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-331">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-332">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-332">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="82440-333">수정 해야 할 경우 <xref:System.Xml.XmlReaderSettings>, 다음 단계를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-333">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="82440-334">만들기는 <xref:System.Xml.XmlReader> 중 하나를 호출 하 여는 <xref:System.Xml.XmlReader.Create%2A> 오버 <xref:System.Xml.XmlReaderSettings> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-334">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="82440-335">전달 된 <xref:System.Xml.XmlReader> 중 하나에 <xref:System.Xml.Linq.XElement>의 <xref:System.Xml.Linq.XElement.Load%2A> 를 사용 하는 오버 로드 <xref:System.Xml.XmlReader> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-335">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="82440-336"><see cref="T:System.IO.TextReader" /> 콘텐츠를 읽어올 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-336">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <summary><span data-ttu-id="82440-337"><see cref="T:System.Xml.Linq.XElement" />에서 <see cref="T:System.IO.TextReader" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-337">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="82440-338">지정된 <see cref="T:System.Xml.Linq.XElement" />에서 읽은 XML이 들어 있는 <see cref="T:System.IO.TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-338">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-339">이 메서드는 XML 트리에 원시 XML을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-339">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="82440-340">파일에서 모든 무효 공백이 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-340">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="82440-341">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-341">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-342">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-342">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-343">다음 예제에서 요소를 로드 한 <xref:System.IO.StringReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-343">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="82440-344">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-344">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="82440-345">새 <see cref="T:System.Xml.Linq.XElement" />에 로드할 파일을 참조하는 URI 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-345">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="82440-346">파일에서 <see cref="T:System.Xml.Linq.XElement" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-346">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span></span></summary>
        <returns><span data-ttu-id="82440-347">지정된 파일의 내용이 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-347">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-348">이 메서드는 XML 트리에 원시 XML을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-348">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="82440-349">파일에서 모든 무효 공백이 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-349">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="82440-350">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-350">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-351">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-351">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-352">다음 예제에서는 XML 트리를 만드는 파일에 저장 하 고 다음이 메서드를 사용 하 여 로드 하는 <xref:System.Xml.Linq.XElement> 는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-352">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="82440-353">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-353">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82440-354"><see cref="T:System.Xml.XmlReader" />의 콘텐츠를 읽어올 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-354">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="82440-355"><see cref="T:System.Xml.Linq.XElement" />에서 <see cref="T:System.Xml.XmlReader" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-355">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="82440-356">지정된 <see cref="T:System.Xml.Linq.XElement" />에서 읽은 XML이 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-356">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-357">만들어는 <xref:System.Xml.XmlNodeReader> DOM 문서 및 사용한 다음에서 <xref:System.Xml.XmlNodeReader> 만들려는 <xref:System.Xml.Linq.XElement>,이 메서드는 linq to XML 트리 DOM 문서 복사본을 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-357">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="82440-358">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-358">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-359">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-359">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-360">다음 예제에서는 DOM 문서, 만들어집니다는 <xref:System.Xml.XmlNodeReader> DOM 문서에서 판독기에서 트리를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-360">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="82440-361">이 코드는 DOM 문서 LINQ로 XML 트리를 효과적으로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-361">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="82440-362">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-362">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="82440-363">XML 데이터가 포함된 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-363">The stream containing the XML data.</span></span></param>
        <param name="options"><span data-ttu-id="82440-364">기본 URI 및 줄 정보의 로드 여부를 지정하는 <see cref="T:System.Xml.Linq.LoadOptions" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-364">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="82440-365">지정된 스트림을 사용하여 새 <see cref="T:System.Xml.Linq.XElement" /> 인스턴스를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-365">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="82440-366">스트림에 포함된 데이터를 읽는 데 사용되는 <see cref="T:System.Xml.Linq.XElement" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-366">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-367">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-367">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-368">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-368">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="82440-369">수정 해야 할 경우 <xref:System.Xml.XmlReaderSettings>, 다음 단계를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-369">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="82440-370">만들기는 <xref:System.Xml.XmlReader> 중 하나를 호출 하 여는 <xref:System.Xml.XmlReader.Create%2A> 오버 <xref:System.Xml.XmlReaderSettings> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-370">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="82440-371">전달 된 <xref:System.Xml.XmlReader> 중 하나에 <xref:System.Xml.Linq.XElement>의 <xref:System.Xml.Linq.XElement.Load%2A> 를 사용 하는 오버 로드 <xref:System.Xml.XmlReader> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-371">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="82440-372"><see cref="T:System.IO.TextReader" /> 콘텐츠를 읽어올 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-372">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <param name="options"><span data-ttu-id="82440-373">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <see cref="T:System.Xml.Linq.LoadOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-373">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="82440-374"><see cref="T:System.Xml.Linq.XElement" />에서 <see cref="T:System.IO.TextReader" />를 로드하고, 선택적으로 공백 및 줄 정보를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-374">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="82440-375">지정된 <see cref="T:System.Xml.Linq.XElement" />에서 읽은 XML이 들어 있는 <see cref="T:System.IO.TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-375">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-376">소스 XML 식인 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-376">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="82440-377">노드 형식의 <xref:System.Xml.Linq.XText> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="82440-377">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-378">소스 XML 식인 경우 설정 하지 않으면는 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 대 한 플래그가 `options` 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-378">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="82440-379">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-379">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-380">XML 원본이 들여쓴 없는 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-380">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="82440-381">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-381">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="82440-382">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-382">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="82440-383">사용 하 여 <xref:System.Xml.Linq.XElement.Parse%2A> 만들려는 <xref:System.Xml.Linq.XElement> 에서 XML을 포함 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-383">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="82440-384">설정 <xref:System.Xml.Linq.LoadOptions.SetBaseUri> 에서 로드할 때 영향을 미치지 것입니다는 <xref:System.IO.TextReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-384">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="82440-385">설정 하는 경우 성능이 저하 될는 <xref:System.Xml.Linq.LoadOptions.SetLineInfo> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-385">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="82440-386">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-386">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="82440-387">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-387">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="82440-388">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-388">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-389">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-389">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-390">다음 예제에서는 로드 된 <xref:System.Xml.Linq.XElement> 에서 <xref:System.IO.StringReader> 두 가지 방법으로: 공백 유지 하 고 서로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-390">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="82440-391">다음 쿼리를 사용 하 여 결과 XML 트리의 공백 노드 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-391">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="82440-392">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-392">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="82440-393">다음 예제에서 로드 되는 줄 정보를 로드는 <xref:System.IO.TextReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-393">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="82440-394">다음 줄 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-394">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="82440-395">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-395">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="82440-396"><see cref="T:System.Xml.Linq.XElement" />에 로드할 파일을 참조하는 URI 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-396">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="82440-397">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <see cref="T:System.Xml.Linq.LoadOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-397">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="82440-398">파일에서 <see cref="T:System.Xml.Linq.XElement" />를 로드하고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-398">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="82440-399">지정된 파일의 내용이 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-399">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-400">소스 XML 식인 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-400">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="82440-401">노드 형식의 <xref:System.Xml.Linq.XText> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="82440-401">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-402">소스 XML 식인 경우 설정 하지 않으면는 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 대 한 플래그가 `options` 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-402">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="82440-403">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-403">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-404">XML 원본이 들여쓴 없는 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-404">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="82440-405">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-405">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="82440-406">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-406">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="82440-407">사용 하 여 <xref:System.Xml.Linq.XElement.Parse%2A> 만들려는 <xref:System.Xml.Linq.XElement> 에서 XML을 포함 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-407">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="82440-408">설정 하는 경우 성능이 저하 될는 <xref:System.Xml.Linq.LoadOptions.SetBaseUri> 및 <xref:System.Xml.Linq.LoadOptions.SetLineInfo> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-408">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="82440-409">기본 URI 및 줄 정보는 XML 문서를 로드 한 후 즉시 정확 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-409">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="82440-410">문서를 로드 한 후 XML 트리를 수정 하면 기본 URI 및 줄 정보가 무의미해 질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-410">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="82440-411">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-411">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-412">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-412">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-413">다음 예제에서는 로드 된 <xref:System.Xml.Linq.XElement> 두 가지 방법으로 파일에서: 공백 유지 하 고 서로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-413">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="82440-414">다음 쿼리를 사용 하 여 결과 XML 트리의 공백 노드 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-414">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="82440-415">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-415">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="82440-416">다음 예제에서는 파일을 로드 되는 기본 URI 및 줄 정보를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-416">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="82440-417">그런 다음 기본 URI 및 줄 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-417">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="82440-418">이 예제에서는 다음과 같은 리소스 파일 사용: [샘플 XML 파일: 일반적인 구매 주문 (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-418">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="82440-419">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-419">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82440-420"><see cref="T:System.Xml.XmlReader" />의 콘텐츠를 읽어올 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-420">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="82440-421">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <see cref="T:System.Xml.Linq.LoadOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-421">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="82440-422"><see cref="T:System.Xml.Linq.XElement" />에서 <see cref="T:System.Xml.XmlReader" />를 로드하고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-422">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="82440-423">지정된 <see cref="T:System.Xml.Linq.XElement" />에서 읽은 XML이 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-423">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-424">만들어는 <xref:System.Xml.XmlNodeReader> DOM 문서 및 사용한 다음에서 <xref:System.Xml.XmlNodeReader> 만들려는 <xref:System.Xml.Linq.XElement>,이 메서드는 linq to XML 트리 DOM 문서 복사본을 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-424">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="82440-425">사용 하 여 <xref:System.Xml.Linq.XElement.Parse%2A> 만들려는 <xref:System.Xml.Linq.XElement> 에서 XML을 포함 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-425">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="82440-426">설정 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에서 로드할 때 유효 하지 않은 한 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-426">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-427"><xref:System.Xml.XmlReader> 여부 읽기 중 하나가 공백을 하도록 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-427">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="82440-428">공백 노드 LINQ to XML 트리는 채워지므로 하는 판독기 화면을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-428">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="82440-429">여부에 관계 없이 동작이 됩니다 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 설정 되었는지 아닌지를 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-429">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="82440-430"><xref:System.Xml.XmlReader> 여부 기본 URI는 유효한 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-430">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="82440-431">설정한 경우 <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, 기본 URI가 로부터 보고 되는 기본 URI에서 XML 트리의 설정 됩니다는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-431">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="82440-432"><xref:System.Xml.XmlReader> 여부 유효한 줄 정보가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-432">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="82440-433">설정한 경우 <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, 로부터 보고 되는 정보 줄에서에서 줄 정보를 XML 트리의 설정 됩니다는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-433">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="82440-434">설정 하는 경우 성능이 저하 될는 <xref:System.Xml.Linq.LoadOptions.SetLineInfo> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-434">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="82440-435">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-435">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="82440-436">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-436">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="82440-437">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-437">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-438">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-438">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-439">로드 하는 줄 정보를 로드 하는 다음 예제는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-439">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-440">다음 줄 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-440">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="82440-441">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-441">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-442">이 요소의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-442">Gets or sets the name of this element.</span></span></summary>
        <value><span data-ttu-id="82440-443">이 요소의 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-443">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-444">이 속성에서 발생 하는 설정의 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-444">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-445">다음 예제에서는 요소의 이름을 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-445">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="82440-446">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-446">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-447">이 노드에 대한 노드 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-447">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="82440-448">노드 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-448">The node type.</span></span> <span data-ttu-id="82440-449"><see cref="T:System.Xml.Linq.XElement" /> 개체의 경우 이 값은 <see cref="F:System.Xml.XmlNodeType.Element" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-449">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-450">파생 되는 모든 클래스 때문에 <xref:System.Xml.Linq.XObject> 포함 한 <xref:System.Xml.Linq.XObject.NodeType%2A> 속성, 컬렉션의 구체적인 서브 클래스에 대해 작동 하는 코드를 작성할 수 있습니다 <xref:System.Xml.Linq.XObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-450">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="82440-451">코드 그런 다음 컬렉션에서 각 노드의 노드 형식에 대 한 테스트 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-451">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-452">다음 예제에서는 노드 유형의 요소를 인쇄 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-452">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="82440-453">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-453">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-454"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-454">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="82440-455">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Boolean" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-455">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="82440-456">이 <see cref="T:System.Boolean" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-456">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-457">변환할 때 <xref:System.Boolean> 특성 또는 요소에서 허용 되는 값은 "0", "1" 및 모든 문자열을 "true" 또는 "false" 후 트리밍을 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-457">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="82440-458">다음 예에서는 부울 값을 일부 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-458">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="82440-459">다음 캐스팅 하도록 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-459">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="82440-460">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-460">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-461">요소에 유효한 <see cref="T:System.Boolean" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-461">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-462"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-462">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-463"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.DateTime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-463">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="82440-464">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.DateTime" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-464">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="82440-465">이 <see cref="T:System.DateTime" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-465">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-466">날짜 및 시간 콘텐츠가 있는 요소나 특성의 값 공간은 ISO 8601에 설명 된 시간과 날짜 밀접 한 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-466">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="82440-467">특성 또는 날짜 및 시간 콘텐츠를 포함 하는 요소를 만들 특성 또는 요소 값은 W3C 사양에 따라 서식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-467">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="82440-468">자세한 내용은 W3C 사양을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="82440-468">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="82440-469">으로 캐스팅할 때의 동작은 lax는 <xref:System.DateTime> 특성 또는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-469">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="82440-470">값은 적절 하 게 변환할 특성 또는 요소 값의 형식이 W3C 사양 정확히 일치 하지 않더라도 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-470">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="82440-471">이 변환 연산자를 사용 하 여 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 에서 변환 하는 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-471">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="82440-472">다음 예제에서는 날짜 및 시간 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-472">The following example creates an element with date and time content.</span></span> <span data-ttu-id="82440-473">그 다음으로 캐스팅 <xref:System.DateTime> 는 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-473">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="82440-474">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-474">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-475">요소에 유효한 <see cref="T:System.DateTime" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-475">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-476"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-476">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-477"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.DateTimeOffset" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-477">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="82440-478">이 <see cref="T:System.Xml.Linq.XAttribute" />의 값을 <see cref="T:System.DateTimeOffset" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-478">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="82440-479">이 <see cref="T:System.DateTimeOffset" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-479">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-480">사용 하 여이 변환 연산자는 <xref:System.Xml.XmlConvert> 변환을 수행 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-480">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="82440-481">다음 예제에서는 날짜 및 시간 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-481">The following example creates an element with date and time content.</span></span> <span data-ttu-id="82440-482">다음에 캐스팅 <xref:System.DateTimeOffset> 는 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-482">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="82440-483">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-483">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-484">요소에 유효한 <see cref="T:System.DateTimeOffset" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-484">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-485"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-485">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-486"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Decimal" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-486">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="82440-487">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Decimal" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-487">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="82440-488">이 <see cref="T:System.Decimal" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-488">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-489">다음 예제에서는 10 진수 값을 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-489">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="82440-490">로 캐스팅 하 여 특성의 값을 검색 한 다음 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-490">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="82440-491">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-491">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-492">요소에 유효한 <see cref="T:System.Decimal" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-492">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-493"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-493">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-494"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Double" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-494">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="82440-495">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Double" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-495">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="82440-496">이 <see cref="T:System.Double" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-496">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="82440-497">다음 예제에서는 사용 하 여 특성 `double` 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-497">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="82440-498">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-498">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-499">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-499">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-500">요소에 유효한 <see cref="T:System.Double" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-500">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-501"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-501">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-502"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Guid" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-502">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="82440-503">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Guid" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-503">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="82440-504">이 <see cref="T:System.Guid" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-504">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-505">다음 예제에서는 내용으로 한 guid를 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-505">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="82440-506">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Guid>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-506">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-507">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-507">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-508">요소에 유효한 <see cref="T:System.Guid" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-508">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-509"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-509">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-510"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-510">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="82440-511">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Int32" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-511">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="82440-512">이 <see cref="T:System.Int32" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-512">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-513">다음 예제에서는 정수 콘텐츠 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-513">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="82440-514">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-514">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-515">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-515">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-516">요소에 유효한 <see cref="T:System.Int32" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-516">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-517"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-517">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-518"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Int64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-518">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="82440-519">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Int64" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-519">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="82440-520">이 <see cref="T:System.Int64" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-520">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-521">다음 예제에서는 정수 (long)와 콘텐츠 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-521">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="82440-522">로 캐스팅 하 여 요소의 값을 검색 한 다음 <xref:System.Int64>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-522">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-523">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-523">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-524">요소에 유효한 <see cref="T:System.Int64" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-524">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-525"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-525">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-526"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="82440-527">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Boolean" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="82440-528">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Boolean" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-528">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-529">변환할 때 <xref:System.Nullable%601> 의 <xref:System.Boolean> 특성 또는 요소에서 허용 되는 값은 "0", "1" 및 모든 문자열을 "true" 또는 "false" 후 트리밍을 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-529">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="82440-530">다음 예에서는 부울 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-530">The following example creates an element with boolean content.</span></span> <span data-ttu-id="82440-531">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-531">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-532">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-532">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-533">요소에 유효한 <see cref="T:System.Boolean" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-533">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-534"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.DateTime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-534">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="82440-535">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.DateTime" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-535">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="82440-536">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.DateTime" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-536">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-537">날짜 및 시간 콘텐츠가 있는 요소나 특성의 값 공간은 ISO 8601에 설명 된 시간과 날짜 밀접 한 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-537">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="82440-538">특성 또는 날짜 및 시간 콘텐츠를 포함 하는 요소를 만들 특성 또는 요소 값은 W3C 사양에 따라 서식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-538">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="82440-539">자세한 내용은 W3C 사양을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="82440-539">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="82440-540">으로 캐스팅할 때 동작은 lax는 <xref:System.Nullable%601> 의 <xref:System.DateTime> 특성 또는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-540">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="82440-541">값은 적절 하 게 변환할 특성 또는 요소 값의 형식이 W3C 사양 정확히 일치 하지 않더라도 <xref:System.Nullable%601> 의 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-541">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="82440-542">이 변환 연산자를 사용 하 여 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 에서 변환 하는 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-542">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="82440-543">다음 예제에서는 날짜 및 시간 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-543">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="82440-544">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.DateTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-544">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-545">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-545">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-546">요소에 유효한 <see cref="T:System.DateTime" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-546">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-547"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.DateTimeOffset" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-547">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="82440-548">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.DateTimeOffset" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-548">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="82440-549">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.DateTimeOffset" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-549">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-550">사용 하 여이 변환 연산자는 <xref:System.Xml.XmlConvert> 변환을 수행 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-550">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="82440-551">다음 예제에서는 날짜 및 시간 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-551">The following example creates an element with date and time content.</span></span> <span data-ttu-id="82440-552">다음에 캐스팅 <xref:System.Nullable%601> 의 <xref:System.DateTimeOffset> 는 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-552">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="82440-553">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-553">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-554">요소에 유효한 <see cref="T:System.DateTimeOffset" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-554">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-555"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Decimal" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-555">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="82440-556">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Decimal" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-556">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="82440-557">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Decimal" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-557">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-558">다음 예제에서는 10 진수 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-558">The following example creates an element with decimal content.</span></span> <span data-ttu-id="82440-559">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-559">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-560">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-560">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-561">요소에 유효한 <see cref="T:System.Decimal" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-561">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-562"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Double" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="82440-563">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Double" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="82440-564">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Double" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-564">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-565">다음 예제에서는 배정밀도 부동 소수점 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-565">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="82440-566">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-566">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-567">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-567">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-568">요소에 유효한 <see cref="T:System.Double" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-568">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-569"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Guid" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-569">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="82440-570">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Guid" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-570">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="82440-571">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Guid" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-571">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-572">다음 예제에서는 guid 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-572">The following example creates an element with guid content.</span></span> <span data-ttu-id="82440-573">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Guid>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-573">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-574">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-574">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-575">요소에 유효한 <see cref="T:System.Guid" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-575">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-576"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-576">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="82440-577">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Int32" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-577">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="82440-578">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Int32" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-578">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-579">다음 예제에서는 부호 없는 정수 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-579">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="82440-580">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-580">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="82440-581">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-581">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-582">요소에 유효한 <see cref="T:System.Int32" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-582">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-583"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Int64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-583">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="82440-584">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Int64" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-584">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="82440-585">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Int64" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-585">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-586">다음 예제에서는 정수 (long) 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-586">The following example creates an element with long integer content.</span></span> <span data-ttu-id="82440-587">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Int64>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-587">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-588">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-588">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-589">요소에 유효한 <see cref="T:System.Int64" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-589">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-590"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.Single" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-590">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="82440-591">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.Single" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-591">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="82440-592">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.Single" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-592">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-593">다음 예제에서는 단 정밀도 부동 소수점 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-593">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="82440-594">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-594">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-595">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-595">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-596">요소에 유효한 <see cref="T:System.Single" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-596">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-597"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-597">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="82440-598">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.TimeSpan" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-598">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="82440-599">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.TimeSpan" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-599">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-600">시간 범위 콘텐츠를 포함 하는 요소나 특성의 값 공간은 밀접 기간 콘텐츠를 ISO 8601에 설명 된 대로 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-600">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="82440-601">특성 또는 시간 범위 콘텐츠를 포함 하는 요소를 만들 특성 또는 요소 값은 W3C 사양에 따라 서식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-601">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="82440-602">자세한 내용은 W3C 사양을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="82440-602">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="82440-603">으로 캐스팅할 때의 동작은 lax는 <xref:System.Nullable%601> 의 <xref:System.TimeSpan> 특성 또는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-603">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="82440-604">값은 적절 하 게 변환할 특성 또는 요소 값의 형식이 W3C 사양 정확히 일치 하지 않더라도 <xref:System.Nullable%601> 의 <xref:System.TimeSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-604">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="82440-605">다음 예제에서는 요소 콘텐츠가 있는 만듭니다 시간 범위.</span><span class="sxs-lookup"><span data-stu-id="82440-605">The following example creates an element with time span content.</span></span> <span data-ttu-id="82440-606">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.TimeSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-606">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-607">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-607">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-608">요소에 유효한 <see cref="T:System.TimeSpan" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-608">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-609"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.UInt32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-609">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="82440-610">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.UInt32" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-610">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="82440-611">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.UInt32" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-611">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-612">다음 예제에서는 부호 없는 정수 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-612">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="82440-613">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.UInt32>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-613">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-614">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-614">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-615">요소에 유효한 <see cref="T:System.UInt32" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-615">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-616"><see cref="T:System.Xml.Linq.XElement" />의 <see cref="T:System.Nullable`1" />로 캐스팅할 <see cref="T:System.UInt64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-616">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="82440-617">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Nullable`1" />의 <see cref="T:System.UInt64" />로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-617">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="82440-618">이 <see cref="T:System.Nullable`1" />의 콘텐츠가 들어 있는 <see cref="T:System.UInt64" />의 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-618">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-619">다음 예제에서는 부호 없는 정수 (long) 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-619">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="82440-620">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Nullable%601> 의 <xref:System.UInt64>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-620">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="82440-621">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-621">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-622">요소에 유효한 <see cref="T:System.UInt64" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-622">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-623"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.Single" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-623">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="82440-624">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.Single" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-624">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="82440-625">이 <see cref="T:System.Single" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-625">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-626">다음 예제에서는 단 정밀도 부동 소수점 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-626">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="82440-627">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-627">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-628">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-628">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-629">요소에 유효한 <see cref="T:System.Single" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-629">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-630"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-630">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-631"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-631">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="82440-632">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.String" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-632">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="82440-633">이 <see cref="T:System.String" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-633">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-634">경우는 <xref:System.Xml.Linq.XElement> 자식이, 모든 요소의 텍스트 및 하위 항목의 텍스트의 연결 된 문자열 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-634">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="82440-635">다음 예제에서는 문자열 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-635">The following example creates an element with string content.</span></span> <span data-ttu-id="82440-636">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-636">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="82440-637">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-637">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-638"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-638">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="82440-639">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.TimeSpan" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-639">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="82440-640">이 <see cref="T:System.TimeSpan" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-640">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-641">시간 범위 콘텐츠를 포함 하는 요소나 특성의 값 공간은 밀접 기간 콘텐츠를 ISO 8601에 설명 된 대로 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-641">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="82440-642">특성 또는 시간 범위 콘텐츠를 포함 하는 요소를 만들 특성 또는 요소 값은 W3C 사양에 따라 서식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-642">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="82440-643">자세한 내용은 W3C 사양을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="82440-643">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="82440-644">으로 캐스팅할 때의 동작은 lax는 <xref:System.TimeSpan> 특성 또는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-644">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="82440-645">값은 적절 하 게 변환할 특성 또는 요소 값의 형식이 W3C 사양 정확히 일치 하지 않더라도 <xref:System.TimeSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-645">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="82440-646">다음 예제에서는 요소 콘텐츠가 있는 만듭니다 시간 범위.</span><span class="sxs-lookup"><span data-stu-id="82440-646">The following example creates an element with time span content.</span></span> <span data-ttu-id="82440-647">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.TimeSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-647">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-648">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-648">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-649">요소에 유효한 <see cref="T:System.TimeSpan" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-649">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-650"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-650">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-651"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.UInt32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="82440-652">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.UInt32" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="82440-653">이 <see cref="T:System.UInt32" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-653">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="82440-654">다음 예제에서는 부호 없는 정수 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-654">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="82440-655">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.UInt32>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-655">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-656">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-656">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-657">요소에 유효한 <see cref="T:System.UInt32" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-657">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-658"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-658">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="82440-659"><see cref="T:System.Xml.Linq.XElement" />으로 캐스팅할 <see cref="T:System.UInt64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-659">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="82440-660">이 <see cref="T:System.Xml.Linq.XElement" />의 값을 <see cref="T:System.UInt64" />으로 캐스팅합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-660">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="82440-661">이 <see cref="T:System.UInt64" />의 콘텐츠가 들어 있는 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-661">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="82440-662">다음 예제에서는 부호 없는 정수 (long) 콘텐츠가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-662">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="82440-663">로 캐스팅 하 여 값을 검색 한 다음 <xref:System.UInt64>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-663">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="82440-664">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-664">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="82440-665">요소에 유효한 <see cref="T:System.UInt64" /> 값이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="82440-665">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-666"><paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-666">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-667">XML이 들어 있는 문자열에서 <see cref="T:System.Xml.Linq.XElement" />를 로드하고, 선택적으로 공백 및 줄 정보를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-667">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="82440-668">XML이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-668">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <summary><span data-ttu-id="82440-669">XML이 들어 있는 문자열에서 <see cref="T:System.Xml.Linq.XElement" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-669">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span></span></summary>
        <returns><span data-ttu-id="82440-670">XML이 들어 있는 문자열을 사용하여 채운 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-670">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-671">이 메서드는 공백을 유지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-671">This method does not preserve white space.</span></span> <span data-ttu-id="82440-672">오버 로드를 사용 하 여 XML 트리의 공백을 유지 하려면는 <xref:System.Xml.Linq.XElement.Parse%2A> 를 받는 메서드에 <xref:System.Xml.Linq.LoadOptions> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-672">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="82440-673">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-673">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="82440-674">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-674">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-675">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-675">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-676">다음 예제에서는 XML이 포함 된 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-676">The following example creates a string that contains XML.</span></span> <span data-ttu-id="82440-677">다음으로 문자열을 구문 분석 한 <xref:System.Xml.Linq.XElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-677">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="82440-678">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-678">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="82440-679">XML이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-679">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <param name="options"><span data-ttu-id="82440-680">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <see cref="T:System.Xml.Linq.LoadOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-680">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="82440-681">XML이 들어 있는 문자열에서 <see cref="T:System.Xml.Linq.XElement" />를 로드하고, 선택적으로 공백 및 줄 정보를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-681">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="82440-682">XML이 들어 있는 문자열을 사용하여 채운 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-682">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-683">소스 XML 식인 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-683">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="82440-684">노드 형식의 <xref:System.Xml.Linq.XText> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="82440-684">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-685">소스 XML 식인 경우 설정 하지 않으면는 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 대 한 플래그가 `options` 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-685">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="82440-686">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-686">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="82440-687">XML 원본이 들여쓴 없는 경우 설정의 <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> 에 플래그가 지정 `options` 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-687">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="82440-688">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-688">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="82440-689">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-689">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="82440-690">설정 <xref:System.Xml.Linq.LoadOptions.SetBaseUri> 에서 구문 분석 시에 영향을 미치지 것입니다는 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-690">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="82440-691"><xref:System.Xml.XmlReader> 여부 유효한 줄 정보가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-691">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="82440-692">설정한 경우 <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, 로부터 보고 되는 정보 줄에서에서 줄 정보를 XML 트리의 설정 됩니다는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-692">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="82440-693">설정 하는 경우 성능이 저하 될는 <xref:System.Xml.Linq.LoadOptions.SetLineInfo> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-693">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="82440-694">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-694">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="82440-695">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-695">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="82440-696">XML의 로드 기능을 LINQ 작성 시 사용 된 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-696">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="82440-697">에 의해 throw 되는 모든 예외는 잡 따라서는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Xml.XmlReader> 읽기 및 문서를 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="82440-697">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-698">다음 예제에서는 문자열로 문자열을 구문 분석 하는 <xref:System.Xml.Linq.XElement> 두 가지 방법으로: 공백 유지 하 고 서로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-698">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="82440-699">다음 쿼리를 사용 하 여 결과 XML 트리의 공백 노드 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-699">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="82440-700">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-700">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="82440-701">다음 예제에서는 문자열을 구문 분석 하는 대로 줄 정보를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-701">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="82440-702">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-702">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-703">이 <see cref="T:System.Xml.Linq.XElement" />에서 노드 및 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-703">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-704">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-704">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-705">다음 예제에서는 특성 및 자식 요소를 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-705">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="82440-706">다음 특성 및 자식 요소를 모두 제거 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-706">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-707">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-707">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-708">이 <see cref="T:System.Xml.Linq.XElement" />의 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-708">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-709">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-709">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-710">다음 예제에서는 특성 및 자식 요소를 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-710">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="82440-711">다음 특성을 제거 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-711">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="82440-712">자식 요소에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-712">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-713">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-713">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-714">이 요소의 자식 노드 및 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-714">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-715">이 메서드는 스냅숏 의미 체계를 사용-현재 요소의 콘텐츠를 새 내용으로 교체 하기 전에 새 콘텐츠의 별도 복사본 즉, 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-715">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="82440-716">즉, 현재 요소의 내용 쿼리 및 쿼리 결과 사용 하 여 지정 된 새 내용으로 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-716">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="82440-717">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-717">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-718">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-718">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-719">다음 예제에서는 쿼리 결과 요소 내용 바꿉니다이 메서드를 LINQ 쿼리의 결과 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-719">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="82440-720">콘텐츠를 대체 하는 요소를 쿼리 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-720">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="82440-721">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-721">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="82440-722">이 요소의 자식 노드 및 특성을 대체할 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-722">The content that will replace the child nodes and attributes of this element.</span></span></param>
        <summary><span data-ttu-id="82440-723">이 요소의 자식 노드 및 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-723">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-724">이 메서드는 먼저 기존 콘텐츠 및 특성을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-724">This method first removes existing content and attributes.</span></span> <span data-ttu-id="82440-725">그런 다음 지정 된 추가 `content`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-725">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="82440-726">이 메서드는 스냅숏 의미 체계를 사용-현재 요소의 콘텐츠를 새 내용으로 교체 하기 전에 새 콘텐츠의 별도 복사본 즉, 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-726">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="82440-727">즉, 현재 요소의 내용 쿼리 및 쿼리 결과 사용 하 여 지정 된 새 내용으로 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-727">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="82440-728">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-728">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-729">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-729">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-730">다음 예제에서는이 방법을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-730">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-731">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-731">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="82440-732">콘텐츠 개체의 매개 변수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-732">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="82440-733">이 요소의 자식 노드 및 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-733">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-734">이 메서드는 먼저 기존 콘텐츠 및 특성을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-734">This method first removes existing content and attributes.</span></span> <span data-ttu-id="82440-735">그런 다음 지정 된 추가 `content`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-735">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="82440-736">이 메서드는 스냅숏 의미 체계를 사용-현재 요소의 콘텐츠를 새 내용으로 교체 하기 전에 새 콘텐츠의 별도 복사본 즉, 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-736">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="82440-737">즉, 현재 요소의 내용 쿼리 및 쿼리 결과 사용 하 여 지정 된 새 내용으로 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-737">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="82440-738">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-738">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-739">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-739">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-740">다음 예제에서는 쿼리 결과 요소 내용 바꿉니다이 메서드를 LINQ 쿼리의 결과 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-740">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-741">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-742">이 요소의 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-742">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-743">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-743">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="82440-744">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-744">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-745">다음 예제에서는 세 개의 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-745">The following example creates an element with three attributes.</span></span> <span data-ttu-id="82440-746">다음이 메서드를 사용 하 여 단일 특성으로 요소 특성을 모두 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-746">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-747">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-747">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="82440-748">이 요소의 특성을 대체할 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-748">The content that will replace the attributes of this element.</span></span></param>
        <summary><span data-ttu-id="82440-749">이 요소의 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-749">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-750">이 메서드는 먼저 기존 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-750">This method first removes existing attributes.</span></span> <span data-ttu-id="82440-751">그런 다음 지정 된 추가 `content`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-751">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="82440-752">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-752">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-753">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-753">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-754">다음 예제에서는 세 개의 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-754">The following example creates an element with three attributes.</span></span> <span data-ttu-id="82440-755">다음이 메서드를 사용 하 여 단일 특성으로 요소 특성을 모두 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-755">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-756">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-756">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="82440-757">콘텐츠 개체의 매개 변수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-757">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="82440-758">이 요소의 특성을 지정된 콘텐츠로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-758">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-759">이 메서드는 먼저 기존 특성을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-759">This method first removes existing attributes.</span></span> <span data-ttu-id="82440-760">그런 다음 지정 된 추가 `content`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-760">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="82440-761">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. [유효한 콘텐츠 XElement 및 XDocument 개체](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-761">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="82440-762">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-762">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-763">다음 예제에서는 세 개의 특성이 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-763">The following example creates an element with three attributes.</span></span> <span data-ttu-id="82440-764">그런 다음 다른 특성을 가진 특성을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-764">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-765">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-765">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82440-766">이 요소의 내부 XML 트리를 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-766">Serialize this element's underlying XML tree.</span></span> <span data-ttu-id="82440-767">출력을 파일, <see cref="T:System.Xml.XmlTextWriter" />, <see cref="T:System.IO.TextWriter" /> 또는 <see cref="T:System.Xml.XmlWriter" />로 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-767">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span></span> <span data-ttu-id="82440-768">또한 서식 지정(들여쓰기)을 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-768">Optionally, formatting (indenting) can be disabled.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="82440-769">이 <see cref="T:System.Xml.Linq.XElement" />를 출력할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-769">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <summary><span data-ttu-id="82440-770">이 <see cref="T:System.Xml.Linq.XElement" />를 지정된 <see cref="T:System.IO.Stream" />에 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-770">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-771">serialize 된 XML은 들여씁니다.</span><span class="sxs-lookup"><span data-stu-id="82440-771">The serialized XML will be indented.</span></span> <span data-ttu-id="82440-772">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-772">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="82440-773">이 메서드의 동작은 무효 공백은 유지 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-773">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="82440-774">오버 로드를 사용 하 여 공백을 제어 하려면 <xref:System.Xml.Linq.XElement.Save%2A> 생긴다는 <xref:System.Xml.Linq.SaveOptions> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-774">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="82440-775">사용 하 여 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 된 들여쓰지 않은 XML을 저장 하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-775">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="82440-776">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-776">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="82440-777">사용 된 <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-777">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="82440-778"><see cref="T:System.IO.TextWriter" />를 쓸 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-778">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="82440-779">이 요소를 <see cref="T:System.IO.TextWriter" />로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-779">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-780">serialize 된 XML은 들여씁니다.</span><span class="sxs-lookup"><span data-stu-id="82440-780">The serialized XML will be indented.</span></span> <span data-ttu-id="82440-781">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-781">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="82440-782">이 메서드의 동작은 공백은 유지 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-782">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="82440-783">오버 로드를 사용 하 여 공백을 제어 하려면 <xref:System.Xml.Linq.XElement.Save%2A> 지정할 수 있는 <xref:System.Xml.Linq.SaveOptions> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-783">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="82440-784">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-784">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-785">다음 예제에서는 <xref:System.Xml.Linq.XElement>에 문서를 저장 하는 <xref:System.IO.StringWriter>, 한 다음 문자열을 콘솔에 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-785">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="82440-786">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-786">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="82440-787">파일 이름이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-787">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <summary><span data-ttu-id="82440-788">이 요소를 파일로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-788">Serialize this element to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-789">serialize 된 XML은 들여씁니다.</span><span class="sxs-lookup"><span data-stu-id="82440-789">The serialized XML will be indented.</span></span> <span data-ttu-id="82440-790">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-790">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="82440-791">이 메서드의 동작은 해당 무효 공백이 XML 트리의 노드를에서 유지 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-791">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="82440-792">오버 로드를 사용 하 여 공백을 제어 하려면 <xref:System.Xml.Linq.XElement.Save%2A> 지정할 수 있는 <xref:System.Xml.Linq.SaveOptions> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-792">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="82440-793">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-793">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-794">다음 예제에서는 <xref:System.Xml.Linq.XElement>, 파일에 문서를 저장 한 다음 파일을 콘솔에 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-794">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="82440-795">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-795">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="82440-796"><see cref="T:System.Xml.XmlWriter" />를 쓸 <see cref="T:System.Xml.Linq.XElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-796">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="82440-797">이 요소를 <see cref="T:System.Xml.XmlWriter" />로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-797">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82440-798">다음 예제에서는 <xref:System.Xml.Linq.XElement>를 <xref:System.Xml.XmlWriter>에 저장하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="82440-798">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="82440-799">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-799">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="82440-800">이 <see cref="T:System.Xml.Linq.XElement" />를 출력할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-800">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <param name="options"><span data-ttu-id="82440-801">서식 지정 동작을 지정하는 <see cref="T:System.Xml.Linq.SaveOptions" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-801">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="82440-802">이 <see cref="T:System.Xml.Linq.XElement" />를 지정된 <see cref="T:System.IO.Stream" />에 출력하고 선택적으로 형식 지정 동작을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-802">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-803">기본적으로는 `options` 로 설정 <xref:System.Xml.Linq.SaveOptions.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-803">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="82440-804">이 옵션은 모든 불필요 한 공백이 제거 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-804">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="82440-805">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 플래그에 대 한 `options`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-805">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="82440-806">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-806">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="82440-807">사용 하 여 <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-807">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="82440-808">XML을 출력할 <see cref="T:System.IO.TextWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-808">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span></span></param>
        <param name="options"><span data-ttu-id="82440-809">형식 지정 동작을 지정하는 <see cref="T:System.Xml.Linq.SaveOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-809">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="82440-810">이 요소를 <see cref="T:System.IO.TextWriter" />로 serialize하고, 선택적으로 형식 지정을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-810">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-811">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 플래그에 대 한 `options`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-811">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="82440-812">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-812">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="82440-813">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 플래그에 대 한 `options`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-813">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="82440-814">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-814">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="82440-815">이것이 기본 동작 및 오버 로드의 동작에서 <xref:System.Xml.Linq.XElement.Save%2A> 사용 하지 않는 메서드에 `options` 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-815">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="82440-816">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-816">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-817">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="82440-817">The following example shows two uses of this method.</span></span> <span data-ttu-id="82440-818">처음 사용할 공백을 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-818">The first use preserves white space.</span></span> <span data-ttu-id="82440-819">두 번째 직렬화는 <xref:System.Xml.Linq.XElement> 서식 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-819">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="82440-820">문서에 공백이 없습니다 생성, 때문에 들여쓰기 되지 않고 XML 출력 공백을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-820">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="82440-821">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-821">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="82440-822">파일 이름이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-822">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <param name="options"><span data-ttu-id="82440-823">형식 지정 동작을 지정하는 <see cref="T:System.Xml.Linq.SaveOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-823">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="82440-824">이 요소를 파일로 serialize하고, 선택적으로 서식 지정을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-824">Serialize this element to a file, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-825">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 플래그에 대 한 `options`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-825">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="82440-826">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-826">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="82440-827">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <xref:System.Xml.Linq.SaveOptions.DisableFormatting> 플래그에 대 한 `options`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-827">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="82440-828">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-828">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="82440-829">이것이 기본 동작 및 오버 로드의 동작에서 <xref:System.Xml.Linq.XElement.Save%2A> 사용 하지 않는 메서드에 `options` 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-829">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="82440-830">자세한 내용은 참조 [로드 하거나 XML 구문 분석 하는 동안 공백을 유지](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) 및 [유지 공백 동안 직렬화](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-830">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-831">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="82440-831">The following example shows two uses of this method.</span></span> <span data-ttu-id="82440-832">처음 사용할 공백을 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-832">The first use preserves white space.</span></span> <span data-ttu-id="82440-833">두 번째 직렬화는 <xref:System.Xml.Linq.XElement> 서식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-833">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="82440-834">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-834">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-835">변경할 특성의 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-835">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span></span></param>
        <param name="value"><span data-ttu-id="82440-836">특성에 할당할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-836">The value to assign to the attribute.</span></span> <span data-ttu-id="82440-837">값이 <see langword="null" />이면 특성이 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-837">The attribute is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="82440-838">그렇지 않으면 값이 문자열 표현으로 변환되어 특성의 <see cref="P:System.Xml.Linq.XAttribute.Value" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-838">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span></span></param>
        <summary><span data-ttu-id="82440-839">특성 값을 설정하거나 특성을 추가 또는 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-839">Sets the value of an attribute, adds an attribute, or removes an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-840">이 메서드는 쉽게 특성 집합으로 이름/값 쌍의 목록을 유지 관리할 수 있도록 디자인 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-840">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="82440-841">목록을 유지 관리, 쌍을 추가, 수정 쌍 또는 쌍을 삭제 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-841">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="82440-842">존재 하지 않는 이름 특성으로 전달 하는이 메서드를 호출 하는 경우이 메서드는 사용자에 대 한 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-842">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="82440-843">기존 특성의 이름을 전달이 메서드를 호출 하는 경우이 메서드는 값을 지정 하는 특성의 값을 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-843">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="82440-844">전달 하는 경우 `null` 에 대 한 `value`,이 메서드는 특성을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-844">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="82440-845">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-845">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="82440-846">값은 지정 된 이름의 특성에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-846">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="82440-847">지정한 이름 가진 특성이 없는 경우에 새 특성이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-847">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="82440-848">값이 `null`, 지정한 이름 가진 특성이 있는 경우 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-848">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="82440-849">자세한 내용은 참조 [이름/값 쌍 유지](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-849">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-850">다음 예제에서는 특성을 가진 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-850">The following example creates an element with an attribute.</span></span> <span data-ttu-id="82440-851">다음이 메서드를 사용 하 여 특성의 내용을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="82440-851">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-852">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-852">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82440-853"><paramref name="value" />가 <see cref="T:System.Xml.Linq.XObject" />의 인스턴스인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-853">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82440-854">변경할 자식 요소의 이름이 들어 있는 <see cref="T:System.Xml.Linq.XName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-854">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span></span></param>
        <param name="value"><span data-ttu-id="82440-855">자식 요소에 할당할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-855">The value to assign to the child element.</span></span> <span data-ttu-id="82440-856">값이 <see langword="null" />이면 자식 요소가 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-856">The child element is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="82440-857">그렇지 않으면 값이 문자열 표현으로 변환되어 자식 요소의 <see cref="P:System.Xml.Linq.XElement.Value" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-857">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span></span></param>
        <summary><span data-ttu-id="82440-858">자식 요소의 값을 설정하거나 자식 요소를 추가 또는 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-858">Sets the value of a child element, adds a child element, or removes a child element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-859">이 메서드는 쉽게 자식 요소 집합으로 이름/값 쌍의 목록을 유지 관리할 수 있도록 디자인 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-859">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="82440-860">목록을 유지 관리, 쌍을 추가, 수정 쌍 또는 쌍을 삭제 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-860">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="82440-861">존재 하지 않는 이름을 전달 하는 자식 요소로이 메서드를 호출 하는 경우이 메서드는 자식 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-861">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="82440-862">기존 자식 요소의 이름을 전달이 메서드를 호출 하는 경우이 메서드는 자식 요소를 지정 하는 값의 값을 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-862">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="82440-863">전달 하는 경우 `null` 에 대 한 `value`,이 메서드는 자식 요소를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-863">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="82440-864">이 메서드는 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-864">This method will raise events.</span></span>  
  
 <span data-ttu-id="82440-865">값은 지정 된 이름의 첫 번째 자식 요소에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-865">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="82440-866">지정한 이름 가진 자식 요소가 없으면 새 자식 요소가 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-866">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="82440-867">값이 null 이면 지정한 이름 가진 첫 번째 자식 요소가 있는 경우 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-867">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="82440-868">이 메서드는 지정 된 자식 요소에 자식 노드 또는 특성 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82440-868">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="82440-869">이 메서드는에서 파생 된 개체 경우 예외를 throw <xref:System.Xml.Linq.XObject> 변수로 전달 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-869">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="82440-870">자세한 내용은 참조 [이름/값 쌍 유지](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-870">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-871">다음 예제에서는 자식 요소가 있는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-871">The following example creates an element with a child element.</span></span> <span data-ttu-id="82440-872">다음이 메서드를 사용 하 여 자식 요소의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-872">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-873">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-873">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82440-874"><paramref name="value" />가 <see cref="T:System.Xml.Linq.XObject" />의 인스턴스인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-874">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="82440-875">이 요소에 할당할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-875">The value to assign to this element.</span></span> <span data-ttu-id="82440-876">값은 문자열 표현으로 변환되어 특성의 <see cref="P:System.Xml.Linq.XElement.Value" /> 속성에 할당됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-876">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span></span></param>
        <summary><span data-ttu-id="82440-877">이 요소의 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-877">Sets the value of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-878">이 메서드로 인해 발생는 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-878">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="82440-879">파생 되는 클래스의 인스턴스를 전달 올바르지 <xref:System.Xml.Linq.XObject>와 같은 <xref:System.Xml.Linq.XElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-879">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-880">다음 예제에서는 자식 요소를 포함 하는 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="82440-880">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="82440-881">그런 다음이 메서드를 사용 하 여 요소의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-881">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="82440-882">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-882">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82440-883"><paramref name="value" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-883">The <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82440-884"><paramref name="value" />가 <see cref="T:System.Xml.Linq.XObject" />인 경우</span><span class="sxs-lookup"><span data-stu-id="82440-884">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82440-885">이 개체의 XML 표현을 설명하는 XML 스키마 정의를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="82440-885">Gets an XML schema definition that describes the XML representation of this object.</span></span></summary>
        <returns><span data-ttu-id="82440-886"><see cref="T:System.Xml.Schema.XmlSchema" /> 메서드에 의해 생성되고 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 메서드가 사용하는 개체의 XML 표현을 설명하는 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-886">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-887">이 메서드는의 구현의 일부는 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-887">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="82440-888">이 메서드는 LINQ to XML 개체에 포함 된 개체 그래프를 직렬화 하는 중에 내부적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-888">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="82440-889">LINQ to XML 개체를 포함 하는 개체 그래프를 직렬화 하는 작업의 예제를 보려면 [Serializing 개체 XElement 개체를 포함 하는 그래프](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-889">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="82440-890">개체를 deserialize할 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-890">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="82440-891">개체의 XML 표현에서 개체를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-891">Generates an object from its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-892">이 메서드는의 구현의 일부는 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-892">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="82440-893">이 메서드는 LINQ to XML 개체에 포함 된 개체 그래프를 직렬화 하는 중에 내부적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-893">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="82440-894">LINQ to XML 개체를 포함 하는 개체 그래프를 직렬화 하는 작업의 예제를 보려면 [Serializing 개체 XElement 개체를 포함 하는 그래프](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-894">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="82440-895">이 개체를 serialize할 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-895">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span></span></param>
        <summary><span data-ttu-id="82440-896">개체를 XML 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-896">Converts an object into its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-897">이 메서드는 LINQ to XML 개체에 포함 된 개체 그래프를 마샬링하기 위한 내부적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-897">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="82440-898">LINQ to XML 개체를 포함 하는 개체 그래프를 직렬화 하는 작업의 예제를 보려면 [Serializing 개체 XElement 개체를 포함 하는 그래프](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-898">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82440-899">이 요소의 연결된 텍스트 콘텐츠를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-899">Gets or sets the concatenated text contents of this element.</span></span></summary>
        <value><span data-ttu-id="82440-900">이 요소의 모든 텍스트 콘텐츠가 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-900">A <see cref="T:System.String" /> that contains all of the text content of this element.</span></span> <span data-ttu-id="82440-901">텍스트 노드가 여러 개인 경우 노드가 결합됩니다.</span><span class="sxs-lookup"><span data-stu-id="82440-901">If there are multiple text nodes, they will be concatenated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82440-902">이 속성을 사용 하면 가져오거나 설정할 수는 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-902">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="82440-903">이 속성에서 발생 하는 설정의 <xref:System.Xml.Linq.XObject.Changed> 및 <xref:System.Xml.Linq.XObject.Changing> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-903">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="82440-904">요소의 값을 가져오는 싶지만 존재 하는지 확실 하지 않은 경우 명시적 변환 연산자를 사용 하 고 같은 nullable 형식으로 요소를 할당 하는 편리한 방법을 `string` 또는 <xref:System.Nullable%601> 의 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-904">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="82440-905">Nullable 형식 설정 되어 요소가 없는 경우 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-905">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="82440-906">반면,이 속성을 사용 하려는 경우 있어야 하는 <xref:System.Xml.Linq.XContainer.Element%2A> 메서드 반환 하지 않습니다 `null` 이 속성에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-906">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82440-907">다음 예제에서는이 속성을 사용 하 여 혼합 된 콘텐츠가 있는 요소의 텍스트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-907">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="82440-908">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-908">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="82440-909">이 메서드가 쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="82440-909">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="82440-910">이 요소를 <see cref="T:System.Xml.XmlWriter" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="82440-910">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82440-911">다음 예제에서는 작성 하는 방법을 보여 줍니다.는 <xref:System.Xml.Linq.XElement> 에 <xref:System.Xml.XmlWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-911">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="82440-912">이 예제에서는 XML 선언을 작성 하지 않은 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-912">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="82440-913">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="82440-913">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>