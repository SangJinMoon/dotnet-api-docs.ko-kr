<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XDocument.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d79ed174f5e5f1d678e11f3ea4857185ee811f59.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d79ed174f5e5f1d678e11f3ea4857185ee811f59</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Represents an XML document.</source>
          <target state="translated">XML 문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>For the components and usage of an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object, see <bpt id="p1">&lt;see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467"&gt;</bpt>XDocument Class Overview<ept id="p1">&lt;/see&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체의 구성 요소 및 사용에 대한 자세한 내용은 <bpt id="p1">&lt;see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467"&gt;</bpt>XDocument 클래스 개요<ept id="p1">&lt;/see&gt;</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">유효한 콘텐츠에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 참조 <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">다음 예제에서는 문서를 만들고 메모와 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">그런 다음 쿼리의 결과 사용 하 여 다른 문서를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Overloaded constructors enable you to create a new empty <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>; to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with some specified initial content; and to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> as a copy of another <ph id="ph4">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> object.</source>
          <target state="translated">오버 로드 된 생성자를 사용 하면 비어 있는 새를 만들 수 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>; 만들지는 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 일부 지정 된 초기 콘텐츠를 사용 하 고 만들 수는 <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 의 다른 복사본으로 <ph id="ph4">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>를 만들어야 하는 경우는 많지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">@FSHO3@대신 일반적으로 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 루트 노드를 사용하여 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">문서를 만들어야 하는 특정 요구 사항(예를 들어, 최상위 수준에서 처리 명령과 주석을 만들어야 하거나 문서 형식을 지원해야 하는 경우)이 없는 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>를 루트 노드로 사용하는 것이 더 편리한 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">유효한 콘텐츠에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 참조 <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">다음 예제에서는 문서를 만들고 메모와 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">그런 다음 쿼리의 결과 사용 하 여 다른 문서를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>를 만들어야 하는 경우는 많지 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">@FSHO3@대신 일반적으로 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 루트 노드를 사용하여 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">문서를 만들어야 하는 특정 요구 사항(예를 들어, 최상위 수준에서 처리 명령과 주석을 만들어야 하거나 문서 형식을 지원해야 하는 경우)이 없는 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>를 루트 노드로 사용하는 것이 더 편리한 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">유효한 콘텐츠에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 참조 <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>The following example creates a new document, and then adds a comment and an element to it.</source>
          <target state="translated">다음 예제에서는 새 문서를 만들고 메모와 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>A parameter list of content objects to add to this document.</source>
          <target state="translated">이 문서에 추가할 콘텐츠 개체의 매개 변수 목록입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class with the specified content.</source>
          <target state="translated">지정된 콘텐츠를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>를 만들어야 하는 경우는 많지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">@FSHO3@대신 일반적으로 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 루트 노드를 사용하여 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">문서를 만들어야 하는 특정 요구 사항(예를 들어, 최상위 수준에서 처리 명령과 주석을 만들어야 하거나 문서 형식을 지원해야 하는 경우)이 없는 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>를 루트 노드로 사용하는 것이 더 편리한 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">유효한 콘텐츠에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 참조 <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">다음 예제에서는 문서를 만들고 메모와 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">그런 다음 쿼리의 결과 사용 하 여 다른 문서를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that will be copied.</source>
          <target state="translated">복사할 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class from an existing <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체를 사용하여 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>You use this constructor to make a deep copy of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">이 생성자를 사용 하 여의 전체 복사본을 만들기는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>This constructor traverses all nodes and attributes in the document specified in the <ph id="ph1">`other`</ph> parameter, and creates copies of all nodes as it assembles the newly initialized <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">이 생성자는 모든 노드 및 특성에 지정 된 문서에서 트래버스하는 <ph id="ph1">`other`</ph> 매개 변수를 새로 초기화 된 조합 하는 대로 모든 노드 복사본을 만들어 및 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> for the document.</source>
          <target state="translated">문서의 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>The content of the document.</source>
          <target state="translated">문서의 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> and content.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 및 콘텐츠를 사용하여 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>를 만들어야 하는 경우는 많지 않습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">@FSHO3@대신 일반적으로 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 루트 노드를 사용하여 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">문서를 만들어야 하는 특정 요구 사항(예를 들어, 최상위 수준에서 처리 명령과 주석을 만들어야 하거나 문서 형식을 지원해야 하는 경우)이 없는 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>를 루트 노드로 사용하는 것이 더 편리한 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">유효한 콘텐츠에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 참조 <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>The following example uses this constructor to create a document.</source>
          <target state="translated">다음 예제에서는이 생성자를 사용 하 여 문서를 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Gets or sets the XML declaration for this document.</source>
          <target state="translated">이 문서의 XML 선언을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> that contains the XML declaration for this document.</source>
          <target state="translated">이 문서의 XML 선언이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Sometimes you have to create an XML declaration for a document.</source>
          <target state="translated">경우에 따라 문서는 XML 선언을 해야 할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>If you want to indicate that a document is standalone, you must use this property.</source>
          <target state="translated">독립 실행형 문서 임을 나타내려면 하려는 경우이 속성을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <ph id="ph1">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph>.</source>
          <target state="translated">인코딩이 u t f-8 보다 다른 문서를 인코드 하려는 경우 통해 인코딩을 지정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Another approach for encoding a document is to specify the encoding on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> that you pass to LINQ to XML for writing.</source>
          <target state="translated">문서 인코딩에 대 한 또 다른 방법은에 인코딩을 지정 하는 것는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 쓰기를 위한 LINQ to XML 전달 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>The following example uses this property to retrieve the XML declaration of a document.</source>
          <target state="translated">다음 예제에서는이 속성을 사용 하 여 XML 선언이 문서를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>Gets the Document Type Definition (DTD) for this document.</source>
          <target state="translated">이 문서의 DTD(문서 종류 정의)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocumentType" /&gt;</ph> that contains the DTD for this document.</source>
          <target state="translated">이 문서의 DTD가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocumentType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides limited support for DTDs.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> Dtd에 대 한 제한 된 지원을 제공합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>You can populate an XML tree with an XML document that contains a DTD.</source>
          <target state="translated">DTD가 포함 된 XML 문서와 XML 트리를 채울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>The XML tree will then contain a <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.DocumentType%2A&gt;</ph> node.</source>
          <target state="translated">XML 트리를 다음으로 들어갑니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.DocumentType%2A&gt;</ph> 노드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>When you serialize or save the tree, the DTD will also be serialized.</source>
          <target state="translated">Serialize 하거나 트리를 저장 하는 경우에 DTD 직렬화 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> will expand any entities in the DTD.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> DTD의 모든 엔터티를 확장 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</source>
          <target state="translated">Serialize 하거나 XML 트리를 저장 하는 경우 엔터티 참조가 저장 되지 않습니다. 대신, 노드는 엔터티 참조 엔터티의 텍스트로 함께 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</source>
          <target state="translated">DTD에 기본 특성을 포함 하는 경우 일반적인 특성으로 XML 트리의 특성 만들어집니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>By default, <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> does not validate a document based on its DTD.</source>
          <target state="translated">기본적으로 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> DTD에 따라 문서의 유효성을 검사 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>To validate a document based on a DTD, create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> that will validate based on a DTD, and then create an XML tree from the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">DTD에 따라 문서의 유효성을 검사 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 은 유효성을 검사 하는 DTD에 따라 한 다음에서 XML 트리를 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>The following example creates a document that contains an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 포함 된 문서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>Visual Basic does not support document types within XML literals.</source>
          <target state="translated">Visual Basic XML 리터럴 내에서 문서 유형을 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> node in the appropriate place in the XML tree.</source>
          <target state="translated">그러나 먼저 XML 리터럴을 사용 하 여 문서를 작성 하 고 다음 만들고 추가 하 여 문서 유형을 포함 하는 문서를 만들 수는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> 노드 XML 트리에서 적절 한 위치에 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file specified by a URI, from an <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, or from an <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">URI로 지정된 파일, <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>를 사용하여 새 <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Using one of the overloads of this method, you can load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file, a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, or an <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">이 메서드의 오버 로드 중 하나를 사용 하 여를 로드할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 파일에서 한 <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>To create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML, use <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>.</source>
          <target state="translated">만들려는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 에서 XML을 포함 하는 문자열을 사용 하 여 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>The stream that contains the XML data.</source>
          <target state="translated">XML 데이터가 포함된 스트림입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> instance by using the specified stream.</source>
          <target state="translated">지정된 스트림을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that reads the data that is contained in the stream.</source>
          <target state="translated">스트림에 들어 있는 데이터를 읽는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>If you want to control load options, use the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overload that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">로드 옵션을 제어 하려는 경우 사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> 오버 로드를 <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>The loading functionality of LINQ to XML is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">LINQ to XML의 로드 기능을 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:</source>
          <target state="translated">수정 해야 할 경우 <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, 다음이 단계를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">만들기는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 중 하나를 호출 하 여는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> 오버 <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">전달는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 중 하나에 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> 오버 로드 <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 생긴다는 <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>의 콘텐츠가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에서 새 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>의 콘텐츠가 들어 있는 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>The following example creates a document from a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>.</source>
          <target state="translated">다음 예제에서는에서 문서는 <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>A URI string that references the file to load into a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에 로드할 파일을 참조하는 URI 문자열입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file.</source>
          <target state="translated">파일을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">지정된 파일의 내용이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This method uses an underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to read the XML into an XML tree.</source>
          <target state="translated">이 메서드는 기본 사용 하 여 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> XML 트리로 XML을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> 만들려는 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 에서 XML을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>The following example shows how to load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file.</source>
          <target state="translated">다음 예제에서는 로드 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 파일에서 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This example uses the following XML document:</source>
          <target state="translated">이 예제에서는 XML 문서로 을 사용합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source><bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>샘플 XML 파일: 일반적인 구매 주문(LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>의 콘텐츠가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 사용하여 새 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>의 콘텐츠가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">이 메서드를 사용할 수 있는 하나는 LINQ to XML 트리를에서 DOM 문서 복사본을 만드는 것입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>To do this, you create an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then use the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">이 작업을 수행 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM 문서를 사용 하 여는 <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> 를 만들려면는 <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>The following example creates a DOM document, creates an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from the DOM document, creates an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> using the <ph id="ph3">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 DOM 문서, 만들어집니다는 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM 문서에서 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 를 사용 하는 <ph id="ph3">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>The stream containing the XML data.</source>
          <target state="translated">XML 데이터가 포함된 스트림입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies whether to load base URI and line information.</source>
          <target state="translated">기본 URI 및 줄 정보의 로드 여부를 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">지정된 스트림을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 인스턴스를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that reads the data that is contained in the stream.</source>
          <target state="translated">스트림에 들어 있는 데이터를 읽는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>The loading functionality of LINQ to XML is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">LINQ to XML의 로드 기능을 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:</source>
          <target state="translated">수정 해야 할 경우 <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, 다음이 단계를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that takes <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">만들기는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 중 하나를 호출 하 여는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> 를 사용 하는 오버 로드 <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">전달는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 중 하나에 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> 오버 로드 <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 생긴다는 <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>의 콘텐츠가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 사용하여 새 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에서 읽은 XML이 들어 있는 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">노드 형식의 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정 하지 않으면는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 대 한 플래그가 <ph id="ph2">`options`</ph> 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML 원본이 들여쓴 없는 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> 만들려는 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 에서 XML을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when loading from a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> 에서 로드할 때 유효 하지 않은 한 <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">설정 하는 경우 성능이 저하 될는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The following example creates a document from a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>.</source>
          <target state="translated">다음 예제에서는에서 문서는 <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A URI string that references the file to load into a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에 로드할 파일을 참조하는 URI 문자열입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">파일을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">지정된 파일의 내용이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">노드 형식의 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정 하지 않으면는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 대 한 플래그가 <ph id="ph2">`options`</ph> 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML 원본이 들여쓴 없는 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> 만들려는 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 에서 XML을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flags.</source>
          <target state="translated">설정 하는 경우 성능이 저하 될는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The base URI and the line information are accurate immediately after loading the XML document.</source>
          <target state="translated">기본 URI 및 줄 정보는 XML 문서를 로드 한 후 즉시 정확 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</source>
          <target state="translated">문서를 로드 한 후 XML 트리를 수정 하면 기본 URI 및 줄 정보가 무의미해 질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example shows how to load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file.</source>
          <target state="translated">다음 예제에서는 로드 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 파일에서 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example uses the following XML document:</source>
          <target state="translated">이 예제에서는 XML 문서로 을 사용합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source><bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>샘플 XML 파일: 일반적인 구매 주문(LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that will be read for the content of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>의 콘텐츠를 읽어올 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies whether to load base URI and line information.</source>
          <target state="translated">기본 URI 및 줄 정보의 로드 여부를 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>, optionally setting the base URI, and retaining line information.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에서 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>를 로드하고, 선택적으로 기본 URI를 설정하고 줄 정보를 유지합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>에서 읽은 XML이 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>By creating an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">만들어는 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM 문서 및 사용한 다음에서 <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> 만들려는 <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>,이 메서드는 linq to XML 트리 DOM 문서 복사본을 만드는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> 만들려는 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 에서 XML을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is not valid when loading from a <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에서 로드할 때 유효 하지 않은 한 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> will be configured to either read whitespace or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 여부 읽기 중 하나가 공백을 하도록 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</source>
          <target state="translated">공백 노드 LINQ to XML 트리는 채워지므로 하는 판독기 화면을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This will be the behavior regardless of whether <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is set or not.</source>
          <target state="translated">여부에 관계 없이 동작이 됩니다 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 설정 되었는지 아닌지를 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid base URI or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 여부 기본 URI는 유효한 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, the base URI will be set in the XML tree from the base URI that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">설정한 경우 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, 기본 URI가 로부터 보고 되는 기본 URI에서 XML 트리의 설정 됩니다는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 여부 유효한 줄 정보가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">설정한 경우 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, 로부터 보고 되는 정보 줄에서에서 줄 정보를 XML 트리의 설정 됩니다는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">설정 하는 경우 성능이 저하 될는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The following example loads the line information that it loads from the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">로드 하는 줄 정보를 로드 하는 다음 예제는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>It then prints the line information.</source>
          <target state="translated">다음 줄 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Gets the node type for this node.</source>
          <target state="translated">이 노드에 대한 노드 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>The node type.</source>
          <target state="translated">노드 형식입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>For <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> objects, this value is <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Document" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 개체의 경우 이 값은 <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Document" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of objects where the type of each is a subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">파생 되는 모든 클래스 때문에 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 포함 한 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> 속성을 각각의 형식이의 서브 클래스 개체의 컬렉션에 대해 작동 하는 코드를 작성할 수 있습니다 <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Your code can then test for the node type of each object in the collection.</source>
          <target state="translated">코드 그런 다음 컬렉션에서 각 개체의 노드 형식에 대 한 테스트 수 있습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>The following example shows the use of this property.</source>
          <target state="translated">다음 예제에서는이 속성의 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">문자열을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This method parses a string and creates an XML tree.</source>
          <target state="translated">이 메서드는 문자열을 구문 분석 하 고 XML 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a string that contains XML.</source>
          <target state="translated">다음 예제에서는 XML이 포함 된 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then parses the string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">다음으로 문자열을 구문 분석 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>A string that contains XML.</source>
          <target state="translated">XML이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string.</source>
          <target state="translated">문자열을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML이 들어 있는 문자열을 사용하여 채운 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>This method does not preserve white space.</source>
          <target state="translated">이 메서드는 공백을 유지 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>If you want to preserve white space in the XML tree, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">오버 로드를 사용 하 여 XML 트리의 공백을 유지 하려면 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> 생긴다는 <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>The following example creates a string that contains XML.</source>
          <target state="translated">다음 예제에서는 XML이 포함 된 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>It then parses the string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">다음으로 문자열을 구문 분석 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A string that contains XML.</source>
          <target state="translated">XML이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">기본 URI와 줄 정보의 로드 여부 및 공백 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">문자열을 사용하여 새 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 만들고, 선택적으로 공백 및 줄 정보를 유지하고 기본 URI를 설정합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML이 들어 있는 문자열을 사용하여 채운 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 하면 소스 XML에서에서 모든 공백의 읽을 판독기입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">노드 형식의 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 중요 하 고 불필요 한 공백이 자동으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">소스 XML 식인 경우 설정 하지 않으면는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 대 한 플래그가 <ph id="ph2">`options`</ph> 판독기는 원본 XML에서에서 유효 하지 않은 공백을 모두 무시 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">XML 트리에서 무효 공백을 대 한 텍스트 노드 없이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML 원본이 들여쓴 없는 경우 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> 에 플래그가 지정 <ph id="ph2">`options`</ph> 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">여전히 유효 공백 보존 되며과 범위를 더 많은 공백 텍스트 노드가 생성 될 수 있는 공백이 없습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when parsing from a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> 에서 구문 분석할 때 유효 하지 않은 한 <ph id="ph2">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">설정 하는 경우 성능이 저하 될는 <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">XML 문서를 로드 한 후 즉시 줄 정보는 정확 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">문서를 로드 한 후 XML 트리를 수정 하면 줄 정보가 무의미해 질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML의 로드 기능을 LINQ 작성 시 사용 된 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">에 의해 throw 되는 모든 예외는 잡 따라서는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드와 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 읽기 및 문서를 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example parses a string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 문자열로 문자열을 구문 분석 하는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.Root">
          <source>Gets the root element of the XML Tree for this document.</source>
          <target state="translated">이 문서에 대한 XML 트리의 루트 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>The root <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of the XML tree.</source>
          <target state="translated">XML 트리의 루트 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>This property is useful when you want to compose <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> queries in the same context as when composing them for a tree rooted in <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 속성은 작성 하려는 경우에 유용 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 때 트리에 대 한 작성 하는 방식을 기반으로 동일한 컨텍스트에서 쿼리 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>See <bpt id="p1">[</bpt>Querying an XDocument vs. Querying an XElement<ept id="p1">](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a)</ept> for more details.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XDocument 쿼리와 합니다. XElement 쿼리 비교<ept id="p1">](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a)</ept> 내용을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>The following example uses this property to get the root element of a document.</source>
          <target state="translated">다음 예제에서는이 속성을 사용 하 여는 문서의 루트 요소를 가져오는 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Serializes this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 파일, <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 출력할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 지정된 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에 출력합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 무효 공백은 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">오버 로드를 사용 하 여 공백을 제어 하려면 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> 생긴다는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 된 들여쓰지 않은 XML을 저장 하는 옵션입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>를 쓸 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 무효 공백은 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">오버 로드를 사용 하 여 공백을 제어 하려면 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> 생긴다는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, saves the document to a <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>, and then prints the string to the console.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>에 문서를 저장 하는 <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>, 한 다음 문자열을 콘솔에 출력 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>A string that contains the name of the file.</source>
          <target state="translated">파일 이름이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, overwriting an existing file, if it exists.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 파일로 serialize하여 기존 파일이 있는 경우 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 무효 공백은 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">오버 로드를 사용 하 여 공백을 제어 하려면 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> 생긴다는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, saves the document to a file, and then prints the file to the console.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, 파일에 문서를 저장 한 다음 파일을 콘솔에 출력 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>를 쓸 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>The following example shows how to save an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>를 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>에 저장하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 출력할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">형식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 지정된 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에 출력하고 선택적으로 형식 지정 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">기본적으로는 <ph id="ph1">`options`</ph> 로 설정 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">이 옵션은 모든 불필요 한 공백이 제거 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated">XML을 출력할 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">형식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>로 serialize하고, 선택적으로 형식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">이것이 기본 동작 및 오버 로드의 동작에서 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> 사용 하지 않는 메서드에 <ph id="ph2">`options`</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with formatting.</source>
          <target state="translated">처음 사용할 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 서식 지정 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second preserves white space.</source>
          <target state="translated">두 번째 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</source>
          <target state="translated">문서에 공백이 없습니다 생성, 때문에 들여쓰기 되지 않고 XML 출력 공백을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A string that contains the name of the file.</source>
          <target state="translated">파일 이름이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">형식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, optionally disabling formatting.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 파일로 serialize하고, 선택적으로 형식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">이것이 기본 동작 및 오버 로드의 동작에서 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> 사용 하지 않는 메서드에 <ph id="ph2">`options`</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">처음 사용할 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with indenting.</source>
          <target state="translated">두 번째 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 들여쓰기와 합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">이 메서드가 쓸 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>Write this document to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 문서를 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>에 씁니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>The following example shows how to write an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 작성 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>Note that the example did not write an XML declaration.</source>
          <target state="translated">이 예제에서는 XML 선언을 작성 하지 않은 참고 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>