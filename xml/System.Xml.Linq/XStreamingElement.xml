<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XStreamingElement.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0336162d5331cff04e4eb89149363780070c382.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0336162d5331cff04e4eb89149363780070c382</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Represents elements in an XML tree that supports deferred streaming output.</source>
          <target state="translated">지연된 스트리밍 출력을 지원하는 XML 트리의 요소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This class allows you to create an XML tree that supports deferred streaming output.</source>
          <target state="translated">이 클래스를 사용 하면 지연 된 스트리밍 출력을 지 원하는 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You use this class to create an XML tree in a very similar fashion to creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 클래스를 사용 하 여 사용 하 여 XML 트리를 만드는 데 매우 유사한 방식으로 XML 트리를 만드는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, there is a fundamental difference.</source>
          <target state="translated">그러나는 근본적인 차이가 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>When you use a LINQ query to specify content when creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree.</source>
          <target state="translated">XML 트리를 만들 사용 하 여 때 콘텐츠를 지정 하는 LINQ 쿼리를 사용 하면 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, XML 트리 생성 시 쿼리 변수가 반복 될 및 쿼리 결과 XML 트리에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>In contrast, when you create an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, a reference to the query variable is stored in the XML tree without being iterated.</source>
          <target state="translated">반면, 만들 때 사용 하 여 XML 트리 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 쿼리 변수에 대 한 참조는 반복 되지 않고 XML 트리에서 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are iterated only upon serialization.</source>
          <target state="translated">쿼리는 serialization 중에 반복 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This allows you to create larger XML trees while maintaining a smaller memory footprint.</source>
          <target state="translated">이 옵션을 사용 하면 작은 메모리 사용 공간을 유지 하는 동안 큰 XML 트리를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.</source>
          <target state="translated">텍스트 파일 등의 입력된 소스에서 스트리밍하는 경우 매우 큰 텍스트 파일을 읽 및 작은 메모리 사용 공간을 유지 하면서 매우 큰 XML 문서를 생성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document.</source>
          <target state="translated">또 다른 시나리오로 대형 XML 트리를 메모리에 로드 된 있고 변형 된 버전의 문서를 만들려고 할을 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you create a new document using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then you will have two large XML trees in memory upon completion of the transformation.</source>
          <target state="translated">사용 하 여 새 문서를 만드는 경우 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, 다음 변환의 완료 되 면 메모리에 두 개의 대형 XML 트리를 갖습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, if you create the new XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, then your working set will be effectively cut in half.</source>
          <target state="translated">그러나 사용 하 여 새 XML 트리를 만드는 경우 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 다음 작업 집합을 반으로 효과적으로 제거 될 예정입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">사용 하는 프로그램을 디버깅할 때 유의 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 개체의 값을 표시 하면 해당 <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">이렇게 하면 XML을 serialize 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">스트리밍 요소 쿼리의 의미가 스트리밍 요소를 한 번만 스트림 수 있는 경우 디버깅에 원하지 않는 동작이 발생할 수 있습니다이 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example first creates a source XML tree.</source>
          <target state="translated">다음 예에서는 먼저 원본 XML 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">그런 다음 사용 하 여 소스 XML 트리의 변환을 만듭니다 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform creates a new tree in memory.</source>
          <target state="translated">이 변환은 메모리에 새 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">그런 다음 사용 하 여 소스 XML 트리의 변환을 만듭니다 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform doesn't execute the query until the transformed tree is serialized to the console.</source>
          <target state="translated">변형된 된 트리는 콘솔에 serialize 될 때까지이 변환에서 쿼리를 실행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Its memory usage is less.</source>
          <target state="translated">메모리 사용이 작은 경우</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>One approach to processing a text file is to write an extension method that streams the text file a line at a time using the <ph id="ph1">`yield return`</ph> construct.</source>
          <target state="translated">텍스트 파일을 처리하는 한 가지 방법은 <ph id="ph1">`yield return`</ph> 구문을 사용하여 한 번에 한 줄씩 텍스트 파일을 스트리밍하는 확장 메서드를 작성하는 것입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You then can write a LINQ query that processes the text file in a lazy deferred fashion.</source>
          <target state="translated">그런 다음 지연된 방식으로 텍스트 파일을 처리하는 LINQ 쿼리를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you then use the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream output, you then can create a transform from the text file to XML that uses a minimal amount of memory, regardless of the size of the source text file.</source>
          <target state="translated">그런 다음 사용 하면는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 스트림 출력으로 다음에 만들 수 있습니다 변환을 텍스트 파일에서 최소한의 소스 텍스트 파일의 크기에 관계 없이 메모리를 사용 하는 XML입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following text file, People.txt, is the source for this example.</source>
          <target state="translated">아래에 있는 People.txt 텍스트 파일은 이 예제의 소스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains an extension method that streams the lines of the text file in a deferred fashion.</source>
          <target state="translated">다음 코드에는 지연된 방식으로 텍스트 파일의 줄을 스트림하는 확장 메서드가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable.</source>
          <target state="translated">큰 XML 파일을 변환하고 응용 프로그램의 메모리 사용 공간이 예상 가능하도록 응용 프로그램을 작성해야 하는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive).</source>
          <target state="translated">XML 트리를 매우 큰 XML 파일로 채우려는 경우 메모리 사용은 파일 크기에 비례하므로 지나치게 증가하게 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Therefore, you should use a streaming technique instead.</source>
          <target state="translated">따라서 스트리밍 기법을 대신 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Certain standard query operators, such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>와 같은 특정 표준 쿼리 연산자는 자신의 소스를 반복하고 모든 데이터를 수집하여 정렬한 다음 시퀀스의 첫 번째 항목을 최종적으로 생성합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.</source>
          <target state="translated">첫 번째 항목을 반환하기 전에 소스를 유형화하는 쿼리 연산자를 사용하는 경우 응용 프로그램에 대한 작은 메모리 사용 공간이 유지되지 않습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Even if you use the technique described in , if you try to assemble an XML tree that contains the transformed document, memory usage may be too great.</source>
          <target state="translated">변형 된 문서를 포함 하는 XML 트리를 어셈블하려고 하면에 설명 된 기술을 사용 하는 경우에 메모리 사용량이 너무 클 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.</source>
          <target state="translated">예제를 기반으로 다음 예제에서는 <bpt id="p1">[</bpt>하는 방법: 헤더 정보에 액세스할 수 있는 XML 조각 스트림<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example uses the deferred execution capabilities of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the output.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>의 지연된 실행 기능을 사용하여 출력을 스트림합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">사용자 지정 축(<ph id="ph1">`StreamCustomerItem`</ph>)은 문서에 <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> 및 <ph id="ph4">`Item`</ph> 요소가 있고 이러한 요소가 다음 Source.xml 문서의 경우와 마찬가지로 정렬되어 있다고 가정하고 작성된 것입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.</source>
          <target state="translated">그러나 더욱 강력한 구현은 XSD를 사용하여 소스 문서의 유효성을 검사하거나, 잘못된 문서의 구문을 분석할 준비가 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following is the source document, Source.xml:</source>
          <target state="translated">다음은 소스 문서인 Source.xml입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains a method that uses an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to stream the source XML.</source>
          <target state="translated">다음 코드에 사용 하는 메서드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 소스 XML을 스트림 하 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the new XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 새 XML을 스트림 하 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">쿼리는까지 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 알고리즘은 쿼리를 사용 하 여 콘텐츠에 대 한 반대는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>새 생성 시 쿼리는 반복 하는 위치, <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">이 생성자에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the element.</source>
          <target state="translated">요소의 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class from the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>에서 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This constructor creates a streaming element with no content and no attributes.</source>
          <target state="translated">이 생성자는 콘텐츠 및 특성이 있는 스트리밍 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">문자열을 암시적 변환이 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">요소 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The contents of the element.</source>
          <target state="translated">요소의 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">지정된 이름 및 콘텐츠를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">이 생성자는 지정 된 내용 및 특성으로 스트리밍 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">문자열을 암시적 변환이 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">쿼리는까지 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 알고리즘은 쿼리를 사용 하 여 콘텐츠에 대 한 반대는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>새 생성 시 쿼리는 반복 하는 위치, <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">이 생성자에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">이 예에서는 라는 Source.xml 다음 XML 파일을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">요소 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The contents of the element.</source>
          <target state="translated">요소의 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">지정된 이름 및 콘텐츠를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">이 생성자는 지정 된 내용 및 특성으로 스트리밍 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">문자열을 암시적 변환이 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">이 생성자의 일반적인 용도 문자열을 새로 만드는 대신 매개 변수로 지정 하는 것 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">쿼리는까지 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 알고리즘은 쿼리를 사용 하 여 콘텐츠에 대 한 반대는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>새 생성 시 쿼리는 반복 하는 위치, <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">이 예에서는 라는 Source.xml 다음 XML 파일을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">지정된 콘텐츠를 이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>에 자식으로 추가합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">스트리밍 요소에 추가할 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">지정된 콘텐츠를 이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>에 자식으로 추가합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">이 생성자에 지정 된 콘텐츠를 추가 하 고 특성에 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">이를 생성할 수는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 하나의 문에서 것이 때로는 더 증분 방식으로 콘텐츠 스트리밍 요소를 추가할 수 없었습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">쿼리는까지 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 알고리즘은 쿼리를 사용 하 여 콘텐츠에 대 한 반대는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>새 생성 시 쿼리는 반복 하는 위치, <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 새 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">그런 다음 스트리밍 요소에 두 개의 쿼리를 추가합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">쿼리는 스트리밍 요소 serialize 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">스트리밍 요소에 추가할 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">지정된 콘텐츠를 이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>에 자식으로 추가합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">이 생성자에 지정 된 콘텐츠를 추가 하 고 특성에 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">이를 생성할 수는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 하나의 문에서 것이 때로는 더 증분 방식으로 콘텐츠 스트리밍 요소를 추가할 수 없었습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">쿼리는까지 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">이 알고리즘은 쿼리를 사용 하 여 콘텐츠에 대 한 반대는 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>새 생성 시 쿼리는 반복 하는 위치, <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">이 함수에 전달 될 수 있는 유효한 내용에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>유효한 콘텐츠 XElement 및 XDocument 개체<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 새 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">그런 다음 스트리밍 요소에 두 개의 쿼리를 추가합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">쿼리는 스트리밍 요소 serialize 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>Gets or sets the name of this streaming element.</source>
          <target state="translated">이 스트리밍 요소의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of this streaming element.</source>
          <target state="translated">이 스트리밍 요소의 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example creates a new streaming element, and then prints the name of the element.</source>
          <target state="translated">이 예제에서는 새 스트리밍 요소를 만들고 요소의 이름을 출력 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Serialize this streaming element.</source>
          <target state="translated">이 스트리밍 요소를 serialize합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The output can be saved to a file, an <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">출력을 파일, <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>로 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Optionally, formatting (indenting) can be disabled.</source>
          <target state="translated">또한 서식 지정(들여쓰기)을 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 출력할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>를 지정된 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에 출력합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 무효 공백은 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">오버 로드를 사용 하 여 공백을 제어 하려면 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> 생긴다는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 된 들여쓰지 않은 XML을 저장 하는 옵션입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>를 쓸 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">이 스트리밍 요소를 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 해당 무효 공백이 XML 트리의 노드를에서 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">공백을 제어 하려는 경우의 오버 로드 중 하나를 사용 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> 사용 하는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The following example creates a source XML tree, then instantiates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> using a query on the source XML tree.</source>
          <target state="translated">다음 예제에서는 소스 XML 트리를 만든 다음 인스턴스화하는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 소스 XML 트리에 대 한 쿼리를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>It then writes the streaming element to a <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>.</source>
          <target state="translated">그러면 스트리밍 요소를 한 <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">파일 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>Serialize this streaming element to a file.</source>
          <target state="translated">이 스트리밍 요소를 파일로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">serialize 된 XML은 들여씁니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">모든 무효 공백이 됩니다 제거한 하는 XML을 올바르게 들여쓰기 됩니다 추가 공백이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">이 메서드의 동작은 해당 무효 공백이 XML 트리의 노드를에서 유지 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">공백을 제어 하려는 경우의 오버 로드 중 하나를 사용 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> 사용 하는 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The following example creates a streaming XML tree.</source>
          <target state="translated">다음 예제에서는 스트리밍 XML 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>It then serializes the streaming XML tree to a file.</source>
          <target state="translated">다음 파일에 스트리밍 XML 트리를 serialize합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>를 쓸 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>Serialize this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 스트리밍 요소를 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> and writes it to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 를 기록 하 고는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>를 출력할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">서식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>를 지정된 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에 출력하고 선택적으로 형식 지정 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">기본적으로는 <ph id="ph1">`options`</ph> 로 설정 <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">이 옵션은 모든 불필요 한 공백이 제거 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 대로 정확 하 게 작성 하는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> 중복 된 네임 스페이스 선언을 제거 하려는 경우 옵션입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated">XML을 출력할 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">형식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">이 스트리밍 요소를 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>로 serialize하고, 선택적으로 서식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">이것이 기본 동작 및 오버 로드의 동작에서 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> 사용 하지 않는 메서드에 <ph id="ph2">`options`</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">처음 사용할 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">두 번째 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 서식을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">파일 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">서식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a file, optionally disabling formatting.</source>
          <target state="translated">이 스트리밍 요소를 파일로 serialize하고, 선택적으로 서식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">지정 된 들여쓰지 않은 XML을 저장 하려는 경우는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">이렇게 하면 모든 공백이 XML 트리에 표시 된 그대로 쓰려는 작성기입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">들여쓰기 한 XML을 저장 하려는 경우 지정 하지 않습니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> 플래그에 대 한 <ph id="ph2">`options`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">모든 불필요 한 공백이 하 고 XML 제대로 들여쓰는 지 수 있도록 적절 한 공백만 추가 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">이것이 기본 동작 및 오버 로드의 동작에서 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> 사용 하지 않는 메서드에 <ph id="ph2">`options`</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>로드 하거나 XML 구문 분석 하는 동안 공백을 유지<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> 및 <bpt id="p2">[</bpt>유지 공백 동안 직렬화<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">다음 예제에서는이 메서드의 두 가지 용도 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">처음 사용할 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">두 번째 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 서식을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">이 스트리밍 요소의 XML을 반환하고, 선택적으로 서식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">사용 하는 프로그램을 디버깅할 때 유의 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 개체의 값을 표시 하면 해당 <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">이렇게 하면 XML을 serialize 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">스트리밍 요소 쿼리의 의미가 스트리밍 요소를 한 번만 스트림 수 있는 경우 디버깅에 원하지 않는 동작이 발생할 수 있습니다이 있습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Returns the formatted (indented) XML for this streaming element.</source>
          <target state="translated">이 스트리밍 요소의 형식 지정(들여쓰기)된 XML을 반환합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the indented XML.</source>
          <target state="translated">들여쓰기된 XML이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">사용 하는 프로그램을 디버깅할 때 유의 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 개체의 값을 표시 하면 해당 <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">이렇게 하면 XML을 serialize 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">스트리밍 요소 쿼리의 의미가 스트리밍 요소를 한 번만 스트림 수 있는 경우 디버깅에 원하지 않는 동작이 발생할 수 있습니다이 있습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">다음 예의 두 가지 용도 보여 줍니다. <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The first use preserves white space.</source>
          <target state="translated">처음 사용할 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">두 번째 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 서식을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">형식 지정 동작을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">이 스트리밍 요소의 XML을 반환하고, 선택적으로 서식 지정을 해제합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the XML.</source>
          <target state="translated">XML이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">사용 하는 프로그램을 디버깅할 때 유의 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, 개체의 값을 표시 하면 해당 <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">이렇게 하면 XML을 serialize 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">스트리밍 요소 쿼리의 의미가 스트리밍 요소를 한 번만 스트림 수 있는 경우 디버깅에 원하지 않는 동작이 발생할 수 있습니다이 있습니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">다음 예의 두 가지 용도 보여 줍니다. <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">처음 사용할 공백을 유지합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">두 번째 직렬화는 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> 서식을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">이 메서드가 쓸 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>Writes this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 스트리밍 요소를 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>에 씁니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>The following example creates an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 사용 하 여 XML 트리 <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>It then writes the streaming element to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">스트리밍 요소를 다음 기록는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>