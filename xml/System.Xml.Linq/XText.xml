<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XText.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5245a09a0817a51dfb4d1be16c89c4bc0aa549cf5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">245a09a0817a51dfb4d1be16c89c4bc0aa549cf5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XText">
          <source>Represents a text node.</source>
          <target state="translated">텍스트 노드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>XML elements can contain text content.</source>
          <target state="translated">XML 요소에는 텍스트 내용을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>Sometimes the content is simple (the element only contains text content), and sometimes the content is mixed (the contents of the element contains both text and other elements).</source>
          <target state="translated">경우에 따라 콘텐츠 (요소가 텍스트 내용을 포함)을 지 며 콘텐츠가 혼합 된 경우에 따라 (요소의 내용을 텍스트 및 기타 요소를 모두 포함).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>In either case, each chunk of text is represented as an <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> node.</source>
          <target state="translated">두 경우 모두에서 텍스트의 각 청크에로 표시 됩니다는 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 노드.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> developers will often have to write code to work with arbitrary <ph id="ph2">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> trees that they did not create.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 개발자 들은 작업할 임의의 코드를 작성할 필요가 종종 <ph id="ph2">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 트리를 만들지 못했습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>If you are writing code that has to work with <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> trees that you have no control over creating, you should be aware of certain behaviors of <ph id="ph2">&lt;xref:System.Xml.Linq.XText&gt;</ph> nodes.</source>
          <target state="translated">작업 하는 코드를 작성 하는 경우 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 트리를 만드는 한 제어 권한이 없을 수의 특정 동작의 <ph id="ph2">&lt;xref:System.Xml.Linq.XText&gt;</ph> 노드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>When processing the contents of an XML tree at the node level, you should be prepared for multiple <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> nodes to be adjacent to each other.</source>
          <target state="translated">노드 수준에서 XML 트리의 내용을 처리할 때 있습니다에 대비해 야 다중 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 서로 인접 한 노드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>Further, you should be prepared for <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> nodes that contain no text.</source>
          <target state="translated">또한에 대비해 야 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 텍스트가 포함 된 노드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>It is possible through <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> methods to remove the content of a text node.</source>
          <target state="translated">통해 수 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 텍스트 노드의 내용을 제거 하는 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>However, <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> does not automatically delete the node.</source>
          <target state="translated">그러나 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 노드를 자동으로 삭제 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>The node has identity, and might have annotations, so <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> allows for zero-length nodes in the tree.</source>
          <target state="translated">노드는 id가 있으며 따라서 주석이 있을 수도 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 트리에서 노드를 길이가 0 인 허용 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XText">
          <source>For more information, see <bpt id="p1">[</bpt>Programming with Nodes<ept id="p1">](http://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>노드를 사용한 프로그래밍<ept id="p1">](http://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XText">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the value of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> node.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 노드의 값이 들어 있는 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>You typically do not create text nodes by using the <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> constructors.</source>
          <target state="translated">일반적으로 만들지 않으면 텍스트 노드를 사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>When you pass text content when constructing an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, text nodes are automatically created.</source>
          <target state="translated">생성할 때 텍스트 콘텐츠를 전달 하면 한 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, 텍스트 노드가 자동으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>The following example creates an element that contains a text node.</source>
          <target state="translated">다음 예제에서는 텍스트 노드를 포함 하는 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.#ctor(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> node to copy from.</source>
          <target state="translated">복사할 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 노드입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> class from another <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> object.</source>
          <target state="translated">다른 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 개체를 사용하여 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
          <source>This constructor is primarily used internally to make a deep copy of an XML tree.</source>
          <target state="translated">이 생성자는 주로 XML 트리의 전체 복사본을 만들기를 내부적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XText.NodeType">
          <source>Gets the node type for this node.</source>
          <target state="translated">이 노드에 대한 노드 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>The node type.</source>
          <target state="translated">노드 형식입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>For <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> objects, this value is <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Text" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XText" /&gt;</ph> 개체의 경우 이 값은 <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Text" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">파생 되는 모든 클래스 때문에 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> 포함 한 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> 속성, 컬렉션의 구체적인 서브 클래스에 대해 작동 하는 코드를 작성할 수 있습니다 <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>Your code can then test for the node type of each node in the collection.</source>
          <target state="translated">코드 그런 다음 컬렉션에서 각 노드의 노드 형식에 대 한 테스트 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>The following example creates an XML tree that contains a number of types of nodes.</source>
          <target state="translated">다음 예제에서는 다양 한 유형의 노드를 포함 하는 XML 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>It then iterates through the tree, outputting the node type of each node.</source>
          <target state="translated">각 노드의 노드 유형을 출력 트리에서을 반복 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>Note that <ph id="ph1">`Child2`</ph> contains an <ph id="ph2">&lt;xref:System.Xml.Linq.XText&gt;</ph> node, implicitly converted from the string content.</source>
          <target state="translated"><ph id="ph1">`Child2`</ph> 포함 한 <ph id="ph2">&lt;xref:System.Xml.Linq.XText&gt;</ph> 노드를 문자열 콘텐츠에서 암시적으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XText.Value">
          <source>Gets or sets the value of this node.</source>
          <target state="translated">이 노드의 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.Value">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the value of this node.</source>
          <target state="translated">이 노드의 값이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.Value">
          <source>Setting this property will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">이 속성에서 발생 하는 설정의 <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.Value">
          <source>The following example shows getting and setting this property.</source>
          <target state="translated">다음 예제을 가져오고이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XText.Value">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">이 메서드가 쓸 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
          <source>Writes this node to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">이 노드를 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>로 씁니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
          <source>This method is primarily used internally by the methods that write an XML tree to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">이 메서드는 주로 내부적으로 XML 트리를 작성 하는 메서드에서 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>