<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AnonymousPipeServerStream.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53f79e272db701f012912103823d00ec3d830fa8c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f79e272db701f012912103823d00ec3d830fa8c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.</source>
          <target state="translated">동기 및 비동기 읽기/쓰기 작업을 모두 지원하는 익명 파이프 주위의 스트림을 노출합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Anonymous pipes help provide safe and secure interprocess communication between child and parent processes.</source>
          <target state="translated">익명 파이프 안전 제공 시키고 프로세스 자식 및 부모 간의 프로세스 간 통신을 보호 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> class enables a parent process to send or receive information from a child process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 클래스를 보내거나 자식 프로세스에서 정보를 수신 하는 부모 프로세스를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes.</source>
          <target state="translated">익명 파이프는 일반적으로 부모 및 자식 프로세스 간에 데이터를 전송 하는 명명 되지 않은 단방향 파이프 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Anonymous pipes are always local; they cannot be used over a network.</source>
          <target state="translated">익명 파이프는 항상 로컬입니다. 네트워크를 통해 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read modes.</source>
          <target state="translated">익명 파이프를 지원 하지 않는 <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> 읽기 모드입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt;</ph> method.</source>
          <target state="translated">익명 파이프의 클라이언트 쪽을 호출 하 여 서버 쪽에서 제공 하는 파이프 핸들에서 만들어야 합니다는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The string is then passed as a parameter when creating the client process.</source>
          <target state="translated">그런 다음 문자열은 클라이언트 프로세스를 만들 때 매개 변수로 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>From the client process, it is then passed to the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> constructor as the <ph id="ph2">`pipeHandleAsString`</ph> parameter.</source>
          <target state="translated">클라이언트 프로세스에서 다음에 전달 된 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> 으로 생성자는 <ph id="ph2">`pipeHandleAsString`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object must dispose the client handle using the <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method in order to be notified when the client exits.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 개체가 사용 하 여 클라이언트 핸들을 삭제 해야 합니다는 <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> 메서드는 클라이언트 종료 시 알림을 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>For <ph id="ph1">[!INCLUDE[winxppro](~/includes/winxppro-md.md)]</ph> and <ph id="ph2">[!INCLUDE[win2kserver](~/includes/win2kserver-md.md)]</ph>, a maximum of 10 pipes can simultaneously connect over the network.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[winxppro](~/includes/winxppro-md.md)]</ph> 및 <ph id="ph2">[!INCLUDE[win2kserver](~/includes/win2kserver-md.md)]</ph>, 최대 10 개의 파이프는 네트워크를 통해 동시에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The following example demonstrates a way to send a string from a parent process to a child process using anonymous pipes.</source>
          <target state="translated">다음 예제는 익명 파이프를 사용하여 부모 프로세스에서 자식 프로세스로 문자열을 보내는 방법을 보여줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>This example creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object in a parent process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">이 예제는 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>의 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값을 사용하여 부모 프로세스에서 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 개체를 생성합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>It also creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> object in a child process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>.</source>
          <target state="translated">또한 만듭니다는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> 개체와 자식 프로세스에서는 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.In&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The parent process then sends a user-supplied string to the child process.</source>
          <target state="translated">그런 다음, 부모 프로세스는 사용자가 제공한 문자열을 자식 프로세스로 보냅니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>The string is displayed to the console.</source>
          <target state="translated">문자열을 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>This example is for the server process, which uses the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> class.</source>
          <target state="translated">이 예제는 사용 하는 서버 프로세스에는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>For the entire code example, including the code for both the pipe client and server, see <bpt id="p1">[</bpt>How to: Use Anonymous Pipes for Local Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>.</source>
          <target state="translated">파이프 클라이언트와 서버 모두에 대 한 코드를 포함 한 전체 코드 예제를 보려면 <bpt id="p1">[</bpt>하는 방법: 로컬 프로세스 간 통신에 사용 하 여 익명 파이프<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.AnonymousPipeServerStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>For <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> constructors without a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> parameter, the default direction is <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">에 대 한 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 없는 생성자는 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 매개 변수는 기본 방향은 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size, no pipe security, and a <ph id="ph2">&lt;xref:System.IO.HandleInheritability&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 파이프 보안 없음, 기본 버퍼 크기를 가진 개체를 및 <ph id="ph2">&lt;xref:System.IO.HandleInheritability&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">익명 파이프는 한 방향으로만 지정할 수 있으므로 <bpt id="p1">&lt;c&gt;</bpt>방향<ept id="p1">&lt;/c&gt;</ept>을 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>으로 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class with the specified pipe direction.</source>
          <target state="translated">지정된 파이프 방향을 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size, no pipe security, and a <ph id="ph2">&lt;xref:System.IO.HandleInheritability&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 파이프 보안 없음, 기본 버퍼 크기를 가진 개체를 및 <ph id="ph2">&lt;xref:System.IO.HandleInheritability&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.HandleInheritability.None&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">익명 파이프는 한 방향으로만 지정할 수 있으므로 <bpt id="p1">&lt;c&gt;</bpt>방향<ept id="p1">&lt;/c&gt;</ept>을 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>으로 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</source>
          <target state="translated">자식 프로세스가 기본 핸들을 상속할 수 있는지 여부를 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>Must be set to either <ph id="ph1">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>로 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class with the specified pipe direction and inheritability mode.</source>
          <target state="translated">지정된 파이프 방향 및 상속 모드를 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다. </target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object that has the default buffer size and no pipe security.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 기본 버퍼 크기 및 파이프 보안이 없는 개체입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>The following example demonstrates a method to send a string from a parent process to a child process using anonymous pipes.</source>
          <target state="translated">다음 예제에서는 익명 파이프를 사용 하는 자식 프로세스에는 부모 프로세스에서 문자열을 보내는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object is created in a parent process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 인 부모 프로세스에서 개체가 생성 되는 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph> is not set to either <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>로 설정되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">익명 파이프는 한 방향으로만 지정할 수 있으므로 <bpt id="p1">&lt;c&gt;</bpt>방향<ept id="p1">&lt;/c&gt;</ept>을 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>으로 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>A safe handle for the pipe that this <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> object will encapsulate.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 개체가 캡슐화할 파이프의 SafeHandle입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>A safe handle for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체의 SafeHandle입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class from the specified pipe handles.</source>
          <target state="translated">지정된 파이프 핸들을 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="serverSafePipeHandle" /&gt;</ph> or <ph id="ph2">&lt;paramref name="clientSafePipeHandle" /&gt;</ph> is an invalid handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="serverSafePipeHandle" /&gt;</ph>또는 <ph id="ph2">&lt;paramref name="clientSafePipeHandle" /&gt;</ph>이 잘못된 핸들인 경우</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="serverSafePipeHandle" /&gt;</ph> or <ph id="ph2">&lt;paramref name="clientSafePipeHandle" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="serverSafePipeHandle" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="clientSafePipeHandle" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>An I/O error, such as a disk error, has occurred.</source>
          <target state="translated">디스크 오류 등의 I/O 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>The stream has been closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">익명 파이프는 한 방향으로만 지정할 수 있으므로 <bpt id="p1">&lt;c&gt;</bpt>방향<ept id="p1">&lt;/c&gt;</ept>을 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>으로 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</source>
          <target state="translated">자식 프로세스가 기본 핸들을 상속할 수 있는지 여부를 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>Must be set to either <ph id="ph1">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>로 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">버퍼의 크기입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>This value must be greater than or equal to 0.</source>
          <target state="translated">이 값은 0보다 크거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class with the specified pipe direction, inheritability mode, and buffer size.</source>
          <target state="translated">지정된 파이프 방향, 상속 모드 및 버퍼 크기를 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다. </target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object without pipe security.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 파이프 보안이 없는 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph> is not set to either <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>로 설정되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>One of the enumeration values that determines the direction of the pipe.</source>
          <target state="translated">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>Anonymous pipes can only be in one direction, so <bpt id="p1">&lt;c&gt;</bpt>direction<ept id="p1">&lt;/c&gt;</ept> cannot be set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated">익명 파이프는 한 방향으로만 지정할 수 있으므로 <bpt id="p1">&lt;c&gt;</bpt>방향<ept id="p1">&lt;/c&gt;</ept>을 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>으로 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</source>
          <target state="translated">자식 프로세스가 기본 핸들을 상속할 수 있는지 여부를 결정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>The size of the buffer.</source>
          <target state="translated">버퍼의 크기입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>This value must be greater than or equal to 0.</source>
          <target state="translated">이 값은 0보다 크거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>An object that determines the access control and audit security for the pipe.</source>
          <target state="translated">파이프의 액세스 제어 및 감사 보안을 결정하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.</source>
          <target state="translated">지정된 파이프 방향, 상속 모드, 버퍼 크기 및 파이프 보안을 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> is not supported because anonymous pipes are defined to be one-way.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection.InOut&gt;</ph> 익명 파이프 단방향 되도록 정의 하기 때문에 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph> is not set to either <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inheritability" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.IO.HandleInheritability.None" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="F:System.IO.HandleInheritability.Inheritable" /&gt;</ph>로 설정되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeDirection.InOut" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
          <source>Gets the safe handle for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object that is currently connected to the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체에 연결된 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 개체에 대한 안전한 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
          <source>A handle for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object that is currently connected to the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체에 연결된 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 개체의 핸들입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after a client handle has been passed to a client process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> 클라이언트 프로세스에 대 한 클라이언트 핸들 경과 된 후 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
          <source>If this method is not called, the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.</source>
          <target state="translated">이 메서드를 호출 하지는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 개체 통지를 받지 못할 클라이언트를 삭제 하는 경우 해당 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
          <source>Closes the local copy of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object's handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체 핸들의 로컬 복사본을 종료합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after the client handle has been passed to the client.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> 클라이언트에 클라이언트 핸들이 경과 된 후 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
          <source>If this method is not called, the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.</source>
          <target state="translated">이 메서드를 호출 하지는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 개체 통지를 받지 못할 클라이언트를 삭제 하는 경우 해당 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">다음 예제에서는 익명 파이프를 사용 하 여 부모 프로세스에서 자식 프로세스에는 문자열을 보낼 수 있는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object is created in a parent process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 인 부모 프로세스에서 개체가 생성 되는 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.Finalize">
          <source>Releases unmanaged resources and performs other cleanup operations before the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> instance is reclaimed by garbage collection.</source>
          <target state="translated">가비지 컬렉션에 의해 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 인스턴스가 회수되기 전에 관리되지 않는 리소스를 해제하고 기타 정리 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>Gets the connected <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object's handle as a string.</source>
          <target state="translated">연결된 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체의 핸들을 문자열로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>A string that represents the connected <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> object's handle.</source>
          <target state="translated">연결된 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /&gt;</ph> 개체의 핸들을 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> method should be called after a client handle has been passed to a client process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt;</ph> 클라이언트 프로세스에 대 한 클라이언트 핸들 경과 된 후 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>If this method is not called, the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object will not receive notice when the client disposes of its <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.</source>
          <target state="translated">이 메서드를 호출 하지는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 개체 통지를 받지 못할 클라이언트를 삭제 하는 경우 해당 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">다음 예제에서는 익명 파이프를 사용 하 여 부모 프로세스에서 자식 프로세스에는 문자열을 보낼 수 있는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object is created in a parent process with a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> value of <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 인 부모 프로세스에서 개체가 생성 되는 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeDirection&gt;</ph> 값 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeDirection.Out&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>Sets the reading mode for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 개체에 대한 읽기 모드를 설정합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>For anonymous pipes, transmission mode must be <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph>.</source>
          <target state="translated">익명 파이프의 경우 전송 모드가 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph>여야 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The reading mode for the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /&gt;</ph> 개체에 대한 읽기 모드입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.</source>
          <target state="translated">익명 파이프를 지원 하지 않는 <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> 읽기 모드입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">다음 예제에서는 익명 파이프를 사용 하 여 부모 프로세스에서 자식 프로세스에는 문자열을 보낼 수 있는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>In this example, the <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is caught when the <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.ReadMode%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> 걸러진 시기는 <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.ReadMode%2A&gt;</ph> 속성이로 설정 되어 <ph id="ph3">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The transmission mode is not valid.</source>
          <target state="translated">전송 모드가 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>For anonymous pipes, only <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph> is supported.</source>
          <target state="translated">익명 파이프의 경우 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /&gt;</ph>만 지원됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The property is set to <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>, which is not supported for anonymous pipes.</source>
          <target state="translated">속성이 <ph id="ph1">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>로 설정되며, 이는 익명 파이프를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The connection is broken or another I/O error occurs.</source>
          <target state="translated">연결이 끊어졌거나 다른 I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
          <source>The pipe is closed.</source>
          <target state="translated">파이프가 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
          <source>Gets the pipe transmission mode that is supported by the current pipe.</source>
          <target state="translated">현재 파이프가 지원하는 파이프 전송 모드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> that is supported by the current pipe.</source>
          <target state="translated">현재 파이프에서 지원하는 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> read mode.</source>
          <target state="translated">익명 파이프를 지원 하지 않는 <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> 읽기 모드입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
          <source>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes.</source>
          <target state="translated">다음 예제에서는 익명 파이프를 사용 하 여 부모 프로세스에서 자식 프로세스에는 문자열을 보낼 수 있는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> object is created in a parent process and the <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode%2A&gt;</ph> property is displayed to the console.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> 부모 프로세스에서 개체가 생성 되 고 <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode%2A&gt;</ph> 속성은 콘솔에 표시 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>