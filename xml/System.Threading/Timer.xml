<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67fe19429800288028bf5585c9bd4f03134790db" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530817" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>지정된 간격으로 스레드 풀 스레드에 대해 메서드를 실행하는 메커니즘을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 한 <xref:System.Threading.TimerCallback> 사용할 방법을 지정 하는 대리자는 <xref:System.Threading.Timer> 실행 합니다. 시그니처는 <xref:System.Threading.TimerCallback> 대리자는:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 타이머 대리자는 타이머는 생성 되며 변경할 수 없는 때 지정 됩니다. 사용 되는 타이머를 생성 하는 스레드에서 메서드가 실행 되지 않습니다. 실행 한 <xref:System.Threading.ThreadPool> 시스템에서 제공 하는 스레드입니다.  
  
> [!TIP]
> 라는 4 개의 클래스를 포함 하는.NET `Timer`각각 서로 다른 기능을 제공 하는 중:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>자세한 이벤트 싱크 정기적으로 또는 이벤트를 발생 시킬 하 고 하나에서 코드를 실행 합니다. 클래스는 서버 기반으로 사용 또는 되며 다중 스레드 환경에서 서비스 구성 요소를 위한 사용자 인터페이스가 없는 하 고 런타임 시 표시 되지 않습니다.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>를 정기적으로 스레드 풀 스레드에서 단일 콜백 메서드를 실행 하는 합니다. 콜백 메서드는 사용 되는 타이머 인스턴스화되고 변경할 수 없는 때 정의 됩니다. 마찬가지로 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스,이 클래스는 다중 스레드 환경에서 서버 기반 또는 서비스 구성 요소로 사용 하기 위한 사용자 인터페이스가 없는 하 고을 런타임 시 표시 되지 않습니다.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework만), 이벤트를 발생 시킬 일정 한 간격 이벤트 싱크를 하나 이상에서 코드를 실행 하는 Windows Forms 구성 요소입니다. 구성 요소 사용자 인터페이스가 없는 되며 단일 스레드 환경에서 사용할 수 있도록 디자인 UI 스레드에서 실행합니다.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework만), 일정 한 간격으로 비동기 또는 동기 웹 페이지 포스트백을 수행 하는 ASP.NET 구성 요소입니다.
  
 타이머를 만들 때 메서드의 첫 번째 실행 하기 전에 대기 하는 시간을 지정할 수 있습니다 (예약 시간)과 크기의 후속 실행 (마침표) 사이의 대기 시간입니다. <xref:System.Threading.Timer> 클래스에는 시스템 클록의 해상도입니다. 즉, 기간을 사용 하면 시스템 클록의 해상도 보다 작으면는 <xref:System.Threading.TimerCallback> 대리자는 Windows 7 및 Windows 8 시스템에서 약 15 밀리초는 시스템 시계의 정밀도에 정의 된 간격으로 실행 됩니다. 기한을 변경할 수 시간 및 기간 또는 비활성화를 사용 하 여 타이머는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
> [!NOTE]
>  사용 하는 상태로 <xref:System.Threading.Timer>에 대 한 참조를 유지 해야 합니다. 관리 되는 개체와 마찬가지로 <xref:System.Threading.Timer> 에 참조가 없는 경우 가비지 수집의 대상이 됩니다. 팩트는는 <xref:System.Threading.Timer> 은 여전히 활성 하지 않는 것 수집 되지 않도록 합니다.  
  
 타이머 필요 하지 않은 경우 사용 된 <xref:System.Threading.Timer.Dispose%2A> 타이머에서 보유 하는 리소스를 해제 하는 메서드. 콜백을 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드가 호출 된 타이머 큐에 스레드 풀 스레드에서 실행에 대 한 콜백을 때문에 있습니다. 사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.  
  
 호출 되므로 타이머가 실행 콜백 메서드에서 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 콜백은 타이머 간격이 콜백을 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용 중인 및 콜백을 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 스레드 풀 스레드에 의해 처리 되 고 콜백 메서드를 사용 하는 작고 간단한 타이머가입니다. 것 Windows forms에서 사용 하기 위해 사용자 인터페이스 스레드에서 콜백이 발생 하지 않습니다. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> Windows Forms 사용에 대 한 더 유용 합니다. 서버 기반 타이머 기능을 사용할 때 고려할 수 <xref:System.Timers.Timer?displayProperty=nameWithType>, 이벤트를 발생 하 고 추가 기능입니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 `StatusChecker` 클래스를 포함 하는 `CheckStatus` 메서드 시그니처가 같습니다로 <xref:System.Threading.TimerCallback> 위임 합니다. `state` 의 인수는 `CheckStatus` 방법은 <xref:System.Threading.AutoResetEvent> 응용 프로그램 스레드 및 콜백 대리자를 실행 하는 스레드 풀 스레드를 동기화 하는 개체입니다. `StatusChecker` 클래스도 두 개의 상태 변수를 포함 합니다.  
  
 `invokeCount`  
 콜백 메서드가 호출 된 횟수를 나타냅니다.  
  
 `maxCount`  
 콜백 메서드를 호출 해야 하는 최대 횟수를 결정 합니다.  
  
 응용 프로그램 스레드는 1 초 기다렸다가 하 고 다음 실행 하는 타이머를 만듭니다는 `CheckStatus` 콜백 메서드 250 밀리초 마다. 응용 프로그램 스레드는 다음 될 때까지 차단는 <xref:System.Threading.AutoResetEvent> 신호를 받는 개체입니다. 때는 `CheckStatus` 콜백 메서드가 실행 될 `maxCount` 호출 시간,는 `AutoResetEvent.Set` 의 상태를 설정 하는 메서드는 <xref:System.Threading.AutoResetEvent> 신호를 받는 개체입니다. 처음이 응용 프로그램 스레드 호출에서 <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> 메서드가 콜백 메서드는 이제 0.5 초 마다 실행 되도록 합니다. 될 때까지 다시 한 번 차단는 <xref:System.Threading.AutoResetEvent> 신호를 받는 개체입니다. 이런 경우 타이머를 호출 하 여 소멸 됩니다 해당 <xref:System.Threading.Timer.Dispose%2A> 메서드와 응용 프로그램을 종료 합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</param>
        <summary>새로 만든 <see cref="T:System.Threading.Timer" /> 개체를 상태 개체로 사용하고 무한 기간 및 무한 만료 예정 시간을 지정하여 <see cref="T:System.Threading.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하려는 경우이 생성자를 호출는 <xref:System.Threading.Timer> 상태 개체로 개체 자체입니다. 타이머를 만든 후에 사용 하는 <xref:System.Threading.Timer.Change%2A> 간격 및 예약 시간을 설정 하는 메서드.  
  
 이 생성자는 무한 만료 예정 지정 시간 후 첫 번째 콜백 및 하기 전에 이러한 첫 번째 콜백을 방지 하기 위해 콜백 간에 무한 간격은 <xref:System.Threading.Timer> 개체 상태 개체에 할당 됩니다.  
  
 지정 된 방법을 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드는 메서드가 여러 번 큐에 대기 하 고 모든 스레드 풀 스레드가 사용 중인 경우 또는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 상태 개체로 타이머 자체를 사용 하 여 새 타이머를 만듭니다. <xref:System.Threading.Timer.Change%2A> 메서드를 사용 하는 타이머를 시작 합니다. 타이머 콜백이 발생할 때 사용 되는 타이머를 해제 하려면 상태 개체 사용 됩니다.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</param>
        <param name="dueTime">
          <c>콜백</c>이 호출되기 전에 지연할 시간(밀리초)입니다. 타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <c>콜백</c> 호출 간의 시간 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 있는 32비트 정수로 시간 간격을 지정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 지정 된 대리자는 `callback` 매개 변수를 후 한 번 호출 `dueTime` 경과 되 고, 될 때마다 그 이후에 `period` 시간 간격이 경과할 합니다.  
  
 경우 `dueTime` 은 영 (0) `callback` 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 <xref:System.Threading.Timer> 클래스에는 Windows 7 및 Windows 8 시스템에서 약 15 밀리초, 시스템 클록의 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 타이머의 정기적인 동작은 비활성화 되지 않습니다 되지만 사용 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 지정 된 방법을 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드는 메서드가 여러 번 큐에 대기 하 고 모든 스레드 풀 스레드가 사용 중인 경우 또는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 위임 하 고의 새 인스턴스를 초기화는 `Timer` 클래스입니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</param>
        <param name="dueTime">
          <c>콜백</c>이 호출되기 전에 지연할 시간(밀리초)입니다. 타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <c>콜백</c> 호출 간의 시간 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 있는 64비트 정수로 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 지정 된 대리자는 `callback` 매개 변수를 후 한 번 호출 `dueTime` 경과 되 고, 될 때마다 그 이후에 `period` 시간 간격이 경과할 합니다.  
  
 경우 `dueTime` 은 영 (0) `callback` 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 <xref:System.Threading.Timer> 클래스에는 Windows 7 및 Windows 8 시스템에서 약 15 밀리초, 시스템 클록의 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 타이머의 정기적인 동작은 비활성화 되지 않습니다 되지만 사용 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 지정 된 방법을 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드는 메서드가 여러 번 큐에 대기 하 고 모든 스레드 풀 스레드가 사용 중인 경우 또는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 4294967294보다 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</param>
        <param name="dueTime">
          <c>콜백</c> 매개 변수에서 해당 메서드를 호출하기 전에 지연될 시간입니다. 타이머가 시작되지 않게 하려면 -1밀리초를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <c>콜백</c>에서 참조하는 메서드 호출 간의 시간 간격입니다. 정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 지정 된 대리자는 `callback` 매개 변수를 후 한 번 호출 `dueTime` 경과 되 고, 될 때마다 그 이후에 `period` 시간 간격이 경과할 합니다.  
  
 경우 `dueTime` 은 영 (0) `callback` 즉시 호출 됩니다. 경우 `dueTime` 은 음수 (-1) 밀리초, `callback` 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 <xref:System.Threading.Timer> 클래스에는 Windows 7 및 Windows 8 시스템에서 약 15 밀리초, 시스템 클록의 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 경우 `period` 가 영 (0) 또는 음수 (-1) 밀리초 및 `dueTime` 이 양수인 경우 `callback` 호출 타이머의 정기적인 동작은 비활성화 되지 않습니다 되지만 사용 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 지정 된 방법을 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드는 메서드가 여러 번 큐에 대기 하 고 모든 스레드 풀 스레드가 사용 중인 경우 또는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 위임 하 고의 새 인스턴스를 초기화는 `Timer` 클래스입니다.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 값의 밀리초 수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</param>
        <param name="dueTime">
          <c>콜백</c>이 호출되기 전에 지연할 시간(밀리초)입니다. 타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <c>콜백</c> 호출 간의 시간 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 있는 32비트 정수로 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 지정 된 대리자는 `callback` 매개 변수를 후 한 번 호출 `dueTime` 경과 되 고, 될 때마다 그 이후에 `period` 시간 간격이 경과할 합니다.  
  
 경우 `dueTime` 은 영 (0) `callback` 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 <xref:System.Threading.Timer> 클래스에는 Windows 7 및 Windows 8 시스템에서 약 15 밀리초, 시스템 클록의 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 호출 타이머의 정기적인 동작은 비활성화 되지 않습니다 되지만 사용 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 지정 된 방법을 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드는 메서드가 여러 번 큐에 대기 하 고 모든 스레드 풀 스레드가 사용 중인 경우 또는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다. 타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 있는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns>
          타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드가 호출 되지 않습니다; 사용 되는 타이머 사용 하지 않으면, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`합니다.  
  
 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드는 한 번 실행 되며 타이머의 정기적으로 동작 하지 않는 경우, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수 있습니다는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 시작 하는 방법을 보여 줍니다.는 `Timer` 및 호출 집합 수 이후 기간 변경 합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다. 타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 있는 64비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns>
          타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드가 호출 되지 않습니다; 사용 되는 타이머 사용 하지 않으면, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`합니다.  
  
 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드는 한 번 실행 되며 타이머의 정기적으로 동작 하지 않는 경우, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수 있습니다는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 -1 미만인 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 4294967294보다 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <see cref="T:System.TimeSpan" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간을 나타내는 <see cref="T:System.Threading.Timer" />입니다. 타이머가 다시 시작되지 않게 하려면 -1밀리초를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격입니다. 정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 값으로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns>
          타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 경우 `dueTime` -1 밀리초입니다, 콜백 메서드가 호출 되지 않습니다; 사용 되는 타이머를 사용 하지 않도록 설정 하지만 수를 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`합니다.  
  
 경우 `period` 가 영 (0) 또는 음수 (-1) 밀리초, 및 `dueTime` 이 양수인 경우 콜백 메서드에 한 번 호출 됩니다; 타이머의 정기적인 동작은 사용 하지 않으면 하지만 호출 하 여 다시 활성화할 수 있습니다 <xref:System.Threading.Timer.Change%2A> 보다 큰 값을 지정 하 고 에 대 한 0 `period`합니다.  
  
 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수 있습니다는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 시작 하는 방법을 보여 줍니다.는 `Timer` 및 호출 집합 수 이후 기간 변경 합니다.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 -1밀리초 미만인 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 4294967294밀리초보다 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다. 타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">
          <see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다. 정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</param>
        <summary>부호 없는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns>
          타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 경우 `dueTime` 은 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드가 호출 되지 않습니다; 사용 되는 타이머 사용 하지 않으면, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`합니다.  
  
 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 않습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수 있지만 콜백 메서드는 한 번 실행 되며 타이머의 정기적으로 동작 하지 않는 경우, 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수 있습니다는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도에 다시 할당 될 수 있습니다. 에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
> [!NOTE]
>  콜백을 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드가 호출 된 타이머 큐에 스레드 풀 스레드에서 실행에 대 한 콜백을 때문에 있습니다. 사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.  
  
   
  
## Examples  
 다음 코드 예제에는 소유한 리소스를 해제 하는 방법을 보여 줍니다는 `Timer`합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <see langword="Timer" />가 삭제되면 신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다.</param>
        <summary>
          <see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제하고 타이머가 삭제되면 신호를 보냅니다.</summary>
        <returns>
          작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도에 다시 할당 될 수 있습니다. 에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
 이 메서드가 완료 될 때 신호를 보내고는 <xref:System.Threading.WaitHandle> 에 지정 된는 `notifyObject` 매개 변수입니다. 이 오버 로드를 사용 하 여는 <xref:System.Threading.Timer.Dispose%2A> 메서드 타이머 삭제 된 않을 때까지 차단 하려는 경우. 타이머 큐에 대기 중인 모든 콜백이 완료 될 때까지 삭제 되지 않습니다.  
  
> [!NOTE]
>  콜백을 사용 하는 경우는 <xref:System.Threading.Timer.Change%2A> 설정 하는 메서드는 `dueTime` 0 매개 변수를 경합 상태가 발생할 수 있습니다 때는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 호출한: 타이머 대기 하기 전에 새 콜백 하는 경우는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드 발생 하는 검색 없는 콜백이 대기 중인 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 계속 차단; 새 콜백, 대기 된 동안 인데 타이머 삭제 되는 그렇지 않은 경우 <xref:System.ObjectDisposedException> 새 콜백 호출 될 경우 throw 되는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>