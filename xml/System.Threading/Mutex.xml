<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bce0feaf14f66f8608164cfa777620d7f3b329f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530997" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ec128-101">프로세스 간 동기화에 사용할 수도 있는 동기화 기본 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ec128-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-102">둘 이상의 스레드를 동시에 공유 리소스에 액세스 해야 할 때 시스템에는 동기화 메커니즘을 한 번에 한 스레드만 리소스를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="ec128-103"><xref:System.Threading.Mutex> 하나의 스레드를 공유 리소스에 대 한 단독 액세스를 부여 하는 기본 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="ec128-104">뮤텍스를 획득 하는 스레드를 첫 번째 스레드가 뮤텍스를 해제 하기 전까지 해당 뮤텍스를 획득 하려고 하는 두 번째 스레드가 일시 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ec128-105">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ec128-106">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ec128-107">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ec128-108">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ec128-109">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ec128-110">사용할 수는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 뮤텍스의 소유권을 요청 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="ec128-111">호출 스레드가 차단 다음 중 하나가 발생할 때까지:</span><span class="sxs-lookup"><span data-stu-id="ec128-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ec128-112">뮤텍스를 소유 하지 않은 나타내는 신호를 받는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="ec128-113">이런 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반환 `true`, 호출 스레드가 뮤텍스의 소유권을 가정 하 고는 뮤텍스로 보호 된 리소스에 액세스 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="ec128-114">스레드 호출 해야 리소스에 액세스 완료 될 때는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 해제 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="ec128-115">"예" 섹션의 첫 번째 예제에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="ec128-116">에 대 한 호출에 지정 된 시간 제한 간격은 <xref:System.Threading.WaitHandle.WaitOne%2A> 변수가 있는 메서드는 `millisecondsTimeout` 또는 `timeout` 경과 된 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="ec128-117">이런 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반환 `false`, 호출 스레드가 뮤텍스의 소유권을 획득 하려는 추가 시도 하지으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="ec128-118">이 경우 호출 스레드에 뮤텍스의 보호 되는 리소스에 대 한 액세스 거부 되었습니다 되도록 코드를 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="ec128-119">호출 하지 않아야 스레드가 되지 뮤텍스의 소유권을 획득 하기 때문에 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="ec128-120">"예" 섹션의 두 번째 예제에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="ec128-121"><xref:System.Threading.Mutex> 뮤텍스를 가져온 스레드에서만 해제 될 수 있으므로 클래스는 스레드 id를 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="ec128-122">반면,는 <xref:System.Threading.Semaphore> 클래스 스레드 id를 적용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="ec128-123">뮤텍스 응용 프로그램 도메인 경계를 넘어 전달할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="ec128-124">뮤텍스를 소유 하는 스레드는 같은 뮤텍스를 반복적으로 호출을 요청할 수 <xref:System.Threading.WaitHandle.WaitOne%2A> 실행을 차단 하지 않고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="ec128-125">그러나 스레드 호출 해야 합니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드 뮤텍스의 소유권을 해제 하려면 동일한 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="ec128-126">때문에 <xref:System.Threading.Mutex> 클래스에서 상속 <xref:System.Threading.WaitHandle>, 정적을 호출할 수도 있습니다 <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> 및 <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> 보호 된 리소스에 대 한 액세스를 동기화 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="ec128-127">스레드가 뮤텍스를 소유 하는 동안 종료 되 면 뮤텍스가 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="ec128-128">뮤텍스 상태 신호 받음으로 설정 되어 다음 대기 스레드가 소유권을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="ec128-129">.NET Framework 버전 2.0 부터는 <xref:System.Threading.AbandonedMutexException> 중단 된 뮤텍스를 획득 하는 다음 스레드에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="ec128-130">.NET Framework 버전 2.0 이전 예외가 throw 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ec128-131">중단 된 뮤텍스는 코드의 심각한 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="ec128-132">스레드가 뮤텍스를 해제 하지 않고 종료 되 면 뮤텍스의 보호를 받는 데이터 구조 일관성 있는 상태가 아닐 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="ec128-133">뮤텍스의 소유권을 요청 하는 다음 스레드에서이 예외를 처리 하 고 데이터 구조의 무결성을 확인할 수 있으면 계속 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="ec128-134">시스템 차원 뮤텍스의 경우 중단된 뮤텍스는 응용 프로그램이 갑자기 종료되었음을 나타낼 수 있습니다(예: Windows 작업 관리자를 사용하여).</span><span class="sxs-lookup"><span data-stu-id="ec128-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="ec128-135">뮤텍스는 다음 두 가지 유형: 이며 명명 되지 않은 시스템 뮤텍스를 명명 된 로컬 뮤텍스 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="ec128-136">로컬 뮤텍스는 프로세스 내에만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="ec128-137">에 대 한 참조 프로세스의 모든 스레드에서 사용할 수는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="ec128-138">명명 되지 않은 각 <xref:System.Threading.Mutex> 개체는 별도 로컬 뮤텍스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="ec128-139">명명 된 시스템 뮤텍스는 운영 체제 전체에 표시 되 고 프로세스 작업을 동기화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="ec128-140">만들 수는 <xref:System.Threading.Mutex> 이름을 허용 하는 생성자를 사용 하 여 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="ec128-141">같은 시간에 운영 체제 개체를 만들 수 있고 만들기 전에 <xref:System.Threading.Mutex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="ec128-142">동일한 명명된 시스템 뮤텍스를 나타내는 여러 <xref:System.Threading.Mutex> 개체를 만들 수 있으며 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드를 사용하여 기존 명명된 시스템 뮤텍스를 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec128-143">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 개뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ec128-144">이름이 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ec128-145">이름이 접두사로 시작 하는 경우 "로컬\\", 뮤텍스가 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ec128-146">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ec128-147">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ec128-148">터미널 서버 세션 내에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 되며 둘 다 볼 수는 모든 프로세스에 터미널 서버 세션에서.</span><span class="sxs-lookup"><span data-stu-id="ec128-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ec128-149">즉, 접두사 이름은 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 않은 뮤텍스 이름의 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="ec128-150">이 예제에서는 로컬 방법을 <xref:System.Threading.Mutex> 개체를 사용 하 여 보호 된 리소스에 대 한 액세스를 동기화 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ec128-151">호출 해야 하므로 각 호출 스레드가 뮤텍스의 소유권을 가져올 때까지 차단 되는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 스레드가 소유권을 해제 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="ec128-152">다음 예제에서는 각 스레드가 호출는 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> 뮤텍스를 획득 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="ec128-153">메서드가 반환 하는 경우 시간 제한 간격이 지나면 `false`, 스레드가 뮤텍스를 획득 아니고 뮤텍스의 보호 리소스에 액세스 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="ec128-154"><xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드만 뮤텍스를 획득 하는 스레드에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ec128-155">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ec128-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec128-156">
            <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-156">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec128-157">기본 속성을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-157">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-158">이 생성자 오버 로드는이 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자 오버 로드를 지정 하 고 `false` 뮤텍스의 초기 소유권에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-158">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="ec128-159">즉, 호출 스레드가 뮤텍스를 소유 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-159">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-160">다음 코드 예제는 로컬 방법을 <xref:System.Threading.Mutex> 개체를 사용 하 여 보호 된 리소스에 대 한 액세스를 동기화 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-160">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ec128-161">뮤텍스를 만드는 스레드는를 소유 하지 않습니다 처음 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-161">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ec128-162">호출한 스레드에 뮤텍스의 초기 소유권을 부여하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-162">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-163">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-163">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ec128-164">다음 코드 예제는 로컬 방법을 <xref:System.Threading.Mutex> 개체를 사용 하 여 보호 된 리소스에 대 한 액세스를 동기화 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-164">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ec128-165">만드는 스레드는는 <xref:System.Threading.Mutex> 처음 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-165">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ec128-166">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-166">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ec128-167">
            <see cref="T:System.Threading.Mutex" />의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-167">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="ec128-168">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-168">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-169">호출 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값과 뮤텍스 이름인 문자열을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-169">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-170">경우 `name` 않습니다 `null` 및 `initiallyOwned` 은 `true`,이 호출의 결과로 명명 된 시스템 뮤텍스가 만들어진 경우에 호출 스레드가 뮤텍스를 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-170">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="ec128-171">지정 하는 것이 좋습니다 명명 된 시스템 뮤텍스가 만들어졌는지 여부를 결정 하기 위한 메커니즘이 없으므로 `false` 에 대 한 `initiallyOwned` 이 생성자 오버 로드를 호출할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-171">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="ec128-172">사용할 수는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> 시스템 뮤텍스의 초기 소유권을 확인 해야 하는 경우에 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-172">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="ec128-173">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-173">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ec128-174">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-174">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-175">명명된 된 뮤텍스에 액세스 제어 보안을 이미 만들어졌습니다 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-175">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="ec128-176">기존 스레드 작업을 동기화 하는 데 필요한 이러한 권한이 포함 된 명명 된 뮤텍스를 열려면 참조는 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-176">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-177">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 뮤텍스가 만들어지는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-177">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ec128-178">이 경우 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-178">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ec128-179">시스템 수준 되기 때문에 명명 된 뮤텍스 프로세스 경계를 넘어 리소스 사용을 조정 하 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-179">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec128-180">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 개뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-180">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ec128-181">이름이 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-181">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ec128-182">이름이 접두사로 시작 하는 경우 "로컬\\", 뮤텍스가 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-182">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ec128-183">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-183">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ec128-184">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-184">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ec128-185">터미널 서버 세션 내에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 되며 둘 다 볼 수는 모든 프로세스에 터미널 서버 세션에서.</span><span class="sxs-lookup"><span data-stu-id="ec128-185">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ec128-186">즉, 접두사 이름은 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 않은 뮤텍스 이름의 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-186">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="ec128-187">다음 예제에서는 명명된 된 뮤텍스 두 개의 별도 프로세스에서 실행 되는 스레드 간에 신호 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-187">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="ec128-188">두 개 이상의 명령 창에서이 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-188">Run this program from two or more command windows.</span></span> <span data-ttu-id="ec128-189">각 프로세스는 한 <xref:System.Threading.Mutex> 명명 된 뮤텍스를 나타내는 `MyMutex`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-189">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="ec128-190">명명 된 뮤텍스는 수명이의 수명을으로 제한 된 시스템 개체는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-190">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="ec128-191">명명 된 뮤텍스는 첫 번째 프로세스 때 만들어집니다 해당 <xref:System.Threading.Mutex> 개체; 프로그램을 실행 하는 첫 번째 프로세스가이 예제에서는 명명 된 뮤텍스가 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-191">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="ec128-192">명명 된 뮤텍스 소멸 될 때 모든는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 릴리스 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-192">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="ec128-193">이 예제에서 사용 하는 생성자 오버 로드 호출 스레드 명명된 뮤텍스의 초기 소유권을 부여 되었는지 여부를 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-193">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="ec128-194">스레드 명명 된 뮤텍스 만든다고 제어할 수 있습니다 하지 않는 한 시스템 뮤텍스의 초기 소유권을 요청 하려면이 생성자를 사용 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-194">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-195">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-195">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-196">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-196">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ec128-197">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-197">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-198">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-198">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-199">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-199">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-200">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-200">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ec128-201">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-201">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ec128-202">
            <see cref="T:System.Threading.Mutex" />의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-202">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="ec128-203">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-203">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="ec128-204">이 메서드가 반환될 때 로컬 뮤텍스가 만들어진 경우(즉, <c>이름</c>이 <see langword="null" />이거나 빈 문자열인 경우)나 지정된 명명된 시스템 뮤텍스가 만들어진 경우에는 <see langword="true" />인 부울이 포함되고, 지정된 명명된 시스템 뮤텍스가 이미 있는 경우에는 <see langword="false" />가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-204">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="ec128-205">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-205">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-206">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값, 뮤텍스의 이름인 문자열 및 메서드에서 반환할 때 호출한 스레드에 뮤텍스의 초기 소유권이 부여되었는지를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-206">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-207">경우 `name` 않습니다 `null` 및 `initiallyOwned` 은 `true`, 경우에만 명명 된 뮤텍스를 소유 하는 호출 스레드에서 `createdNew` 은 `true` 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-207">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="ec128-208">그렇지 않으면 스레드가 않으면 호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-208">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-209">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-209">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ec128-210">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-210">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-211">명명된 된 뮤텍스에 액세스 제어 보안을 이미 만들어졌습니다 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> 권한, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-211">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="ec128-212">기존 스레드 작업을 동기화 하는 데 필요한 이러한 권한이 포함 된 명명 된 뮤텍스를 열려면 참조는 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-212">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-213">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 뮤텍스가 만들어지는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-213">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ec128-214">이 경우 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-214">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ec128-215">시스템 수준 되기 때문에 명명 된 뮤텍스 프로세스 경계를 넘어 리소스 사용을 조정 하 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-215">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec128-216">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 개뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-216">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ec128-217">이름이 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-217">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ec128-218">이름이 접두사로 시작 하는 경우 "로컬\\", 뮤텍스가 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-218">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ec128-219">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-219">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ec128-220">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-220">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ec128-221">터미널 서버 세션 내에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 되며 둘 다 볼 수는 모든 프로세스에 터미널 서버 세션에서.</span><span class="sxs-lookup"><span data-stu-id="ec128-221">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ec128-222">즉, 접두사 이름은 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 않은 뮤텍스 이름의 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-222">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="ec128-223">다음 코드 예제에서는 명명된 된 뮤텍스 프로세스 또는 스레드 간에 신호 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-223">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="ec128-224">두 개 이상의 명령 창에서이 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-224">Run this program from two or more command windows.</span></span> <span data-ttu-id="ec128-225">각 프로세스는 한 <xref:System.Threading.Mutex> "인 MyMutex" 명명 된 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-225">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="ec128-226">명명 된 뮤텍스는 시스템 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-226">The named mutex is a system object.</span></span> <span data-ttu-id="ec128-227">이 예제에서는 그 수명은의 수명에 의해 제한 됩니다는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-227">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="ec128-228">첫 번째 프로세스는 로컬에서 명명 된 뮤텍스 생성 됩니다 <xref:System.Threading.Mutex> 개체를 소멸 될 때 모든는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 릴리스 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-228">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="ec128-229">명명 된 뮤텍스는 처음 첫 번째 프로세스에 의해 소유 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-229">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="ec128-230">두 번째 프로세스 및 모든 후속 프로세스 이전 프로세스 명명 된 뮤텍스를 해제 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-230">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-231">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-231">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-232">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-232">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ec128-233">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-233">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-234">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-234">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-235">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-235">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-236">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-236">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ec128-237">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-237">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ec128-238">시스템 뮤텍스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-238">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="ec128-239">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-239">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="ec128-240">이 메서드가 반환될 때 로컬 뮤텍스가 만들어진 경우(즉, <c>이름</c>이 <see langword="null" />이거나 빈 문자열인 경우)나 지정된 명명된 시스템 뮤텍스가 만들어진 경우에는 <see langword="true" />인 부울이 포함되고, 지정된 명명된 시스템 뮤텍스가 이미 있는 경우에는 <see langword="false" />가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-240">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="ec128-241">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-241">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="ec128-242">명명된 시스템 뮤텍스에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-243">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값, 뮤텍스의 이름인 문자열 및 메서드에서 반환할 때 호출한 스레드에 뮤텍스의 초기 소유권이 부여되었는지와 명명된 뮤텍스에 적용할 액세스 제어 보안을 나타내는 부울 변수를 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-243">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-244">경우 `name` 않습니다 `null` 및 `initiallyOwned` 은 `true`, 경우에만 명명 된 뮤텍스를 소유 하는 호출 스레드에서 `createdNew` 은 `true` 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-244">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="ec128-245">그렇지 않으면 스레드가 않으면 호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-245">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-246">이 생성자를 사용 하 여 인해 다른 코드에서 뮤텍스의 제어권을 만들 때 명명 된 시스템 뮤텍스에 액세스 제어 보안을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-246">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="ec128-247">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-247">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ec128-248">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-248">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-249">명명된 된 시스템 뮤텍스가 존재 하지 않는 경우 지정 된 액세스 제어 보안으로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-249">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="ec128-250">명명 된 뮤텍스가 존재 하는 경우 지정 된 액세스 제어 보안 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-250">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec128-251">새로 만든에 대 한 모든 권한을 호출자에 게 <xref:System.Threading.Mutex> 경우에도 개체 `mutexSecurity` 거부 없거나 현재 사용자에 게 일부 액세스 권한을 부여에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-251">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="ec128-252">그러나 현재 사용자가 다른 <xref:System.Threading.Mutex> 개체를 나타내는 동일한 명명 된 뮤텍스를 사용 하 여 생성자 또는 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드를 Windows 액세스 제어 보안 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-252">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="ec128-253">명명된 된 뮤텍스에 액세스 제어 보안을 이미 만들어졌습니다 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-253">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="ec128-254">기존 스레드 작업을 동기화 하는 데 필요한 이러한 권한이 포함 된 명명 된 뮤텍스를 열려면 참조는 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-254">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-255">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 뮤텍스가 만들어지는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-255">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ec128-256">이 경우 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-256">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ec128-257">시스템 수준 되기 때문에 명명 된 뮤텍스 프로세스 경계를 넘어 리소스 사용을 조정 하 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-257">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ec128-258">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 개뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-258">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ec128-259">이름이 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-259">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ec128-260">이름이 접두사로 시작 하는 경우 "로컬\\", 뮤텍스가 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-260">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ec128-261">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-261">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ec128-262">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-262">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ec128-263">터미널 서버 세션 내에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 되며 둘 다 볼 수는 모든 프로세스에 터미널 서버 세션에서.</span><span class="sxs-lookup"><span data-stu-id="ec128-263">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ec128-264">즉, 접두사 이름은 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 않은 뮤텍스 이름의 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-264">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="ec128-265">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-265">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ec128-266">이 예제에서는 사용은 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 뮤텍스의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-266">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ec128-267">뮤텍스 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-267">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ec128-268">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-268">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ec128-269">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-269">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ec128-270">권한이 변경 된 후 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-270">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ec128-271">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-271">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-272">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-272">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-273">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-273">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ec128-274">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-274">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-275">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-275">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-276">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-276">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-277">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-277">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec128-278">명명된 뮤텍스에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-278">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec128-279">명명된 뮤텍스에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-280"><xref:System.Threading.Mutex.GetAccessControl%2A> 메서드 플래그 (비트 OR 연산을 사용 하 여 결합)는 다음과 같은 조합을 사용 하 여 사용 권한을 검색할: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, 및 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-280">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ec128-281">사용자에 게 있어야 <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> 이 메서드를 호출 하는 뮤텍스를 열려 있어야와 <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-281">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-282">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-282">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ec128-283">이 예제에서는 사용은 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 뮤텍스의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-283">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ec128-284">뮤텍스 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-284">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ec128-285">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-285">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ec128-286">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 하 여 사용 권한을 변경 하는 데 필요한 권한을 뮤텍스를 여는 <xref:System.Threading.Mutex.GetAccessControl%2A> 및 <xref:System.Threading.Mutex.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-286">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="ec128-287">권한이 변경 된 후 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-287">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ec128-288">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-288">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-289">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-289">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="ec128-290">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-290">-or-</span>
          </span>
          <span data-ttu-id="ec128-291">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지만 <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />를 사용하여 열리지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-291">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ec128-292">Windows 98 또는 Windows Millennium Edition에서 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-292">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec128-293">이미 있는 경우 지정한 명명된 뮤텍스를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-293">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ec128-294">열려는 시스템 뮤텍스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-294">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-295">이미 있는 경우 지정한 명명된 뮤텍스를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-295">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec128-296">명명된 시스템 뮤텍스를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-296">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-297"><xref:System.Threading.Mutex.OpenExisting%2A> 명명 된 시스템 뮤텍스가 메서드는 지정 된 열려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-297">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="ec128-298">된 시스템 뮤텍스가 존재 하지 않는 경우이 메서드는 시스템 개체를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-298">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="ec128-299">이미 존재 하지 않을 때 시스템 뮤텍스의 만들려는 중 하나를 사용는 <xref:System.Threading.Mutex.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-299">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ec128-300">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 반환 되는 개체는 같은 명명 된 시스템 뮤텍스를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-300">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-301">이 메서드 오버 로드 하는 것은 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-301">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="ec128-302">지정 하는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 플래그에 뮤텍스를 대기 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-302">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-303">이 메서드는 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-303">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-304">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-304">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ec128-305">이 예제에서는 사용은 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 뮤텍스의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-305">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ec128-306">뮤텍스 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-306">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ec128-307">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-307">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ec128-308">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-308">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ec128-309">권한이 변경 된 후 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-309">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ec128-310">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-310">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-311">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-311">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ec128-312">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-312">-or-</span>
          </span>
          <span data-ttu-id="ec128-313">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-313">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec128-314">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-314">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ec128-315">명명된 뮤텍스가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-315">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-316">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-316">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-317">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-317">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-318">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-318">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-319">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-319">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ec128-320">열려는 시스템 뮤텍스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-320">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="ec128-321">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-321">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-322">이미 있는 경우 지정한 명명된 뮤텍스를 원하는 보안 액세스로 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-322">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec128-323">명명된 시스템 뮤텍스를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-323">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-324">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 뮤텍스를 대기 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-324">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-325"><xref:System.Threading.Mutex.OpenExisting%2A> 메서드는 기존의 명명 된 뮤텍스를 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-325">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="ec128-326">된 시스템 뮤텍스가 존재 하지 않는 경우이 메서드는 시스템 개체를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-326">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="ec128-327">이미 존재 하지 않을 때 시스템 뮤텍스의 만들려는 중 하나를 사용는 <xref:System.Threading.Mutex.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-327">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ec128-328">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 반환 되는 개체는 같은 명명 된 시스템 뮤텍스를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-328">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-329">이 메서드는 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-329">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-330">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-330">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ec128-331">이 예제에서는 사용은 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 뮤텍스의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-331">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ec128-332">뮤텍스 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-332">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ec128-333">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-333">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ec128-334">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-334">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ec128-335">권한이 변경 된 후 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-335">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ec128-336">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-336">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-337">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-337">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ec128-338">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-338">-or-</span>
          </span>
          <span data-ttu-id="ec128-339">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-339">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec128-340">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-340">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ec128-341">명명된 뮤텍스가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-341">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-342">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-342">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-343">명명된 뮤텍스가 있지만 사용자에게 필요한 보안 액세스가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-343">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-344">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-344">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-345">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-345">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ec128-346">
            <see cref="T:System.Threading.Mutex" />을(를) 한 번 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-346">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-347">스레드가 뮤텍스를 획득 될 때마다 (예를 들어 호출 하 여 해당 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드), 이후에 호출 해야 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 사용 하지 못하고 뮤텍스의 소유권을 얻으려고 시도 하는 다른 스레드를 차단 해제를 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-347">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="ec128-348">뮤텍스의 소유권을 가져오려는 시도가 실패 하는 경우 (예를 들어 경우에 대 한 호출은 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드는 `millisecondsTimeout` 또는 `timeout` 매개 변수를 반환 `false` 요청 시간이 초과 하기 때문에), 스레드 호출 해서는 안 <xref:System.Threading.Mutex.ReleaseMutex%2A>,이 대/소문자는 스레드도 하지 수 있어야 뮤텍스의 다음 예제와 같이 보호를 받는 리소스에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-348">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="ec128-349">뮤텍스를 소유 하는 스레드 실행을 차단 하지 않고 반복 된 대기 함수 호출에 같은 뮤텍스를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-349">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="ec128-350">공용 언어 런타임에 의해 호출 수가 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-350">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="ec128-351">스레드에서 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 해제 하려면 동일한 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-351">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="ec128-352">스레드가 뮤텍스를 소유 하는 동안 종료 되 면 뮤텍스가 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-352">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="ec128-353">뮤텍스 상태 신호 설정 되 고 대기 중인 다음 스레드가 소유권을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-353">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="ec128-354">뮤텍스를 소유 아무도 뮤텍스의 상태 신호입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-354">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="ec128-355">.NET Framework 버전 2.0 부터는 <xref:System.Threading.AbandonedMutexException> 뮤텍스를 획득 하는 다음 스레드에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-355">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="ec128-356">.NET Framework 버전 2.0 이전 예외가 throw 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-356">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ec128-357">중단 된 뮤텍스는 코드의 심각한 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-357">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="ec128-358">스레드가 뮤텍스를 해제 하지 않고 종료 되 면 뮤텍스의 보호를 받는 데이터 구조 일관성 있는 상태가 아닐 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-358">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="ec128-359">뮤텍스의 소유권을 요청 하는 다음 스레드에서이 예외를 처리 하 고 데이터 구조의 무결성을 확인할 수 있으면 계속 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-359">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="ec128-360">시스템 차원 뮤텍스의 경우 중단된 뮤텍스는 응용 프로그램이 갑자기 종료되었음을 나타낼 수 있습니다(예: Windows 작업 관리자를 사용하여).</span><span class="sxs-lookup"><span data-stu-id="ec128-360">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-361">다음 예제에서는 로컬 방법을 <xref:System.Threading.Mutex> 개체를 사용 하 여 보호 된 리소스에 대 한 액세스를 동기화 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-361">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ec128-362">뮤텍스를 만드는 스레드는를 소유 하지 않습니다 처음 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-362">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="ec128-363"><xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드는 더 이상 필요 없는 뮤텍스를 해제 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-363">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="ec128-364">호출 스레드가 뮤텍스를 소유하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-364">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ec128-365">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-365">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="ec128-366">명명된 시스템 뮤텍스에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-366">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-367">명명된 시스템 뮤텍스에 액세스 제어 보안을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-367">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-368">사용자에 게 있어야 <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> 뮤텍스 및이 메서드를 호출 하는 권한으로 연 해야 <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-368">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec128-369">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-369">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ec128-370">이 예제에서는 사용은 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 뮤텍스의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-370">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ec128-371">뮤텍스 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-371">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ec128-372">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-372">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ec128-373">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 하 여 사용 권한을 변경 하는 데 필요한 권한을 뮤텍스를 여는 <xref:System.Threading.Mutex.GetAccessControl%2A> 및 <xref:System.Threading.Mutex.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-373">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="ec128-374">권한이 변경 된 후 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-374">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ec128-375">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-375">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec128-376">
            <paramref name="mutexSecurity" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-376">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-377">사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-377">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="ec128-378">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-378">-or-</span>
          </span>
          <span data-ttu-id="ec128-379">뮤텍스가 <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />를 사용하여 열리지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-379">The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="ec128-380">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-380">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec128-381">지정한 명명된 뮤텍스(이미 존재하는 경우)를 열고 작업이 수행되었는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-381">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ec128-382">열려는 시스템 뮤텍스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-382">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="ec128-383">이 메서드가 반환될 때 호출이 성공적으로 실행된 경우 이름이 지정된 뮤텍스를 나타내는 <see cref="T:System.Threading.Mutex" /> 개체를 포함하고 호출에 실패한 경우는 <see langword="null" />을(를) 포함해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-383">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="ec128-384">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-384">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-385">지정한 명명된 뮤텍스(이미 존재하는 경우)를 열고 작업이 수행되었는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-385">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec128-386">명명된 뮤텍스를 열었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-386">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-387">명명 된 뮤텍스가 존재 하지 않는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-387">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="ec128-388">이미 존재 하지 않을 때 시스템 뮤텍스의 만들려는 중 하나를 사용는 <xref:System.Threading.Mutex.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-388">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ec128-389">대신이 메서드 오버 로드를 사용 하 여 명명된 된 뮤텍스 있는지 잘 모르는 경우는 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 뮤텍스가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-389">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="ec128-390">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 반환 되는 개체는 같은 명명 된 시스템 뮤텍스를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-390">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-391">이 메서드 오버 로드 하는 것은 <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-391">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="ec128-392">지정 하는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 플래그에 뮤텍스를 대기 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-392">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-393">이 메서드는 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-393">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-394">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-394">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ec128-395">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-395">-or-</span>
          </span>
          <span data-ttu-id="ec128-396">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-396">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec128-397">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-397">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-398">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-398">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-399">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-399">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-400">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-400">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-401">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-401">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ec128-402">열려는 시스템 뮤텍스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-402">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="ec128-403">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-403">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="ec128-404">이 메서드가 반환될 때 호출이 성공적으로 실행된 경우 이름이 지정된 뮤텍스를 나타내는 <see cref="T:System.Threading.Mutex" /> 개체를 포함하고 호출에 실패한 경우는 <see langword="null" />을(를) 포함해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-404">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="ec128-405">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-405">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec128-406">지정된 명명된 뮤텍스를 원하는 보안 액세스 상태에서 열고 작업이 수행되었는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-406">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec128-407">명명된 뮤텍스를 열었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-407">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec128-408">명명 된 뮤텍스가 존재 하지 않는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-408">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="ec128-409">이미 존재 하지 않을 때 시스템 뮤텍스의 만들려는 중 하나를 사용는 <xref:System.Threading.Mutex.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-409">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ec128-410">대신이 메서드 오버 로드를 사용 하 여 명명된 된 뮤텍스 있는지 잘 모르는 경우는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 뮤텍스가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-410">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="ec128-411">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 뮤텍스를 대기 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec128-411">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ec128-412">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 반환 되는 개체는 같은 명명 된 시스템 뮤텍스를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-412">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ec128-413">이 메서드는 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec128-413">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec128-414">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-414">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ec128-415">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-415">-or-</span>
          </span>
          <span data-ttu-id="ec128-416">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-416">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ec128-417">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-417">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ec128-418">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-418">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ec128-419">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-419">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ec128-420">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-420">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ec128-421">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec128-421">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>