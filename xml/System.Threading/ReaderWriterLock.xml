<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReaderWriterLock.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc1a0c88765040869d8ad919aeb575e304c71bde.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1a0c88765040869d8ad919aeb575e304c71bde</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Defines a lock that supports single writers and multiple readers.</source>
          <target state="translated">단일 작성기 및 다중 판독기를 지원하는 잠금을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> has two reader-writer locks, <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>에는 두 개의 판독기/작성기 잠금인 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>이 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is recommended for all new development.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>은 모든 새 개발에 권장됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>은 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>과 비슷하지만 재귀 및 잠금 상태 업그레이드/다운그레이드에 대한 간소화된 규칙을 포함합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> avoids many cases of potential deadlock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>은 교착 상태가 발생할 수 있는 많은 경우를 방지합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In addition, the performance of <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> is significantly better than <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>의 성능이 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>보다 훨씬 더 놓습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is used to synchronize access to a resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</source>
          <target state="translated">지정된 된 시간에 여러 스레드에 대 한 동시 읽기 액세스 하거나 단일 스레드에 대 한 쓰기 권한을 허용합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In a situation where a resource is changed infrequently, a <ph id="ph1">`ReaderWriterLock`</ph> provides better throughput than a simple one-at-a-time lock, such as <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">리소스 자주 변경 되는 경우에는 <ph id="ph1">`ReaderWriterLock`</ph> 와 같은 간단한 한 런타임 잠금 보다 처리량이 향상 제공 <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source><ph id="ph1">`ReaderWriterLock`</ph> works best where most accesses are reads, while writes are infrequent and of short duration.</source>
          <target state="translated"><ph id="ph1">`ReaderWriterLock`</ph> 대부분 액세스는 읽기에 쓰기가 자주 수행 되 고 짧은 기간 가장 잘 작동 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</source>
          <target state="translated">어떤 오랜 시간 동안 차단 되도록 여러 판독기와 단일 작성기 대체 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Holding reader locks or writer locks for long periods will starve other threads.</source>
          <target state="translated">오랜 시간 동안 잠금 판독기 또는 작성기 잠금을 보유 하면 다른 스레드에서 실행할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For best performance, consider restructuring your application to minimize the duration of writes.</source>
          <target state="translated">최상의 성능을 위해 쓰기의 기간을 최소화 하기 위해 응용 프로그램을 재구성 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can hold a reader lock or a writer lock, but not both at the same time.</source>
          <target state="translated">스레드 잠금 또는 기록기 잠금으로 하나만 동시에 판독기를 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Instead of releasing a reader lock in order to acquire the writer lock, you can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>.</source>
          <target state="translated">판독기 잠금을 작성기 잠금을 획득 하기 위해 해제를 대신 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Recursive lock requests increase the lock count on a lock.</source>
          <target state="translated">재귀적 잠금 요청에서 잠금을 잠금 수를 늘립니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Readers and writers are queued separately.</source>
          <target state="translated">판독기와 작성기는 별도로 대기 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</source>
          <target state="translated">작성기 잠금을 해제 하는 스레드를 즉시 판독기 queue에서 대기 중인 모든 스레드에 판독기 잠금이; 부여 됩니다. 때 모든 판독기 잠금이 해제 된, 작성기에서 다음 스레드 대기 중인 있는 경우 작성기 잠금이 부여 되 면 큐 등에입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>In other words, <ph id="ph1">`ReaderWriterLock`</ph> alternates between a collection of readers, and one writer.</source>
          <target state="translated">즉, <ph id="ph1">`ReaderWriterLock`</ph> 독자의 컬렉션과 기록기 간을 전환 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</source>
          <target state="translated">잠금이 해제 될 현재 판독기에 대 한 스레드 작성기 큐에서 대기 하는 동안 새 판독기 잠금을 요청 하는 스레드 판독기 큐에 누적 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</source>
          <target state="translated">해당 요청은 권한을 부여 하지 동시 액세스 기존 판독기 잠금 소유자에 게;와 공유할 수 있지만 이 판독기에서 무한 중단에 대 한 작성자를 보호할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Most methods for acquiring locks on a <ph id="ph1">`ReaderWriterLock`</ph> accept time-out values.</source>
          <target state="translated">잠금을 획득 하는 것에 대 한 대부분의 메서드는 <ph id="ph1">`ReaderWriterLock`</ph> 제한 시간 값을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Use time-outs to avoid deadlocks in your application.</source>
          <target state="translated">응용 프로그램에서 교착 상태 방지 하려면 제한 시간을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</source>
          <target state="translated">스레드 수 하나의 리소스에 대해 작성기 잠금을 설정 하 고 두 번째 리소스;에 대 한 판독기 잠금을 요청 하는 예를 들어 그 동안에 다른 스레드에서 두 번째 리소스에 작성기 잠금을 설정 하 고 첫 번째 판독기 잠금을 요청 하 여 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Unless time-outs are used, the threads deadlock.</source>
          <target state="translated">제한 시간을 사용 하지 않는 스레드 교착 상태가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">시간 제한 간격이 만료 되는 경우 잠금 요청이 허용 되지 않았음을 메서드 제어를 반환 호출 스레드를 throw 하 여 프로그램 <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>A thread can catch this exception and determine what action to take next.</source>
          <target state="translated">스레드 수이 예외를 catch 하 고을 수행 하는 작업을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Time-outs are expressed in milliseconds.</source>
          <target state="translated">제한 시간 (밀리초)로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you use a <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> to specify the time-out, the value used is the total number of whole milliseconds represented by the <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> 제한 시간을 지정 하려면 사용 되는 값은가 나타내는 정수 밀리초의 총 수는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following table shows the valid time-out values in milliseconds.</source>
          <target state="translated">다음 표에서 시간 (밀리초)에 유효한 제한 시간 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>-1</source>
          <target state="translated">-1</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread waits until the lock is acquired, regardless of how long it takes.</source>
          <target state="translated">스레드는 잠금을 얻으면 소요 되는 시간 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>For methods that specify integer time-outs, the constant <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> can be used.</source>
          <target state="translated">정수 제한 시간, 상수를 지정 하는 방법에 대 한 <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The thread does not wait to acquire the lock.</source>
          <target state="translated">스레드 잠금을 기다리지 않습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If the lock cannot be acquired immediately, the method returns.</source>
          <target state="translated">메서드가 반환 하는 경우 잠금을 획득할 수 없는 즉시 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>&gt;0</source>
          <target state="translated">&gt;0</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The number of milliseconds to wait.</source>
          <target state="translated">대기하는 밀리초 수입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>With the exception of -1, negative time-out values are not allowed.</source>
          <target state="translated">-1을 제외한 음수 시간 제한 값 허용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>If you specify a negative integer other than -1, a time-out value of zero is used instead.</source>
          <target state="translated">-1이 아닌 음수를 지정 하는 경우 시간 제한 값이 0이 대신 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> that represents a negative number of milliseconds other than -1, <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is thrown.</source>
          <target state="translated">(즉, 메서드는, 대기 하지 않고 즉시 잠금을 가져올 수 있는 경우) 지정 하는 경우는 <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 음수-1 이외의 시간 (밀리초)을 나타내는 <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> to protect a shared resource, an integer value named <ph id="ph2">`resource`</ph>, that is read concurrently and written exclusively by multiple threads.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 공유 리소스를 보호 하는 정수 값 이라는 <ph id="ph2">`resource`</ph>, 즉 동시에 읽고 여러 스레드에서 단독으로 씁니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>Note that the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> is declared at the class level so that it is visible to all threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 모든 스레드를 볼 수 있도록 클래스 수준에서 선언 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ReaderWriterLock">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>The following code example demonstrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스의 새 인스턴스를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.#ctor">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires a reader lock.</source>
          <target state="translated">판독기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Acquires a reader lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값을 사용하여 판독기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 작성기 잠금을 보유 한 다른 스레드 또는 하나 이상의 스레드가 기록기 잠금으로 인해 대기 하는 경우 차단 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">현재 스레드에 작성기 잠금이 이미 있으면 판독기 잠금이 획득 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">대신, 작성기 잠금을 잠금 수가 증가 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">이 자체 작성기 잠금을 차단에서 스레드를 차단 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">결과 정확 하 게 호출할 때와 동일 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, 및를 추가로 호출 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 는 작성기 잠금을 해제 하는 경우 필요 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 재귀적 판독기 잠금 요청을 지원합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">즉, 스레드 수 AcquireReaderLock를 여러 번 호출할 때마다 잠금 수를 증가입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> 호출할 때마다에 대해 한 번씩 <ph id="ph2">`AcquireReaderLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 즉시 0 잠금 수를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">재귀적 잠금 요청은 항상 요청 하는 스레드의 판독기 큐에 배치 하지 않고 즉시, 부여 됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">오랜 시간 동안 작성기 잠금 요청을 차단 되지 않도록 주의 해야 재귀적 잠금을 사용.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">다음 코드 예제에서는 판독기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">제한 시간을 지정하는 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Acquires a reader lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 값을 사용하여 판독기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A&gt;</ph> 작성기 잠금을 보유 한 다른 스레드 또는 하나 이상의 스레드가 기록기 잠금으로 인해 대기 하는 경우 차단 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>If the current thread already has the writer lock, no reader lock is acquired.</source>
          <target state="translated">현재 스레드에 작성기 잠금이 이미 있으면 판독기 잠금이 획득 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Instead, the lock count on the writer lock is incremented.</source>
          <target state="translated">대신, 작성기 잠금을 잠금 수가 증가 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>This prevents a thread from blocking on its own writer lock.</source>
          <target state="translated">이 자체 작성기 잠금을 차단에서 스레드를 차단 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>The result is exactly the same as calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, and an additional call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> is required when releasing the writer lock.</source>
          <target state="translated">결과 정확 하 게 호출할 때와 동일 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, 및를 추가로 호출 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 는 작성기 잠금을 해제 하는 경우 필요 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireReaderLock`</ph> supports recursive reader-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireReaderLock`</ph> 재귀적 판독기 잠금 요청을 지원합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</source>
          <target state="translated">즉, 스레드 수 AcquireReaderLock를 여러 번 호출할 때마다 잠금 수를 증가입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireReaderLock`</ph>.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> 호출할 때마다에 대해 한 번씩 <ph id="ph2">`AcquireReaderLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 즉시 0 잠금 수를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</source>
          <target state="translated">재귀적 잠금 요청은 항상 요청 하는 스레드의 판독기 큐에 배치 하지 않고 즉시, 부여 됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</source>
          <target state="translated">오랜 시간 동안 작성기 잠금 요청을 차단 되지 않도록 주의 해야 재귀적 잠금을 사용.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 -1밀리초 이외의 음수 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Acquires the writer lock.</source>
          <target state="translated">작성기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Acquires the writer lock, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값을 사용하여 작성기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">이 메서드는 다른 스레드가 판독기 잠금을 또는 작성기 잠금을 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">여러 개의 동시 판독기 잠금을 작성기 잠금을 교체 하는 방법에 대 한 참조는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">판독기 잠금을 있는 스레드는 두 가지 방법 중 하나로 작성기 잠금을 획득할 수: 호출 하기 전에 판독기 잠금을 해제 하 여 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>를 호출 하 여 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">스레드가 호출 하는 경우 <ph id="ph1">`AcquireWriterLock`</ph> 의 자체 판독기 잠금이 차단 됩니다 판독기 잠금으로 아직, 동안; 스레드가 교착 상태가 무한 한 제한 시간을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">이러한 교착 상태를 방지 하려면 사용 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> 현재 스레드에 판독기 잠금이 이미에 있는지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 재귀적 작성기 잠금 요청을 지원합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">즉, 스레드 호출 수 <ph id="ph1">`AcquireWriterLock`</ph> 여러 번 있는 잠금 수가 때마다 커집니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 호출할 때마다에 대해 한 번씩 <ph id="ph2">`AcquireWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 즉시 0 잠금 수를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">재귀적 잠금 요청은 항상 요청 하는 스레드의 작성기 큐에 배치 하지 않고 즉시, 부여 됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">다음 코드 예제에서는 작성기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">제한 시간을 지정하는 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Acquires the writer lock, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 값을 사용하여 작성기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>This method blocks if another thread has a reader lock or writer lock.</source>
          <target state="translated">이 메서드는 다른 스레드가 판독기 잠금을 또는 작성기 잠금을 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">여러 개의 동시 판독기 잠금을 작성기 잠금을 교체 하는 방법에 대 한 참조는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>, or by calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">판독기 잠금을 있는 스레드는 두 가지 방법 중 하나로 작성기 잠금을 획득할 수: 호출 하기 전에 판독기 잠금을 해제 하 여 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>를 호출 하 여 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>If a thread calls <ph id="ph1">`AcquireWriterLock`</ph> while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</source>
          <target state="translated">스레드가 호출 하는 경우 <ph id="ph1">`AcquireWriterLock`</ph> 의 자체 판독기 잠금이 차단 됩니다 판독기 잠금으로 아직, 동안; 스레드가 교착 상태가 무한 한 제한 시간을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>To avoid such deadlocks, use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> to determine whether the current thread already has a reader lock.</source>
          <target state="translated">이러한 교착 상태를 방지 하려면 사용 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> 현재 스레드에 판독기 잠금이 이미에 있는지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">`AcquireWriterLock`</ph> supports recursive writer-lock requests.</source>
          <target state="translated"><ph id="ph1">`AcquireWriterLock`</ph> 재귀적 작성기 잠금 요청을 지원합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>That is, a thread can call <ph id="ph1">`AcquireWriterLock`</ph> multiple times, which increments the lock count each time.</source>
          <target state="translated">즉, 스레드 호출 수 <ph id="ph1">`AcquireWriterLock`</ph> 여러 번 있는 잠금 수가 때마다 커집니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>You must call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> once for each time you call <ph id="ph2">`AcquireWriterLock`</ph>.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 호출할 때마다에 대해 한 번씩 <ph id="ph2">`AcquireWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Alternatively, you can call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> to reduce the lock count to zero immediately.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 즉시 0 잠금 수를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</source>
          <target state="translated">재귀적 잠금 요청은 항상 요청 하는 스레드의 작성기 큐에 배치 하지 않고 즉시, 부여 됩니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 -1밀리초 이외의 음수 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The sequence number.</source>
          <target state="translated">시퀀스 번호입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</source>
          <target state="translated">시퀀스 번호를 가져온 다음 임의의 스레드에 작성기 잠금이 부여되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">시퀀스 번호를 가져온 다음 임의의 스레드에 작성기 잠금이 부여된 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>You can use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> and <ph id="ph2">`AnyWritersSince`</ph> to improve application performance.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> 및 <ph id="ph2">`AnyWritersSince`</ph> 응용 프로그램 성능 향상을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">예를 들어 스레드 판독기 잠금을 보유 하는 동안 가져온 정보를 캐시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>After releasing and later reacquiring the lock, the thread can use <ph id="ph1">`AnyWritersSince`</ph> to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</source>
          <target state="translated">스레드 잠금을 썼는지 나중에 있으며, צ ְ ײ <ph id="ph1">`AnyWritersSince`</ph> 중간;에 다른 스레드가 리소스에 작성 한 경우 여부, 캐시 된 정보를 사용할 수를 확인 하려면.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">이 기술은 유용 잠금으로 보호 되는 정보를 읽는 비쌉니다. 예를 들어 데이터베이스 쿼리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">호출자가 보유 하 고 있어야 판독기 잠금을 또는 기록기 잠금으로 유용 하 게 되려면 시퀀스 번호에 대 한 순서 대로 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> 있는지 여부를 다른 스레드에 작성기 잠금을 보호 된 리소스에 현재 스레드 이후에 결정 하는 속성에는 마지막 작성기 잠금을 보유 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>이 반환한 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph> was called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /&gt;</ph>을 호출하기 전에 스레드의 잠금 상태를 이전 상태로 복원합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> 재귀 잠금 수에 관계 없이 작성기 잠금을 해제 하 고 판독기 잠금을 작성기 잠금으로 업그레이드 하기 전에 스레드에 의해 보유 된를 복원 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The lock count on the reader lock is restored.</source>
          <target state="translated">판독기 잠금을 잠금 수가 복원 됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source><ph id="ph1">`DowngradeFromWriterLock`</ph> accepts a <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> obtained by calling <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`DowngradeFromWriterLock`</ph> 허용 된 <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> 호출 하 여 가져온 <ph id="ph3">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">`LockCookie`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">사용 하지 않는 한 <ph id="ph1">`LockCookie`</ph> 반환한 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</source>
          <target state="translated">스레드에는 작성기 잠금이 해제 될 때 모든 판독기 잠금 요청 권한이 부여 되므로 다른 스레드에서 작성기 잠금을 기다리는 경우에 작성기 잠금을에서 다운 그레이드할 때을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">다음 코드 예제에서는 판독기 잠금을 요청 하 여 판독기 잠금을 작성기 잠금으로 업그레이드 하 고 다시 판독기 잠금으로 다운 그레이드 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">스레드에 작성기 잠금이 없는 경우</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph>의 주소는 null 포인터입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> object.</source>
          <target state="translated">가비지 수집기에서 <ph id="ph1">&lt;see cref="T:System.Threading.ReaderWriterLock" /&gt;</ph> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> when the current <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> object is ready to be finalized.</source>
          <target state="translated">가비지 컬렉션이 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.Finalize%2A&gt;</ph> 때 현재 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 개체는 종료 될 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>Gets a value indicating whether the current thread holds a reader lock.</source>
          <target state="translated">현재 스레드에 판독기 잠금이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds a reader lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 스레드에 판독기 잠금이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
          <source>The following code example demonstrates how to use <ph id="ph1">`IsReaderLockHeld`</ph> to avoid deadlocks.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다. <ph id="ph1">`IsReaderLockHeld`</ph> 교착 상태 방지 하려면.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>Gets a value indicating whether the current thread holds the writer lock.</source>
          <target state="translated">현재 스레드에 작성기 잠금이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the writer lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 스레드에 작성기 잠금이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
          <source>The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, <ph id="ph1">`ReaderWriterLock`</ph> does not grant the reader lock but instead increments the lock count on the writer lock.</source>
          <target state="translated">작성기 잠금을 보유 하는 스레드에서 판독기 잠금을 획득 하려고 시도 하는 경우 다음 코드 예제에서는 있는 <ph id="ph1">`ReaderWriterLock`</ph> 이 판독기 잠금을 부여 하지 않지만 대신 작성기 잠금을 잠금 수를 증가 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>Releases the lock, regardless of the number of times the thread acquired the lock.</source>
          <target state="translated">스레드에서 잠금을 가져온 횟수에 관계 없이 잠금을 해제합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value representing the released lock.</source>
          <target state="translated">해제된 잠금을 나타내는 <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> releases the reader lock or writer lock, regardless of the recursive lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 판독기 잠금을 또는 재귀 잠금 수에 관계 없이 작성기 잠금을 해제합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>To restore the state of the lock, including the lock count, pass the <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">잠금 수를 포함 하 여 잠금 상태를 복원 하려면 전달 된 <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 스레드와 나중 잠금 상태를 복원 하는 방법으로 잠금을 가져온 횟수에 관계 없이 잠금을 해제 하는 메서드.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>Decrements the lock count.</source>
          <target state="translated">잠금 횟수를 줄입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> decrements the lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A&gt;</ph> 잠금 횟수를 줄입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>When the count reaches zero, the lock is released.</source>
          <target state="translated">수가 0에 도달 하면 잠금이 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has the writer lock, calling <ph id="ph1">`ReleaseReaderLock`</ph> has the same effect as calling <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>.</source>
          <target state="translated">호출 스레드에 작성기 잠금이 있으면 <ph id="ph1">`ReleaseReaderLock`</ph> 호출할 때와 같은 결과가 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>If a thread has no locks, calling <ph id="ph1">`ReleaseReaderLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">호출 스레드가 잠금이 없습니다 경우 <ph id="ph1">`ReleaseReaderLock`</ph> throw는 <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">다음 코드 예제에서는 판독기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
          <source>The thread does not have any reader or writer locks.</source>
          <target state="translated">스레드에 판독기 또는 작성기 잠금이 없는 경우</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>Decrements the lock count on the writer lock.</source>
          <target state="translated">작성기 잠금의 잠금 횟수를 줄입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> decrements the writer lock count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A&gt;</ph> 기록기 잠금 횟수를 줄입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>When the count reaches zero, the writer lock is released.</source>
          <target state="translated">횟수가 0 작성기 잠금이 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>If a thread has a reader lock, or no locks, calling <ph id="ph1">`ReleaseWriterLock`</ph> throws an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>.</source>
          <target state="translated">호출 스레드가 판독기 잠금 또는 잠금 없음 있으면 <ph id="ph1">`ReleaseWriterLock`</ph> throw는 <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</source>
          <target state="translated">다음 코드 예제에서는 작성기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
          <source>The thread does not have the writer lock.</source>
          <target state="translated">스레드에 작성기 잠금이 없는 경우</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> returned by <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph>이 반환한 <ph id="ph2">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Restores the lock status of the thread to what it was before calling <ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /&gt;</ph>을 호출하기 전에 스레드의 잠금 상태를 이전 상태로 복원합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The state restored by <ph id="ph1">`RestoreLock`</ph> includes the recursive lock count.</source>
          <target state="translated">상태에서 복원할 <ph id="ph1">`RestoreLock`</ph> 재귀 잠금 수를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</source>
          <target state="translated">스레드는 차단 되는 잠금 판독기 또는 작성기 잠금을 다른 스레드가 가져온 후 작성기 잠금을 복원 하려는 경우 또는 다른 스레드에 작성기 잠금이 가져온 후 판독기 잠금을 복원 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Because <ph id="ph1">`RestoreLock`</ph> does not accept a time-out, you should take care to avoid possible deadlocks.</source>
          <target state="translated">때문에 <ph id="ph1">`RestoreLock`</ph> 는 제한 시간을 허용 하지 않습니다 가능한 교착 상태를 방지 하기 위해 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Before calling <ph id="ph1">`RestoreLock`</ph>, make sure you have released all locks acquired since the call to <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>.</source>
          <target state="translated">호출 하기 전에 <ph id="ph1">`RestoreLock`</ph>에 대 한 호출 이후 모든 잠금을 해제 했는지 확인 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</source>
          <target state="translated">예를 들어 한 스레드 교착 상태 판독기 잠금을 획득 하 고 이전 기록기 잠금으로 복원 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> to detect such additional locks.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A&gt;</ph> 이러한 추가 잠금을 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>Do not use a <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>.</source>
          <target state="translated">사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Threading.LockCookie&gt;</ph> 에서 반환 된 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.ReleaseLock%2A&gt;</ph> 스레드와 나중 잠금 상태를 복원 하는 방법으로 잠금을 가져온 횟수에 관계 없이 잠금을 해제 하는 메서드.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
          <source>The address of <ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph> is a null pointer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockCookie" /&gt;</ph>의 주소는 null 포인터입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="T:System.Threading.ReaderWriterLock">
          <source>Upgrades a reader lock to the writer lock.</source>
          <target state="translated">판독기 잠금을 작성기 잠금으로 업그레이드합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Upgrades a reader lock to the writer lock, using an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> 값을 사용하여 판독기 잠금을 작성기 잠금으로 업그레이드합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">호출 하면 스레드 <ph id="ph1">`UpgradeToWriterLock`</ph> 판독기 잠금을 잠금 수에 관계 없이 해제 되 고 스레드 작성기 잠금을 큐의 끝으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">따라서 다른 스레드에서 업그레이드 작성기 잠금이 부여를 요청 하는 스레드 하기 전에 리소스를 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">까지 호출한 스레드가 시간 초과 예외가 throw 되지 않습니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 메서드는 판독기 잠금을 다시 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">기록기 잠금으로 인해 대기 하는 다른 스레드가 있으면 즉시 전파 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">그러나 작성기 잠금을 다른 스레드에서 큐에 대기 하는 경우를 호출한 스레드가 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 모든 현재 판독기가 잠금을 해제 하 고 스레드 하나에 획득 하 고 작성기 잠금을 해제할 때까지 메서드는 판독기 잠금을 다시 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">작성기 잠금을 요청 하는 다른 스레드가 현재 스레드의 호출 후 요청 하는 경우에 마찬가지입니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">잠금 상태를 복원 하려면 호출 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> 반환한 <ph id="ph3">`UpgradeToWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">이 사용 하지 마십시오 <ph id="ph1">`LockCookie`</ph> 와 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">스레드에 판독기 잠금이 사용 하지 마십시오 <ph id="ph1">`UpgradeToWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">대신 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</source>
          <target state="translated">다음 코드 예제에서는 판독기 잠금을 요청 하 여 판독기 잠금을 작성기 잠금으로 업그레이드 하 고 다시 판독기 잠금으로 다운 그레이드 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> specifying the time-out period.</source>
          <target state="translated">제한 시간을 지정하는 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Upgrades a reader lock to the writer lock, using a <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph1">&lt;see langword="TimeSpan" /&gt;</ph> 값을 사용하여 판독기 잠금을 작성기 잠금으로 업그레이드합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.LockCookie" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`UpgradeToWriterLock`</ph> the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</source>
          <target state="translated">호출 하면 스레드 <ph id="ph1">`UpgradeToWriterLock`</ph> 판독기 잠금을 잠금 수에 관계 없이 해제 되 고 스레드 작성기 잠금을 큐의 끝으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</source>
          <target state="translated">따라서 다른 스레드에서 업그레이드 작성기 잠금이 부여를 요청 하는 스레드 하기 전에 리소스를 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>The time-out exception is not thrown until the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method can reacquire the reader lock.</source>
          <target state="translated">까지 호출한 스레드가 시간 초과 예외가 throw 되지 않습니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 메서드는 판독기 잠금을 다시 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>If there are no other threads waiting for the writer lock, this happens immediately.</source>
          <target state="translated">기록기 잠금으로 인해 대기 하는 다른 스레드가 있으면 즉시 전파 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>However, if another thread is queued for the writer lock, the thread that called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</source>
          <target state="translated">그러나 작성기 잠금을 다른 스레드에서 큐에 대기 하는 경우를 호출한 스레드가 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 모든 현재 판독기가 잠금을 해제 하 고 스레드 하나에 획득 하 고 작성기 잠금을 해제할 때까지 메서드는 판독기 잠금을 다시 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>This is true even if the other thread that requested the writer lock requested it after the current thread called the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> method.</source>
          <target state="translated">작성기 잠금을 요청 하는 다른 스레드가 현재 스레드의 호출 후 요청 하는 경우에 마찬가지입니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>To restore the lock state, call <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> using the <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> returned by <ph id="ph3">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">잠금 상태를 복원 하려면 호출 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Threading.LockCookie&gt;</ph> 반환한 <ph id="ph3">`UpgradeToWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Do not use this <ph id="ph1">`LockCookie`</ph> with <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>.</source>
          <target state="translated">이 사용 하지 마십시오 <ph id="ph1">`LockCookie`</ph> 와 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.RestoreLock%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>When a thread has no reader lock, do not use <ph id="ph1">`UpgradeToWriterLock`</ph>.</source>
          <target state="translated">스레드에 판독기 잠금이 사용 하지 마십시오 <ph id="ph1">`UpgradeToWriterLock`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph> instead.</source>
          <target state="translated">대신 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source>For valid time-out values, see <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>.</source>
          <target state="translated">유효한 제한 시간 값에 대 한 참조 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> expires before the lock request is granted.</source>
          <target state="translated">잠금 요청이 부여되기 전에 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 만료된 경우</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> specifies a negative value other than -1 milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 -1밀리초 이외의 음수 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>Gets the current sequence number.</source>
          <target state="translated">현재 시퀀스 번호를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The current sequence number.</source>
          <target state="translated">현재 시퀀스 번호입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The sequence number increases whenever a thread acquires the writer lock.</source>
          <target state="translated">시퀀스 번호가 증가 때마다 스레드 작성기 잠금을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can save the sequence number and pass it to <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</source>
          <target state="translated">시퀀스 번호를 저장 하 고 전달 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> 나중, 다른 스레드에서 그 동안 작성기 잠금을 획득 못한 있는지 여부를 확인 하려는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>You can use <ph id="ph1">`WriterSeqNum`</ph> to improve application performance.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">`WriterSeqNum`</ph> 응용 프로그램 성능 향상을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>For example, a thread might cache the information it obtains while holding a reader lock.</source>
          <target state="translated">예를 들어 스레드 판독기 잠금을 보유 하는 동안 가져온 정보를 캐시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling <ph id="ph1">`AnyWritersSince`</ph>; if not, the cached information can be used.</source>
          <target state="translated">나중에 잠금이 썼는지 있으며, 스레드가 다른 스레드에서 호출 하 여 리소스에 썼는지 여부를 확인할 수 <ph id="ph1">`AnyWritersSince`</ph>; 이면 not, 캐시 된 정보를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</source>
          <target state="translated">잠금에 의해 보호 된 정보를 읽는 하는 것은 비용이 많이 드는; 때이 기술은 유용 합니다. 예를 들어 데이터베이스 쿼리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</source>
          <target state="translated">호출자가 보유 하 고 있어야 판독기 잠금을 또는 기록기 잠금으로 유용 하 게 되려면 시퀀스 번호에 대 한 순서 대로 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A&gt;</ph> 있는지 여부를 다른 스레드에 작성기 잠금을 보호 된 리소스에 현재 스레드 이후에 결정 하는 마지막 작성기 잠금을 보유 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ReaderWriterLock.WriterSeqNum">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class.</source>
          <target state="translated">이 코드는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> 클래스입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>