<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1658d-101">단일 작성기 및 다중 판독기를 지원하는 잠금을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1658d-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]에는 두 개의 판독기/작성기 잠금인 <xref:System.Threading.ReaderWriterLockSlim> 및 <xref:System.Threading.ReaderWriterLock>이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="1658d-103"><xref:System.Threading.ReaderWriterLockSlim>은 모든 새 개발에 권장됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="1658d-104"><xref:System.Threading.ReaderWriterLockSlim>은 <xref:System.Threading.ReaderWriterLock>과 비슷하지만 재귀 및 잠금 상태 업그레이드/다운그레이드에 대한 간소화된 규칙을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="1658d-105"><xref:System.Threading.ReaderWriterLockSlim>은 교착 상태가 발생할 수 있는 많은 경우를 방지합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="1658d-106">또한 <xref:System.Threading.ReaderWriterLockSlim>의 성능이 <xref:System.Threading.ReaderWriterLock>보다 훨씬 더 놓습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="1658d-107"><xref:System.Threading.ReaderWriterLock> 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="1658d-108">지정된 된 시간에 여러 스레드에 대 한 동시 읽기 액세스 하거나 단일 스레드에 대 한 쓰기 권한을 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="1658d-109">리소스 자주 변경 되는 경우에는 `ReaderWriterLock` 와 같은 간단한 한 런타임 잠금 보다 처리량이 향상 제공 <xref:System.Threading.Monitor>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="1658d-110">`ReaderWriterLock` 대부분 액세스는 읽기에 쓰기가 자주 수행 되 고 짧은 기간 가장 잘 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="1658d-111">어떤 오랜 시간 동안 차단 되도록 여러 판독기와 단일 작성기 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-112">오랜 시간 동안 잠금 판독기 또는 작성기 잠금을 보유 하면 다른 스레드에서 실행할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="1658d-113">최상의 성능을 위해 쓰기의 기간을 최소화 하기 위해 응용 프로그램을 재구성 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="1658d-114">스레드 잠금 또는 기록기 잠금으로 하나만 동시에 판독기를 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="1658d-115">판독기 잠금을 작성기 잠금을 획득 하기 위해 해제를 대신 사용할 수 있습니다 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 및 <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="1658d-116">재귀적 잠금 요청에서 잠금을 잠금 수를 늘립니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="1658d-117">판독기와 작성기는 별도로 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="1658d-118">작성기 잠금을 해제 하는 스레드를 즉시 판독기 queue에서 대기 중인 모든 스레드에 판독기 잠금이; 부여 됩니다. 때 모든 판독기 잠금이 해제 된, 작성기에서 다음 스레드 대기 중인 있는 경우 작성기 잠금이 부여 되 면 큐 등에입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="1658d-119">즉, `ReaderWriterLock` 독자의 컬렉션과 기록기 간을 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="1658d-120">잠금이 해제 될 현재 판독기에 대 한 스레드 작성기 큐에서 대기 하는 동안 새 판독기 잠금을 요청 하는 스레드 판독기 큐에 누적 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="1658d-121">해당 요청은 권한을 부여 하지 동시 액세스 기존 판독기 잠금 소유자에 게;와 공유할 수 있지만 이 판독기에서 무한 중단에 대 한 작성자를 보호할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="1658d-122">잠금을 획득 하는 것에 대 한 대부분의 메서드는 `ReaderWriterLock` 제한 시간 값을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="1658d-123">응용 프로그램에서 교착 상태 방지 하려면 제한 시간을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="1658d-124">스레드 수 하나의 리소스에 대해 작성기 잠금을 설정 하 고 두 번째 리소스;에 대 한 판독기 잠금을 요청 하는 예를 들어 그 동안에 다른 스레드에서 두 번째 리소스에 작성기 잠금을 설정 하 고 첫 번째 판독기 잠금을 요청 하 여 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="1658d-125">제한 시간을 사용 하지 않는 스레드 교착 상태가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="1658d-126">시간 제한 간격이 만료 되는 경우 잠금 요청이 허용 되지 않았음을 메서드 제어를 반환 호출 스레드를 throw 하 여 프로그램 <xref:System.ApplicationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="1658d-127">스레드 수이 예외를 catch 하 고을 수행 하는 작업을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="1658d-128">제한 시간 (밀리초)로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="1658d-129">사용 하는 경우는 <xref:System.TimeSpan?displayProperty=nameWithType> 제한 시간을 지정 하려면 사용 되는 값은가 나타내는 정수 밀리초의 총 수는 <xref:System.TimeSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="1658d-130">다음 표에서 시간 (밀리초)에 유효한 제한 시간 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="1658d-131">값</span><span class="sxs-lookup"><span data-stu-id="1658d-131">Value</span></span>|<span data-ttu-id="1658d-132">설명</span><span class="sxs-lookup"><span data-stu-id="1658d-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="1658d-133">-1</span><span class="sxs-lookup"><span data-stu-id="1658d-133">-1</span></span>|<span data-ttu-id="1658d-134">스레드는 잠금을 얻으면 소요 되는 시간 될 때까지 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="1658d-135">정수 제한 시간, 상수를 지정 하는 방법에 대 한 <xref:System.Threading.Timeout.Infinite> 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="1658d-136">0</span><span class="sxs-lookup"><span data-stu-id="1658d-136">0</span></span>|<span data-ttu-id="1658d-137">스레드 잠금을 기다리지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="1658d-138">메서드가 반환 하는 경우 잠금을 획득할 수 없는 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="1658d-139">>0</span><span class="sxs-lookup"><span data-stu-id="1658d-139">>0</span></span>|<span data-ttu-id="1658d-140">대기하는 밀리초 수입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="1658d-141">-1을 제외한 음수 시간 제한 값 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="1658d-142">-1이 아닌 음수를 지정 하는 경우 시간 제한 값이 0이 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="1658d-143">(즉, 메서드는, 대기 하지 않고 즉시 잠금을 가져올 수 있는 경우) 지정 하는 경우는 <xref:System.TimeSpan> 음수-1 이외의 시간 (밀리초)을 나타내는 <xref:System.ArgumentOutOfRangeException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-144">다음 예제에서는 사용 하는 방법을 <xref:System.Threading.ReaderWriterLock> 공유 리소스를 보호 하는 정수 값 이라는 `resource`, 즉 동시에 읽고 여러 스레드에서 단독으로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="1658d-145"><xref:System.Threading.ReaderWriterLock> 모든 스레드를 볼 수 있도록 클래스 수준에서 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1658d-146">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-146">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1658d-147"><see cref="T:System.Threading.ReaderWriterLock" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-147">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1658d-148">다음 코드 예제에서는 <xref:System.Threading.ReaderWriterLock> 클래스의 새 인스턴스를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-148">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="1658d-149">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-149">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1658d-150">판독기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-150">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="1658d-151">제한 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-151">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="1658d-152">제한 시간에 <see cref="T:System.Int32" /> 값을 사용하여 판독기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-152">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 작성기 잠금을 보유 한 다른 스레드 또는 하나 이상의 스레드가 기록기 잠금으로 인해 대기 하는 경우 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-154">현재 스레드에 작성기 잠금이 이미 있으면 판독기 잠금이 획득 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-154">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="1658d-155">대신, 작성기 잠금을 잠금 수가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-155">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="1658d-156">이 자체 작성기 잠금을 차단에서 스레드를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-156">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="1658d-157">결과 정확 하 게 호출할 때와 동일 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 및를 추가로 호출 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 는 작성기 잠금을 해제 하는 경우 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-157">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="1658d-158">`AcquireReaderLock` 재귀적 판독기 잠금 요청을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-158">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="1658d-159">즉, 스레드 수 AcquireReaderLock를 여러 번 호출할 때마다 잠금 수를 증가입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-159">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="1658d-160">호출 해야 <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 호출할 때마다에 대해 한 번씩 `AcquireReaderLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-160">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="1658d-161">호출할 수 있습니다 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 즉시 0 잠금 수를 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-161">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="1658d-162">재귀적 잠금 요청은 항상 요청 하는 스레드의 판독기 큐에 배치 하지 않고 즉시, 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-162">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="1658d-163">오랜 시간 동안 작성기 잠금 요청을 차단 되지 않도록 주의 해야 재귀적 잠금을 사용.</span><span class="sxs-lookup"><span data-stu-id="1658d-163">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="1658d-164">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-164">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-165">다음 코드 예제에서는 판독기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-165">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="1658d-166">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-166">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-167">잠금 요청이 부여되기 전에 <paramref name="millisecondsTimeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-167"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1658d-168">제한 시간을 지정하는 <see langword="TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-168">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="1658d-169">제한 시간에 <see cref="T:System.TimeSpan" /> 값을 사용하여 판독기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-169">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 작성기 잠금을 보유 한 다른 스레드 또는 하나 이상의 스레드가 기록기 잠금으로 인해 대기 하는 경우 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-171">현재 스레드에 작성기 잠금이 이미 있으면 판독기 잠금이 획득 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-171">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="1658d-172">대신, 작성기 잠금을 잠금 수가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-172">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="1658d-173">이 자체 작성기 잠금을 차단에서 스레드를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-173">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="1658d-174">결과 정확 하 게 호출할 때와 동일 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 및를 추가로 호출 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 는 작성기 잠금을 해제 하는 경우 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-174">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="1658d-175">`AcquireReaderLock` 재귀적 판독기 잠금 요청을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-175">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="1658d-176">즉, 스레드 수 AcquireReaderLock를 여러 번 호출할 때마다 잠금 수를 증가입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-176">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="1658d-177">호출 해야 <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 호출할 때마다에 대해 한 번씩 `AcquireReaderLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-177">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="1658d-178">호출할 수 있습니다 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 즉시 0 잠금 수를 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-178">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="1658d-179">재귀적 잠금 요청은 항상 요청 하는 스레드의 판독기 큐에 배치 하지 않고 즉시, 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-179">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="1658d-180">오랜 시간 동안 작성기 잠금 요청을 차단 되지 않도록 주의 해야 재귀적 잠금을 사용.</span><span class="sxs-lookup"><span data-stu-id="1658d-180">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="1658d-181">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-181">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-182">잠금 요청이 부여되기 전에 <paramref name="timeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-182"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1658d-183"><paramref name="timeout" />이 -1밀리초 이외의 음수 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-183"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1658d-184">작성기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-184">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="1658d-185">제한 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-185">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="1658d-186">제한 시간에 <see cref="T:System.Int32" /> 값을 사용하여 작성기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-186">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-187">이 메서드는 다른 스레드가 판독기 잠금을 또는 작성기 잠금을 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-187">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="1658d-188">여러 개의 동시 판독기 잠금을 작성기 잠금을 교체 하는 방법에 대 한 참조는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-188">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="1658d-189">판독기 잠금을 있는 스레드는 두 가지 방법 중 하나로 작성기 잠금을 획득할 수: 호출 하기 전에 판독기 잠금을 해제 하 여 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>를 호출 하 여 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-189">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1658d-190">스레드가 호출 하는 경우 `AcquireWriterLock` 의 자체 판독기 잠금이 차단 됩니다 판독기 잠금으로 아직, 동안; 스레드가 교착 상태가 무한 한 제한 시간을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-190">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="1658d-191">이러한 교착 상태를 방지 하려면 사용 <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> 현재 스레드에 판독기 잠금이 이미에 있는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-191">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="1658d-192">`AcquireWriterLock` 재귀적 작성기 잠금 요청을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-192">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="1658d-193">즉, 스레드 호출 수 `AcquireWriterLock` 여러 번 있는 잠금 수가 때마다 커집니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-193">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="1658d-194">호출 해야 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 호출할 때마다에 대해 한 번씩 `AcquireWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-194">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="1658d-195">호출할 수 있습니다 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 즉시 0 잠금 수를 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-195">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="1658d-196">재귀적 잠금 요청은 항상 요청 하는 스레드의 작성기 큐에 배치 하지 않고 즉시, 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-196">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="1658d-197">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-197">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-198">다음 코드 예제에서는 작성기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-198">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="1658d-199">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-199">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-200">잠금 요청이 부여되기 전에 <paramref name="timeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-200"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1658d-201">제한 시간을 지정하는 <see langword="TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-201">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="1658d-202">제한 시간에 <see cref="T:System.TimeSpan" /> 값을 사용하여 작성기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-202">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-203">이 메서드는 다른 스레드가 판독기 잠금을 또는 작성기 잠금을 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-203">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="1658d-204">여러 개의 동시 판독기 잠금을 작성기 잠금을 교체 하는 방법에 대 한 참조는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-204">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="1658d-205">판독기 잠금을 있는 스레드는 두 가지 방법 중 하나로 작성기 잠금을 획득할 수: 호출 하기 전에 판독기 잠금을 해제 하 여 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>를 호출 하 여 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-205">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1658d-206">스레드가 호출 하는 경우 `AcquireWriterLock` 의 자체 판독기 잠금이 차단 됩니다 판독기 잠금으로 아직, 동안; 스레드가 교착 상태가 무한 한 제한 시간을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-206">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="1658d-207">이러한 교착 상태를 방지 하려면 사용 <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> 현재 스레드에 판독기 잠금이 이미에 있는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-207">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="1658d-208">`AcquireWriterLock` 재귀적 작성기 잠금 요청을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-208">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="1658d-209">즉, 스레드 호출 수 `AcquireWriterLock` 여러 번 있는 잠금 수가 때마다 커집니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-209">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="1658d-210">호출 해야 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 호출할 때마다에 대해 한 번씩 `AcquireWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-210">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="1658d-211">호출할 수 있습니다 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 즉시 0 잠금 수를 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-211">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="1658d-212">재귀적 잠금 요청은 항상 요청 하는 스레드의 작성기 큐에 배치 하지 않고 즉시, 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-212">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="1658d-213">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-213">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-214">잠금 요청이 부여되기 전에 <paramref name="timeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-214"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1658d-215"><paramref name="timeout" />이 -1밀리초 이외의 음수 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-215"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="1658d-216">시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-216">The sequence number.</span></span></param>
        <summary><span data-ttu-id="1658d-217">시퀀스 번호를 가져온 다음 임의의 스레드에 작성기 잠금이 부여되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-217">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns>
          <span data-ttu-id="1658d-218">시퀀스 번호를 가져온 다음 임의의 스레드에 작성기 잠금이 부여된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-218"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-219">사용할 수 있습니다 <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> 및 `AnyWritersSince` 응용 프로그램 성능 향상을 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-219">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="1658d-220">예를 들어 스레드 판독기 잠금을 보유 하는 동안 가져온 정보를 캐시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-220">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="1658d-221">스레드 잠금을 썼는지 나중에 있으며, צ ְ ײ `AnyWritersSince` 중간;에 다른 스레드가 리소스에 작성 한 경우 여부, 캐시 된 정보를 사용할 수를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="1658d-221">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="1658d-222">이 기술은 유용 잠금으로 보호 되는 정보를 읽는 비쌉니다. 예를 들어 데이터베이스 쿼리를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-222">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="1658d-223">호출자가 보유 하 고 있어야 판독기 잠금을 또는 기록기 잠금으로 유용 하 게 되려면 시퀀스 번호에 대 한 순서 대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-223">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-224">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> 메서드 및 <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> 있는지 여부를 다른 스레드에 작성기 잠금을 보호 된 리소스에 현재 스레드 이후에 결정 하는 속성에는 마지막 작성기 잠금을 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-224">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="1658d-225">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-225">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="1658d-226"><see cref="T:System.Threading.LockCookie" />이 반환한 <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-226">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="1658d-227"><see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />을 호출하기 전에 스레드의 잠금 상태를 이전 상태로 복원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-227">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> 재귀 잠금 수에 관계 없이 작성기 잠금을 해제 하 고 판독기 잠금을 작성기 잠금으로 업그레이드 하기 전에 스레드에 의해 보유 된를 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="1658d-229">판독기 잠금을 잠금 수가 복원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-229">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-230">`DowngradeFromWriterLock` 허용 된 <xref:System.Threading.LockCookie> 호출 하 여 가져온 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-230">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="1658d-231">사용 하지 않는 한 `LockCookie` 반환한 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-231">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="1658d-232">스레드에는 작성기 잠금이 해제 될 때 모든 판독기 잠금 요청 권한이 부여 되므로 다른 스레드에서 작성기 잠금을 기다리는 경우에 작성기 잠금을에서 다운 그레이드할 때을 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-232">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-233">다음 코드 예제에서는 판독기 잠금을 요청 하 여 판독기 잠금을 작성기 잠금으로 업그레이드 하 고 다시 판독기 잠금으로 다운 그레이드 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-233">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="1658d-234">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-234">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="1658d-235">스레드에 작성기 잠금이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-235">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="1658d-236"><paramref name="lockCookie" />의 주소는 null 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-236">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1658d-237">가비지 수집기에서 <see cref="T:System.Threading.ReaderWriterLock" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-237">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-238">가비지 컬렉션이 <xref:System.Threading.ReaderWriterLock.Finalize%2A> 때 현재 <xref:System.Threading.ReaderWriterLock> 개체는 종료 될 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-238">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1658d-239">현재 스레드에 판독기 잠금이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-239">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value>
          <span data-ttu-id="1658d-240">현재 스레드에 판독기 잠금이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-240"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1658d-241">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다. `IsReaderLockHeld` 교착 상태 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="1658d-241">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1658d-242">현재 스레드에 작성기 잠금이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-242">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value>
          <span data-ttu-id="1658d-243">현재 스레드에 작성기 잠금이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-243"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1658d-244">작성기 잠금을 보유 하는 스레드에서 판독기 잠금을 획득 하려고 시도 하는 경우 다음 코드 예제에서는 있는 `ReaderWriterLock` 이 판독기 잠금을 부여 하지 않지만 대신 작성기 잠금을 잠금 수를 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-244">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1658d-245">스레드에서 잠금을 가져온 횟수에 관계 없이 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-245">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="1658d-246">해제된 잠금을 나타내는 <see cref="T:System.Threading.LockCookie" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-246">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 판독기 잠금을 또는 재귀 잠금 수에 관계 없이 작성기 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="1658d-248">잠금 수를 포함 하 여 잠금 상태를 복원 하려면 전달 된 <xref:System.Threading.LockCookie> 를 <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-248">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-249">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 스레드와 나중 잠금 상태를 복원 하는 방법으로 잠금을 가져온 횟수에 관계 없이 잠금을 해제 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="1658d-249">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="1658d-250">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-250">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1658d-251">잠금 횟수를 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-251">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 잠금 횟수를 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="1658d-253">수가 0에 도달 하면 잠금이 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-253">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-254">호출 스레드에 작성기 잠금이 있으면 `ReleaseReaderLock` 호출할 때와 같은 결과가 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-254">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="1658d-255">호출 스레드가 잠금이 없습니다 경우 `ReleaseReaderLock` throw는 <xref:System.ApplicationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-255">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-256">다음 코드 예제에서는 판독기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-256">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="1658d-257">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-257">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="1658d-258">스레드에 판독기 또는 작성기 잠금이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-258">The thread does not have any reader or writer locks.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1658d-259">작성기 잠금의 잠금 횟수를 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-259">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 기록기 잠금 횟수를 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="1658d-261">횟수가 0 작성기 잠금이 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-261">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1658d-262">호출 스레드가 판독기 잠금 또는 잠금 없음 있으면 `ReleaseWriterLock` throw는 <xref:System.ApplicationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-262">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-263">다음 코드 예제에서는 작성기 잠금을 가져오고 해제 하는 방법과 요청 시간이 초과 될 때 throw 되는 예외를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-263">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="1658d-264">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-264">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="1658d-265">스레드에 작성기 잠금이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-265">The thread does not have the writer lock.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="1658d-266"><see cref="T:System.Threading.LockCookie" />이 반환한 <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-266">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="1658d-267"><see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />을 호출하기 전에 스레드의 잠금 상태를 이전 상태로 복원합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-267">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-268">상태에서 복원할 `RestoreLock` 재귀 잠금 수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-268">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="1658d-269">스레드는 차단 되는 잠금 판독기 또는 작성기 잠금을 다른 스레드가 가져온 후 작성기 잠금을 복원 하려는 경우 또는 다른 스레드에 작성기 잠금이 가져온 후 판독기 잠금을 복원 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-269">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="1658d-270">때문에 `RestoreLock` 는 제한 시간을 허용 하지 않습니다 가능한 교착 상태를 방지 하기 위해 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-270">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1658d-271">호출 하기 전에 `RestoreLock`에 대 한 호출 이후 모든 잠금을 해제 했는지 확인 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-271">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="1658d-272">예를 들어 한 스레드 교착 상태 판독기 잠금을 획득 하 고 이전 기록기 잠금으로 복원 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-272">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="1658d-273">사용 하 여 <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> 및 <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> 이러한 추가 잠금을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-273">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="1658d-274">사용 하지 않는 한 <xref:System.Threading.LockCookie> 에서 반환 된 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-274">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-275">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 스레드와 나중 잠금 상태를 복원 하는 방법으로 잠금을 가져온 횟수에 관계 없이 잠금을 해제 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="1658d-275">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="1658d-276">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-276">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="1658d-277"><paramref name="lockCookie" />의 주소는 null 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-277">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1658d-278">판독기 잠금을 작성기 잠금으로 업그레이드합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-278">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="1658d-279">제한 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-279">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="1658d-280">제한 시간에 <see langword="Int32" /> 값을 사용하여 판독기 잠금을 작성기 잠금으로 업그레이드합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-280">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="1658d-281"><see cref="T:System.Threading.LockCookie" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-281">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-282">호출 하면 스레드 `UpgradeToWriterLock` 판독기 잠금을 잠금 수에 관계 없이 해제 되 고 스레드 작성기 잠금을 큐의 끝으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-282">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="1658d-283">따라서 다른 스레드에서 업그레이드 작성기 잠금이 부여를 요청 하는 스레드 하기 전에 리소스를 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-283">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1658d-284">까지 호출한 스레드가 시간 초과 예외가 throw 되지 않습니다는 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 메서드는 판독기 잠금을 다시 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-284">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="1658d-285">기록기 잠금으로 인해 대기 하는 다른 스레드가 있으면 즉시 전파 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-285">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="1658d-286">그러나 작성기 잠금을 다른 스레드에서 큐에 대기 하는 경우를 호출한 스레드가 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 모든 현재 판독기가 잠금을 해제 하 고 스레드 하나에 획득 하 고 작성기 잠금을 해제할 때까지 메서드는 판독기 잠금을 다시 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-286">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="1658d-287">작성기 잠금을 요청 하는 다른 스레드가 현재 스레드의 호출 후 요청 하는 경우에 마찬가지입니다는 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1658d-287">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="1658d-288">잠금 상태를 복원 하려면 호출 <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> 를 사용 하는 <xref:System.Threading.LockCookie> 반환한 `UpgradeToWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-288">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="1658d-289">이 사용 하지 마십시오 `LockCookie` 와 <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-289">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="1658d-290">스레드에 판독기 잠금이 사용 하지 마십시오 `UpgradeToWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-290">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="1658d-291">대신 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>를 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1658d-291">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="1658d-292">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-292">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-293">다음 코드 예제에서는 판독기 잠금을 요청 하 여 판독기 잠금을 작성기 잠금으로 업그레이드 하 고 다시 판독기 잠금으로 다운 그레이드 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-293">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="1658d-294">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-294">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-295">잠금 요청이 부여되기 전에 <paramref name="millisecondsTimeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-295"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1658d-296">제한 시간을 지정하는 <see langword="TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-296">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="1658d-297">제한 시간에 <see langword="TimeSpan" /> 값을 사용하여 판독기 잠금을 작성기 잠금으로 업그레이드합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-297">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="1658d-298"><see cref="T:System.Threading.LockCookie" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-298">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-299">호출 하면 스레드 `UpgradeToWriterLock` 판독기 잠금을 잠금 수에 관계 없이 해제 되 고 스레드 작성기 잠금을 큐의 끝으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-299">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="1658d-300">따라서 다른 스레드에서 업그레이드 작성기 잠금이 부여를 요청 하는 스레드 하기 전에 리소스를 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-300">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1658d-301">까지 호출한 스레드가 시간 초과 예외가 throw 되지 않습니다는 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 메서드는 판독기 잠금을 다시 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-301">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="1658d-302">기록기 잠금으로 인해 대기 하는 다른 스레드가 있으면 즉시 전파 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-302">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="1658d-303">그러나 작성기 잠금을 다른 스레드에서 큐에 대기 하는 경우를 호출한 스레드가 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 모든 현재 판독기가 잠금을 해제 하 고 스레드 하나에 획득 하 고 작성기 잠금을 해제할 때까지 메서드는 판독기 잠금을 다시 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-303">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="1658d-304">작성기 잠금을 요청 하는 다른 스레드가 현재 스레드의 호출 후 요청 하는 경우에 마찬가지입니다는 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1658d-304">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="1658d-305">잠금 상태를 복원 하려면 호출 <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> 를 사용 하는 <xref:System.Threading.LockCookie> 반환한 `UpgradeToWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-305">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="1658d-306">이 사용 하지 마십시오 `LockCookie` 와 <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-306">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="1658d-307">스레드에 판독기 잠금이 사용 하지 마십시오 `UpgradeToWriterLock`합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-307">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="1658d-308">대신 <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>를 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1658d-308">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="1658d-309">유효한 제한 시간 값에 대 한 참조 <xref:System.Threading.ReaderWriterLock>합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-309">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1658d-310">잠금 요청이 부여되기 전에 <paramref name="timeout" />이 만료된 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-310"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1658d-311"><paramref name="timeout" />이 -1밀리초 이외의 음수 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="1658d-311"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1658d-312">현재 시퀀스 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-312">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="1658d-313">현재 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-313">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1658d-314">시퀀스 번호가 증가 때마다 스레드 작성기 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-314">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="1658d-315">시퀀스 번호를 저장 하 고 전달 <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> 나중, 다른 스레드에서 그 동안 작성기 잠금을 획득 못한 있는지 여부를 확인 하려는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-315">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="1658d-316">사용할 수 있습니다 `WriterSeqNum` 응용 프로그램 성능 향상을 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-316">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="1658d-317">예를 들어 스레드 판독기 잠금을 보유 하는 동안 가져온 정보를 캐시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-317">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="1658d-318">나중에 잠금이 썼는지 있으며, 스레드가 다른 스레드에서 호출 하 여 리소스에 썼는지 여부를 확인할 수 `AnyWritersSince`; 이면 not, 캐시 된 정보를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-318">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="1658d-319">잠금에 의해 보호 된 정보를 읽는 하는 것은 비용이 많이 드는; 때이 기술은 유용 합니다. 예를 들어 데이터베이스 쿼리를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-319">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="1658d-320">호출자가 보유 하 고 있어야 판독기 잠금을 또는 기록기 잠금으로 유용 하 게 되려면 시퀀스 번호에 대 한 순서 대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-320">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1658d-321">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> 속성 및 <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> 있는지 여부를 다른 스레드에 작성기 잠금을 보호 된 리소스에 현재 스레드 이후에 결정 하는 마지막 작성기 잠금을 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-321">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="1658d-322">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Threading.ReaderWriterLock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1658d-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>