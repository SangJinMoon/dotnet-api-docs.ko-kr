<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyThreadSafetyMode.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifies how a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance synchronizes access among multiple threads.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스가 여러 스레드 간 액세스를 동기화하는 방법을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Use this enumeration to specify the <ph id="ph1">`mode`</ph> parameter of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructors.</source>
          <target state="translated">이 열거형을 사용 하 여 지정 하는 <ph id="ph1">`mode`</ph> 의 매개 변수 <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <ph id="ph1">`mode`</ph> parameters.</source>
          <target state="translated">스레드 동기화에 대 한 모든 생성자의 효과이 열거형 측면에서 설명할 수 있는지 여부 <ph id="ph1">`mode`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance is initialized either by a user-specified initialization method or by the default constructor for <ph id="ph2">`T`</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> 인스턴스는 사용자 지정 초기화 메서드에서 또는 대 한 기본 생성자가 초기화 <ph id="ph2">`T`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method is specified by the <ph id="ph1">`valueFactory`</ph> parameter of a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructor.</source>
          <target state="translated">지정 된 초기화 메서드가 <ph id="ph1">`valueFactory`</ph> 의 매개 변수는 <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The method returns an instance of <ph id="ph1">`T`</ph>, which is the type that is lazily instantiated by the instance of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">인스턴스를 반환 하는 메서드가 <ph id="ph1">`T`</ph>, 지연의 인스턴스에서 초기화 되는 형식인 <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If a constructor does not have a <ph id="ph1">`valueFactory`</ph> parameter, the default constructor for <ph id="ph2">`T`</ph> is used to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">생성자에 없는 경우는 <ph id="ph1">`valueFactory`</ph> 매개 변수, 기본 생성자를 <ph id="ph2">`T`</ph> 초기화 하는 데 사용 되는 <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In either case, initialization occurs the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">두 경우 모두 초기화가 처음으로 호출 하면 발생는 <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In addition to specifying the thread safety of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, this enumeration affects exception caching.</source>
          <target state="translated">스레드로부터 안전한 지를 지정 하는 것 외에도 <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> 인스턴스를이 열거형에 예외 캐싱에 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When exceptions are cached for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, you get only one chance to initialize the instance.</source>
          <target state="translated">에 대 한 예외가 캐시 되 면는 <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> 인스턴스를 얻게 한 번만 인스턴스를 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If an exception is thrown the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property, that exception is cached and rethrown on all subsequent calls to the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">처음으로 예외가 발생 하는 경우 호출 하는 <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> 속성, 예외가 캐시 되 고 모든 후속 호출에서 예외가 다시 throw는 <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</source>
          <target state="translated">예외 caching의 이점은 모든 스레드가 각각 두 오류가 발생 하는 경우에 항상 같은 결과 얻을입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify the PublicationOnly mode, exceptions are never cached.</source>
          <target state="translated">PublicationOnly 모드를 지정 하는 경우 예외가 캐시 되지 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for <ph id="ph1">`T`</ph> to be used.</source>
          <target state="translated">None를 지정 하는 경우 ExecutionAndPublication, 초기화 메서드를 지정 하거나에 대 한 기본 생성자를 허용 하는지 여부에 따라 캐싱을 하거나 <ph id="ph1">`T`</ph> 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifying an initialization method enables exception caching for these two modes.</source>
          <target state="translated">초기화 메서드를 지정하면 이 두 모드에 대해 예외 캐싱을 사용합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method can be very simple.</source>
          <target state="translated">초기화 메서드는 매우 간단할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>For example, it might call the default constructor for <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C#, or <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</source>
          <target state="translated">예를 들어, <ph id="ph1">`T`</ph>의 기본 생성자를 호출할 수 있습니다. C#의 경우 <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> 또는 Visual Basic의 경우 <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph1">`T`</ph> are not cached.</source>
          <target state="translated">초기화 메서드를에 대 한 기본 생성자에 의해 throw 된 예외를 지정 하지 않는 생성자를 사용 하는 경우 <ph id="ph1">`T`</ph> 캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The following table summarizes exception caching behavior.</source>
          <target state="translated">다음 표에서 예외 캐싱 동작을 요약 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Mode</source>
          <target state="translated">모드</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using initialization method</source>
          <target state="translated">초기화 메서드를 사용 하 여</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using default constructor for <ph id="ph1">`T`</ph></source>
          <target state="translated">에 대 한 기본 생성자를 사용 하 여 <ph id="ph1">`T`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">캐시됨</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>PublicationOnly</source>
          <target state="translated">PublicationOnly</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>ExecutionAndPublication</source>
          <target state="translated">ExecutionAndPublication</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">캐시됨</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>Locks are used to ensure that only a single thread can initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance in a thread-safe manner.</source>
          <target state="translated">잠금을 사용하여 단일 스레드만 스레드로부터 안전한 방식으로 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스를 초기화할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</source>
          <target state="translated">초기화 메서드(또는 초기화 메서드를 찾을 수 없습니다. 기본 생성자)에서 내부적으로 잠금을 사용하는 경우 교착 상태가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">초기화 메서드(<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 매개 변수)를 지정하는 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 생성자를 사용하며 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성을 처음 호출할 때 해당 초기화 메서드에서 예외가 발생하거나 예외를 처리하지 못하는 경우 예외가 캐시되고 <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성의 후속 호출에서 다시 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">초기화 메서드를 지정하지 않는 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 생성자를 사용하는 경우 <ph id="ph2">&lt;paramref name="T" /&gt;</ph>에 대한 기본 생성자에서 발생한 예외가 캐시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성의 후속 호출에서 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스를 초기화할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">초기화 메서드에서 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스의 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성에 재귀적으로 액세스하는 경우 <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>이 발생합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스는 스레드로부터 안전하지 않습니다. 여러 스레드에서 인스턴스에 액세스하는 경우 해당 동작이 정의되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>Use this mode only when high performance is crucial and the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is guaranteed never to be initialized from more than one thread.</source>
          <target state="translated">고성능이 중요하며 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스가 둘 이상의 스레드에서 초기화되지 않는 경우에만 이 모드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">초기화 메서드(<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 매개 변수)를 지정하는 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 생성자를 사용하며 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성을 처음 호출할 때 해당 초기화 메서드에서 예외가 발생하거나 예외를 처리하지 못하는 경우 예외가 캐시되고 <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성의 후속 호출에서 다시 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">초기화 메서드를 지정하지 않는 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 생성자를 사용하는 경우 <ph id="ph2">&lt;paramref name="T" /&gt;</ph>에 대한 기본 생성자에서 발생한 예외가 캐시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성의 후속 호출에서 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스를 초기화할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">초기화 메서드에서 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스의 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성에 재귀적으로 액세스하는 경우 <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>이 발생합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>When multiple threads try to initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</source>
          <target state="translated">여러 스레드에서 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스를 동시에 초기화하려고 하면 모든 스레드에서 초기화 메서드(또는 초기화 메서드를 찾을 수 없습니다. 기본 생성자)를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The first thread to complete initialization sets the value of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">초기화를 완료하는 첫 번째 스레드에서 <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스의 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</source>
          <target state="translated">초기화 메서드에서 해당 스레드에 대한 예외가 발생하지 않는 경우 초기화 메서드를 동시에 실행하는 다른 모든 스레드에 해당 값이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>Any instances of <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that were created by the competing threads are discarded.</source>
          <target state="translated">경쟁하는 스레드에서 만든 모든 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> 인스턴스가 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method throws an exception on any thread, the exception is propagated out of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property on that thread.</source>
          <target state="translated">초기화 메서드에서 스레드에 대한 예외가 발생하는 경우 해당 스레드의 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성에서 예외가 전파됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The exception is not cached.</source>
          <target state="translated">예외가 캐시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property remains <ph id="ph2">&lt;see langword="false" /&gt;</ph>, and subsequent calls to the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> 속성의 값은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 유지되며, 예외가 발생한 스레드나 다른 스레드에 의한 <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성의 후속 호출에서 초기화 메서드를 다시 실행합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, no exception is thrown.</source>
          <target state="translated">초기화 메서드에서 <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> 인스턴스의 <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> 속성에 재귀적으로 액세스하는 경우 예외가 발생하지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>