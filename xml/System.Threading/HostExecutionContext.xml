<Type Name="HostExecutionContext" FullName="System.Threading.HostExecutionContext">
  <TypeSignature Language="C#" Value="public class HostExecutionContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostExecutionContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.HostExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public Class HostExecutionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostExecutionContext : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0eabc-101">호스트 실행 컨텍스트를 캡슐화하여 스레드 간에 전파합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-101">Encapsulates and propagates the host execution context across threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-102"><xref:System.Threading.HostExecutionContext> 더 큰 규모의 일부인 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-102">The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="0eabc-103">호스트 컨텍스트 마이그레이션되거나, 실행 컨텍스트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-103">The host context migrates, or flows, with the execution context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eabc-104"><see cref="T:System.Threading.HostExecutionContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-104">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0eabc-105"><see cref="T:System.Threading.HostExecutionContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-105">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-106">호스트 실행 컨텍스트를 만듭니다. 기본 생성자 인 <xref:System.Threading.HostExecutionContext.State%2A> 속성 값은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-106">The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext (object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext(System::Object ^ state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="0eabc-107">호스트 실행 컨텍스트 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-107">An object representing the host execution context state.</span></span></param>
        <summary><span data-ttu-id="0eabc-108">지정된 상태를 사용하여 <see cref="T:System.Threading.HostExecutionContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-108">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class using the specified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-109"><xref:System.Threading.HostExecutionContext> 에 포함 되어는 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-109">The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="0eabc-110">`state` 포함 하는 안전한 핸들을 나타내는 `IUnknown` 호스트에 대 한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-110">The `state` represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.HostExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCopy () As HostExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::HostExecutionContext ^ CreateCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0eabc-111">현재 호스트 실행 컨텍스트의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-111">Creates a copy of the current host execution context.</span></span></summary>
        <returns><span data-ttu-id="0eabc-112">현재 스레드의 호스트 컨텍스트를 나타내는 <see cref="T:System.Threading.HostExecutionContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-112">A <see cref="T:System.Threading.HostExecutionContext" /> object representing the host context for the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-113">복사본에 대 한 매개 변수로 사용할 수 있습니다는 <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-113">The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0eabc-114"><see cref="T:System.Threading.HostExecutionContext" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-114">Releases resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0eabc-115"><see cref="T:System.Threading.HostExecutionContext" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-115">Releases all resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-116">`Dispose` 사용을 마치면 <xref:System.Threading.HostExecutionContext>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-116">Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="0eabc-117">`Dispose` 메서드를 사용하면 <xref:System.Threading.HostExecutionContext>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-117">The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state.</span></span> <span data-ttu-id="0eabc-118">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Threading.HostExecutionContext> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Threading.HostExecutionContext> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-118">After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="0eabc-119">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-119">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0eabc-120">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Threading.HostExecutionContext>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="0eabc-120">Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="0eabc-121">이렇게 하지 않으면 가비지 수집기가 <xref:System.Threading.HostExecutionContext> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-121">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="0eabc-122">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-122"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0eabc-123">파생 클래스에서 재정의된 경우 <see cref="T:System.Threading.WaitHandle" />에서 사용하는 관리되지 않는 리소스를 해제하고 필요에 따라 관리되는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-123">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-124">이 메서드는 <xref:System.Threading.HostExecutionContext.Dispose> 메서드 오버 로드와 종료자 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-124">This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer.</span></span> <span data-ttu-id="0eabc-125"><xref:System.Threading.HostExecutionContext.Dispose> 이 보호 된 메서드를 호출 하는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-125"><xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="0eabc-126">종료자에는이 메서드를 호출 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-126">The finalizer invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="0eabc-127">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Threading.HostExecutionContext>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-127">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references.</span></span> <span data-ttu-id="0eabc-128">이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-128">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 <span data-ttu-id="0eabc-129">이 메서드는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-129">This method can be called multiple times by other objects.</span></span> <span data-ttu-id="0eabc-130">이 메서드를 재정의할 때 이전 호출에서 삭제 된 개체를 참조 하지 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-130">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected internal object State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Threading.HostExecutionContext.State" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ State { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0eabc-131">호스트 실행 컨텍스트의 상태를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-131">Gets or sets the state of the host execution context.</span></span></summary>
        <value><span data-ttu-id="0eabc-132">호스트 실행 컨텍스트 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-132">An object representing the host execution context state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eabc-133"><xref:System.Threading.HostExecutionContext.State%2A> 속성 값을 포함 하는 safehandle 나타냅니다는 `IUnknown` 호스트에 대 한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="0eabc-133">The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>