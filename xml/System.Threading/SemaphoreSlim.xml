<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="268af4ec18ef9780af942f18f0369318755e0b83" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061744" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7b6d9-101">리소스 또는 리소스 풀에 동시에 액세스할 수 있는 스레드 수를 제한하는 <see cref="T:System.Threading.Semaphore" /> 대신 사용할 수 있는 간단한 클래스를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7b6d9-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-102">세마포는 다음 두 가지 유형: 로컬 세마포 및 명명 된 시스템 세마포 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="7b6d9-103">전자는 응용 프로그램에 대해 로컬입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-103">The former is local to an app.</span></span> <span data-ttu-id="7b6d9-104">후자의 운영 체제 전체에 표시 되 고 프로세스 간 동기화에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="7b6d9-105"><xref:System.Threading.SemaphoreSlim> 경량급 대안을가 <xref:System.Threading.Semaphore> Windows 커널 세마포를 사용 하지 않는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="7b6d9-106">와 달리는 <xref:System.Threading.Semaphore> 클래스는 <xref:System.Threading.SemaphoreSlim> 클래스는 명명 된 시스템 세마포를 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="7b6d9-107">로컬 세마포가으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="7b6d9-108"><xref:System.Threading.SemaphoreSlim> 클래스는 단일 앱 내에서 동기화 하기 위한 권장된 세마포입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="7b6d9-109">응용 프로그램에 로컬 리소스의 풀에 대 한 액세스를 제어 하는 간단한 세마포입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="7b6d9-110">세마포를 인스턴스화할 때 동시에 세마포를 입력할 수 있는 스레드의 최대 수를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="7b6d9-111">또한 초기 세마포를 동시에 입력할 수 있는 스레드 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="7b6d9-112">정의합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="7b6d9-113">수는 감소 된 스레드가 세마포를 이미 획득 될 때마다 및 때마다 증가 스레드가 세마포를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="7b6d9-114">세마포를 입력 하려면 호출 하면 스레드 중 하나는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="7b6d9-115">세마포를 해제 하기 위해 호출 중 하나는 <xref:System.Threading.SemaphoreSlim.Release%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="7b6d9-116">0, 중 하나에 대 한 후속 호출 수에 도달 하는 경우는 `Wait` 메서드 다른 스레드가 세마포를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="7b6d9-117">없는 보장 된 순서는 여러 스레드를 차단한 경우 FIFO, LIFO 등을 제어 하 스레드가 세마포를 입력 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="7b6d9-118">세마포를 사용 하 여 리소스를 보호 하는 코드에 대 한 기본 구조는:</span><span class="sxs-lookup"><span data-stu-id="7b6d9-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="7b6d9-119">모든 스레드가 세마포를 해제 수는 최대 값 지정 된 세마포를 만들 때.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="7b6d9-120">사용할 수는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7b6d9-121"><xref:System.Threading.SemaphoreSlim> 클래스에 대 한 호출에 스레드 또는 작업 id를 적용 하지 않습니다는 <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, 및 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="7b6d9-122">또한 경우는 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> 생성자를 인스턴스화하는 <xref:System.Threading.SemaphoreSlim> 개체는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 생성자가 설정한 값 보다 큰 증가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="7b6d9-123">호출 하는 프로그래머의 과제에는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드가 호출 하 여 적절 하 게 쌍 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b6d9-124">다음 예제에서는 최대 개수가 3 개의 스레드 및 스레드 0에 대 한 초기 카운트 세마포를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="7b6d9-125">이 예제에서는 세마포를 기다리는 동안 차단 중 일부는 5 개 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="7b6d9-126">주 스레드에서 호출은 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 오버 로드 세마포 개수 세마포를 입력 하려면 세 가지 작업을 수 있는 해당 최대값으로 늘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="7b6d9-127">세마포가 해제 될 때마다 이전 세마포 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="7b6d9-128">콘솔 메시지 세마포 사용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-128">Console messages track semaphore use.</span></span> <span data-ttu-id="7b6d9-129">출력을 보다 쉽게 읽을 수 있도록 각 스레드에 대 한 시뮬레이션 된 작업 간격이 약간 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7b6d9-130">모든 공용 및 보호 된 구성원 <see cref="T:System.Threading.SemaphoreSlim" /> 는 스레드로부터 안전 하 고를 여러 스레드에서 동시에 사용할 수 있습니다 <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, 사용 되어야 하는 경우에만 다른 모든 작업에는 <see cref="T:System.Threading.SemaphoreSlim" /> 완료 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7b6d9-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-131">
            <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-131">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="7b6d9-132">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-132">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-133">동시에 부여할 수 있는 초기 요청 수를 지정하여 <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-133">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-134">`initialCount` 매개 변수는 부여할 수 있는 세마포에 입력 동시 요청 수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-134">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="7b6d9-135">그러나이 동시에 부여할 수 있는 요청의 최대 수를 정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-135">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="7b6d9-136">A <xref:System.Threading.SemaphoreSlim> 이 생성자를 호출 하 여 개체를 throw 하지 않습니다는 <xref:System.Threading.SemaphoreFullException> 호출 하는 경우 예외는 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드의 값을 증가 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 초과 속성 `initialCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-136">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="7b6d9-137">이 경우에 대 한 자세한 호출이 발생 <xref:System.Threading.SemaphoreSlim.Release%2A> 를 보다 메서드는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-137">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="7b6d9-138">부여할 수 있는 세마포에 입력 동시 요청의 최대 수를 설정 하려면 호출 된 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-138">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-139">
            <paramref name="initialCount" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-139">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="7b6d9-140">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-140">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maxCount">
          <span data-ttu-id="7b6d9-141">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-141">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-142">동시에 부여할 수 있는 초기 및 최대 요청 수를 지정하여 <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-142">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-143">
            <paramref name="initialCount" />가 0보다 작거나 <paramref name="initialCount" />가 <paramref name="maxCount" />보다 크거나 <paramref name="maxCount" />가 0보다 작거나 같은 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-143">
              <paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-144">세마포에서 대기하는 데 사용할 수 있는 <see cref="T:System.Threading.WaitHandle" />을(를) 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-144">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b6d9-145">세마포에서 대기하는 데 사용할 수 있는 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-145">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-146">동일한 대기 핸들 사용 하 여 다른 커널 기반 동기화 개체와 SemaphoreSlim에서 대기 해야 하는 경우에이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-146">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="7b6d9-147">성공적인 대기는 <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> 에서 성공적인 대기를 의미 하지는 않습니다는 <xref:System.Threading.SemaphoreSlim> 자체의 감소 하거나 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-147">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="7b6d9-148">대기 해야 사용할 수 있는 대기 핸들이 신호를 받은 후의 <xref:System.Threading.SemaphoreSlim> 구체적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-148">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-149">
            <see cref="T:System.Threading.SemaphoreSlim" />가 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-149">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-150">
            <see cref="T:System.Threading.SemaphoreSlim" /> 개체에 들어갈 수 있는 남아 있는 스레드의 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-150">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7b6d9-151">세마포에 들어갈 수 있는 남아 있는 스레드의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-151">The number of remaining threads that can enter the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-152">초기 값은 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 에 대 한 호출에서 속성을 설정는 <xref:System.Threading.SemaphoreSlim.%23ctor%2A> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-152">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="7b6d9-153">각 호출에 의해 감소는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드를 호출할 때마다 여 증가 하는 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-153">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-154">
            <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-154">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-155">
            <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-155">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-156">`Dispose` 사용을 마치면 <xref:System.Threading.SemaphoreSlim>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-156">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="7b6d9-157">`Dispose` 메서드를 사용하면 <xref:System.Threading.SemaphoreSlim>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-157">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="7b6d9-158">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Threading.SemaphoreSlim> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Threading.SemaphoreSlim> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-158">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="7b6d9-159">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-159">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b6d9-160">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Threading.SemaphoreSlim>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-160">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="7b6d9-161">이렇게 하지 않으면 가비지 수집기가 <xref:System.Threading.SemaphoreSlim> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-161">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="7b6d9-162">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-162">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-163">
            <see cref="T:System.Threading.SemaphoreSlim" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-163">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-164">대부분의 멤버의 달리 <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> 스레드로부터 안전 하지 않은 하 고이 인스턴스의 다른 멤버와 동시에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-164">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-165">
            <see cref="T:System.Threading.SemaphoreSlim" /> 개체를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-165">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-166">
            <see cref="T:System.Threading.SemaphoreSlim" /> 개체를 한 번 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-166">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-167">
            <see cref="T:System.Threading.SemaphoreSlim" />의 이전 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-167">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-168">에 대 한 호출에서 <xref:System.Threading.SemaphoreSlim.Release> 메서드 증가 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-168">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="7b6d9-169">하는 경우의 값은 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 0이이 메서드를 호출 하기 전에, 메서드가 하나의 스레드 또는 작업에 대 한 호출에 의해 차단 수도 있습니다는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 세마포를 입력 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-169">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-170">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-170">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="7b6d9-171">
            <see cref="T:System.Threading.SemaphoreSlim" />이 이미 최대 크기에 도달했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-171">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="7b6d9-172">세마포를 종료할 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-172">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-173">
            <see cref="T:System.Threading.SemaphoreSlim" /> 개체를 지정된 횟수만큼 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-174">
            <see cref="T:System.Threading.SemaphoreSlim" />의 이전 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-175">에 대 한 호출에서 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 메서드 증가 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성 `releaseCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-175">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="7b6d9-176">하는 경우의 값은 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은이 메서드를 호출 하기 전에 0, 메서드가 수도 있습니다 `releaseCount` 스레드 또는 작업에 대 한 호출에 의해 차단는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 세마포를 입력 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-177">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-177">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-178">
            <paramref name="releaseCount" />가 1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-178">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="7b6d9-179">
            <see cref="T:System.Threading.SemaphoreSlim" />이 이미 최대 크기에 도달했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-179">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-180">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-180">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-181">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-181">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-182">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-182">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-183">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-183">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7b6d9-184">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-184">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-185">제한 시간을 지정하는 부호 있는 32비트 정수를 사용하여 현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-185">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-186">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-186">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="7b6d9-187">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-187">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="7b6d9-188">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-188">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-189">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-189">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="7b6d9-190">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-190">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="7b6d9-191">호출할 때 작업이 나 스레드에 차단 되 면 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> 에서 지정 된 시간 제한 간격 및 `millisecondsTimeout` 만료:</span><span class="sxs-lookup"><span data-stu-id="7b6d9-191">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="7b6d9-192">작업이 나 스레드에 세마포를 입력 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-192">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="7b6d9-193"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-193">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-194">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-194">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-195">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-195">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-196">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 확인하면서 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-196">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-197">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-197">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="7b6d9-198">경우 `cancellationToken` 은 취소 작업이 나 스레드에 입력 세마포 및 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-198">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="7b6d9-199">메서드에서 throw 하는 대신, 프로그램 <xref:System.OperationCanceledException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-199">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-200">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-200">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-201">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-201">The current instance has already been disposed.</span>
          </span>
          <span data-ttu-id="7b6d9-202">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-202">-or-</span>
          </span>
          <span data-ttu-id="7b6d9-203">
            <paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-203">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7b6d9-204">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-204">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-205">
            <see cref="T:System.Threading.SemaphoreSlim" />(으)로 제한 시간을 지정하여 현재 스레드가 <see cref="T:System.TimeSpan" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-205">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-206">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-206">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="7b6d9-207">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-207">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="7b6d9-208">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-208">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-209">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-209">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="7b6d9-210">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-210">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="7b6d9-211">호출할 때 작업이 나 스레드에 차단 되 면 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> 에서 지정 된 시간 제한 간격 및 `millisecondsTimeout` 만료:</span><span class="sxs-lookup"><span data-stu-id="7b6d9-211">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="7b6d9-212">작업이 나 스레드에 세마포를 입력 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-212">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="7b6d9-213"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-213">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-214">
            <paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-214">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-215">semaphoreSlim 인스턴스가 삭제되었습니다.<paramref name="." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-215">The semaphoreSlim instance has been disposed <paramref name="." /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7b6d9-216">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-216">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-217">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-217">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-218">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 확인하면서 제한 시간을 지정하는 부호 있는 32비트 정수를 사용하여 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-218">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-219">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-219">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="7b6d9-220">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-220">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="7b6d9-221">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-221">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-222">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-222">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="7b6d9-223">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-223">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="7b6d9-224">경우 `cancellationToken` 를 취소 작업이 나 스레드에 호출 하는 경우 차단 된 경우 또는 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> 에서 지정 된 시간 제한 간격 및 `millisecondsTimeout` 만료:</span><span class="sxs-lookup"><span data-stu-id="7b6d9-224">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="7b6d9-225">작업이 나 스레드에 세마포를 입력 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-225">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="7b6d9-226"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-226">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="7b6d9-227">경우 `cancellationToken` 는 메서드에서 throw 취소는 <xref:System.OperationCanceledException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-227">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-228">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-228">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-229">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-229">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-230">
            <see cref="T:System.Threading.SemaphoreSlim" /> 인스턴스가 삭제되었거나 <paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-230">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7b6d9-231">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-231">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-232">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-232">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-233">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 확인하면서 제한 시간을 지정하는 <see cref="T:System.TimeSpan" />을(를) 사용하여 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-233">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-234">현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-234">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="7b6d9-235">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-235">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="7b6d9-236">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-236">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-237">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-237">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="7b6d9-238">작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-238">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="7b6d9-239">경우 `cancellationToken` 를 취소 작업이 나 스레드에 호출 하는 경우 차단 된 경우 또는 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> 에서 지정 된 시간 제한 간격 및 `millisecondsTimeout` 만료:</span><span class="sxs-lookup"><span data-stu-id="7b6d9-239">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="7b6d9-240">작업이 나 스레드에 세마포를 입력 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-240">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="7b6d9-241"><xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-241">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="7b6d9-242">경우 `cancellationToken` 는 메서드에서 throw 취소는 <xref:System.OperationCanceledException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-242">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-243">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-243">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-244">
            <paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-244">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-245">semaphoreSlim 인스턴스가 삭제되었습니다.<paramref name="." /><paramref name="-or-" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-245">The semaphoreSlim instance has been disposed <paramref name="." /><paramref name="-or-" /></span>
          </span>
          <span data-ttu-id="7b6d9-246">
            <paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-246">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-247">
            <see cref="T:System.Threading.SemaphoreSlim" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-247">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7b6d9-248">
            <see cref="T:System.Threading.SemaphoreSlim" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-248">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-249">세마포가 입력되었을 때 완료될 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-249">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7b6d9-250">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-250">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-251">32비트 부호 있는 정수를 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.SemaphoreSlim" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-251">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-252">현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-252">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-253">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-253">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="7b6d9-254">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-254">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-255">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-255">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-256">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-256">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-257">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-257">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-258">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-258">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-259">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 관찰하는 동안 <see cref="T:System.Threading.CancellationToken" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-259">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-260">세마포가 입력되었을 때 완료될 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-260">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-261">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-261">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-262">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-262">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7b6d9-263">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-263">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-264">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 사용하여 시간 간격을 측정하여 <see cref="T:System.TimeSpan" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-264">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-265">현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-265">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-266">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-266">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="7b6d9-267">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-267">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-268">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-268">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-269">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-269">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-270">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-270">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7b6d9-271">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-271">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-272">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-272">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-273">
            <see cref="T:System.Threading.SemaphoreSlim" />을(를) 관찰하는 동안 32비트 부호 있는 정수를 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.CancellationToken" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-273">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-274">현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-274">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-275">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-275">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="7b6d9-276">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-276">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-277">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-277">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-278">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 숫자이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-278">
              <paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="7b6d9-279">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-279">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-280">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-280">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7b6d9-281">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-281">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="7b6d9-282">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-282">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7b6d9-283">
            <see cref="T:System.Threading.SemaphoreSlim" />을 관찰하는 동안 <see cref="T:System.TimeSpan" />을(를) 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.CancellationToken" />(으)로 전환될 때까지 비동기적으로 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-283">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7b6d9-284">현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-284">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b6d9-285">시간 제한-1 밀리초로 설정 되 면 메서드는 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-285">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="7b6d9-286">제한 시간이 0 밀리초로 설정 되 면 메서드가 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-286">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="7b6d9-287">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b6d9-287">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7b6d9-288">
            <paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-288">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="7b6d9-289">
            <paramref name="cancellationToken" />이 취소되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7b6d9-289">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>