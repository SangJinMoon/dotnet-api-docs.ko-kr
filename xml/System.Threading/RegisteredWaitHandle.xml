<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RegisteredWaitHandle.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52981c0c3b50f02094deaf940943c288896ef2787.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2981c0c3b50f02094deaf940943c288896ef2787</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.RegisteredWaitHandle">
          <source>Represents a handle that has been registered when calling <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph>을 호출할 때 등록된 핸들을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.RegisteredWaitHandle">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 콜백 메서드가 호출 되는 이유 및 콜백이 대기 핸들이 신호를 받은 때문에 발생 한 경우 작업을 등록 하는 방법을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">또한이 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 지정 된 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">이 예제에서는 콜백 메서드는 <ph id="ph1">`WaitProc`</ph>, 대기 핸들은 및는 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">이 예제에서는 정의 <ph id="ph1">`TaskInfo`</ph> 실행 될 때 콜백에 전달 되는 정보를 보관 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">`TaskInfo`</ph> 개체를 문자열 데이터를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 에서 반환 하는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드에 할당 된는 <ph id="ph3">`Handle`</ph> 필드는 <ph id="ph4">`TaskInfo`</ph> 개체 콜백 메서드는에 액세스할 수 있도록는 <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">지정 외에도 <ph id="ph1">`TaskInfo`</ph> 콜백 메서드를 호출에 전달 하는 개체와는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 지정는 <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 에 대 한 작업에서 대기 하는 <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 를 나타내는 대리자는 <ph id="ph5">`WaitProc`</ph> 콜백 메서드는 1 초 시간 제한 간격 및 여러 콜백 발생 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">때 신호를 주 스레드는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를는 <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 대리자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드 테스트 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 시간 초과가 발생 한 것인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">대기 핸들에 신호가 전달 되어 콜백이 호출 되는 경우는 <ph id="ph1">`WaitProc`</ph> 메서드 등록을 취소는 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, 추가 콜백을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">시간 제한의 경우 작업이 계속 대기 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to be signaled.</source>
          <target state="translated">신호를 받을 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>Cancels a registered wait operation issued by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph> 메서드에서 발생한 등록된 대기 작업을 취소합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the function succeeds; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">작업이 성공적으로 수행되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If <ph id="ph1">`waitObject`</ph> is specified, it is signaled only if the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> is successfully unregistered.</source>
          <target state="translated">경우 <ph id="ph1">`waitObject`</ph> 신호를 보낸 경우에 지정 된 된 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 성공적으로 등록 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If a callback method is in progress when <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> executes, <ph id="ph2">`waitObject`</ph> is not signaled until the callback method completes.</source>
          <target state="translated">콜백 메서드로 진행 중인 경우 때 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> 실행 <ph id="ph2">`waitObject`</ph> 가 콜백 메서드가 완료 될 때까지 통보 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In particular, if a callback method executes <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph>, <ph id="ph2">`waitObject`</ph> is not signaled until that callback method completes.</source>
          <target state="translated">특히, 콜백 메서드를 실행 하는 경우 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph>, <ph id="ph2">`waitObject`</ph> 가 해당 메서드가 완료 될 때까지 통보 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> method to unregister a task if a callback occurred because the wait handle was signaled.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> 메서드를 콜백이 대기 핸들이 신호를 받은 때문에 발생 한 경우 작업의 등록을 취소 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">또한이 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 지정 된 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">이 예제에서는 콜백 메서드는 <ph id="ph1">`WaitProc`</ph>, 대기 핸들은 및는 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">이 예제에서는 정의 <ph id="ph1">`TaskInfo`</ph> 실행 될 때 콜백에 전달 되는 정보를 보관 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">`TaskInfo`</ph> 개체를 문자열 데이터를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 에서 반환 하는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드에 할당 된는 <ph id="ph3">`Handle`</ph> 필드는 <ph id="ph4">`TaskInfo`</ph> 개체 콜백 메서드는에 액세스할 수 있도록는 <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">지정 외에도 <ph id="ph1">`TaskInfo`</ph> 콜백 메서드를 호출에 전달 하는 개체와는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 지정는 <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 에 대 한 작업에서 대기 하는 <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 를 나타내는 대리자는 <ph id="ph5">`WaitProc`</ph> 콜백 메서드는 1 초 시간 제한 간격 및 여러 콜백 발생 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">때 신호를 주 스레드는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를는 <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 대리자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드 테스트 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 시간 초과가 발생 한 것인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">대기 핸들에 신호가 전달 되어 콜백이 호출 되는 경우는 <ph id="ph1">`WaitProc`</ph> 메서드 등록을 취소는 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, 추가 콜백을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">시간 제한의 경우 작업이 계속 대기 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>