<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Volatile.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e015169fdea0b177ae9dfa539d0e1c3aed9e0c48.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e015169fdea0b177ae9dfa539d0e1c3aed9e0c48</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Volatile">
          <source>Contains methods for performing volatile memory operations.</source>
          <target state="translated">휘발성 메모리 작업을 수행하기 위한 메서드를 포함합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>On a multiprocessor system, a volatile write operation ensures that a value written to a memory location is immediately visible to all processors.</source>
          <target state="translated">다중 프로세서 시스템에서 volatile 쓰기 작업 메모리 위치에 기록 하는 값의 모든 프로세서에 즉시 표시 되는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>A volatile read operation obtains the very latest value written to a memory location by any processor.</source>
          <target state="translated">Volatile 읽기 작업이 모든 프로세서에 의해 메모리 위치에 기록 합니다. 최신 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>These operations might require flushing processor caches, which can affect performance.</source>
          <target state="translated">이러한 작업은 성능에 영향을 줄 수 있는 프로세서 캐시 플러시 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>On a uniprocessor system, volatile reads and writes ensure that a value is read or written to memory and not cached (for example, in a processor register).</source>
          <target state="translated">단일 프로세서 시스템에서 volatile 읽기 및 쓰기 또는 확인 하는 값은 읽기 메모리에 기록 (예: 프로세서 레지스터)에 캐시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>Thus, you can use these operations to synchronize access to a field that can be updated by another thread or by hardware.</source>
          <target state="translated">따라서 다른 스레드에서 또는 하드웨어에 의해 업데이트할 수 있는 필드에 대 한 액세스를 동기화 하려면 이러한 작업을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>Volatile memory operations are for special cases of synchronization, where normal locking is not an acceptable alternative.</source>
          <target state="translated">기본 잠금 하지 않은 경우에 허용 되는 대신 동기화의 특수 한 경우에 휘발성 메모리 작업이 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>Under normal circumstances, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, and the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide the easiest and least error-prone way of synchronizing access to data, and the <ph id="ph4">&lt;xref:System.Lazy%601&gt;</ph> class provides a simple way to write lazy initialization code without directly using double-checked locking.</source>
          <target state="translated">정상적인 상황에서는 C# <ph id="ph1">`lock`</ph> 문, Visual Basic <ph id="ph2">`SyncLock`</ph> 문, 및 <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> 클래스의 데이터에 대 한 액세스를 동기화 하는 간단 하 고 오류가 발생할 가능성이 가장 방법을 제공 및 <ph id="ph4">&lt;xref:System.Lazy%601&gt;</ph> 클래스는 간단한을 제공 합니다. 직접 사용 하지 않고 지연 초기화 코드를 작성 하는 방식으로 잠금을 다시 확인 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> methods enable functionality that is not supported in languages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> 메서드 언어에서 지원 되지 않는 기능을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>Some languages, such as Visual Basic, do not recognize the concept of volatile memory operations.</source>
          <target state="translated">Visual Basic과 같은 일부 언어에서 휘발성 메모리 작업의 개념을 인식 하지 못합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class provides that functionality in such languages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스 이러한 언어에 해당 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>Calling one of these methods affects only a single memory access.</source>
          <target state="translated">이러한 방법 중 하나를 호출 하는 하나의 메모리 액세스를만 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>To provide effective synchronization for a field, all access to the field must use <ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">필드에 대 한 유효한 동기화를 제공 하려면 필드에 대 한 모든 액세스 사용 해야 <ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>In C#, using the <ph id="ph1">`volatile`</ph> modifier on a field guarantees that every access to that field uses the <ph id="ph2">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> methods, but the <ph id="ph4">`volatile`</ph> modifier cannot be applied to array elements.</source>
          <target state="translated">C#에서 사용 하 여는 <ph id="ph1">`volatile`</ph> 필드에 한정자를 사용 하 여 해당 필드에 대 한 모든 액세스를 보장는 <ph id="ph2">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> 메서드 되지만 <ph id="ph4">`volatile`</ph> 한정자는 배열 요소에 적용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Volatile">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> methods can be used on array elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType&gt;</ph> 방법을 배열 요소에 대해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Threading.Volatile">
          <source>Reads the value of a field.</source>
          <target state="translated">필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Threading.Volatile">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Byte@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Double@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Int16@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Int32@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Int64@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.IntPtr@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.SByte@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.Single@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.UInt16@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.UInt32@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.UInt64@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>Reads the value of the specified field.</source>
          <target state="translated">지정된 필드의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>The value that was read.</source>
          <target state="translated">읽은 값입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 값은 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read(System.UIntPtr@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>The type of field to read.</source>
          <target state="translated">읽을 필드의 형식입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>This must be a reference type, not a value type.</source>
          <target state="translated">이 형식은 값 형식이 아니라 참조 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>The field to read.</source>
          <target state="translated">읽을 필드입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>Reads the object reference from the specified field.</source>
          <target state="translated">지정된 필드에서 개체 참조를 읽습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 뒤에 나타나는 경우 프로세서가 이 메서드 앞으로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>The reference to <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that was read.</source>
          <target state="translated">읽은 <ph id="ph1">&lt;paramref name="T" /&gt;</ph>에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</source>
          <target state="translated">이 참조는 프로세서 수나 프로세서 캐시의 상태에 관계없이 컴퓨터의 어떠한 프로세서에서든 마지막으로 쓴 것입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Read``1(``0@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="T:System.Threading.Volatile">
          <source>Writes a value to a field.</source>
          <target state="translated">필드에 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="T:System.Threading.Volatile">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 메모리 작업이 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 메모리 작업을 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>The field where the value is written.</source>
          <target state="translated">값을 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>The value is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>Writes the specified value to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>The type of field to write.</source>
          <target state="translated">쓸 필드의 형식입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>This must be a reference type, not a value type.</source>
          <target state="translated">이 형식은 값 형식이 아니라 참조 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>The field where the object reference is written.</source>
          <target state="translated">개체 참조를 쓴 필드입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>The object reference to write.</source>
          <target state="translated">쓸 개체 참조입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>The reference is written immediately so that it is visible to all processors in the computer.</source>
          <target state="translated">컴퓨터의 모든 프로세서에서 참조를 볼 수 있도록 참조를 즉시 씁니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>Writes the specified object reference to the specified field.</source>
          <target state="translated">지정된 필드에 지정된 개체 참조를 씁니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</source>
          <target state="translated">필요한 시스템에서는 프로세서가 메모리 작업을 다시 정렬하는 것을 막는 메모리 차단을 다음과 같이 삽입합니다. 코드에서 읽기 또는 쓰기가 이 메서드 앞에 나타나는 경우 프로세서가 이 메서드 뒤로 읽기 또는 쓰기를 이동할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Volatile.Write``1(``0@,``0)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Threading.Volatile&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>