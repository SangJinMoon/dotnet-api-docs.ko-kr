<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c30c9bf2d271da2afe9d173213a99d04fceefda" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1ddc7-101">공유 리소스에 대한 단독 액세스를 기다리는 운영 체제 관련 개체를 캡슐화합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1ddc7-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-102"><xref:System.Threading.WaitHandle> 클래스 Win32 동기화 핸들을 캡슐화 하 고는 런타임에서 여러 개의 대기 작업을 허용 하는 모든 동기화 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="1ddc7-103">대기 핸들 다른 동기화 개체와 비교를 참조 하세요. [동기화 기본 형식 개요](~/docs/standard/threading/overview-of-synchronization-primitives.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="1ddc7-104"><xref:System.Threading.WaitHandle> 클래스 자체는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="1ddc7-105">클래스에서 파생 된 <xref:System.Threading.WaitHandle> 또는 공유 리소스에 대 한 액세스 액세스 해제를 나타내기 위해 신호 메커니즘을 정의 하지만 상속 된 사용 <xref:System.Threading.WaitHandle> 공유 리소스에 대 한 액세스를 기다리는 동안 차단 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="1ddc7-106">파생 된 클래스 <xref:System.Threading.WaitHandle> 포함:</span><span class="sxs-lookup"><span data-stu-id="1ddc7-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="1ddc7-107"><xref:System.Threading.Mutex> 클래스</span><span class="sxs-lookup"><span data-stu-id="1ddc7-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="1ddc7-108">참조 [뮤텍스](~/docs/standard/threading/mutexes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="1ddc7-109"><xref:System.Threading.EventWaitHandle> 클래스와 해당 파생된 클래스 <xref:System.Threading.AutoResetEvent> 및 <xref:System.Threading.ManualResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="1ddc7-110">[EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="1ddc7-111"><xref:System.Threading.Semaphore> 클래스</span><span class="sxs-lookup"><span data-stu-id="1ddc7-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="1ddc7-112">참조 [세마포 및 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="1ddc7-113">인스턴스 메서드를 호출 하 여 개별 대기 핸들에서 스레드가 차단 수 <xref:System.Threading.WaitHandle.WaitOne%2A>에서 파생 클래스에서 상속 됨 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="1ddc7-114">파생된 클래스의 <xref:System.Threading.WaitHandle> 스레드 선호도에서 서로 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="1ddc7-115">이벤트 대기 핸들 (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, 및 <xref:System.Threading.ManualResetEvent>) 및 세마포에 스레드 선호도 없습니다; 모든 스레드가 이벤트 대기 핸들 또는 세마포를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="1ddc7-116">뮤텍스 반면에 권한이 스레드 선호도 있습니다. 뮤텍스를 소유 하는 스레드를 해제 해야 하 고 스레드가 호출 하는 경우 예외가 throw 되는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드 소유 하지 않는 뮤텍스를 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="1ddc7-117">때문에 <xref:System.Threading.WaitHandle> 클래스에서 파생 <xref:System.MarshalByRefObject>를 이러한 클래스를 사용 하 여 응용 프로그램 도메인 경계에 걸쳐 스레드 활동을 동기화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="1ddc7-118">해당 파생된 클래스 외에 <xref:System.Threading.WaitHandle> 클래스에는 다양 한 동작이 일어날 때까지 스레드를 차단 하는 정적 메서드 또는 자세한 동기화 개체가 신호를 받기를...</span><span class="sxs-lookup"><span data-stu-id="1ddc7-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="1ddc7-119">여기에는 다음이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-119">These include:</span></span>  
  
-   <span data-ttu-id="1ddc7-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>를 한 대기 핸들이 신호를 보내고 다른 즉시 대기 하는 스레드 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="1ddc7-121"><xref:System.Threading.WaitHandle.WaitAll%2A>를 허용 하는 스레드를 모든 대기 핸들 배열에 신호를 받을 때까지 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="1ddc7-122"><xref:System.Threading.WaitHandle.WaitAny%2A>지정된 된 집합이 대기 핸들 중 하나는 신호가 될 때까지 대기 하는 스레드 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="1ddc7-123">이러한 메서드의 오버 로드는 대기 시간 및 들어가기 전에, 다른 스레드 동기화 컨텍스트를 사용할 수 있게 동기화 컨텍스트를 종료 하는 기회를 중단 하는 것에 대 한 제한 시간 간격을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1ddc7-124">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1ddc7-125">형식 또는 여기에서 파생 된 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="1ddc7-126">직접 형식의 dispose를 호출 해당 <xref:System.Threading.WaitHandle.Close%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="1ddc7-127">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="1ddc7-128">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="1ddc7-129"><xref:System.Threading.WaitHandle> 구현 하는 <xref:System.IDisposable.Dispose%2A> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="1ddc7-130">참조 [삭제 패턴](~/docs/standard/design-guidelines/dispose-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="1ddc7-131">파생 시키는 경우 <xref:System.Threading.WaitHandle>를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 네이티브 핸들 운영 체제 핸들을 저장 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="1ddc7-132">보호 된 재정의할 필요가 없습니다 <xref:System.Threading.WaitHandle.Dispose%2A> 메서드 추가 관리 되지 않는 리소스를 사용 하지 않는 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-133">다음 코드 예제에서는 두 개의 스레드 수는 방법 수행 백그라운드 작업 하는 동안 주 스레드 정적을 사용 하 여 완료 작업에 대 한 대기 <xref:System.Threading.WaitHandle.WaitAny%2A> 및 <xref:System.Threading.WaitHandle.WaitAll%2A> 의 메서드는 <xref:System.Threading.WaitHandle> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1ddc7-134">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1ddc7-134">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-135">
            <see cref="T:System.Threading.WaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-136">현재 <see cref="T:System.Threading.WaitHandle" /> 에서 보유한 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-137">이 메서드는의 공용 구현을 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 에 대 한 메서드는 <xref:System.Threading.WaitHandle> 클래스와 해당 파생된 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="1ddc7-138">호출 하는 표준 구현을 제공는 `Dispose(Boolean)` 오버 로드는 `true` 인수 및 호출 된 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1ddc7-139">인스턴스에서 보유 한 모든 리소스를 해제 하기 위해이 메서드를 호출 `WaitHandle` 또는 파생된 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="1ddc7-140">이 메서드가 호출 되 면 현재 인스턴스에 대 한 참조가 정의 되지 않은 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-141">항상 호출 <xref:System.Threading.WaitHandle.Close%2A> 또는 <xref:System.Threading.WaitHandle.Dispose> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="1ddc7-142">그렇지 않으면 사용 중인 리소스가 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1ddc7-143">재정의 해야 하는 <see langword="Dispose(Boolean)" /> 파생 클래스에서 할당 된 리소스를 해제 하는 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1ddc7-143">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-144">
            <see cref="T:System.Threading.WaitHandle" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-145">
            <see cref="T:System.Threading.WaitHandle" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-146">이 메서드는 해당 하는 <xref:System.Threading.WaitHandle.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-147">항상 호출 <xref:System.Threading.WaitHandle.Close%2A> 또는 <xref:System.Threading.WaitHandle.Dispose> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="1ddc7-148">그렇지 않으면 사용 중인 리소스가 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="1ddc7-149">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-149">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-150">파생 클래스에서 재정의된 경우 <see cref="T:System.Threading.WaitHandle" />에서 사용하는 관리되지 않는 리소스를 해제하고 필요에 따라 관리되는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-151">이 메서드는 <xref:System.Threading.WaitHandle.Close%2A> 및 <xref:System.Threading.WaitHandle.Dispose> 있는 메서드는 `explicitDisposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="1ddc7-152">경우는 `explicitDisposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Threading.WaitHandle> 개체에서 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1ddc7-153">재정의 해야 하는 <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> 파생 클래스에서 할당 된 리소스를 해제 하는 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1ddc7-153">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span>
            </span>
            <span data-ttu-id="1ddc7-154">
              <see cref="M:System.Threading.WaitHandle.Close" /> 또는 <see cref="M:System.Threading.WaitHandle.Dispose" /> 메서드는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1ddc7-154">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="1ddc7-155">이 메서드를 재정의 하는 경우에 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 해야 <see langword="Dispose" /> 또는 <see langword="Close" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1ddc7-155">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-156">네이티브 운영 체제 핸들을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-156">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ddc7-157">네이티브 운영 체제 핸들을 나타내는 <see langword="IntPtr" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-157">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="1ddc7-158">기본값은 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 필드의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-158">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-159">새 값을 할당 하는 <xref:System.Threading.WaitHandle.Handle%2A> 속성 이전 핸들을 닫지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-159">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="1ddc7-160">이 핸들 누수가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-160">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="1ddc7-161">.NET Framework 버전 2.0 이상의;에이 속성을 사용 하지 마십시오 사용 하 여 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-161">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="1ddc7-162">이 속성을 유효한 핸들도 집합은 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성이 아니라로 설정 <xref:System.Threading.WaitHandle.InvalidHandle> 핸들 누수가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-162">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="1ddc7-163">속성 값을 설정 하려면 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-163">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="1ddc7-164">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 설정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-164">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="1ddc7-165">파생된 형식에 있어야 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 속성 값을 설정 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-165">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-166">유효하지 않은 네이티브 운영 체제 핸들을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-166">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="1ddc7-167">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-167">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-168">내부적으로 초기화 하는 데 사용 된 <xref:System.Threading.WaitHandle.Handle%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-168">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1ddc7-169">확인 하려면이 값을 사용할 수 있는지 여부를 <see cref="P:System.Threading.WaitHandle.Handle" /> 속성 유효한 네이티브 운영 체제 핸들을 포함 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1ddc7-169">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-170">네이티브 운영 체제 핸들을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-170">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ddc7-171">네이티브 운영 체제 핸들을 나타내는 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-171">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-172">새 값을 할당 하면는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성을 이전 핸들이 닫히는 경우 이전 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 개체 수집 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-172">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="1ddc7-173">수동으로 닫지 마십시오 핸들에이 인해 때문에 프로그램 <xref:System.ObjectDisposedException> 때는 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 핸들을 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-173">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="1ddc7-174"><xref:System.Threading.WaitHandle> 구현 하는 <xref:System.IDisposable.Dispose%2A> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-174"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="1ddc7-175">참조 [삭제 패턴](~/docs/standard/design-guidelines/dispose-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-175">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="1ddc7-176">파생 시키는 경우 <xref:System.Threading.WaitHandle>를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 네이티브 핸들 운영 체제 핸들을 저장 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-176">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="1ddc7-177">보호 된 재정의할 필요가 없습니다 <xref:System.Threading.WaitHandle.Dispose%2A> 메서드 추가 관리 되지 않는 리소스를 사용 하지 않는 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-177">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="1ddc7-178">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-178">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="1ddc7-179">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-179">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="1ddc7-180">파생된 형식에 있어야 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 를이 멤버를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-180">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-181">
            <see cref="T:System.Threading.WaitHandle" />에 신호하고 다른 신호를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-181">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1ddc7-182">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-182">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1ddc7-183">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-183">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-184">
            <see cref="T:System.Threading.WaitHandle" />에 신호하고 다른 신호를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-184">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-185">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 대기가 완료되지 않으면 아무 값도 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-185">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-186">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-186">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1ddc7-187">현재 스레드 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 지 알려 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-187">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-188">다음 코드 예제에서는 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 메서드 오버 로드를 주 스레드에서 차단 된 스레드 신호를 보내고는 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-188">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="1ddc7-189">이 예제에서는 5 개의 스레드를 시작, 있는 경우 차단 될 수 있도록는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 플래그 및 다음 스레드를 하나씩 때마다 해제는 사용자가 ENTER 키를 누를 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-189">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="1ddc7-190">다음 예제에서는 다른 5 개의 스레드를 큐 대기를 사용 하 여 모든 해제는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-190">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-191">
            <paramref name="toSignal" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-191">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-192">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-192">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-193">
            <paramref name="toWaitOn" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-193">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-194">
            <see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-194">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1ddc7-195">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-195">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-196">
            <paramref name="toSignal" />이 세마포이며 이미 최대 카운트에 도달한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-196">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-197">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-197">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-198">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-198">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1ddc7-199">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-199">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1ddc7-200">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-200">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-201">대기할 간격을 나타내는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-201">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="1ddc7-202">값이 <see cref="F:System.Threading.Timeout.Infinite" />, 즉 -1이면 무기한 대기합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-202">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-203">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-203">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-204">제한 시간 간격을 부호 있는 32비트 정수로 지정하고 대기 상태로 들어가기 전에 컨텍스트에 대한 동기화 도메인을 종료할지 여부를 지정하여, <see cref="T:System.Threading.WaitHandle" /> 중 하나에게 알리고 다음을 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-204">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-205">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 신호는 성공적으로 보냈으나 대기가 시간 초과되었으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-205">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-206">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-206">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1ddc7-207">현재 스레드 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 지 알려 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-207">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="1ddc7-208">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-208">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-209">상태를 테스트는 `toWaitOn` 를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-209">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-210">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-210">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-211">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-211">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-212">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-212">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-213">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-213">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-214">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-214">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="1ddc7-215">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-215">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-216">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-216">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-217">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-217">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-218">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-218">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-219">경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-219">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-220">
            <paramref name="toSignal" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-220">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-221">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-221">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-222">
            <paramref name="toWaitOn" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-222">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-223">
            <see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-223">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1ddc7-224">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-224">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-225">
            <see cref="T:System.Threading.WaitHandle" />에서 최대 횟수를 초과하여 신호를 받을 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-225">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-226">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-226">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-227">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-227">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-228">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-228">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1ddc7-229">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-229">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1ddc7-230">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-230">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1ddc7-231">대기할 간격을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-231">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="1ddc7-232">값이 -1이면 무기한 대기합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-232">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-233">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-233">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-234">제한 시간 간격을 <see cref="T:System.TimeSpan" />으로 지정하고 대기 상태로 들어가기 전에 컨텍스트에 대한 동기화 도메인을 종료할지 여부를 지정하여, <see cref="T:System.Threading.WaitHandle" /> 중 하나에게 알리고 다음을 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-234">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-235">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 신호는 성공적으로 보냈으나 대기가 시간 초과되었으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-235">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-236">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-236">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1ddc7-237">현재 스레드 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 지 알려 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-237">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="1ddc7-238">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-238">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1ddc7-239">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-239">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-240">상태를 테스트는 `toWaitOn` 를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-240">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-241">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-241">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-242">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-242">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-243">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-243">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-244">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-244">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-245">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-245">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="1ddc7-246">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-246">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-247">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-247">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-248">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-248">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-249">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-249">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-250">경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-250">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-251">
            <paramref name="toSignal" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-251">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-252">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-252">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-253">
            <paramref name="toWaitOn" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-253">
              <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-254">
            <see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-254">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1ddc7-255">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-255">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-256">
            <paramref name="toSignal" />이 세마포이며 이미 최대 카운트에 도달한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-256">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-257">
            <paramref name="timeout" />이 -1이 아닌 밀리초 단위의 음수 시간으로 계산되는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-257">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="1ddc7-258">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-258">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-259">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-259">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-260">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-260">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-261">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-261">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-262">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-262">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-263">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-263">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1ddc7-264">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-264">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-265">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-265">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-266">
            <paramref name="waitHandles" />의 모든 요소가 신호를 받으면 <see langword="true" />를 반환하고, 그렇지 않으면 아무 값도 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-266">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-267"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-267"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-268">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-268">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-269">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-269">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-270">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-270">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-271">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-271">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-272"><xref:System.Threading.WaitHandle.WaitAll%2A> 메서드가 모든 핸들이 신호를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-272">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="1ddc7-273">64 개 이상의 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-273">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1ddc7-274">배열에 중복 항목이와 함께 호출이 실패 한 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-274">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-275"><xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-275">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1ddc7-276">이 메서드 오버 로드를 호출 하는 것은 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 (또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>)에 대 한 `millisecondsTimeout` 및 `true` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-276">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-277">다음 코드 예제에서는 비동기적으로 만들고 파일 그룹에 쓸 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-277">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1ddc7-278">각 쓰기 작업이 완료 되었을 때 작업 항목 및 신호 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-278">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1ddc7-279">주 스레드는 신호를 보내 모든 항목에 대 한 대기 하 고 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-279">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-280">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-280">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-281">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-281">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-282">
            <see langword="null" /> 배열에 있는 하나 이상의 개체가 <paramref name="waitHandles" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-282">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-283">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-283">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-284">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-284">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="1ddc7-285">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="1ddc7-285">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="1ddc7-286">
            <paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-286">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-287">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-287">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1ddc7-288">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-288">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-289">
            <see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-289">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-290">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-290">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-291">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-291">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-292">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-292">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-293">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-293">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-294">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-294">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1ddc7-295">이 배열에는 같은 개체(중복 개체)에 대한 여러 개의 참조가 포함될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-295">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-296">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-296">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-297">시간 간격을 지정하는 <see cref="T:System.Int32" /> 값을 사용하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-297">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-298">
            <paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-298">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-299">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-299">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-300">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-300">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-301"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기가 종료, 즉 모든 핸들이 신호를 받거나 시간 초과 하는 경우 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-301">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="1ddc7-302">64 개 이상의 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-302">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1ddc7-303">배열에 중복 항목이 있는지와 호출 실패는 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-303">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-304"><xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-304">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1ddc7-305">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-305">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-306">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-306">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-307">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-307">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-308">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-308">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-309">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-309">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-310">
            <paramref name="waitHandles" />가 요소가 없는 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-310">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="1ddc7-311">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="1ddc7-311">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="1ddc7-312">
            <paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-312">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-313">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-313">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1ddc7-314">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-314">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-315">
            <see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-315">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-316">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-316">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-317">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-317">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-318">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-318">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-319">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-319">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-320">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-320">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1ddc7-321">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-321">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1ddc7-322">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-322">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-323">
            <see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 지정함으로써 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-323">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-324">
            <paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-324">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-325">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-325">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-326">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-326">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-327"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기가 종료 즉, 모든 핸들이 신호 또는 제한 시간이 초과 하는 경우 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-327">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-328">64 개 이상의 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-328">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1ddc7-329">배열에 중복 항목이, 호출이 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-329">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-330"><xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-330">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1ddc7-331">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-331">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1ddc7-332">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-332">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-333">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-333">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-334">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-334">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-335">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-335">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-336">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-336">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-337">
            <paramref name="waitHandles" />가 요소가 없는 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-337">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="1ddc7-338">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="1ddc7-338">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="1ddc7-339">
            <paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-339">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-340">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-340">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1ddc7-341">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-341">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-342">
            <see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-342">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-343">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-343">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-344">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-344">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-345">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-345">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-346">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-346">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-347">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-347">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-348">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-348">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-349">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-349">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1ddc7-350">이 배열에는 같은 개체(중복 개체)에 대한 여러 개의 참조가 포함될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-350">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-351">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-351">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-352">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-352">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-353">
            <see cref="T:System.Int32" /> 값을 사용하여 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-353">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-354">
            <paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-354">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-355">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-355">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-356">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-356">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-357"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-357"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-358">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-358">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-359">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-359">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-360">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-360">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-361">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-361">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-362"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기가 종료, 즉 모든 핸들이 신호를 받거나 시간 초과 하는 경우 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-362">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="1ddc7-363">64 개 이상의 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-363">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1ddc7-364">배열에 중복 항목이 있는지와 호출 실패는 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-364">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-365"><xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-365">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-366">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-366">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-367">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitAll%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-367">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-368">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-368">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-369">파생 되지 않은 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-369">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-370">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-370">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="1ddc7-371">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-371">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-372">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-372">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="1ddc7-373">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-373">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-374">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-374">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-375">경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-375">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-376">다음 코드 예제에서는 비동기적으로 만들고 파일 그룹에 쓸 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-376">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1ddc7-377">각 쓰기 작업이 완료 되었을 때 작업 항목 및 신호 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-377">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1ddc7-378">주 스레드는 신호를 보내 모든 항목에 대 한 대기 하 고 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-378">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-379">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-379">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-380">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-380">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-381">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-381">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-382">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-382">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-383">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-383">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1ddc7-384">
            <paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-384">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-385">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-385">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1ddc7-386">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-386">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-387">
            <see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-387">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-388">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-388">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-389">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-389">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-390">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-390">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-391">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-391">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-392">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-392">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-393">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-393">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1ddc7-394">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-394">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1ddc7-395">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-395">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-396">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-396">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-397">
            <see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 측정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-397">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-398">
            <paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-398">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-399">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-399">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-400">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-400">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-401"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-401"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-402">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-402">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-403">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-403">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-404">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-404">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-405">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-405">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-406"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기가 종료 즉, 모든 핸들이 신호 또는 제한 시간이 초과 하는 경우 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-406">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-407">64 개 이상의 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-407">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1ddc7-408">배열에 중복 항목이, 호출이 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-408">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-409"><xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-409">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1ddc7-410">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-410">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-411">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-411">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-412">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitAll%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-412">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-413">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-413">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-414">파생 되지 않은 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-414">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-415">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-415">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="1ddc7-416">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-416">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-417">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-417">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-418">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-418">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-419">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-419">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-420">경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-420">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-421">다음 코드 예제에서는 비동기적으로 만들고 파일 그룹에 쓸 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-421">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1ddc7-422">각 쓰기 작업이 완료 되었을 때 작업 항목 및 신호 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-422">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1ddc7-423">주 스레드는 신호를 보내 모든 항목에 대 한 대기 하 고 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-423">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-424">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-424">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-425">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-425">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-426">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-426">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-427">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-427">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-428">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-428">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1ddc7-429">
            <paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-429">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-430">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-430">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1ddc7-431">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-431">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-432">
            <see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-432">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-433">
            <paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-433">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-434">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-434">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-435">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-435">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-436">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-436">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-437">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-437">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-438">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-438">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-439">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-439">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-440">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-440">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-441">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-441">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-442">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-442">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-443">대기를 만족한 개체의 배열 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-443">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-444"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-444"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-445">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드 반환 `true` 뮤텍스 중단 되기 때문에 대기가 완료 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-445">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-446">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-446">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-447">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-447">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-448">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-448">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-449"><xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단된 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-449">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1ddc7-450">경우 `waitHandles` 출시 된 뮤텍스 중단 된 뮤텍스 보다 낮은 인덱스 값을 포함 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-450">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-451">버전의.NET Framework 버전 2.0, 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전에 <xref:System.Threading.Mutex>, 해당 `Mutex` 에 인덱스 0 (영)에 `WaitAny` 배열 인덱스에서 반환 된 다른 스레드에서 `WaitAny` 은 0이 아닌 128입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-451">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1ddc7-452">이 핸들은 신호를 받을 때 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-452">This method returns when any handle is signaled.</span></span> <span data-ttu-id="1ddc7-453">둘 이상의 개체가 호출 하는 동안 신호를 받은, 하는 경우 반환 값은 모든 신호를 받은 개체의 가장 작은 인덱스 값을 가진 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-453">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1ddc7-454">개 이상의 64 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-454">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-455">이 메서드 오버 로드를 호출 하는 것은 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 (또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>)에 대 한 `millisecondsTimeout` 및 `true` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-455">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-456">다음 코드 예제에서는 호출은 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-456">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-457">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-457">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-458">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-458">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-459">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-459">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-460">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-460">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-461">
            <paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-461">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-462">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-462">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-463">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-463">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1ddc7-464">
            <paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-464">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-465">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-465">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-466">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-466">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-467">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-467">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-468">부호 있는 32비트 정수를 사용하여 시간 간격을 지정함으로써 지정된 배열의 임의 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-468">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-469">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="millisecondsTimeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-469">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-470">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-470">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-471">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-471">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-472"><xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단된 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-472">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1ddc7-473">경우 `waitHandles` 출시 된 뮤텍스 중단 된 뮤텍스 보다 낮은 인덱스 값을 포함 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-473">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-474">이 핸들은 신호를 받거나 시간 초과 대기가 종료 되 면 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-474">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="1ddc7-475">둘 이상의 개체가 호출 하는 동안 신호를 받은, 하는 경우 반환 값은 모든 신호를 받은 개체의 가장 작은 인덱스 값을 가진 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-475">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1ddc7-476">개 이상의 64 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-476">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-477">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-477">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-478">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-478">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-479">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-479">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-480">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-480">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-481">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-481">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-482">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-482">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-483">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-483">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-484">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-484">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1ddc7-485">
            <paramref name="waitHandles" />가 요소가 없는 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-485">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-486">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-486">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-487">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-487">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1ddc7-488">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-488">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-489">
            <see cref="T:System.TimeSpan" />을 사용하여 시간 간격을 지정함으로써 지정된 배열의 임의 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-489">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-490">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="timeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-490">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-491">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-491">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-492">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-492">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-493"><xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단된 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-493">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1ddc7-494">경우 `waitHandles` 출시 된 뮤텍스 중단 된 뮤텍스 보다 낮은 인덱스 값을 포함 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-494">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-495">이 핸들은 신호를 받거나 시간 초과 대기가 종료 되 면 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-495">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="1ddc7-496">둘 이상의 개체가 호출 하는 동안 신호를 받은, 하는 경우 반환 값은 모든 신호를 받은 개체의 가장 작은 인덱스 값을 가진 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-496">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1ddc7-497">개 이상의 64 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-497">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-498">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-498">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1ddc7-499">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-499">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-500">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-500">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-501">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-501">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-502">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-502">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-503">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-503">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-504">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-504">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-505">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-505">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-506">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-506">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-507">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-507">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-508">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-508">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1ddc7-509">
            <paramref name="waitHandles" />가 요소가 없는 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-509">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-510">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-510">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-511">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-511">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-512">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-512">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-513">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-513">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-514">부호 있는 32비트 정수를 사용하여 시간 간격을 지정하고 대기 전에 동기화 도메인을 종료할지를 지정하여 지정된 배열의 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-514">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-515">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="millisecondsTimeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-515">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-516">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-516">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-517">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-517">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-518"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-518"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-519">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드 반환 `true` 뮤텍스 중단 되기 때문에 대기가 완료 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-519">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-520">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-520">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-521">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-521">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-522">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-522">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-523"><xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단된 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-523">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1ddc7-524">경우 `waitHandles` 출시 된 뮤텍스 중단 된 뮤텍스 보다 낮은 인덱스 값을 포함 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-524">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-525">버전의.NET Framework 버전 2.0, 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전에 <xref:System.Threading.Mutex>, 해당 `Mutex` 에 인덱스 0 (영)에 `WaitAny` 배열 인덱스에서 반환 된 다른 스레드에서 `WaitAny` 은 0이 아닌 128입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-525">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1ddc7-526">이 핸들은 신호를 받거나 시간 초과 대기가 종료 되 면 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-526">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="1ddc7-527">둘 이상의 개체가 호출 하는 동안 신호를 받은, 하는 경우 반환 값은 모든 신호를 받은 개체의 가장 작은 인덱스 값을 가진 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-527">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1ddc7-528">개 이상의 64 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-528">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-529">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-529">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-530">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitAny%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-530">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-531">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-531">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-532">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-532">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-533">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-533">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="1ddc7-534">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-534">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-535">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-535">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-536">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-536">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-537">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-537">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-538">경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-538">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-539">다음 코드 예제에서는 동시에 여러 디스크에 파일을 검색 하는 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-539">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1ddc7-540">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-540">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-541">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-541">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-542">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-542">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-543">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-543">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-544">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-544">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-545">
            <paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-545">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-546">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-546">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-547">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-547">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-548">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-548">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1ddc7-549">
            <paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-549">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-550">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-550">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1ddc7-551">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-551">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1ddc7-552">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-552">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-553">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-553">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-554">
            <see cref="T:System.TimeSpan" /> 값으로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정한 다음 지정된 배열의 요소가 신호를 받기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-554">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-555">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="timeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-555">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-556">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-556">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-557">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-557">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-558"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-558"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-559">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드 반환 `true` 뮤텍스 중단 되기 때문에 대기가 완료 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-559">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-560">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-560">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-561">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-561">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-562">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-562">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-563"><xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단된 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-563">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1ddc7-564">경우 `waitHandles` 출시 된 뮤텍스 중단 된 뮤텍스 보다 낮은 인덱스 값을 포함 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-564">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ddc7-565">버전의.NET Framework 버전 2.0, 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전에 <xref:System.Threading.Mutex>, 해당 `Mutex` 에 인덱스 0 (영)에 `WaitAny` 배열 인덱스에서 반환 된 다른 스레드에서 `WaitAny` 은 0이 아닌 128입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-565">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1ddc7-566">이 핸들은 신호를 받거나 시간 초과 대기가 종료 되 면 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-566">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="1ddc7-567">둘 이상의 개체가 호출 하는 동안 신호를 받은, 하는 경우 반환 값은 모든 신호를 받은 개체의 가장 작은 인덱스 값을 가진 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-567">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1ddc7-568">개 이상의 64 핸들을 전달 하는 경우 일부 구현에서는 한 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-568">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1ddc7-569">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-569">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-570">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-570">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-571">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitAny%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-571">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-572">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-572">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-573">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-573">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-574">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-574">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="1ddc7-575">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-575">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-576">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-576">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-577">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-577">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-578">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-578">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-579">경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-579">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-580">다음 코드 예제에서는 동시에 여러 디스크에 파일을 검색 하는 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-580">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1ddc7-581">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-581">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1ddc7-582">
            <paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-582">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1ddc7-583">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-583">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-584">
            <paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-584">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1ddc7-585">
            <paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-585">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1ddc7-586">
            <paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-586">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-587">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-587">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-588">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-588">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-589">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-589">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-590">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-590">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-591">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-591">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1ddc7-592">
            <paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-592">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-593">
            <paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-593">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-594">현재 <see cref="T:System.Threading.WaitHandle" />이(가) 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-594">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-595">현재 <see cref="T:System.Threading.WaitHandle" />이(가) 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-595">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-596">현재 인스턴스가 신호를 받으면 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-596">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="1ddc7-597">현재 인스턴스가 신호를 받지 않으면 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />은(는) 아무 값도 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-597">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-598"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-598"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-599">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-599">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-600">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-600">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-601">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-601">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-602">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-602">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-603">현재 인스턴스가 신호를 받을 때까지 무제한으로이 메서드 블록의 호출자입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-603">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="1ddc7-604">될 때까지 차단 하려면이 메서드를 사용 하 여 한 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-604">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1ddc7-605">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-605">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1ddc7-606">이 메서드 오버 로드를 호출 하는 것은 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 첫 번째 매개 변수에 대 한 및 `false` 두 번째 매개 변수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-606">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="1ddc7-607">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-607">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-608">다음 코드 예제에서는 유지할 프로세스는 백그라운드 스레드가 실행을 완료할 때까지 대기 하는 동안 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-608">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1ddc7-609">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-609">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-610">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-610">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-611">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-611">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-612">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-612">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-613">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-613">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-614">부호 있는 32비트 정수로 시간 간격(밀리초)을 지정하여 현재 <see cref="T:System.Threading.WaitHandle" />이 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-614">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-615">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-615">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-616">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-616">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-617">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-617">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-618">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-618">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-619">될 때까지 차단 하려면이 메서드를 사용 하 여 한 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-619">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1ddc7-620">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-620">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1ddc7-621">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-621">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1ddc7-622">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-622">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-623">다음 코드 예제에서는 유지할 프로세스는 백그라운드 스레드가 실행을 완료할 때까지 대기 하는 동안 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-623">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1ddc7-624">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-624">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-625">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-625">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-626">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-626">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-627">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-627">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-628">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-628">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1ddc7-629">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-629">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-630">
            <see cref="T:System.TimeSpan" />로 시간 간격을 지정하여 현재 인스턴스가 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-630">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-631">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-631">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-632">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-632">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-633">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-633">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-634">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-634">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-635">될 때까지 차단 하려면이 메서드를 사용 하 여 한 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-635">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1ddc7-636">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-636">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1ddc7-637">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-637">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1ddc7-638">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-638">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1ddc7-639">이이 메서드 오버 로드는 <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> 오버 로드를 지정 하 고 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-639">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1ddc7-640">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-640">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-641">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-641">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-642">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-642">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-643">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-643">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-644">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-644">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-645">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-645">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-646">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-646">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1ddc7-647">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-647">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-648">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-648">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-649">부호 있는 32비트 정수로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 현재 <see cref="T:System.Threading.WaitHandle" />이 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-649">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-650">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-650">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-651">경우 `millisecondsTimeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-651">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-652">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-652">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-653"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-653"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-654">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-654">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-655">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-655">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-656">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-656">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-657">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-657">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-658">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-658">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-659">될 때까지 차단 하려면이 메서드를 사용 하 여 한 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-659">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1ddc7-660">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-660">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1ddc7-661">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-661">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-662">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-662">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-663">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitOne%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-663">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-664">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-664">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-665">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-665">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-666">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-666">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="1ddc7-667">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-667">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-668">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-668">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-669">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-669">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-670">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-670">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-671">경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-671">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-672">다음 예제와 방법을 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 동기화 도메인 내에서 호출 될 때 동작 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-672">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="1ddc7-673">스레드 대기 먼저 `exitContext` 로 설정 `false` 및 대기 시간 제한이 만료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-673">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="1ddc7-674">두 번째 스레드가 실행 하는 첫 번째 스레드가 종료 된 상태에서 대기 후 `exitContext` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-674">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="1ddc7-675">이 두 번째 스레드에 대 한 대기 핸들이 신호를 보내 호출이 차단 되지 않으며, 및 스레드는 대기 시간이 초과 하기 전에 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-675">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1ddc7-676">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-676">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-677">
            <paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-677">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-678">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-678">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-679">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-679">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-680">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-680">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1ddc7-681">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-681">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1ddc7-682">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-682">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ddc7-683">
            <see cref="T:System.TimeSpan" />로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 현재 인스턴스가 신호를 받을 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-683">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ddc7-684">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-684">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-685">경우 `timeout` 가 0 인 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-685">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1ddc7-686">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-686">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1ddc7-687"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-687"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1ddc7-688">이전 버전에서는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반환 `true` 뮤텍스가 중단 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-688">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1ddc7-689">중단 된 뮤텍스는 심각한 코딩 오류를 나타내는 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-689">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1ddc7-690">시스템 수준 뮤텍스의 경우 (예를 들어 Windows 작업 관리자를 사용)에서 응용 프로그램이 갑자기 종료 되었습니다를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-690">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1ddc7-691">디버깅에 유용한 정보를 포함 하는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-691">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1ddc7-692">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-692">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1ddc7-693">될 때까지 차단 하려면이 메서드를 사용 하 여 한 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-693">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1ddc7-694">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-694">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1ddc7-695">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-695">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1ddc7-696">에 대 한 최대값 `timeout` 은 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-696">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1ddc7-697">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="1ddc7-697">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1ddc7-698">`exitContext` 매개 변수 효과가 <xref:System.Threading.WaitHandle.WaitOne%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-698">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1ddc7-699">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-699">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1ddc7-700">파생 되지 않는 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-700">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1ddc7-701">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-701">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="1ddc7-702">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-702">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="1ddc7-703">컨텍스트 바인딩 클래스에 유용할 수 있습니다 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-703">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1ddc7-704">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-704">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1ddc7-705">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-705">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1ddc7-706">경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-706">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-707">다음 코드 예제에서는 유지할 프로세스는 백그라운드 스레드가 실행을 완료할 때까지 대기 하는 동안 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-707">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1ddc7-708">현재 인스턴스가 이미 삭제된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-708">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1ddc7-709">
            <paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-709">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="1ddc7-710">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-710">-or-</span>
          </span>
          <span data-ttu-id="1ddc7-711">
            <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-711">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1ddc7-712">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-712">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1ddc7-713">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-713">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1ddc7-714">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-714">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ddc7-715">대기 핸들이 신호를 받기 전에 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 작업이 제한 시간을 초과했음을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-715">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="1ddc7-716">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ddc7-716">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ddc7-717">이 필드의 가능한 반환 값 중 하나는 `WaitAny`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-717">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ddc7-718">다음 코드 예제에서는 동시에 여러 디스크에 파일을 검색 하는 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-718">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1ddc7-719">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ddc7-719">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>