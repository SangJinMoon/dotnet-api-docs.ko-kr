<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e4f535aac5b1ac76fce22f3575e7faac99a5389a" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53447892" /></Metadata><TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5f9d4-101">공유 리소스에 대한 단독 액세스를 기다리는 운영 체제 관련 개체를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-101">Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-102"><xref:System.Threading.WaitHandle> 클래스 네이티브 운영 체제 동기화 핸들을 캡슐화 하 고 런타임에서 여러 개의 대기 작업을 허용 하는 모든 동기화 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="5f9d4-103">다른 동기화 개체를 사용 하 여 대기 핸들의 비교를 참조 하세요 [동기화 기본 형식 개요](~/docs/standard/threading/overview-of-synchronization-primitives.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="5f9d4-104"><xref:System.Threading.WaitHandle> 클래스 자체는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="5f9d4-105">파생 된 클래스 <xref:System.Threading.WaitHandle> 신호 메커니즘을 수행 하거나 공유 리소스에 대 한 액세스를 해제 의미를 정의 하지만 상속 된 사용 <xref:System.Threading.WaitHandle> 공유 리소스에 대 한 액세스를 기다리는 동안 차단 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="5f9d4-106">파생 된 클래스가 <xref:System.Threading.WaitHandle> 포함:</span><span class="sxs-lookup"><span data-stu-id="5f9d4-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="5f9d4-107"><xref:System.Threading.Mutex> 클래스</span><span class="sxs-lookup"><span data-stu-id="5f9d4-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="5f9d4-108">참조 [뮤텍스](~/docs/standard/threading/mutexes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="5f9d4-109">합니다 <xref:System.Threading.EventWaitHandle> 클래스와 파생된 클래스인 <xref:System.Threading.AutoResetEvent> 및 <xref:System.Threading.ManualResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="5f9d4-110">[EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="5f9d4-111"><xref:System.Threading.Semaphore> 클래스</span><span class="sxs-lookup"><span data-stu-id="5f9d4-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="5f9d4-112">참조 [세마포 및 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="5f9d4-113">인스턴스 메서드를 호출 하 여 개별 대기 핸들에서 스레드가 차단할 수 있습니다 <xref:System.Threading.WaitHandle.WaitOne%2A>에서 파생 된 클래스에 상속 되는 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="5f9d4-114">파생된 클래스 <xref:System.Threading.WaitHandle> 스레드 선호도 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="5f9d4-115">이벤트 대기 핸들 (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, 및 <xref:System.Threading.ManualResetEvent>) 세마포에 스레드 선호도 없습니다 하 고 모든 스레드를 이벤트 대기 핸들 또는 세마포 신호를 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="5f9d4-116">뮤텍스, 반면에 권한이 스레드 선호도 있습니다. 뮤텍스를 소유 하는 스레드를 해제 해야 하 고 스레드 호출 하는 경우 예외가 throw 되는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 소유 하지 않는 뮤텍스를 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="5f9d4-117">때문에 합니다 <xref:System.Threading.WaitHandle> 클래스에서 파생 되며 <xref:System.MarshalByRefObject>, 이러한 클래스를 사용 하 여 응용 프로그램 도메인 경계를 넘어 스레드의 활동을 동기화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="5f9d4-118">파생된 클래스 외에도 <xref:System.Threading.WaitHandle> 클래스 개수가 하나 될 때까지 스레드를 차단 하는 정적 메서드 또는 동기화 개체가 신호를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="5f9d4-119">여기에는 다음이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-119">These include:</span></span>  
  
-   <span data-ttu-id="5f9d4-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>에 하나의 대기 핸들이 신호를 보내고 다른 곧바로 대기 하기 위한 스레드 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="5f9d4-121"><xref:System.Threading.WaitHandle.WaitAll%2A>을 허용 하는 스레드가 모든 대기 핸들 배열에 신호를 받을 때까지 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="5f9d4-122"><xref:System.Threading.WaitHandle.WaitAny%2A>을 허용 하는 스레드가 대기 핸들의 지정된 된 집합 중 하나에서 신호 될 때까지 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="5f9d4-123">이러한 메서드의 오버 로드는 대기 및 동기화 컨텍스트를 사용 하 여 다른 스레드를 허용 하는 대기를 시작 하기 전에 동기화 컨텍스트를 종료 하는 기회를 중단 하는 것에 대 한 제한 시간 간격을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5f9d4-124">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5f9d4-125">형식 또는 여기에서 파생 된 형식을 사용 하 여 마쳤으면 직접 또는 간접적으로으로 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5f9d4-126">직접 형식의 dispose 호출 해당 <xref:System.Threading.WaitHandle.Close%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="5f9d4-127">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="5f9d4-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5f9d4-128">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="5f9d4-129"><xref:System.Threading.WaitHandle> 구현 된 <xref:System.IDisposable.Dispose%2A> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="5f9d4-130">참조 [Dispose 메서드](~/docs/standard/garbage-collection/implementing-dispose.md)를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-130">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="5f9d4-131">파생 하는 경우 <xref:System.Threading.WaitHandle>를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 에 네이티브 운영 체제 핸들을 저장 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="5f9d4-132">보호 된 재정의할 필요가 없습니다 <xref:System.Threading.WaitHandle.Dispose%2A> 메서드 사용 하지 않는 경우 관리 되지 않는 리소스를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-133">다음 코드 예제에서는 두 개의 스레드 수는 어떻게 수행 주 하는 동안 백그라운드 작업 스레드 작업이 정적을 사용 하 여 완료 되기를 기다립니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 하 고 <xref:System.Threading.WaitHandle.WaitAll%2A> 의 메서드는 <xref:System.Threading.WaitHandle> 클래스.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5f9d4-134">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-134">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5f9d4-135">스레딩</span><span class="sxs-lookup"><span data-stu-id="5f9d4-135">Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="5f9d4-136">스레딩 개체 및 기능</span><span class="sxs-lookup"><span data-stu-id="5f9d4-136">Threading Objects and Features</span></span></related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5f9d4-137">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5f9d4-137">Mutexes</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cd94fc34-ac15-427f-b723-a1240a4fab7d"><span data-ttu-id="5f9d4-138">EventWaitHandle, AutoResetEvent 및 ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="5f9d4-138">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="5f9d4-139">세마포</span><span class="sxs-lookup"><span data-stu-id="5f9d4-139">Semaphores</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-140"><see cref="T:System.Threading.WaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-140">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-141">현재 <see cref="T:System.Threading.WaitHandle" /> 에서 보유한 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-141">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-142">이 메서드는 공용 구현의 합니다 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 에 대 한 메서드는 <xref:System.Threading.WaitHandle> 클래스와 파생된 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-142">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="5f9d4-143">호출 하는 표준 구현을 제공 합니다 `Dispose(Boolean)` 오버 로드를 `true` 인수 및 호출을 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-143">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5f9d4-144">인스턴스에서 보유 한 모든 리소스를 해제 하려면이 메서드를 호출 `WaitHandle` 또는 파생된 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-144">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="5f9d4-145">이 메서드가 호출 되 면 현재 인스턴스에 대 한 참조가 정의 되지 않은 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-145">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-146">항상 호출 <xref:System.Threading.WaitHandle.Close%2A> 나 <xref:System.Threading.WaitHandle.Dispose> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-146">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5f9d4-147">그렇지 않은 경우 사용 중인 리소스가 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-147">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5f9d4-148">재정의 해야 하는 <see langword="Dispose(Boolean)" /> 파생 된 클래스에 할당 된 리소스를 해제 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-148">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="5f9d4-149">Dispose 메서드 구현</span><span class="sxs-lookup"><span data-stu-id="5f9d4-149">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f9d4-150"><see cref="T:System.Threading.WaitHandle" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-151"><see cref="T:System.Threading.WaitHandle" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-151">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-152">이 메서드는 해당 하는 <xref:System.Threading.WaitHandle.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-152">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-153">항상 호출 <xref:System.Threading.WaitHandle.Close%2A> 나 <xref:System.Threading.WaitHandle.Dispose> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-153">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5f9d4-154">그렇지 않은 경우 사용 중인 리소스가 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-154">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="5f9d4-155">관리되지 않는 리소스 정리</span><span class="sxs-lookup"><span data-stu-id="5f9d4-155">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing"><span data-ttu-id="5f9d4-156">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-156"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5f9d4-157">파생 클래스에서 재정의된 경우 <see cref="T:System.Threading.WaitHandle" />에서 사용하는 관리되지 않는 리소스를 해제하고 필요에 따라 관리되는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-157">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-158">이 메서드는 합니다 <xref:System.Threading.WaitHandle.Close%2A> 및 <xref:System.Threading.WaitHandle.Dispose> 메서드를 `explicitDisposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-158">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="5f9d4-159">경우는 `explicitDisposing` 매개 변수가 `true`,이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.Threading.WaitHandle> 개체 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-159">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5f9d4-160">재정의 해야 하는 <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> 파생 된 클래스에 할당 된 리소스를 해제 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-160">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
<span data-ttu-id="5f9d4-161">합니다 <see cref="M:System.Threading.WaitHandle.Close" /> 또는 <see cref="M:System.Threading.WaitHandle.Dispose" /> 메서드 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-161">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="5f9d4-162">이 메서드를 재정의 하는 경우에 대 한 이전 호출에서 이전에 삭제 된 개체를 참조 하지 않도록 주의 <see langword="Dispose" /> 또는 <see langword="Close" />합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-162">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="5f9d4-163">Dispose 메서드 구현</span><span class="sxs-lookup"><span data-stu-id="5f9d4-163">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-164">현재 인스턴스에서 보유한 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-164">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="5f9d4-165">이 멤버는.NET Framework 버전 2.0 및 이후 버전에서 제거 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-165">This member has been removed from the .NET Framework version 2.0 and subsequent versions.</span></span> <span data-ttu-id="5f9d4-166">이 항목에서는이 항목 뒷부분의 "버전 정보"에 나열 된 버전에만 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-166">This topic applies only to the versions listed in "Version Information" later in this topic.</span></span>


<span data-ttu-id="5f9d4-167">응용 프로그램 코드는이 메서드를 호출 하지 않습니다. 가비지 수집기에 의해 종료 비활성화 된 경우가 아니면 자동으로 가비지를 수집 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-167">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="5f9d4-168">자세한 내용은 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 및 <xref:System.Object.Finalize>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-168">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="5f9d4-169">이 메서드는 <xref:System.Object.Finalize>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-169">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f9d4-170">네이티브 운영 체제 핸들을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-170">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="5f9d4-171">네이티브 운영 체제 핸들을 나타내는 <see langword="IntPtr" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-171">An <see langword="IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="5f9d4-172">기본값은 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 필드의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-172">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-173">새 값을 할당 합니다 <xref:System.Threading.WaitHandle.Handle%2A> 속성 이전 핸들을 닫지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-173">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="5f9d4-174">이 핸들 누수가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-174">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="5f9d4-175">.NET Framework 버전 2.0 이상이;에이 속성을 사용 하지 마십시오 사용 된 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-175">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="5f9d4-176">이 속성을 유효한 핸들도 설정 합니다 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성이 아니라 설정 <xref:System.Threading.WaitHandle.InvalidHandle> 핸들 누수가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-176">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5f9d4-177">속성 값을 설정 하려면 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-177">Requires full trust for the immediate caller to set the property value.</span></span> <span data-ttu-id="5f9d4-178">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-178">This member cannot be set by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="5f9d4-179">파생된 형식에 있어야 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 속성 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-179">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f9d4-180">유효하지 않은 네이티브 운영 체제 핸들을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-180">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="5f9d4-181">이 필드는 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-181">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-182">초기화를 내부적으로 사용 된 <xref:System.Threading.WaitHandle.Handle%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-182">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5f9d4-183">확인 하려면이 값을 사용할 수 있는지 여부를 <see cref="P:System.Threading.WaitHandle.Handle" /> 속성에 유효한 기본 운영 체제 핸들을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-183">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5f9d4-184">네이티브 운영 체제 핸들을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-184">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="5f9d4-185">네이티브 운영 체제 핸들을 나타내는 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-185">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-186">새 값을 할당 하는 경우는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성을 이전 핸들이 닫힐 때 이전 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 개체가 수집 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-186">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="5f9d4-187">수동으로 닫지 핸들,이 인해 때문에 <xref:System.ObjectDisposedException> 경우는 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 핸들을 종료 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-187">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="5f9d4-188"><xref:System.Threading.WaitHandle> 구현 된 <xref:System.IDisposable.Dispose%2A> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-188"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="5f9d4-189">참조 [Dispose 메서드](~/docs/standard/garbage-collection/implementing-dispose.md)를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-189">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="5f9d4-190">파생 하는 경우 <xref:System.Threading.WaitHandle>를 사용 하 여는 <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> 속성에 대 한 기본 핸들 운영 체제 핸들을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-190">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="5f9d4-191">보호 된 재정의할 필요가 없습니다 <xref:System.Threading.WaitHandle.Dispose%2A> 메서드 사용 하지 않는 경우 관리 되지 않는 리소스를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-191">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5f9d4-192">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-192">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5f9d4-193">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-193">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="5f9d4-194">파생된 형식에 있어야 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 이 멤버를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-194">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f9d4-195"><see cref="T:System.Threading.WaitHandle" />에 신호하고 다른 신호를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-195">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="5f9d4-196">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-196">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="5f9d4-197">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-197">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="5f9d4-198"><see cref="T:System.Threading.WaitHandle" />에 신호하고 다른 신호를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-198">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-199">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 대기가 완료되지 않으면 아무 값도 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-199"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-200">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-200">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="5f9d4-201">현재 스레드가 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 수 신호 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-201">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-202">다음 코드 예제에서는 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 메서드 오버 로드는 주 스레드가 차단 된 스레드가 신호를 보내고 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-202">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="5f9d4-203">이 예제에서는 5 개의 스레드를 시작에서 차단 될 수는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 플래그 및 사용자가 ENTER 키를 누를 릴리스 스레드를 하나씩 시간 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-203">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="5f9d4-204">다음 예제에서는 다른 5 개의 스레드가 큐를 사용 하 여 모든 릴리스 하는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-204">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-205"><paramref name="toSignal" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-205"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-206">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-206">-or-</span></span> 
 <span data-ttu-id="5f9d4-207"><paramref name="toWaitOn" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-207"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-208"><see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-208">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5f9d4-209">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-209">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-210"><paramref name="toSignal" />이 세마포이며 이미 최대 카운트에 도달한 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-210"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-211">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-211">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-212">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-212">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="5f9d4-213">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-213">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="5f9d4-214">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-214">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-215">대기할 간격을 나타내는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-215">An integer that represents the interval to wait.</span></span> <span data-ttu-id="5f9d4-216">값이 <see cref="F:System.Threading.Timeout.Infinite" />, 즉 -1이면 무기한 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-216">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-217">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-217"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-218">제한 시간 간격을 부호 있는 32비트 정수로 지정하고 대기 상태로 들어가기 전에 컨텍스트에 대한 동기화 도메인을 종료할지 여부를 지정하여, <see cref="T:System.Threading.WaitHandle" /> 중 하나에게 알리고 다음을 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-218">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-219">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 신호는 성공적으로 보냈으나 대기가 시간 초과되었으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-219"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-220">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-220">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="5f9d4-221">현재 스레드가 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 수 신호 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-221">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="5f9d4-222">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-222">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-223">상태를 테스트 합니다 `toWaitOn` 를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-223">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-224">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-224">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-225">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-225">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-226">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-226">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-227">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-227">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-228">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-228">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="5f9d4-229">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-229">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-230">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-230">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-231">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-231">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-232">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-232">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-233">경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-233">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-234"><paramref name="toSignal" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-234"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-235">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-235">-or-</span></span> 
 <span data-ttu-id="5f9d4-236"><paramref name="toWaitOn" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-236"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-237"><see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-237">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5f9d4-238">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-238">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-239"><see cref="T:System.Threading.WaitHandle" />에서 최대 횟수를 초과하여 신호를 받을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-239">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-240"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-240"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-241">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-241">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-242">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-242">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="5f9d4-243">신호를 보낼 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-243">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="5f9d4-244">대기할 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-244">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="5f9d4-245">대기할 간격을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-245">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="5f9d4-246">값이 -1이면 무기한 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-246">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-247">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-247"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-248">제한 시간 간격을 <see cref="T:System.TimeSpan" />으로 지정하고 대기 상태로 들어가기 전에 컨텍스트에 대한 동기화 도메인을 종료할지 여부를 지정하여, <see cref="T:System.Threading.WaitHandle" /> 중 하나에게 알리고 다음을 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-248">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-249">신호를 보내는 작업과 대기가 모두 성공적으로 완료되면 <see langword="true" />를 반환하고, 신호는 성공적으로 보냈으나 대기가 시간 초과되었으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-249"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-250">이 작업은 원자성을 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-250">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="5f9d4-251">현재 스레드가 신호 후 `toSignal` 대기 하기 전에 `toWaitOn`, 다른 프로세서에서 실행 되는 스레드 수 신호 `toWaitOn` 대기 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-251">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="5f9d4-252">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-252">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5f9d4-253">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-253">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-254">상태를 테스트 합니다 `toWaitOn` 를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-254">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-255">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-255">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-256">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-256">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-257">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-257">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-258">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-258">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-259">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-259">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="5f9d4-260">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-260">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-261">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-261">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-262">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-262">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-263">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-263">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-264">경우는 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-264">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-265"><paramref name="toSignal" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-265"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-266">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-266">-or-</span></span> 
 <span data-ttu-id="5f9d4-267"><paramref name="toWaitOn" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-267"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-268"><see cref="T:System.STAThreadAttribute" />가 있는 스레드에서 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-268">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5f9d4-269">Windows 98 또는 Windows Millennium Edition에서 이 메서드가 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-269">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-270"><paramref name="toSignal" />이 세마포이며 이미 최대 카운트에 도달한 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-270"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-271"><paramref name="timeout" />이 -1이 아닌 밀리초 단위의 음수 시간으로 계산되는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-271"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
<span data-ttu-id="5f9d4-272">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-272">-or-</span></span> 
 <span data-ttu-id="5f9d4-273"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-273"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-274">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-274">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-275">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-275">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-276"><see cref="T:System.Threading.WaitHandle" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-276">Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="5f9d4-277">호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.WaitHandle> 다른 용도로 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-277">Calling `Dispose` allows the resources used by the <xref:System.Threading.WaitHandle> to be reallocated for other purposes.</span></span> <span data-ttu-id="5f9d4-278">에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-278">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f9d4-279">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-279">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-280">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-280">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="5f9d4-281">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-281">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="5f9d4-282">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-282">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-283"><paramref name="waitHandles" />의 모든 요소가 신호를 받으면 <see langword="true" />를 반환하고, 그렇지 않으면 아무 값도 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-283"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-284"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-284"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-285">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-285">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-286">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-286">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-287">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-287">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-288">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-288">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-289"><xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 핸들을 모두 신호를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-289">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="5f9d4-290">일부 구현에서는 64 개 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-290">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="5f9d4-291">사용 하 여 호출이 실패 하면 중복을 포함 하는 경우는 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-291">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-292">합니다 <xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-292">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="5f9d4-293">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 (또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>)에 대 한 `millisecondsTimeout` 하 고 `true` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-293">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-294">다음 코드 예제에서는 비동기적으로 만들고 그룹 파일에 쓰는 데 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-294">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="5f9d4-295">각 쓰기 작업이 완료 되 면 작업 항목 및 신호 대기 중입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-295">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="5f9d4-296">주 스레드가 신호를 보낼 모든 항목에 대 한 대기 및 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-296">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-297"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-297">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="5f9d4-298">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-298">-or-</span></span> 
<span data-ttu-id="5f9d4-299"><see langword="null" /> 배열에 있는 하나 이상의 개체가 <paramref name="waitHandles" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-299">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-300">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-300">-or-</span></span> 
 <span data-ttu-id="5f9d4-301"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-301"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="5f9d4-302"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows 스토어 앱용 .NET</see> 또는 <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">이식 가능한 클래스 라이브러리</see>에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-302">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="5f9d4-303"><paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-303">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-304"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-304">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="5f9d4-305">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-305">-or-</span></span> 
<span data-ttu-id="5f9d4-306"><see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-306">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-307"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-307"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-308">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-308">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-309">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-309">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-310"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-310">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-311">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-311">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="5f9d4-312">이 배열에는 같은 개체(중복 개체)에 대한 여러 개의 참조가 포함될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-312">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-313">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-313">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-314">시간 간격을 지정하는 <see cref="T:System.Int32" /> 값을 사용하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-314">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-315"><paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-315"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-316">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-316">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-317">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-317">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-318"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기 종료 되 면, 즉 모든 핸들은 신호를 받거나 시간 초과 시 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-318">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="5f9d4-319">일부 구현에서는 64 개 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-319">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="5f9d4-320">배열에 중복 항목이 있는지 호출이 실패 하는 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-320">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-321">합니다 <xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-321">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="5f9d4-322">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-322">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-323"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-323">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-324">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-324">-or-</span></span> 
<span data-ttu-id="5f9d4-325"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-325">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-326">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-326">-or-</span></span> 
 <span data-ttu-id="5f9d4-327"><paramref name="waitHandles" />가 요소가 없는 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-327"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="5f9d4-328"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows 스토어 앱용 .NET</see> 또는 <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">이식 가능한 클래스 라이브러리</see>에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-328">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="5f9d4-329"><paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-329">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-330"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-330">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="5f9d4-331">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-331">-or-</span></span> 
<span data-ttu-id="5f9d4-332"><see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-332">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-333"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-333"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-334">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-334">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-335">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-335">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-336"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-336">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-337">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-337">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="5f9d4-338">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-338">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="5f9d4-339">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-339">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-340"><see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 지정함으로써 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-340">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-341"><paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-341"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-342">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-342">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-343">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-343">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-344"><xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 즉, 모든 핸들이 신호를 대기 종료 되거나 제한 시간이 때 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-344">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-345">일부 구현에서는 64 개 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-345">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="5f9d4-346">중복 항목을 포함 하는 경우 호출이 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-346">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-347">합니다 <xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-347">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="5f9d4-348">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-348">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5f9d4-349">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-349">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-350"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-350">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-351">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-351">-or-</span></span> 
<span data-ttu-id="5f9d4-352"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-352">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-353">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-353">-or-</span></span> 
 <span data-ttu-id="5f9d4-354"><paramref name="waitHandles" />가 요소가 없는 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-354"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="5f9d4-355"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows 스토어 앱용 .NET</see> 또는 <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">이식 가능한 클래스 라이브러리</see>에서 대신 기본 클래스 예외 <see cref="T:System.ArgumentException" />을 catch합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-355">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="5f9d4-356"><paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-356">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-357"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-357">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="5f9d4-358">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-358">-or-</span></span> 
<span data-ttu-id="5f9d4-359"><see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-359">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-360"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-360"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-361">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-361">-or-</span></span> 
 <span data-ttu-id="5f9d4-362"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-362"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-363">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-363">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-364">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-364">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-365"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-365">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-366">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-366">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="5f9d4-367">이 배열에는 같은 개체(중복 개체)에 대한 여러 개의 참조가 포함될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-367">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-368">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-368">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-369">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-369"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-370"><see cref="T:System.Int32" /> 값을 사용하여 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-370">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-371"><paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-371"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-372">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-372">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-373">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-373">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-374"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-374"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-375">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-375">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-376">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-376">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-377">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-377">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-378">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-378">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-379"><xref:System.Threading.WaitHandle.WaitAll%2A> 대기 종료 되 면, 즉 모든 핸들은 신호를 받거나 시간 초과 시 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-379">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="5f9d4-380">일부 구현에서는 64 개 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-380">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="5f9d4-381">배열에 중복 항목이 있는지 호출이 실패 하는 <xref:System.DuplicateWaitObjectException>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-381">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-382">합니다 <xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-382">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-383">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-383">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-384">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitAll%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-384">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-385">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-385">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-386">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-386">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-387">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-387">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="5f9d4-388">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-388">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-389">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-389">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="5f9d4-390">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-390">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-391">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-391">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-392">경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-392">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-393">다음 코드 예제에서는 비동기적으로 만들고 그룹 파일에 쓰는 데 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-393">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="5f9d4-394">각 쓰기 작업이 완료 되 면 작업 항목 및 신호 대기 중입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-394">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="5f9d4-395">주 스레드가 신호를 보낼 모든 항목에 대 한 대기 및 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-395">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-396"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-396">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-397">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-397">-or-</span></span> 
<span data-ttu-id="5f9d4-398"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-398">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-399">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-399">-or-</span></span> 
 <span data-ttu-id="5f9d4-400"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-400"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="5f9d4-401"><paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-401">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-402"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-402">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="5f9d4-403">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-403">-or-</span></span> 
<span data-ttu-id="5f9d4-404"><see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-404">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-405"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-405"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-406"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-406"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-407">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-407">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-408">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-408">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-409"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-409">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-410">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-410">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="5f9d4-411">이 배열에는 같은 개체에 대한 여러 개의 참조가 포함될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-411">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="5f9d4-412">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-412">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-413">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-413"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-414"><see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 측정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-414">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-415"><paramref name="waitHandles" />에 있는 모든 요소가 신호를 받으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-415"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-416">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-416">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-417">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-417">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-418"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-418"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-419">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-419">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-420">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-420">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-421">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-421">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-422">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-422">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-423"><xref:System.Threading.WaitHandle.WaitAll%2A> 메서드 즉, 모든 핸들이 신호를 대기 종료 되거나 제한 시간이 때 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-423">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-424">일부 구현에서는 64 개 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-424">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="5f9d4-425">중복 항목을 포함 하는 경우 호출이 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-425">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-426">합니다 <xref:System.Threading.WaitHandle.WaitAll%2A> 가 있는 스레드에서 메서드가 지원 되지 않습니다 <xref:System.STAThreadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-426">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="5f9d4-427">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-427">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-428">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-428">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-429">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitAll%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-429">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-430">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-430">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-431">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-431">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-432">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-432">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="5f9d4-433">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-433">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-434">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-434">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-435">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-435">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-436">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-436">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-437">경우는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-437">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-438">다음 코드 예제에서는 비동기적으로 만들고 그룹 파일에 쓰는 데 스레드 풀을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-438">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="5f9d4-439">각 쓰기 작업이 완료 되 면 작업 항목 및 신호 대기 중입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-439">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="5f9d4-440">주 스레드가 신호를 보낼 모든 항목에 대 한 대기 및 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-440">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-441"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-441">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-442">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-442">-or-</span></span> 
<span data-ttu-id="5f9d4-443"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-443">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-444">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-444">-or-</span></span> 
 <span data-ttu-id="5f9d4-445"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 2.0 이상인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-445"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="5f9d4-446"><paramref name="waitHandles" /> 배열에 중복된 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-446">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-447"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-447">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="5f9d4-448">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-448">-or-</span></span> 
<span data-ttu-id="5f9d4-449"><see cref="T:System.STAThreadAttribute" /> 특성이 현재 스레드에 대한 스레드 프로시저에 적용되고 <paramref name="waitHandles" />에 둘 이상의 요소가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-449">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-450"><paramref name="waitHandles" />가 요소가 없는 배열이며 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-450"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-451"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-451"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-452">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-452">-or-</span></span> 
 <span data-ttu-id="5f9d4-453"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-453"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-454">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 종료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-454">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-455">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-455">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-456"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-456">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f9d4-457">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-457">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-458">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-458">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="5f9d4-459">지정된 배열의 모든 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-459">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-460">대기를 만족한 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-460">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-461"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-461"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-462">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 되기 때문에 대기가 완료 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-462">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-463">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-463">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-464">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-464">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-465">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-465">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-466">합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-466">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="5f9d4-467">하는 경우 `waitHandles` 중단된 된 뮤텍스를 보다 낮은 인덱스 번호를 사용 하 여 출시 된 뮤텍스를 포함 합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-467">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-468">.NET Framework 버전 2.0에서 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전 버전에서을 <xref:System.Threading.Mutex>, 하 고 `Mutex` 0 (영) 인덱스에 `WaitAny` 배열에서 반환 된 인덱스가 다른 스레드에서 `WaitAny` 는 0 대신 128입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-468">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="5f9d4-469">이 메서드는 모든 핸들 신호가 전달 될 때 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-469">This method returns when any handle is signaled.</span></span> <span data-ttu-id="5f9d4-470">둘 이상의 개체를 호출 하는 동안 신호 하는 경우 반환 값은 모든 신호를 받은 개체의 인덱스 값이 가장 작은 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-470">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="5f9d4-471">일부 구현에서는 자세히 64 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-471">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-472">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 (또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>)에 대 한 `millisecondsTimeout` 하 고 `true` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-472">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-473">다음 코드 예제에서는 호출 된 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-473">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-474"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-474">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-475">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-475">-or-</span></span> 
<span data-ttu-id="5f9d4-476"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-476">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-477"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-477">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-478"><paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-478"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-479">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-479">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-480">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-480">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f9d4-481"><paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-481"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-482"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-482">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-483">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-483">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-484">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-484">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-485">부호 있는 32비트 정수를 사용하여 시간 간격을 지정함으로써 지정된 배열의 임의 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-485">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-486">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="millisecondsTimeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-486">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-487">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-487">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-488">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-488">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-489">합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-489">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="5f9d4-490">하는 경우 `waitHandles` 중단된 된 뮤텍스를 보다 낮은 인덱스 번호를 사용 하 여 출시 된 뮤텍스를 포함 합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-490">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-491">이 메서드는 대기 종료 되 면 핸들은 신호를 받거나 시간 초과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-491">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="5f9d4-492">둘 이상의 개체를 호출 하는 동안 신호 하는 경우 반환 값은 모든 신호를 받은 개체의 인덱스 값이 가장 작은 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-492">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="5f9d4-493">일부 구현에서는 자세히 64 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-493">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-494">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-494">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-495"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-495">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-496">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-496">-or-</span></span> 
<span data-ttu-id="5f9d4-497"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-497">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-498"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-498">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-499"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-499"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-500">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-500">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-501">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-501">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f9d4-502"><paramref name="waitHandles" />가 요소가 없는 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-502"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-503"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-503">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-504">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-504">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="5f9d4-505">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-505">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-506"><see cref="T:System.TimeSpan" />을 사용하여 시간 간격을 지정함으로써 지정된 배열의 임의 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-506">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-507">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="timeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-507">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-508">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-508">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-509">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-509">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-510">합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-510">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="5f9d4-511">하는 경우 `waitHandles` 중단된 된 뮤텍스를 보다 낮은 인덱스 번호를 사용 하 여 출시 된 뮤텍스를 포함 합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-511">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-512">이 메서드는 대기 종료 되 면 핸들은 신호를 받거나 시간 초과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-512">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="5f9d4-513">둘 이상의 개체를 호출 하는 동안 신호 하는 경우 반환 값은 모든 신호를 받은 개체의 인덱스 값이 가장 작은 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-513">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="5f9d4-514">일부 구현에서는 자세히 64 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-514">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-515">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-515">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5f9d4-516">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-516">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-517"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-517">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-518">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-518">-or-</span></span> 
<span data-ttu-id="5f9d4-519"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-519">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-520"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-520">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-521"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-521"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-522">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-522">-or-</span></span> 
 <span data-ttu-id="5f9d4-523"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-523"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-524">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-524">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-525">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-525">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f9d4-526"><paramref name="waitHandles" />가 요소가 없는 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-526"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-527"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-527">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-528">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-528">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-529">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-529">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-530">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-530"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-531">부호 있는 32비트 정수를 사용하여 시간 간격을 지정하고 대기 전에 동기화 도메인을 종료할지를 지정하여 지정된 배열의 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-531">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-532">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="millisecondsTimeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-532">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-533">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-533">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-534">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-534">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-535"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-535"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-536">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 되기 때문에 대기가 완료 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-536">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-537">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-537">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-538">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-538">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-539">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-539">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-540">합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-540">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="5f9d4-541">하는 경우 `waitHandles` 중단된 된 뮤텍스를 보다 낮은 인덱스 번호를 사용 하 여 출시 된 뮤텍스를 포함 합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-541">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-542">.NET Framework 버전 2.0에서 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전 버전에서을 <xref:System.Threading.Mutex>, 하 고 `Mutex` 0 (영) 인덱스에 `WaitAny` 배열에서 반환 된 인덱스가 다른 스레드에서 `WaitAny` 는 0 대신 128입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-542">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="5f9d4-543">이 메서드는 대기 종료 되 면 핸들은 신호를 받거나 시간 초과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-543">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="5f9d4-544">둘 이상의 개체를 호출 하는 동안 신호 하는 경우 반환 값은 모든 신호를 받은 개체의 인덱스 값이 가장 작은 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-544">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="5f9d4-545">일부 구현에서는 자세히 64 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-545">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-546">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-546">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-547">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitAny%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-547">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-548">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-548">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-549">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-549">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-550">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-550">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="5f9d4-551">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-551">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-552">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-552">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-553">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-553">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-554">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-554">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-555">경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-555">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-556">다음 코드 예제에서는 스레드 풀을 사용 하 여 동시에 여러 디스크에 파일을 검색 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-556">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="5f9d4-557">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-557">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-558"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-558">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-559">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-559">-or-</span></span> 
<span data-ttu-id="5f9d4-560"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-560">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-561"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-561">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-562"><paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-562"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-563"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-563"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-564">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-564">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-565">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-565">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f9d4-566"><paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-566"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-567"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-567">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="5f9d4-568">현재 인스턴스에서 기다릴 개체가 포함된 <see langword="WaitHandle" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-568">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="5f9d4-569">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-569">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-570">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-570"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-571"><see cref="T:System.TimeSpan" /> 값으로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정한 다음 지정된 배열의 요소가 신호를 받기를 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-571">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-572">대기를 만족하는 개체의 배열 인덱스이거나 대기를 만족하는 개체가 없고 <paramref name="timeout" />과 동일한 시간 간격이 전달된 경우 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-572">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-573">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-573">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-574">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-574">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-575"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-575"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-576">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 되기 때문에 대기가 완료 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-576">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-577">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-577">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-578">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-578">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-579">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-579">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-580">합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 throw는 <xref:System.Threading.AbandonedMutexException> 만 대기 작업이 완료 되 면 중단 된 뮤텍스 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-580">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="5f9d4-581">하는 경우 `waitHandles` 중단된 된 뮤텍스를 보다 낮은 인덱스 번호를 사용 하 여 출시 된 뮤텍스를 포함 합니다 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드가 정상적으로 완료 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-581">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5f9d4-582">.NET Framework 버전 2.0에서 스레드가 종료 되거나 명시적으로 해제 하지 않고 중단 하는 경우 이전 버전에서을 <xref:System.Threading.Mutex>, 하 고 `Mutex` 0 (영) 인덱스에 `WaitAny` 배열에서 반환 된 인덱스가 다른 스레드에서 `WaitAny` 는 0 대신 128입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-582">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="5f9d4-583">이 메서드는 대기 종료 되 면 핸들은 신호를 받거나 시간 초과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-583">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="5f9d4-584">둘 이상의 개체를 호출 하는 동안 신호 하는 경우 반환 값은 모든 신호를 받은 개체의 인덱스 값이 가장 작은 신호를 받은 개체의 배열 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-584">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="5f9d4-585">일부 구현에서는 자세히 64 핸들을 전달 하는 경우는 <xref:System.NotSupportedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-585">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="5f9d4-586">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-586">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-587">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-587">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-588">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitAny%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-588">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-589">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-589">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-590">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-590">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-591">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-591">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="5f9d4-592">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-592">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-593">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-593">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-594">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-594">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-595">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-595">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-596">경우는 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-596">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-597">다음 코드 예제에서는 스레드 풀을 사용 하 여 동시에 여러 디스크에 파일을 검색 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-597">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="5f9d4-598">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-598">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5f9d4-599"><paramref name="waitHandles" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-599">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5f9d4-600">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-600">-or-</span></span> 
<span data-ttu-id="5f9d4-601"><paramref name="waitHandles" /> 배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-601">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5f9d4-602"><paramref name="waitHandles" />의 개체 수가 시스템에서 허용하는 것보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-602">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5f9d4-603"><paramref name="waitHandles" />가 요소가 없는 배열이고 .NET Framework 버전이 1.0 또는 1.1인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-603"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-604"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-604"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-605">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-605">-or-</span></span> 
 <span data-ttu-id="5f9d4-606"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-606"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-607">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-607">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-608">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-608">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5f9d4-609"><paramref name="waitHandles" />을를은 아무런 요소도 갖고 있지 않은 배열이며 .NET Framework 버전은 2.0 이상입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-609"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-610"><paramref name="waitHandles" /> 배열에 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-610">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5f9d4-611">현재 <see cref="T:System.Threading.WaitHandle" />이(가) 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-611">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5f9d4-612">현재 <see cref="T:System.Threading.WaitHandle" />이(가) 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-612">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-613">현재 인스턴스가 신호를 받으면 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-613"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="5f9d4-614">현재 인스턴스가 신호를 받지 않으면 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />은(는) 아무 값도 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-614">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-615"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-615"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-616">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-616">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-617">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-617">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-618">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-618">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-619">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-619">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-620">현재 인스턴스가 신호를 받을 때까지 무기한으로이 메서드 블록의 호출자입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-620">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="5f9d4-621">이 메서드를 사용 하 여 될 때까지 차단는 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-621">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="5f9d4-622">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-622">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="5f9d4-623">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 메서드 오버 로드 하 고-1을 지정 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 첫 번째 매개 변수 및 `false` 두 번째 매개 변수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-623">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="5f9d4-624">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-624">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-625">다음 코드 예제에는 백그라운드 스레드 실행이 완료를 기다리는 동안 종료 프로세스를 유지 하도록 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-625">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5f9d4-626">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-626">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-627">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-627">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-628">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-628">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-629">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-629">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-630">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-630">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-631">부호 있는 32비트 정수로 시간 간격(밀리초)을 지정하여 현재 <see cref="T:System.Threading.WaitHandle" />이 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-631">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-632">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-632"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-633">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-633">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-634">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-634">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-635">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-635">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-636">이 메서드를 사용 하 여 될 때까지 차단는 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-636">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="5f9d4-637">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-637">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="5f9d4-638">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-638">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="5f9d4-639">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-639">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-640">다음 코드 예제에는 백그라운드 스레드 실행이 완료를 기다리는 동안 종료 프로세스를 유지 하도록 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-640">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5f9d4-641">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-641">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-642"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-642"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-643">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-643">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-644">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-644">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-645">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-645">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="5f9d4-646">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-646">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="5f9d4-647"><see cref="T:System.TimeSpan" />로 시간 간격을 지정하여 현재 인스턴스가 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-647">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-648">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-648"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-649">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-649">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-650">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-650">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-651">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-651">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-652">이 메서드를 사용 하 여 될 때까지 차단는 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-652">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="5f9d4-653">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-653">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="5f9d4-654">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-654">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="5f9d4-655">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-655">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5f9d4-656">이 메서드 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> 오버 로드 하 고 지정 `false` 에 대 한 `exitContext`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-656">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5f9d4-657">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-657">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-658"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-658"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-659">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-659">-or-</span></span> 
 <span data-ttu-id="5f9d4-660"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-660"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-661">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-661">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-662">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-662">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-663">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-663">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="5f9d4-664">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-664">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-665">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-665"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-666">부호 있는 32비트 정수로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 현재 <see cref="T:System.Threading.WaitHandle" />이 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-666">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-667">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-667"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-668">경우 `millisecondsTimeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-668">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-669">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-669">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-670"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-670"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-671">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-671">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-672">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-672">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-673">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-673">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-674">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-674">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-675">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-675">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-676">이 메서드를 사용 하 여 될 때까지 차단는 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-676">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="5f9d4-677">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-677">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="5f9d4-678">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-678">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-679">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-679">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-680">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitOne%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-680">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-681">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-681">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-682">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-682">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-683">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-683">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="5f9d4-684">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-684">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-685">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-685">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-686">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-686">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-687">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-687">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-688">경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-688">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-689">다음 예제와 방법을 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> 동기화 도메인 내에서 호출 될 때 동작 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-689">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="5f9d4-690">사용 하 여 스레드가 대기 하는 먼저 `exitContext` 로 `false` 및 대기 시간 제한이 만료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-690">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="5f9d4-691">두 번째 스레드가 실행 후 첫 번째 스레드가 종료 되 고 사용 하 여 대기 `exitContext` 로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-691">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="5f9d4-692">이 두 번째 스레드에 대 한 대기 핸들이 신호에 대 한 호출 차단 되지 않은 경우 및 스레드 대기 시간 제한 전에 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-692">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5f9d4-693">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-693">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-694"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-694"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-695">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-695">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-696">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-696">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-697">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-697">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="5f9d4-698">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-698">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="5f9d4-699">대기 전에 컨텍스트에 대한 동기화 도메인을 종료하고(동기화된 컨텍스트에 있는 경우) 이 도메인을 다시 가져오려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-699"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5f9d4-700"><see cref="T:System.TimeSpan" />로 시간 간격을 지정하고 대기 전에 동기화 도메인을 끝낼지 여부를 지정하여 현재 인스턴스가 신호를 받을 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-700">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="5f9d4-701">현재 인스턴스가 신호를 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-701"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-702">경우 `timeout` 가 0 이면 메서드는 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-702">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="5f9d4-703">대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-703">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="5f9d4-704"><xref:System.Threading.AbandonedMutexException> .NET Framework 버전 2.0의에서 새로운 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-704"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="5f9d4-705">이전 버전에서의 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드가 반환 되는 `true` 뮤텍스는 중단 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-705">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="5f9d4-706">중단 된 뮤텍스는 종종 심각한 코딩 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-706">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="5f9d4-707">시스템 차원 뮤텍스의 경우 (예를 들어 Windows 작업 관리자 사용)가 응용 프로그램이 갑자기 종료 된 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-707">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="5f9d4-708">예외를 디버깅 하는 데 유용한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-708">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="5f9d4-709">현재 인스턴스가 신호를 받거나 시간 초과 될 때까지이 메서드 블록의 호출자에 게 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-709">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="5f9d4-710">이 메서드를 사용 하 여 될 때까지 차단는 <xref:System.Threading.WaitHandle> 다른 스레드의 신호를 받으면와 같은 비동기 작업이 완료 될 때 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-710">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="5f9d4-711">자세한 내용은 참조는 <xref:System.IAsyncResult> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-711">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="5f9d4-712">파생된 클래스의 동작을 사용자 지정 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-712">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="5f9d4-713">에 대 한 최대값 `timeout` 는 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-713">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="5f9d4-714">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="5f9d4-714">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="5f9d4-715">합니다 `exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.WaitHandle.WaitOne%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-715">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="5f9d4-716">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-716">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="5f9d4-717">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-717">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="5f9d4-718">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-718">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="5f9d4-719">스레드 호출 후 원래 컨텍스트로 되돌아갑니다는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-719">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="5f9d4-720">컨텍스트 바인딩 클래스에 유용할 수 있습니다이 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-720">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="5f9d4-721">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-721">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="5f9d4-722">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-722">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="5f9d4-723">경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-723">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-724">다음 코드 예제에는 백그라운드 스레드 실행이 완료를 기다리는 동안 종료 프로세스를 유지 하도록 대기 핸들을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-724">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5f9d4-725">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-725">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5f9d4-726"><paramref name="timeout" />은 시간 제한이 없음을 나타내는 -1밀리초 이외의 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-726"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="5f9d4-727">또는</span><span class="sxs-lookup"><span data-stu-id="5f9d4-727">-or-</span></span> 
 <span data-ttu-id="5f9d4-728"><paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-728"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="5f9d4-729">스레드가 뮤텍스를 해제하지 않고 종료되었으므로 대기가 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-729">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="5f9d4-730">이 예외가 Windows 98 또는 Windows Millennium Edition에서는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-730">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5f9d4-731">현재 인스턴스가 다른 응용 프로그램 도메인에 있는 <see cref="T:System.Threading.WaitHandle" />에 대한 투명 프록시인 경우</span><span class="sxs-lookup"><span data-stu-id="5f9d4-731">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9d4-732">대기 핸들이 신호를 받기 전에 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 작업이 제한 시간을 초과했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-732">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="5f9d4-733">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-733">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f9d4-734">이 필드의 가능한 반환 값 중 하나는 `WaitAny`합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-734">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5f9d4-735">다음 코드 예제에서는 스레드 풀을 사용 하 여 동시에 여러 디스크에 파일을 검색 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-735">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="5f9d4-736">공간 고려 사항에 대 한 각 디스크의 루트 디렉터리에만 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5f9d4-736">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>