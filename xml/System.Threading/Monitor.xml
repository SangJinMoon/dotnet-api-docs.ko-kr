<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90a2111b4e95ea3ea80a469c06f7334a9e6eac2b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37549132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="50ff0-101">개체에 대한 액세스를 동기화하는 메커니즘을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50ff0-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-102">합니다 <xref:System.Threading.Monitor> 클래스를 사용 하면 가져오고 호출 하 여 특정 개체에 대 한 잠금을 해제 하 여 코드의 영역에 대 한 액세스를 동기화 할 수는 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="50ff0-103">개체 잠금 일반적으로 중요 섹션을 라고 하는 코드의 블록에 대 한 액세스를 제한 하는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="50ff0-104">스레드 개체에 대 한 잠금의 소유 하는 동안 다른 스레드가 잠금을 획득할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="50ff0-105">사용할 수도 있습니다는 <xref:System.Threading.Monitor> 다른 스레드가 응용 프로그램의 섹션에 액세스할 수 있는지 확인 하는 클래스 잠금 소유자에 의해 실행 되 고 다른 스레드가 잠겨 있는 다른 개체를 사용 하는 코드를 실행 중인 경우가 아니면 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="50ff0-106">이 문서의 내용</span><span class="sxs-lookup"><span data-stu-id="50ff0-106">In this article:</span></span>  
  
 <span data-ttu-id="50ff0-107">[Monitor 클래스: 개요](#Overview) </span><span class="sxs-lookup"><span data-stu-id="50ff0-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="50ff0-108">[잠금 개체](#Lock) </span><span class="sxs-lookup"><span data-stu-id="50ff0-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="50ff0-109">[중요 섹션](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="50ff0-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="50ff0-110">[Pulse, PulseAll, 및 대기](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="50ff0-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="50ff0-111">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="50ff0-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="50ff0-112">Monitor 클래스: 개요</span><span class="sxs-lookup"><span data-stu-id="50ff0-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="50ff0-113"><xref:System.Threading.Monitor> 에 다음 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="50ff0-114">필요에 따라 개체를 사용 하 여 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="50ff0-115">바인딩 해제 되어 있으므로 모든 컨텍스트에서 직접 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="50ff0-116">인스턴스를 <xref:System.Threading.Monitor> 클래스를 만들 수 없습니다;의 메서드는 <xref:System.Threading.Monitor> 클래스는 모두 정적입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="50ff0-117">각 메서드를 액세스를 제어 하는 동기화 개체를 전달 하는 중요 섹션에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-118">사용 하 여는 <xref:System.Threading.Monitor> 문자열 이외의 잠금 개체 클래스 (참조 이므로 이외의 형식 <xref:System.String>), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="50ff0-119">자세한 내용은의 오버 로드를 참조 합니다 <xref:System.Threading.Monitor.Enter%2A> 메서드 및 [잠금 개체](#Lock) 이 문서의 뒷부분에 나오는 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="50ff0-120">다음 표에서 동기화 된 개체에 액세스 하는 스레드에서 수행할 수 있는 작업을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="50ff0-121">작업</span><span class="sxs-lookup"><span data-stu-id="50ff0-121">Action</span></span>|<span data-ttu-id="50ff0-122">설명</span><span class="sxs-lookup"><span data-stu-id="50ff0-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="50ff0-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="50ff0-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="50ff0-124">개체에 대 한 잠금을 획득합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-124">Acquires a lock for an object.</span></span> <span data-ttu-id="50ff0-125">중요 섹션의 시작 부분을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="50ff0-126">잠겨 있는 다른 개체를 사용 하 여 임계 영역에 있는 지침을 실행 하는 경우가 아니면 다른 스레드가 중요 섹션을 입력할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="50ff0-127">다른 스레드가 잠금 개체에 액세스를 허용 하기 위해 개체에 대 한 잠금을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="50ff0-128">호출 스레드가 다른 스레드가 개체에 액세스 하는 동안 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="50ff0-129">Pulse 신호 개체의 상태 변경에 대 한 대기 중인 스레드를 알리는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="50ff0-130"><xref:System.Threading.Monitor.Pulse%2A> (신호) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="50ff0-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="50ff0-131">하나 이상의 대기 스레드는 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="50ff0-132">신호 잠긴된 개체의 상태 변경 대기 스레드를 알리고 잠금 소유자가 잠금을 해제 하는 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="50ff0-133">개체에 대 한 잠금을 받을 수 있도록 대기 중인 스레드 개체의 준비 된 큐에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="50ff0-134">스레드가 잠금에 되 면 필요한 상태에 도달한 경우 참조 개체의 새 상태를 확인해 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="50ff0-135">개체에 대 한 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-135">Releases the lock on an object.</span></span> <span data-ttu-id="50ff0-136">잠긴된 개체에 의해 보호 되는 중요 섹션의 끝을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="50ff0-137">부터는 합니다 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]를 오버 로드에 대 한 두 가지를 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.TryEnter%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="50ff0-138">오버 로드 중 하나의 집합에는 `ref` (C#에서) 또는 `ByRef` (Visual Basic)에서는 <xref:System.Boolean> 원자적으로 설정 된 매개 변수 `true` 경우 잠금을 획득, 잠금을 획득할 때 예외가 발생 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="50ff0-139">잠금을 해제 하는 모든 경우에 일관 된 상태로 리소스 잠금을 보호 하지 않을 경우에 중요 한 경우 이러한 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="50ff0-140">잠금 개체</span><span class="sxs-lookup"><span data-stu-id="50ff0-140">The lock object</span></span>  
 <span data-ttu-id="50ff0-141">Monitor 클래스 이루어져 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 중요 섹션에 액세스를 제어 하는 개체에 대해 작동 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="50ff0-142">다음 정보를 동기화 된 각 개체는 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="50ff0-143">현재 잠금을 보유 하는 스레드에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="50ff0-144">잠금을 획득할 수 있는 스레드가 포함 된 준비 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="50ff0-145">잠긴된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 하는 대기 중인 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="50ff0-146"><xref:System.Threading.Monitor>는 값 형식이 아니라 개체(즉, 참조 형식)를 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-147"><xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>에 값 형식을 전달할 수 있지만 각 호출에 대해 개별적으로 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="50ff0-148">호출마다 별도 개체를 만들기 때문에 <xref:System.Threading.Monitor.Enter%2A>가 차단되지 않으며, 보호하는 코드가 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="50ff0-149">또한 <xref:System.Threading.Monitor.Exit%2A>에 전달되는 개체는 <xref:System.Threading.Monitor.Enter%2A>에 전달되는 개체와 다르므로 <xref:System.Threading.Monitor>에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생하고 "비동기화된 코드 블록에서 개체 동기화 메서드를 호출했습니다." 메시지가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="50ff0-150">다음 예제에서는 이 문제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-150">The following example illustrates this problem.</span></span> <span data-ttu-id="50ff0-151">각각 250밀리초 동안 대기하는 10개 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="50ff0-152">각 작업은 실제로 시작 및 실행된 작업 수를 계산하기 위한 카운터 변수 `nTasks`를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="50ff0-153">`nTasks`는 동시에 여러 작업에서 업데이트될 수 있는 전역 변수이기 때문에 모니터를 사용하여 여러 작업에서 동시에 수정되지 않도록 보호합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="50ff0-154">그러나 예제의 출력과 같이 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="50ff0-155">각 작업의 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출 전에 `nTasks` 변수가 boxing되므로 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="50ff0-156">즉, 각 메서드 호출에 서로 독립적인 개별 변수가 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="50ff0-157">`nTasks`는 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드 호출에서 다시 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50ff0-158">이렇게 하면 다시 서로 독립적인 새 boxed 변수 10개, `nTasks` 및 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출에서 생성되는 boxed 변수 10개가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50ff0-159">코드에서 이전에 잠기지 않은 새로 만든 변수에 대한 잠금을 해제하려고 하기 때문에 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="50ff0-160">다음 예제와 같이 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>를 호출하기 전에 값 형식 변수를 boxing하고 boxing된 동일한 개체를 두 메서드에 모두 전달할 수 있지만 아무 이점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="50ff0-161">boxing되지 않은 변수의 변경 내용은 boxing된 복사본에 반영되지 않으며, boxing된 복사본의 값을 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="50ff0-162">동기화 할 개체를 선택할 때 전용 또는 내부 개체에 대해서만 잠가야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="50ff0-163">외부 개체에 대 한 잠금을 관련 되지 않은 코드에서 다양 한 용도로 잠그지 동일한 개체를 선택할 수 있으므로 교착 상태 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="50ff0-164">잠금에 사용 되는 개체에서 파생 되는 경우 여러 응용 프로그램 도메인의 개체에 동기화 할 수 있는 참고 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="50ff0-165">중요 섹션</span><span class="sxs-lookup"><span data-stu-id="50ff0-165">The critical section</span></span>  
 <span data-ttu-id="50ff0-166">사용 된 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 임계 영역 시작과 끝을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-167">제공 하는 기능을 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 메서드는 제공 하는 동일 합니다 [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) C#의 문은 및 [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) Visual basic의 경우는 제외 하 고 문을 언어 구문이 도입 되면서 줄 바꿈 합니다 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> 메서드 오버 로드 하며 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 에서 메서드를 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="50ff0-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="50ff0-168">블록 모니터가 해제 되도록입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="50ff0-169">중요 섹션을 사용 하면 연속 지침으로 획득 된 잠금이의 집합인 경우는 <xref:System.Threading.Monitor.Enter%2A> 메서드를 사용 하면 단일 스레드만 잠겨 있는 개체를 사용 하 여 포함된 된 코드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="50ff0-170">해당 코드를 배치 하는 권장이 예제의 경우를 `try` 블록과에 대 한 호출을 배치 합니다 <xref:System.Threading.Monitor.Exit%2A> 에서 메서드를 `finally` 블록.</span><span class="sxs-lookup"><span data-stu-id="50ff0-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="50ff0-171">이렇게 하면 예외가 발생해도 잠금이 해제됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="50ff0-172">다음 코드 조각에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="50ff0-173">이 기능은 정적에 대 한 액세스 또는 클래스의 인스턴스 메서드를 동기화 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="50ff0-174">잠금 기능 임계 메서드 전체에 걸쳐 있는 경우 배치 하 여 수행할 수 있습니다는 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> 메서드를 지정 하는 <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> 값의 생성자에서 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="50ff0-175">이 특성을 사용 하는 경우는 <xref:System.Threading.Monitor.Enter%2A> 고 <xref:System.Threading.Monitor.Exit%2A> 메서드 호출은 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="50ff0-176">다음 코드 조각에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="50ff0-177">현재 스레드를; 메서드는 반환 될 때까지 백그라운드에서 특성으로 인해 참고 잠금을 빨리 해제할 수를 사용 하 여는 <xref:System.Threading.Monitor> 클래스를 C# [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) 문 또는 Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) 특성 대신 메서드 내에서 문.</span><span class="sxs-lookup"><span data-stu-id="50ff0-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="50ff0-178">에 대 한 수 있지만 합니다 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 잠그고 멤버 또는 클래스 경계를 교차 하는 지정 된 개체를 해제 하는 문,이 방법은 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="50ff0-179">Pulse, PulseAll, 및 대기</span><span class="sxs-lookup"><span data-stu-id="50ff0-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="50ff0-180">호출할 수 있는 스레드가 잠금을 소유 하 고 잠금이 보호 하는 중요 섹션 않았으면 합니다 <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="50ff0-181"><xref:System.Threading.Monitor.Wait%2A> 보관 된, 대기 중인 스레드 또는 스레드 잠금을 획득 하 고 중요 섹션에 진입를 허용 하 고 호출 하 여 알림을 받을 때까지 대기 하는 경우 잠금을 해제 합니다 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> 또는 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50ff0-182"><xref:System.Threading.Monitor.Wait%2A> 알림을 받으면 반환되고 다시 잠금을 얻습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="50ff0-183"><xref:System.Threading.Monitor.Pulse%2A> 및 <xref:System.Threading.Monitor.PulseAll%2A>은 둘 다 대기 큐에 있는 다음 스레드를 계속하도록 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="50ff0-184">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="50ff0-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="50ff0-185">사용 간의 차이점을 확인 해야 합니다 <xref:System.Threading.Monitor> 클래스 및 <xref:System.Threading.WaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="50ff0-186"><xref:System.Threading.Monitor> 클래스는 순수 하 게 관리 되는, 완전히 이식 가능한 클래스 이며 운영 체제 리소스 요구 사항 측면에서 더 효율적일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="50ff0-187"><xref:System.Threading.WaitHandle> 개체는 운영 체제 대기 가능 개체를 나타내며, 관리 코드와 비관리 코드 간의 동기화에 유용하고, 동시에 많은 개체를 처리하는 기능과 같은 일부 고급 운영 체제 기능을 노출합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-188">다음 예제에서는 합니다 <xref:System.Threading.Monitor> 나타내는 난수 생성기의 단일 인스턴스에 대 한 액세스를 동기화 하는 클래스는 <xref:System.Random> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="50ff0-189">이 예제에서는 10 개 작업을 스레드 풀 스레드에서 비동기적으로 실행 하는 각를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="50ff0-190">각 작업 10,000 난수 생성, 해당 평균을 계산 및 난수 생성 수 총 합계 및 합계를 유지 관리 하는 두 개의 프로시저 수준 변수를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="50ff0-191">모든 작업이 실행 된 후 전체 평균을 계산할 두 값이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="50ff0-192">스레드 풀 스레드에서 실행 중인 모든 태스크에서 액세스할 수 있습니다, 변수에 액세스할 `total` 고 `n` 도 동기화 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="50ff0-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> 메서드는이 용도로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="50ff0-194">다음 예제에서는 함께 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.Monitor> 클래스 (사용 하 여 구현 합니다 `lock` 또는 `SyncLock` 언어 구문), <xref:System.Threading.Interlocked> 클래스 및 <xref:System.Threading.AutoResetEvent> 클래스.</span><span class="sxs-lookup"><span data-stu-id="50ff0-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="50ff0-195">두 정의 `internal` (에서 C#) 또는 `Friend` (Visual Basic)에서는 클래스 `SyncResource` 및 `UnSyncResource`, 각각 제공 하는 리소스에 대 한 동기화와 동기화 되지 않은 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="50ff0-196">예제는 동기화와 동기화 되지 않은 액세스 (각 메서드 호출이 신속히 완료 되는 경우에 사례 일 수) 간의 차이점을 보여 줍니다. 메서드에 임의 지연이 포함 되도록 하려면: 스레드에 대해 <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> 속성이 짝수인 합니다 메서드 호출 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 2,000 밀리초의 지연을 소개 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="50ff0-197">때문에 `SyncResource` 클래스 public이 아닙니다 동기화 된 리소스에서 잠금을 사용 하는 클라이언트 코드를 하나도; 자체 내부 클래스는 잠금을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="50ff0-198">이를 통해 악성 코드가 공용 개체에서 잠금을 가져오는 것을 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="50ff0-199">이 예제에서는 변수를 정의 `numOps`, 리소스에 액세스 하려고 하는 스레드 수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="50ff0-200">응용 프로그램 스레드 호출을 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드 동기화와 동기화 되지 않은 5 번 각 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="50ff0-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드는 단일 매개 변수, 매개 변수를 받아들이지 하 값을 반환 하지는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="50ff0-202">동기화 된 액세스에 대 한 호출을 `SyncUpdateResource` 메서드를 동기화 되지 않은 액세스에 대 한 호출을 `UnSyncUpdateResource` 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="50ff0-203">호출 응용 프로그램 스레드가 각 일련의 메서드 호출 후는 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) 될 때까지 차단 한다는 메서드는 <xref:System.Threading.AutoResetEvent> 인스턴스가 신호입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="50ff0-204">호출할 때마다 합니다 `SyncUpdateResource` 메서드 호출 내부 `SyncResource.Access` 메서드를 호출 합니다 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 감소 하는 방법을 `numOps` 카운터.</span><span class="sxs-lookup"><span data-stu-id="50ff0-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="50ff0-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드를 사용 하는 카운터를 감소, 그렇지 않으면 있습니다 수 없기 때문에 두 번째 스레드가 해당 값에 액세스 첫 번째 스레드의 감소 되기 전에 특정 값 변수에 저장 된 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="50ff0-206">마지막 카운터를 0 작업자 스레드 감소를 동기화 하는 경우 동기화 된 모든 스레드가 나타내는 완료 리소스 액세스는 `SyncUpdateResource` 메서드 호출을 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 주 스레드가 계속 알리는 메서드 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="50ff0-207">호출할 때마다 합니다 `UnSyncUpdateResource` 메서드 호출 내부 `UnSyncResource.Access` 메서드를 호출 합니다 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 감소 하는 방법을 `numOps` 카운터.</span><span class="sxs-lookup"><span data-stu-id="50ff0-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="50ff0-208">이번에 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드 두 번째 스레드가 변수에 첫 번째 스레드의 감소 된 값이 할당 되기 전에 값을 액세스 하지 않습니다 확인 하는 카운터를 감소를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="50ff0-209">마지막으로 동기화 작업자 스레드의 감소 된 카운터를 0, 리소스에 액세스 하는 데 필요한 동기화 되지 않은 스레드가 더 이상 있는지를 나타내는 합니다 `UnSyncUpdateResource` 메서드 호출을 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 메서드 main 메서드가 실행을 계속 하도록 신호를 보냅니다 .</span><span class="sxs-lookup"><span data-stu-id="50ff0-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="50ff0-210">예제의 출력에 나타난 것처럼, 동기화된 액세스는 호출한 스레드가 보호된 리소스를 종료한 다음 다른 스레드가 액세스할 수 있도록 하기 때문에 각 스레드는 선행 작업에서 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="50ff0-211">반면에 잠금 없이 `UnSyncResource.Access` 메서드는 스레드가 도달 순서로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="50ff0-212">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50ff0-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50ff0-213">지정된 개체의 단독 잠금을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-214">모니터 잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-215">지정된 개체의 단독 잠금을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-216">사용 하 여 `Enter` 얻으려고 합니다 <xref:System.Threading.Monitor> 매개 변수로 전달 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="50ff0-217">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="50ff0-218">동일한 스레드에서 호출을 유효 `Enter` 차단 하지 않고 두 번 이상 하지만 동일한 수의 `Exit` 호출 전에 개체에서 대기 중인 다른 스레드를 차단 해제 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="50ff0-219">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-220">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="50ff0-221">같은 변수를 전달 하는 경우 `Enter` 다시는 별도 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="50ff0-222">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="50ff0-223">또한 변수를 전달할 때 `Exit`, 별도 또 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="50ff0-224">에 전달 된 개체가 `Exit` 전달 된 개체와에서 다르면 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="50ff0-225">자세한 내용은 해당 개념 항목을 참조 하세요 [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="50ff0-226"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="50ff0-227"><xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="50ff0-228">C#을 사용 하 여 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="50ff0-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="50ff0-229">블록 (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="50ff0-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="50ff0-230">Visual Basic)를 모니터를 해제 하거나 사용 하 여 C# `lock` 문 (`SyncLock` Visual Basic의 문)를 래핑하고 합니다 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 에서 메서드를 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="50ff0-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="50ff0-231">블록입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-232">다음 예제에서는 `Enter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-233">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-234">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="50ff0-235">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="50ff0-236">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-237">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-238">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="50ff0-239">예외가 발생하지 않는 경우 이 메서드의 출력은 항상 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-240">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-241">사용 하 여 `Enter` 가져오려고 합니다 <xref:System.Threading.Monitor> 로 전달 된 개체는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="50ff0-242">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="50ff0-243">동일한 스레드에서 호출을 유효 `Enter` 차단 하지 않고 두 번 이상 하지만 동일한 수의 `Exit` 호출 전에 개체에서 대기 중인 다른 스레드를 차단 해제 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="50ff0-244">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="50ff0-245">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="50ff0-246">이 메서드는 예외를 throw 하지 않고 반환 하는 경우에 대 한 지정 된 변수를 `lockTaken` 매개 변수는 항상 `true`, 및 테스트할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="50ff0-247">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-248">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="50ff0-249">같은 변수를 전달 하는 경우 `Enter` 다시는 별도 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="50ff0-250">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="50ff0-251">또한 변수를 전달할 때 `Exit`, 별도 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="50ff0-252">에 전달 된 개체가 `Exit` 전달 된 개체와에서 다르면 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="50ff0-253">자세한 내용은 해당 개념 항목을 참조 하세요 [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="50ff0-254"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="50ff0-255"><xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-256">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="50ff0-257">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50ff0-258">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-259">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-260">잠금을 해제할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-261">지정된 개체의 단독 잠금을 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-262">호출 스레드가에서 잠금을 소유 해야 합니다 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="50ff0-263">호출 스레드가 지정된 된 개체 잠금을 소유 하 고 동일한 수의 시켰습니다 경우 `Exit` 고 <xref:System.Threading.Monitor.Enter%2A> 잠금이 해제 되는 개체에 대 한 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="50ff0-264">호출 스레드에서 호출 하지 않으면 `Exit` 횟수 만큼 `Enter`, 잠금이 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="50ff0-265">잠금이 해제 되 고 다른 스레드가 개체에 대 한 준비 큐에서 스레드 중 하나가 잠금을 획득 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="50ff0-266">다른 스레드가 잠금을 획득 하려고 대기 하 고 대기 중인 큐에 있는 경우는 이동 하지는 자동으로 준비 된 큐로 잠금의 소유자를 호출할 때 `Exit`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="50ff0-267">하나 이상의 대기 중인 스레드가 준비 큐를 이동 하려면 호출 <xref:System.Threading.Monitor.Pulse%2A> 나 <xref:System.Threading.Monitor.PulseAll%2A> 를 호출 하기 전에 `Exit`입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-268">다음 예제에서는 `Exit` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-269">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-270">현재 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-271">테스트할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-272">현재 스레드에 지정된 개체에 대한 잠금이 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-273">현재 스레드에 <paramref name="obj" />에 대한 잠금이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-274">이 방법은의 메서드를 사용 하 여 획득 된 잠금에만 작동 합니다 <xref:System.Threading.Monitor> 클래스를 사용 하거나 사용 하 여 C# `lock` 문 또는 Visual Basic `SyncLock` 문을 사용 하 여 구현 됩니다 <xref:System.Threading.Monitor>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="50ff0-275">와 같은 진단 도구를 사용 하 여이 메서드를 사용 합니다 <xref:System.Diagnostics.Debug.Assert%2A> 메서드 및 <xref:System.Diagnostics.Contracts.Contract> 클래스를 포함 하는 잠금 문제를 디버깅 하는 <xref:System.Threading.Monitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-276">
            <paramref name="obj" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-277">스레드에서 기다리는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-278">대기 중인 큐에 포함된 스레드에 잠겨 있는 개체의 상태 변경을 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-279">현재 소유자의 잠금 대기 하 여 개체를 신호를 보낼 수 있습니다만 `Pulse`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="50ff0-280">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 잠금에 대 한 줄에 다음 스레드를 알리기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="50ff0-281">펄스를 수신 하면 대기 중인 스레드가 준비 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="50ff0-282">호출한 스레드가 `Pulse` 잠금을 해제 (필요가 없는 펄스 된 스레드의) 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50ff0-283"><xref:System.Threading.Monitor> 클래스는 나타내는 상태를 유지 하지 않습니다는 <xref:System.Threading.Monitor.Pulse%2A> 메서드가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="50ff0-284">따라서 호출 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 때 대기 중인 스레드가 없는 호출 하는 다음 스레드에서 <xref:System.Threading.Monitor.Wait%2A> 블록 처럼 <xref:System.Threading.Monitor.Pulse%2A> 마치 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="50ff0-285">두 개의 스레드를 사용 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 고 <xref:System.Threading.Monitor.Wait%2A> 상호 작용 하 고,이 인해 교착 상태가 발생에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="50ff0-286">동작을 사용 하 여이 대조해 보세요 합니다 <xref:System.Threading.AutoResetEvent> 클래스: 신호 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 대기 스레드가 없으면 및를 <xref:System.Threading.AutoResetEvent> 스레드가 호출 될 때까지 신호를 받은 상태에 남아 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="50ff0-287"><xref:System.Threading.AutoResetEvent> 해당 스레드를 해제 하 고 알림에서 신호 알림 해제 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="50ff0-288">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-289">합니다 `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, 및 <xref:System.Threading.Monitor.Wait%2A> 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-290">여러 스레드가 신호를 사용 하 여를 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-291">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-292">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-293">펄스를 보내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-294">대기 중인 모든 스레드에 개체 상태 변경을 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-295">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 개체에 대 한 잠금을 획득 하려고 대기 하는 모든 스레드를 알리기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="50ff0-296">신호를 보낸 후 대기 스레드가 준비 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="50ff0-297">호출한 스레드가 `PulseAll` 잠금을 해제 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="50ff0-298">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-299">합니다 <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, 및 <xref:System.Threading.Monitor.Wait%2A> 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-300">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="50ff0-301">단일 스레드를 알리기 위해 사용 된 `Pulse` 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-302">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-303">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50ff0-304">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-305">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-306">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-307">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-308">경우 성공 하면이 메서드가 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="50ff0-309">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="50ff0-310">이 메서드는 유사한 <xref:System.Threading.Monitor.Enter%2A>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="50ff0-311">메서드가 반환 하는 경우 스레드를 차단 하지 않고 입력할 수 없습니다, `false,`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-312">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-313">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="50ff0-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="50ff0-314">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="50ff0-315">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-316">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-317">다음 코드 예제에서는 `TryEnter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-318">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-319">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="50ff0-320">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="50ff0-321">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-322">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-323">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-324">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-325">경우 성공 하면이 메서드가 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="50ff0-326">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="50ff0-327">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="50ff0-328">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="50ff0-329">이 메서드는 유사한 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="50ff0-330">스레드를 차단 하지 않고 들어갈 수 없는 경우는 `lockTaken` 인수가로 설정 된 `false` 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-331">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-332">자세한 내용은 <xref:System.Threading.Monitor>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="50ff0-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="50ff0-333">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="50ff0-334">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-335">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-336">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="50ff0-337">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50ff0-338">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-339">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-340">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="50ff0-341">잠금을 기다릴 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-342">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-343">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-344">경우는 `millisecondsTimeout` 매개 변수가 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="50ff0-345">하는 경우 `millisecondsTimeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-346">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-347">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="50ff0-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="50ff0-348">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="50ff0-349">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-350">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-351">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-352">
            <paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-353">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="50ff0-354">잠금을 기다리는 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="50ff0-355">-1밀리초 값은 무한 대기를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-356">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-357">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-358">하는 경우의 값을 `timeout` 밀리초로 변환 하는 매개 변수가 같으면-1,이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="50ff0-359">경우 값 `timeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-360">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-361">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="50ff0-362">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="50ff0-363">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-364">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-365">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-366">
            <paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-367">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="50ff0-368">잠금을 기다릴 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="50ff0-369">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="50ff0-370">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-371">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-372">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-373">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-374">경우는 `millisecondsTimeout` 매개 변수가 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="50ff0-375">하는 경우 `millisecondsTimeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="50ff0-376">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="50ff0-377">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-378">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-379">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="50ff0-380">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="50ff0-381">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-382">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="50ff0-383">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="50ff0-384">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50ff0-385">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-386">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-387">
            <paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-388">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="50ff0-389">잠금을 대기할 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="50ff0-390">-1밀리초 값은 무한 대기를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="50ff0-391">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="50ff0-392">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-393">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="50ff0-394">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-395">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-396">하는 경우의 값을 `timeout` 밀리초로 변환 하는 매개 변수가 같으면-1,이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="50ff0-397">경우 값 `timeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="50ff0-398">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="50ff0-399">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-400">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="50ff0-401">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="50ff0-402">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="50ff0-403">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="50ff0-404">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50ff0-405">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-406">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-407">
            <paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50ff0-408">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-409">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-410">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-411">지정된 개체 잠금을 호출자가 다시 가져와 호출이 반환되면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="50ff0-412">잠금을 다시 가져오지 않으면 이 메서드는 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-413">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="50ff0-414">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="50ff0-415">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="50ff0-416">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="50ff0-417">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="50ff0-418">호출 하는 모든 스레드가 `Wait` 신호를 받을 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>, 잠금 소유자가 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="50ff0-419">경우 `Pulse` 스레드가 대기 중인 큐의 헤드에만 영향을 받는 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="50ff0-420">경우 `PulseAll` 개체에 대 한 대기 중인 모든 스레드에 영향을 받는 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="50ff0-421">신호를 받을 때 하나 이상의 스레드가 대기 중인 큐에 두고 준비 된 큐에 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="50ff0-422">스레드가 준비 큐에서 잠금을 획득 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="50ff0-423">이 메서드는 호출 스레드 개체에 대 한 잠금을 다시 가져오면를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="50ff0-424">잠금의 소유자를 호출 하지 않는 경우이 메서드는 무기한으로 차단 하는 참고 `Pulse` 또는 `PulseAll`합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="50ff0-425">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="50ff0-426">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 `Enter` 개체에서 호출 `Exit` 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="50ff0-427">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="50ff0-428">시스템 호출 호출자가 잠금을 다시 가져오면 `Enter` 는 저장 된 복원 하는 데 필요한 횟수 만큼 `Enter` 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="50ff0-429">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="50ff0-430">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-431">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-432">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-433">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-434">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="50ff0-435">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="50ff0-436">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-437">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="50ff0-438">스레드가 준비된 큐에 들어가기 전에 대기할 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-439">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="50ff0-440">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-441">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="50ff0-442">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-443">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="50ff0-444">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="50ff0-445">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="50ff0-446">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="50ff0-447">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="50ff0-448">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="50ff0-449">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="50ff0-450">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="50ff0-451">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="50ff0-452">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="50ff0-453">그러나 경우 `millisecondsTimeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-454">경우 <xref:System.Threading.Timeout.Infinite> 에 대해 지정 된 된 `millisecondsTimeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="50ff0-455">하는 경우 `millisecondsTimeout` 가 0을 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="50ff0-456">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="50ff0-457">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="50ff0-458">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="50ff0-459">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="50ff0-460">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-461">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-462">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-463">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-464">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-465">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="50ff0-466">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="50ff0-467">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-468">
            <paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-469">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="50ff0-470">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-471">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="50ff0-472">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-473">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="50ff0-474">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-475">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="50ff0-476">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="50ff0-477">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="50ff0-478">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="50ff0-479">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="50ff0-480">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="50ff0-481">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="50ff0-482">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="50ff0-483">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="50ff0-484">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="50ff0-485">그러나 경우 `timeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-486">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 합니다 `timeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="50ff0-487">하는 경우 `timeout` 은 0 밀리초를 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="50ff0-488">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="50ff0-489">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="50ff0-490">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="50ff0-491">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="50ff0-492">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-493">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-494">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-495">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-496">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-497">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="50ff0-498">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="50ff0-499">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-500">
            <paramref name="timeout" /> 매개 변수의 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-501">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="50ff0-502">스레드가 준비된 큐에 들어가기 전에 대기할 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="50ff0-503">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-504">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="50ff0-505">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="50ff0-506">또한 이 메서드는 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 대기 전에 종료하고 나중에 다시 가져오는지 여부도 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-507">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="50ff0-508">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-509">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="50ff0-510">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="50ff0-511">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="50ff0-512">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="50ff0-513">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="50ff0-514">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="50ff0-515">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="50ff0-516">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="50ff0-517">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)는 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="50ff0-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="50ff0-518">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="50ff0-519">그러나 경우 `millisecondsTimeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-520">경우 <xref:System.Threading.Timeout.Infinite> 에 대해 지정 된 된 `millisecondsTimeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="50ff0-521">하는 경우 `millisecondsTimeout` 가 0을 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="50ff0-522">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="50ff0-523">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="50ff0-524">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="50ff0-525">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="50ff0-526">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-527">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-528">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-529">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="50ff0-530">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="50ff0-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="50ff0-531">합니다`exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="50ff0-532">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="50ff0-533">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="50ff0-534">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="50ff0-535">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="50ff0-536">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="50ff0-537">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="50ff0-538">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="50ff0-539">경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-540">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-541">
            <see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="50ff0-542">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="50ff0-543">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-544">
            <paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="50ff0-545">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="50ff0-546">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="50ff0-547">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50ff0-548">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="50ff0-549">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="50ff0-550">필요에 따라 동기화된 컨텍스트의 동기화 도메인을 대기 전에 종료하고 나중에 해당 도메인을 다시 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50ff0-551">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="50ff0-552">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50ff0-553">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="50ff0-554">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="50ff0-555">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="50ff0-556">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="50ff0-557">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="50ff0-558">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="50ff0-559">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="50ff0-560">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="50ff0-561">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)는 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="50ff0-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="50ff0-562">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="50ff0-563">그러나 경우 `timeout` 시간 (밀리초)는 다른 스레드가이 개체를 호출 하기 전에 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-564">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 합니다 `timeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="50ff0-565">하는 경우 `timeout` 은 0 밀리초를 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="50ff0-566">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="50ff0-567">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="50ff0-568">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="50ff0-569">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="50ff0-570">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50ff0-571">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="50ff0-572">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="50ff0-573">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="50ff0-574">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="50ff0-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="50ff0-575">합니다`exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="50ff0-576">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="50ff0-577">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="50ff0-578">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50ff0-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="50ff0-579">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="50ff0-580">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="50ff0-581">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="50ff0-582">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="50ff0-583">경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50ff0-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50ff0-584">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="50ff0-585">
            <see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="50ff0-586">Wait를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="50ff0-587">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50ff0-588">
            <paramref name="timeout" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1 밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50ff0-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>