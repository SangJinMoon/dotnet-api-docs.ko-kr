<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="23e22-101">개체에 대한 액세스를 동기화하는 메커니즘을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="23e22-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-102"><xref:System.Threading.Monitor> 클래스를 사용 하면 가져오고를 호출 하 여 특정 개체에 대 한 잠금을 해제 하 여 코드 영역에 대 한 액세스를 동기화 하는 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="23e22-103">개체 잠금 블록 일반적으로 임계 영역을 라고 하는 코드에 대 한 액세스를 제한 하는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="23e22-104">개체에 대 한 잠금을 소유 하는 스레드를 하는 동안 다른 스레드가 잠금을 획득할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="23e22-105">사용할 수도 있습니다는 <xref:System.Threading.Monitor> 다른 스레드에서 응용 프로그램의 한 섹션에 액세스할 수 있도록 클래스 잠금 소유자가 실행 중인 다른 스레드가 잠겨 있는 다른 개체를 사용 하 여 코드를 실행 하지 않는 한 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="23e22-106">이 문서의 내용</span><span class="sxs-lookup"><span data-stu-id="23e22-106">In this article:</span></span>  
  
 <span data-ttu-id="23e22-107">[Monitor 클래스: 개요](#Overview) </span><span class="sxs-lookup"><span data-stu-id="23e22-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="23e22-108">[잠금 개체](#Lock) </span><span class="sxs-lookup"><span data-stu-id="23e22-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="23e22-109">[임계 영역](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="23e22-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="23e22-110">[펄스, PulseAll, 및 대기](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="23e22-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="23e22-111">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="23e22-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="23e22-112">Monitor 클래스: 개요</span><span class="sxs-lookup"><span data-stu-id="23e22-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="23e22-113"><xref:System.Threading.Monitor> 에 다음과 같은 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="23e22-114">필요에 따라 개체와 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="23e22-115">바인딩 해제 되어 있으므로 모든 컨텍스트에서 직접 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="23e22-116">인스턴스는 <xref:System.Threading.Monitor> 클래스를 만들 수 없습니다;의 메서드는 <xref:System.Threading.Monitor> 클래스는 모두 정적입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="23e22-117">각 메서드에 대 한 액세스를 제어 하는 동기화 된 개체를 전달 되는 임계 영역에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-118">사용 하 여는 <xref:System.Threading.Monitor> 문자열 이외의 잠금 개체에 대 한 클래스 (참조, 즉 이외의 형식 <xref:System.String>), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="23e22-119">자세한 내용은 참조의 오버 로드는 <xref:System.Threading.Monitor.Enter%2A> 메서드 및 [잠금 개체](#Lock) 이 문서의 뒷부분에 나오는 섹션.</span><span class="sxs-lookup"><span data-stu-id="23e22-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="23e22-120">다음 표에서 동기화 된 개체에 액세스 하는 스레드에서 수행할 수 있는 동작을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="23e22-121">작업</span><span class="sxs-lookup"><span data-stu-id="23e22-121">Action</span></span>|<span data-ttu-id="23e22-122">설명</span><span class="sxs-lookup"><span data-stu-id="23e22-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="23e22-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="23e22-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="23e22-124">개체에 대 한 잠금을 획득합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-124">Acquires a lock for an object.</span></span> <span data-ttu-id="23e22-125">임계 영역의 시작 부분을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="23e22-126">잠겨 있는 다른 개체를 사용 하 여 중요 한 섹션의 지침에 실행 되는 경우가 아니면 다른 스레드에서 임계 영역을 입력할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="23e22-127">다른 스레드를 잠그고 개체에 액세스할 수 있도록 개체에 대 한 잠금을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="23e22-128">호출 스레드가 다른 스레드에서 개체에 액세스 하는 동안 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="23e22-129">펄스 신호 변경 개체의 상태에 대 한 대기 중인 스레드를 알리는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="23e22-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="23e22-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="23e22-131">하나 이상의 대기 중인 스레드에 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="23e22-132">신호 알립니다 잠긴된 개체의 상태가 변경 되어 대기 중인 스레드에 하 고 잠금의 소유자는 잠금을 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="23e22-133">개체에 대 한 잠금을 받을 수 있도록 개체의 준비 된 큐에 대기 중인 스레드에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="23e22-134">스레드가 잠금을 되 면 필요한 상태에 도달 하는 경우 개체의 새 상태를 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="23e22-135">개체에 대 한 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-135">Releases the lock on an object.</span></span> <span data-ttu-id="23e22-136">잠겨 있는 개체에 의해 보호 되는 중요 한 섹션의 끝을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="23e22-137">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]에 대 한 오버 로드 중에 두 가지는 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.TryEnter%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="23e22-138">하나의 오버 로드 집합에는 `ref` (C#에서) 또는 `ByRef` (Visual Basic)에서는 <xref:System.Boolean> 로 자동 설정 하는 매개 변수 `true` 경우 잠금을 획득, 잠금을 획득할 때 예외가 발생 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="23e22-139">잠금을 해제 하는 모든 경우에는 리소스 잠금을 보호 일관 된 상태에 없을 수도 있는 경우에 중요 한 경우 이러한 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="23e22-140">잠금 개체</span><span class="sxs-lookup"><span data-stu-id="23e22-140">The lock object</span></span>  
 <span data-ttu-id="23e22-141">Monitor 클래스 이루어져 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 임계 영역에 액세스를 제어 하는 개체에 작동 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="23e22-142">다음 정보는 각 동기화 된 개체에 대 한 유지 관리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="23e22-143">현재 잠금을 보유 하는 스레드에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="23e22-144">잠금을 가져올 수 있는 스레드가 포함 된 준비 된 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="23e22-145">잠긴된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 하는 대기 중인 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="23e22-146"><xref:System.Threading.Monitor>는 값 형식이 아니라 개체(즉, 참조 형식)를 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-147"><xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>에 값 형식을 전달할 수 있지만 각 호출에 대해 개별적으로 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="23e22-148">호출마다 별도 개체를 만들기 때문에 <xref:System.Threading.Monitor.Enter%2A>가 차단되지 않으며, 보호하는 코드가 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="23e22-149">또한 <xref:System.Threading.Monitor.Exit%2A>에 전달되는 개체는 <xref:System.Threading.Monitor.Enter%2A>에 전달되는 개체와 다르므로 <xref:System.Threading.Monitor>에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생하고 "비동기화된 코드 블록에서 개체 동기화 메서드를 호출했습니다." 메시지가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="23e22-150">다음 예제에서는 이 문제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-150">The following example illustrates this problem.</span></span> <span data-ttu-id="23e22-151">각각 250밀리초 동안 대기하는 10개 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="23e22-152">각 작업은 실제로 시작 및 실행된 작업 수를 계산하기 위한 카운터 변수 `nTasks`를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="23e22-153">`nTasks`는 동시에 여러 작업에서 업데이트될 수 있는 전역 변수이기 때문에 모니터를 사용하여 여러 작업에서 동시에 수정되지 않도록 보호합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="23e22-154">그러나 예제의 출력과 같이 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="23e22-155">각 작업의 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출 전에 `nTasks` 변수가 boxing되므로 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="23e22-156">즉, 각 메서드 호출에 서로 독립적인 개별 변수가 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="23e22-157">`nTasks`는 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드 호출에서 다시 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="23e22-158">이렇게 하면 다시 서로 독립적인 새 boxed 변수 10개, `nTasks` 및 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출에서 생성되는 boxed 변수 10개가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="23e22-159">코드에서 이전에 잠기지 않은 새로 만든 변수에 대한 잠금을 해제하려고 하기 때문에 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="23e22-160">다음 예제와 같이 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>를 호출하기 전에 값 형식 변수를 boxing하고 boxing된 동일한 개체를 두 메서드에 모두 전달할 수 있지만 아무 이점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="23e22-161">boxing되지 않은 변수의 변경 내용은 boxing된 복사본에 반영되지 않으며, boxing된 복사본의 값을 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="23e22-162">동기화 할 개체를 선택할 때 전용 또는 내부 개체에 대해서만 잠가야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="23e22-163">외부 개체에 대 한 잠금을 관련 되지 않은 코드에 대 한 다양 한 용도 대 한 잠금에 동일한 개체를 선택할 수 있으므로 교착 상태를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="23e22-164">잠금에 사용 되는 개체에서 파생 된 경우 여러 응용 프로그램 도메인에 있는 개체는 동기화 할 수 있는 참고 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="23e22-165">임계 영역</span><span class="sxs-lookup"><span data-stu-id="23e22-165">The critical section</span></span>  
 <span data-ttu-id="23e22-166">사용 하 여는 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 임계 영역 시작과 끝을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-167">제공 하는 기능은 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 메서드는 제공 하는 동일는 [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) C# 문 및 [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) 점을 제외 하 고 Visual Basic의 문에 언어 구문이 도입 되면서 래핑은 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> 메서드 오버 로드와 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 에서 메서드는 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="23e22-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="23e22-168">모니터가 해제 되도록 하는 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="23e22-169">임계 영역에서 가져온 잠금을 인접 한 명령의의 집합이 면이 <xref:System.Threading.Monitor.Enter%2A> 메서드를 사용 하면 단일 스레드만 잠겨 있는 개체와 함께 포함된 코드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="23e22-170">이 경우 좋습니다에서 해당 코드를 배치 하는 `try` 차단에 대 한 호출을 배치 합니다는 <xref:System.Threading.Monitor.Exit%2A> 에서 메서드는 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="23e22-171">이렇게 하면 예외가 발생해도 잠금이 해제됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="23e22-172">다음 코드에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="23e22-173">이 기능은 클래스의 인스턴스 메서드 또는 정적에 대 한 액세스를 동기화 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="23e22-174">배치 하 여 잠금 기능을 수행할 수는 임계 영역 메서드 전체에 걸쳐 있는 경우는 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> 방법에 지정 하는 <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> 값의 생성자에서 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="23e22-175">이 특성을 사용 하는 경우는 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 메서드 호출은 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="23e22-176">다음 코드 조각에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="23e22-177">현재 스레드를; 메서드는 반환 될 때까지 잠금을 보유 하 고이 특성으로 인해 있는지 참고 잠금이 더 빨리 해제 될 경우 사용 하 여는 <xref:System.Threading.Monitor> 클래스를 C# [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) 문 또는 Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) 특성 대신 메서드 내에서 문의 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="23e22-178">에 대 한 수도 있지만 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 잠금 및 멤버 또는 클래스 경계를 교차 하는 지정 된 개체를 해제 하는 문을,이 방법은 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="23e22-179">펄스, PulseAll, 및 대기</span><span class="sxs-lookup"><span data-stu-id="23e22-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="23e22-180">스레드 잠금을 소유 하 고 잠금을 보호 하는 임계 영역 않았으면을 호출할 수는 <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="23e22-181"><xref:System.Threading.Monitor.Wait%2A> 잠금을 해제 하 고 경우 커서가 사용 하면 대기 중인 스레드 또는 스레드 잠금을 얻고 임계 영역을 입력 하 고를 호출 하 여 알림을 받을 때까지 대기는 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> 또는 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="23e22-182"><xref:System.Threading.Monitor.Wait%2A> 알림을 받으면 반환되고 다시 잠금을 얻습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="23e22-183"><xref:System.Threading.Monitor.Pulse%2A> 및 <xref:System.Threading.Monitor.PulseAll%2A>은 둘 다 대기 큐에 있는 다음 스레드를 계속하도록 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="23e22-184">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="23e22-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="23e22-185">사용 간의 차이점을 확인 해야는 <xref:System.Threading.Monitor> 클래스 및 <xref:System.Threading.WaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="23e22-186"><xref:System.Threading.Monitor> 클래스는 순수 하 게 관리 되 고, 완전히 이식 가능 하 고 운영 체제 리소스 요구 사항 측면에서 더 효율적일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="23e22-187"><xref:System.Threading.WaitHandle> 개체는 운영 체제 대기 가능 개체를 나타내며, 관리 코드와 비관리 코드 간의 동기화에 유용하고, 동시에 많은 개체를 처리하는 기능과 같은 일부 고급 운영 체제 기능을 노출합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e22-188">다음 예제에서는 <xref:System.Threading.Monitor> 가 나타내는 난수 생성기의 단일 인스턴스에 대 한 액세스를 동기화 하는 클래스는 <xref:System.Random> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="23e22-189">이 예에서는 10 작업을 스레드 풀 스레드에서 비동기적으로 실행 하며 각를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="23e22-190">각 작업 10000 난수를 생성 하 고의 평균을 계산, 난수 생성 된 수의 합계와 합계를 유지 관리 하는 두 개의 프로시저 수준 변수를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="23e22-191">모든 작업 실행 한 후 이러한 두 값은 전반적인 평균을 계산 하 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="23e22-192">스레드 풀 스레드에서 실행 중인 모든 작업에서 액세스할 수 있습니다, 때문에 변수를 액세스 `total` 및 `n` 도 동기화 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="23e22-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> 이 목적을 위해 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="23e22-194">다음 예제에는 함께 사용 하는 방법을 보여 줍니다.는 <xref:System.Threading.Monitor> 클래스 (사용 하 여 구현 된 `lock` 또는 `SyncLock` 언어 구문), <xref:System.Threading.Interlocked> 클래스 및 <xref:System.Threading.AutoResetEvent> 클래스.</span><span class="sxs-lookup"><span data-stu-id="23e22-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="23e22-195">두 개의 정의 `internal` (C#에서) 또는 `Friend` (Visual Basic)에서는 클래스, `SyncResource` 및 `UnSyncResource`, 각각 리소스에 대 한 동기화 되거나 동기화 되지 않은 액세스를 제공 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="23e22-196">이 예제에서는 동기화 되거나 동기화 되지 않은 액세스 (각 메서드 호출이 신속히 완료 되는 경우 수) 있음 차이점을 보여 줍니다. 위해이 메서드에 임의 지연이 포함 되어 있습니다: 짝수인 스레드에 대해 <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> 속성은,는 메서드 호출 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 2, 000 밀리초의 지연을 소개 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="23e22-197">때문에 `SyncResource` 클래스는 공용이 동기화 된 리소스에서 잠금을 사용 하는 클라이언트 코드의 없음; 내부 클래스가 자체적으로 잠금을 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="23e22-198">이를 통해 악성 코드가 공용 개체에서 잠금을 가져오는 것을 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="23e22-199">이 예제에서는 변수를 정의 `numOps`, 리소스에 액세스 하려고 하는 스레드 수를 정의 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="23e22-200">응용 프로그램 스레드 호출에서 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드 동기화와 동기화 되지 않은 액세스 액세스에 대해 5 번 각각.</span><span class="sxs-lookup"><span data-stu-id="23e22-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="23e22-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드에 단일 매개 변수, 매개 변수 없이 허용 하 고 값을 반환 하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="23e22-202">동기화 된 액세스에 대 한 호출의 `SyncUpdateResource` 메서드; 동기화 되지 않은 액세스에 대 한 호출에서 `UnSyncUpdateResource` 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="23e22-203">응용 프로그램 스레드 호출 메서드 호출의 각 집합에는 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) 때까지 차단 해당 메서드는 <xref:System.Threading.AutoResetEvent> 인스턴스가 신호입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="23e22-204">호출할 때마다는 `SyncUpdateResource` 메서드 호출 내부 `SyncResource.Access` 메서드 및 호출은 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 감소 시키기 위해 메서드는 `numOps` 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="23e22-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드를 사용 하는 카운터를 감소 시키기 위해, 그렇지 않으면 있습니다 수 없기 때문에 두 번째 스레드가 액세스 하는지 값 전에 첫 번째 스레드의 감소 된 값이 변수에 저장 되기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="23e22-206">마지막으로 동기화 된 작업자 스레드가 감소 카운터를 0으로, 동기화 된 모든 스레드가 완료 했음을 리소스 액세스는 `SyncUpdateResource` 메서드 호출에서 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 주 스레드가 계속 되도록 신호를 보냅니다 메서드 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="23e22-207">호출할 때마다는 `UnSyncUpdateResource` 메서드 호출 내부 `UnSyncResource.Access` 메서드 및 호출은 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 감소 시키기 위해 메서드는 `numOps` 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="23e22-208">다시 한 번의 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 두 번째 스레드가 첫 번째 스레드의 감소 된 값이 변수에 할당 되기 전에 값 액세스 하지 않도록 하는 카운터를 감소 시키기 위해 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="23e22-209">마지막으로 동기화 된 작업자 스레드가 감소 카운터를 0으로 때 리소스에 액세스 해야 동기화 되지 않은 스레드가 더 이상 있는지를 나타내는 `UnSyncUpdateResource` 메서드 호출에서 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 주 스레드가 계속 실행 되도록 신호를 보냅니다 메서드 .</span><span class="sxs-lookup"><span data-stu-id="23e22-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="23e22-210">예제의 출력에 나타난 것처럼, 동기화된 액세스는 호출한 스레드가 보호된 리소스를 종료한 다음 다른 스레드가 액세스할 수 있도록 하기 때문에 각 스레드는 선행 작업에서 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="23e22-211">반면에 잠금 없이 `UnSyncResource.Access` 메서드는 스레드가 도달 하는 순서로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="23e22-212">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="23e22-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="23e22-213">지정된 개체의 단독 잠금을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-214">모니터 잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-215">지정된 개체의 단독 잠금을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-216">사용 하 여 `Enter` 얻으려고는 <xref:System.Threading.Monitor> 매개 변수로 전달 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="23e22-217">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="23e22-218">에 동일한 스레드에서 호출 하는 `Enter` 차단 하지 않고 두 번 이상 이지만 동일한 수의 `Exit` 호출 개체에서 대기 하는 다른 스레드는 차단 해제 되기 전에 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="23e22-219">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-220">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="23e22-221">같은 변수를 전달 하는 경우 `Enter` 다시 별개의 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="23e22-222">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="23e22-223">또한 전달 하는 경우 변수를 `Exit`, 별도 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="23e22-224">에 전달 된 개체가 `Exit` 에 전달 된 개체와에서 다른 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="23e22-225">자세한 내용은 해당 개념 항목을 참조 하십시오. [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="23e22-226"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="23e22-227">A <xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="23e22-228">C#을 사용 하 여 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="23e22-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="23e22-229">블록 (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="23e22-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="23e22-230">Visual Basic) 하 고 모니터를 해제 하거나 C#을 사용 해야 `lock` 문 (`SyncLock` Visual Basic의 문)를 래핑하고 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 의 메서드는 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="23e22-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="23e22-231">블록입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e22-232">다음 예제에서는 `Enter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-233">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-234">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="23e22-235">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="23e22-236">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-237">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-238">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="23e22-239">예외가 발생하지 않는 경우 이 메서드의 출력은 항상 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-240">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-241">사용 하 여 `Enter` 얻으려고는 <xref:System.Threading.Monitor> 변수로 전달 된 개체에는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="23e22-242">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="23e22-243">에 동일한 스레드에서 호출 하는 `Enter` 차단 하지 않고 두 번 이상 이지만 동일한 수의 `Exit` 호출 개체에서 대기 하는 다른 스레드는 차단 해제 되기 전에 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="23e22-244">예외가 throw 되었기 때문에 잠금이 수행 하지, 경우에 대 한 지정 된 변수는 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="23e22-245">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램.</span><span class="sxs-lookup"><span data-stu-id="23e22-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="23e22-246">이 메서드가 예외를 throw 하지 않고 반환 하는 경우에 대 한 지정 된 변수는 `lockTaken` 매개 변수는 항상 `true`, 및 테스트할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="23e22-247">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-248">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="23e22-249">같은 변수를 전달 하는 경우 `Enter` 다시 별개의 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="23e22-250">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="23e22-251">또한 전달 하는 경우 변수를 `Exit`, 별도 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="23e22-252">에 전달 된 개체가 `Exit` 에 전달 된 개체와에서 다른 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="23e22-253">자세한 내용은 해당 개념 항목을 참조 하십시오. [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="23e22-254"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="23e22-255">A <xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e22-256">다음 코드와의 기본적인 패턴을 사용 하 여 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="23e22-257">이 오버 로드에 전달 되는 변수의 값을 항상 설정 된 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드가 변수의 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 릴리스 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="23e22-258">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-259">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-260">잠금을 해제할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-261">지정된 개체의 단독 잠금을 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-262">호출 스레드가에 잠금을 소유 해야는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="23e22-263">호출 스레드가 지정된 된 개체에서 잠금을 소유 하 고 동일한 수의가 변경한 경우 `Exit` 및 <xref:System.Threading.Monitor.Enter%2A> 다음 잠금이 해제 되는 개체에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="23e22-264">호출 스레드가 호출 하지 않으면 `Exit` 같은 횟수 만큼 `Enter`, 잠금이 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="23e22-265">잠금이 해제 되는 개체에 대 한 준비 큐의 다른 스레드를 하는 경우 스레드 중 하나가 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="23e22-266">다른 스레드가 잠금을 획득 하려고 대기 하 고 대기 중인 큐에 있는 경우 이동 하지 않습니다 자동으로 준비 된 큐에 있는 잠금의 소유자를 호출할 때 `Exit`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="23e22-267">준비 큐에 하나 이상의 대기 중인 스레드를 이동 하려면 호출 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 호출 하기 전에 `Exit`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23e22-268">다음 예제에서는 `Exit` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-269">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-270">현재 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-271">테스트할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-272">현재 스레드에 지정된 개체에 대한 잠금이 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-273">현재 스레드에 <paramref name="obj" />에 대한 잠금이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-274">메서드를 사용 하 여 획득 된 잠금에에 대해서만 사용할 수 있는이 방법의 <xref:System.Threading.Monitor> 클래스를 사용 하 여 C# 또는 `lock` 문 또는 Visual Basic `SyncLock` 사용 하 여 구현 하는 문에 <xref:System.Threading.Monitor>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="23e22-275">와 같은 진단 도구로이 메서드를 사용 하는 <xref:System.Diagnostics.Debug.Assert%2A> 메서드 및 <xref:System.Diagnostics.Contracts.Contract> 클래스를 포함 하는 잠금 문제를 디버깅 하는 <xref:System.Threading.Monitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-276">
            <paramref name="obj" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-277">스레드에서 기다리는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-278">대기 중인 큐에 포함된 스레드에 잠겨 있는 개체의 상태 변경을 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-279">잠금의 현재 소유자 사용 하 여 대기 중인 개체를 표시할 수만 `Pulse`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="23e22-280">현재 지정된 된 개체에 대 한 잠금을 소유 하는 스레드 잠금에 대 한 줄에 있는 다음 스레드를 알리기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="23e22-281">펄스를 수신 하면 대기 스레드가 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="23e22-282">호출한 스레드에서 `Pulse` 의 잠금을 해제 (필요가 없는 펄스 된 스레드가) 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="23e22-283"><xref:System.Threading.Monitor> 클래스 하는지 여부를 나타내는 상태를 유지 하지 않습니다는 <xref:System.Threading.Monitor.Pulse%2A> 메서드가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="23e22-284">따라서 호출 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 스레드가 대기 중인 경우, 호출 하는 다음 스레드에서 <xref:System.Threading.Monitor.Wait%2A> 블록 처럼 <xref:System.Threading.Monitor.Pulse%2A> 마치 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="23e22-285">두 개의 스레드를 사용 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 및 <xref:System.Threading.Monitor.Wait%2A> 상호 작용할이 인해 교착 상태가 발생에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="23e22-286">이와 반대로의 동작은 <xref:System.Threading.AutoResetEvent> 클래스: 나타낸다고 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 대기 중, 스레드가 없는 및는 <xref:System.Threading.AutoResetEvent> 스레드가 호출 될 때까지 신호를 받은 상태로 남아 있으며 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="23e22-287"><xref:System.Threading.AutoResetEvent> 해당 스레드를 해제 하 고 보내지 않은 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="23e22-288">동기화 된 개체가 소유 하 고 현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 있음을 유의입니다 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-289">`Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, 및 <xref:System.Threading.Monitor.Wait%2A> 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-290">여러 스레드를 알리기 위해 사용 하 여는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-291">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-292">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-293">펄스를 보내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-294">대기 중인 모든 스레드에 개체 상태 변경을 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-295">현재 지정된 된 개체에 대 한 잠금을 소유 하는 스레드 개체에 대 한 잠금을 획득 하려고 대기 하는 모든 스레드가 신호를 보내이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="23e22-296">신호를 보낸 후 대기 중인 스레드가 준비 된 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="23e22-297">호출한 스레드에서 `PulseAll` 잠금을 해제 하 고, 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="23e22-298">동기화 된 개체가 소유 하 고 현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 있음을 유의입니다 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-299"><xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, 및 <xref:System.Threading.Monitor.Wait%2A> 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-300">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="23e22-301">단일 스레드를 알리기 위해 사용 하 여는 `Pulse` 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-302">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-303">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="23e22-304">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-305">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-306">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-307">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-308">경우 성공이 메서드 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="23e22-309">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="23e22-310">이 메서드는 <xref:System.Threading.Monitor.Enter%2A>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="23e22-311">메서드가 반환 하는 경우 스레드를 차단 하지 않고 입력할 수 없습니다, `false,`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-312">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-313">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="23e22-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="23e22-314">스레드 임계 영역에 들어가지 않습니다을 보장 하려면를 검사 하는 메서드의 반환 값의 반환 값은 경우에 임계 영역에서 코드를 실행할 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="23e22-315">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-316">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="23e22-317">다음 코드 예제에서는 `TryEnter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-318">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-319">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="23e22-320">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="23e22-321">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-322">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-323">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-324">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-325">경우 성공이 메서드 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="23e22-326">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="23e22-327">예외가 throw 되었기 때문에 잠금이 수행 하지, 경우에 대 한 지정 된 변수는 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="23e22-328">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램.</span><span class="sxs-lookup"><span data-stu-id="23e22-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="23e22-329">이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="23e22-330">스레드를 차단 하지 않고 들어갈 수 없는 경우는 `lockTaken` 인수도 설정 되어 `false` 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-331">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-332">자세한 내용은 <xref:System.Threading.Monitor>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="23e22-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="23e22-333">스레드 임계 영역에 들어가지 않습니다의 값을 검사 해야 하기 위해 `lockTaken` 해당 값이 있는 경우에 임계 영역에서 코드를 실행 하 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="23e22-334">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-335">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="23e22-336">다음 코드와의 기본적인 패턴을 사용 하 여 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="23e22-337">이 오버 로드에 전달 되는 변수의 값을 항상 설정 된 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드가 변수의 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 릴리스 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="23e22-338">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-339">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-340">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="23e22-341">잠금을 기다릴 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-342">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-343">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-344">경우는 `millisecondsTimeout` 매개 변수와 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="23e22-345">경우 `millisecondsTimeout` 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-346">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-347">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="23e22-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="23e22-348">스레드 임계 영역에 들어가지 않습니다을 보장 하려면를 검사 하는 메서드의 반환 값의 반환 값은 경우에 임계 영역에서 코드를 실행할 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="23e22-349">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-350">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-351">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-352">
            <paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-353">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="23e22-354">잠금을 기다리는 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="23e22-355">-1밀리초 값은 무한 대기를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-356">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-357">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-358">하는 경우의 값은 `timeout` 시간 (밀리초)로 변환 하는 매개 변수-1 이면이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="23e22-359">하는 경우의 값 `timeout` 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-360">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-361">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="23e22-362">스레드 임계 영역에 들어가지 않습니다을 보장 하려면를 검사 하는 메서드의 반환 값의 반환 값은 경우에 임계 영역에서 코드를 실행할 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="23e22-363">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-364">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-365">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-366">
            <paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-367">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="23e22-368">잠금을 기다릴 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="23e22-369">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="23e22-370">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-371">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-372">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-373">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-374">경우는 `millisecondsTimeout` 매개 변수와 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="23e22-375">경우 `millisecondsTimeout` 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="23e22-376">예외가 throw 되었기 때문에 잠금이 수행 하지, 경우에 대 한 지정 된 변수는 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="23e22-377">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램.</span><span class="sxs-lookup"><span data-stu-id="23e22-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-378">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-379">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="23e22-380">스레드 임계 영역에 들어가지 않습니다의 값을 검사 해야 하기 위해 `lockTaken` 해당 값이 있는 경우에 임계 영역에서 코드를 실행 하 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="23e22-381">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-382">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="23e22-383">다음 코드와의 기본적인 패턴을 사용 하 여 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="23e22-384">이 오버 로드에 전달 되는 변수의 값을 항상 설정 된 `ref` 매개 변수 (`ByRef` Visual basic에서) `lockTaken`메서드가 변수의 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 릴리스 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="23e22-385">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-386">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-387">
            <paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-388">잠금을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="23e22-389">잠금을 대기할 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="23e22-390">-1밀리초 값은 무한 대기를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="23e22-391">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="23e22-392">입력은 <see langword="false" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-393">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="23e22-394">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-395">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-396">하는 경우의 값은 `timeout` 시간 (밀리초)로 변환 하는 매개 변수-1 이면이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="23e22-397">하는 경우의 값 `timeout` 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="23e22-398">예외가 throw 되었기 때문에 잠금이 수행 하지, 경우에 대 한 지정 된 변수는 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="23e22-399">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램.</span><span class="sxs-lookup"><span data-stu-id="23e22-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-400">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="23e22-401">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="23e22-402">스레드 임계 영역에 들어가지 않습니다의 값을 검사 해야 하기 위해 `lockTaken` 해당 값이 있는 경우에 임계 영역에서 코드를 실행 하 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="23e22-403">다음 코드에서는이 메서드를 호출 하는 데 사용 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="23e22-404">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록 호출 스레드에서 예외가 발생 하면 임계 영역에 대 한 잠금을 해제 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="23e22-405">
            <paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-406">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-407">
            <paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="23e22-408">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-409">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-410">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-411">지정된 개체 잠금을 호출자가 다시 가져와 호출이 반환되면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="23e22-412">잠금을 다시 가져오지 않으면 이 메서드는 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-413">현재 지정된 된 개체에 대 한 잠금을 소유 하 고 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="23e22-414">호출자가 잠금을 다시 획득 하기 위해 기다리는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="23e22-415">이 메서드는 호출자에 게 다른 스레드 작업의 결과로 발생 하는 상태 변경에 대 한 대기 해야 할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="23e22-416">호출 하면 스레드 `Wait`, 개체의 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="23e22-417">개체의 준비 된 큐에 있는 다음 스레드 (있는 경우) 잠금을 획득 하는 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="23e22-418">호출 하는 모든 스레드가 `Wait` 신호를 받을 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>잠금의 소유자가 보내는 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="23e22-419">경우 `Pulse` 스레드가 대기 큐의 앞 부분에만 영향을 받는 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="23e22-420">경우 `PulseAll` 영향을 받는 개체에 대 한 대기 중인 모든 스레드가 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="23e22-421">신호를 받으면 하나 이상의 스레드가 대기 큐를 유지 하 고 준비 된 큐를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="23e22-422">준비 된 큐에 있는 스레드에서 잠금을 다시 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="23e22-423">이 메서드는 호출 스레드에서 개체에 잠금을 다시 가져오면를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="23e22-424">잠금의 소유자를 호출 하지 않는 경우이 메서드는 무기한으로 차단 참고 `Pulse` 또는 `PulseAll`합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="23e22-425">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="23e22-426">이론적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 `Enter` 개체에 하 고 호출 `Exit` 잠긴된 개체를 완전히 해제 하는 데 필요한 만큼 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="23e22-427">호출자에 게는 다음 개체를 다시 획득 하기 위해 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="23e22-428">시스템에서는 호출 호출자가 잠금을 다시 가져오면 `Enter` 저장 된 복원 하는 데 필요한 만큼 여러 번 `Enter` 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="23e22-429">호출 `Wait` 잠금을 해제 하 고 지정된 된 개체에 대 한 해당 하며 호출자에 게 다른 개체에 대 한 잠금 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="23e22-430">동기화 된 개체가 소유 하 고 현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 있음을 유의입니다 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-431"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-432">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-433">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-434">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="23e22-435">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="23e22-436">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-437">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="23e22-438">스레드가 준비된 큐에 들어가기 전에 대기할 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-439">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="23e22-440">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-441">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="23e22-442">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-443">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="23e22-444">현재 지정된 된 개체에 대 한 잠금을 소유 하 고 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="23e22-445">호출자가 잠금을 다시 획득 하기 위해 기다리는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="23e22-446">이 메서드는 호출자에 게 다른 스레드 작업의 결과로 발생 하는 상태 변경에 대 한 대기 해야 할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="23e22-447">제한 시간 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드가 무기한으로 차단 되지 않습니다 보장 된 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="23e22-448">또한 스레드가 늦은 대기 큐의 다른 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 바이패스 하 고 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="23e22-449">스레드가의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 잠금 제한 시간 전에 다시 가져왔는지 여부를 결정 하는 메서드. 스레드는 대기를 일으킨 조건을 평가할 수 경우 필요한 호출은 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="23e22-450">호출 하면 스레드 `Wait`, 개체의 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="23e22-451">개체의 준비 된 큐에 있는 다음 스레드 (있는 경우) 잠금을 획득 하는 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="23e22-452">호출한 스레드를 `Wait` 잠금을 보유 하는 스레드는 호출 될 때까지 대기 중인 큐에 남아 있는 <xref:System.Threading.Monitor.PulseAll%2A>, 큐에 있는 다음 순서 및 잠금을 보유 하는 스레드를 호출 하거나 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="23e22-453">그러나 경우 `millisecondsTimeout` 다른 스레드가이 개체를 호출 하기 전에 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드를 원래 스레드가 잠금을 다시 가져오기 하려면 준비 된 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-454">경우 <xref:System.Threading.Timeout.Infinite> 지정는 `millisecondsTimeout` 매개 변수를이 메서드는 차단 무기한는 잠금의 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="23e22-455">경우 `millisecondsTimeout` 0 이면 호출 하는 스레드에서 `Wait` 잠금을 해제 한 다음 잠금을 다시 가져오기 위해 즉시 준비 된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="23e22-456">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="23e22-457">이론적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에 하 고 호출 <xref:System.Threading.Monitor.Exit%2A> 잠긴된 개체를 완전히 해제 하는 데 필요한 만큼 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="23e22-458">호출자에 게는 다음 개체를 다시 획득 하기 위해 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="23e22-459">시스템에서는 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 저장 된 복원 하는 데 필요한 만큼 여러 번 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="23e22-460">호출 `Wait` 잠금을 해제 하 고 지정된 된 개체에 대 한 해당 하며 호출자에 게 다른 개체에 대 한 잠금 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-461">현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 대 한 참조를 보유 하는 동기화 된 개체는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-462"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-463">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-464">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-465">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="23e22-466">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="23e22-467">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-468">
            <paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-469">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="23e22-470">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-471">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="23e22-472">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-473">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="23e22-474">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-475">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="23e22-476">현재 지정된 된 개체에 대 한 잠금을 소유 하 고 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="23e22-477">호출자가 잠금을 다시 획득 하기 위해 기다리는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="23e22-478">이 메서드는 호출자에 게 다른 스레드 작업의 결과로 발생 하는 상태 변경에 대 한 대기 해야 할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="23e22-479">제한 시간 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드가 무기한으로 차단 되지 않습니다 보장 된 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="23e22-480">또한 스레드가 늦은 대기 큐의 다른 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 바이패스 하 고 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="23e22-481">스레드가의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 잠금 제한 시간 전에 다시 가져왔는지 여부를 결정 하는 메서드. 스레드는 대기를 일으킨 조건을 평가할 수 경우 필요한 호출은 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="23e22-482">호출 하면 스레드 `Wait`, 개체의 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="23e22-483">개체의 준비 된 큐에 있는 다음 스레드 (있는 경우) 잠금을 획득 하는 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="23e22-484">호출한 스레드를 `Wait` 잠금을 보유 하는 스레드는 호출 될 때까지 대기 중인 큐에 남아 있는 <xref:System.Threading.Monitor.PulseAll%2A>, 큐에 있는 다음 순서 및 잠금을 보유 하는 스레드를 호출 하거나 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="23e22-485">그러나 경우 `timeout` 다른 스레드가이 개체를 호출 하기 전에 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드를 원래 스레드가 잠금을 다시 가져오기 하려면 준비 된 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-486">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 `timeout` 매개 변수를이 메서드는 차단 무기한는 잠금의 소유자를 호출 하지 않는 한 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="23e22-487">경우 `timeout` 은 0 밀리초를 호출 하는 스레드에서 `Wait` 잠금을 해제 한 다음 잠금을 다시 가져오기 위해 즉시 준비 된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="23e22-488">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="23e22-489">이론적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에 하 고 호출 <xref:System.Threading.Monitor.Exit%2A> 잠긴된 개체를 완전히 해제 하는 데 필요한 만큼 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="23e22-490">호출자에 게는 다음 개체를 다시 획득 하기 위해 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="23e22-491">시스템에서는 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 저장 된 복원 하는 데 필요한 만큼 여러 번 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="23e22-492">호출 `Wait` 잠금을 해제 하 고 지정된 된 개체에 대 한 해당 하며 호출자에 게 다른 개체에 대 한 잠금 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-493">현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 대 한 참조를 보유 하는 동기화 된 개체는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-494"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-495">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-496">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-497">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="23e22-498">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="23e22-499">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-500">
            <paramref name="timeout" /> 매개 변수의 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-501">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="23e22-502">스레드가 준비된 큐에 들어가기 전에 대기할 밀리초 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="23e22-503">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-504">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="23e22-505">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="23e22-506">또한 이 메서드는 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 대기 전에 종료하고 나중에 다시 가져오는지 여부도 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-507">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="23e22-508">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-509">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="23e22-510">현재 지정된 된 개체에 대 한 잠금을 소유 하 고 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="23e22-511">호출자가 잠금을 다시 획득 하기 위해 기다리는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="23e22-512">이 메서드는 호출자에 게 다른 스레드 작업의 결과로 발생 하는 상태 변경에 대 한 대기 해야 할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="23e22-513">제한 시간 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드가 무기한으로 차단 되지 않습니다 보장 된 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="23e22-514">또한 스레드가 늦은 대기 큐의 다른 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 바이패스 하 고 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="23e22-515">스레드가의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 잠금 제한 시간 전에 다시 가져왔는지 여부를 결정 하는 메서드. 스레드는 대기를 일으킨 조건을 평가할 수 경우 필요한 호출은 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="23e22-516">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 중인 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="23e22-517">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)은 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="23e22-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="23e22-518">호출한 스레드를 `Wait` 잠금을 보유 하는 스레드는 호출 될 때까지 대기 중인 큐에 남아 있는 <xref:System.Threading.Monitor.PulseAll%2A>, 큐에 있는 다음 순서 및 잠금을 보유 하는 스레드를 호출 하거나 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="23e22-519">그러나 경우 `millisecondsTimeout` 다른 스레드가이 개체를 호출 하기 전에 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드를 원래 스레드가 잠금을 다시 가져오기 하려면 준비 된 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-520">경우 <xref:System.Threading.Timeout.Infinite> 지정는 `millisecondsTimeout` 매개 변수를이 메서드는 차단 무기한는 잠금의 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="23e22-521">경우 `millisecondsTimeout` 0 이면 호출 하는 스레드에서 `Wait` 잠금을 해제 한 다음 잠금을 다시 가져오기 위해 즉시 준비 된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="23e22-522">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="23e22-523">이론적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에 하 고 호출 <xref:System.Threading.Monitor.Exit%2A> 잠긴된 개체를 완전히 해제 하는 데 필요한 만큼 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="23e22-524">호출자에 게는 다음 개체를 다시 획득 하기 위해 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="23e22-525">시스템에서는 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 저장 된 복원 하는 데 필요한 만큼 여러 번 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="23e22-526">호출 `Wait` 잠금을 해제 하 고 지정된 된 개체에 대 한 해당 하며 호출자에 게 다른 개체에 대 한 잠금 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-527">현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 대 한 참조를 보유 하는 동기화 된 개체는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-528"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-529">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="23e22-530">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="23e22-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="23e22-531">`exitContext` 매개 변수 효과가 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="23e22-532">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="23e22-533">파생 되지 않은 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="23e22-534">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="23e22-535">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="23e22-536">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성이 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="23e22-537">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="23e22-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="23e22-538">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="23e22-539">경우는 <xref:System.Threading.Monitor.Wait%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-540">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-541">
            <see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="23e22-542">
            <see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="23e22-543">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-544">
            <paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="23e22-545">대기할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="23e22-546">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="23e22-547">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="23e22-548">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="23e22-549">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="23e22-550">필요에 따라 동기화된 컨텍스트의 동기화 도메인을 대기 전에 종료하고 나중에 해당 도메인을 다시 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="23e22-551">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="23e22-552">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23e22-553">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="23e22-554">현재 지정된 된 개체에 대 한 잠금을 소유 하 고 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="23e22-555">호출자가 잠금을 다시 획득 하기 위해 기다리는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="23e22-556">이 메서드는 호출자에 게 다른 스레드 작업의 결과로 발생 하는 상태 변경에 대 한 대기 해야 할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="23e22-557">제한 시간 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드가 무기한으로 차단 되지 않습니다 보장 된 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="23e22-558">또한 스레드가 늦은 대기 큐의 다른 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 바이패스 하 고 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="23e22-559">스레드가의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 잠금 제한 시간 전에 다시 가져왔는지 여부를 결정 하는 메서드. 스레드는 대기를 일으킨 조건을 평가할 수 경우 필요한 호출은 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="23e22-560">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 중인 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="23e22-561">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)은 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="23e22-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="23e22-562">호출한 스레드를 `Wait` 잠금을 보유 하는 스레드는 호출 될 때까지 대기 중인 큐에 남아 있는 <xref:System.Threading.Monitor.PulseAll%2A>, 큐에 있는 다음 순서 및 잠금을 보유 하는 스레드를 호출 하거나 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="23e22-563">그러나 경우 `timeout` 다른 스레드가이 개체를 호출 하기 전에 밀리초가 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드를 원래 스레드가 잠금을 다시 가져오기 하려면 준비 된 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-564">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 `timeout` 매개 변수를이 메서드는 차단 무기한는 잠금의 소유자를 호출 하지 않는 한 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="23e22-565">경우 `timeout` 은 0 밀리초를 호출 하는 스레드에서 `Wait` 잠금을 해제 한 다음 잠금을 다시 가져오기 위해 즉시 준비 된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="23e22-566">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="23e22-567">이론적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에 하 고 호출 <xref:System.Threading.Monitor.Exit%2A> 잠긴된 개체를 완전히 해제 하는 데 필요한 만큼 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="23e22-568">호출자에 게는 다음 개체를 다시 획득 하기 위해 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="23e22-569">시스템에서는 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 저장 된 복원 하는 데 필요한 만큼 여러 번 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="23e22-570">호출 `Wait` 잠금을 해제 하 고 지정된 된 개체에 대 한 해당 하며 호출자에 게 다른 개체에 대 한 잠금 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="23e22-571">현재 잠금, 스레드 잠금을 가져올 준비가 된, 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 대 한 참조를 보유 하는 동기화 된 개체는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="23e22-572"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 메서드 코드의 동기화 블록 내에서 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="23e22-573">에 대 한 설명의 <xref:System.Threading.Monitor.Pulse%2A> 메서드 수행 되는 작업에 대해 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="23e22-574">컨텍스트 종료에 대 한 메모</span><span class="sxs-lookup"><span data-stu-id="23e22-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="23e22-575">`exitContext` 매개 변수 효과가 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="23e22-576">파생 된 클래스의 인스턴스에 대 한 호출 안에 스레드에 있으면 이러한 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="23e22-577">파생 되지 않은 클래스에서 메서드를 현재 실행 되는 경우에 <xref:System.ContextBoundObject>처럼 <xref:System.String>, 기본이 아닌 컨텍스트에서 수 하는 경우는 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="23e22-578">코드는 기본 디렉터리가 아닌 다른 컨텍스트에서 실행 되는 경우 지정 하 `true` 에 대 한 `exitContext` 스레드가 기본이 아닌 관리 되는 컨텍스트를 종료 합니다 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="23e22-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="23e22-579">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="23e22-580">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성이 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="23e22-581">이 경우 클래스의 멤버에 대 한 모든 호출은 자동으로 동기화 및 동기화 도메인은 클래스에 대 한 코드의 본문 전체.</span><span class="sxs-lookup"><span data-stu-id="23e22-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="23e22-582">호출 스택에 있는 멤버의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`는 스레드가 계속 하려면는 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드가 동기화 도메인을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="23e22-583">경우는 <xref:System.Threading.Monitor.Wait%2A> 컨텍스트의 동기화 도메인을 다시 입력 하는 호출한 스레드가 기다려야 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="23e22-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="23e22-584">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="23e22-585">
            <see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="23e22-586">Wait를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="23e22-587">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="23e22-588">
            <paramref name="timeout" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1 밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="23e22-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>