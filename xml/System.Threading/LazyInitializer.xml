<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7d6511fffc182b113bbc69c98954d618ef23f1e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8e2ed-101">초기화 지연 루틴을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2ed-101">Provides lazy initialization routines.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2ed-102">이러한 루틴 할당할 필요가 전용된 초기화 지연의 인스턴스를 대신 참조를 사용 하 여 액세스 되므로 대상이 초기화 되었는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2ed-103">다음 예제에서는 위해 EnsureInitialized 지연 초기화가 이미 발생 했는지 여부를 추적 하는 부울 값을 사용 하 여 값을 초기화 하 고 상호 배타 잠금으로 사용할 개체를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8e2ed-104">메서드 <see cref="T:System.Threading.LazyInitializer" /> 는 스레드로부터 안전 하며 여러 스레드에서 동시에 호출할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2ed-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8e2ed-105">아직 초기화되지 않은 대상 유형을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-105">Initializes a target type if it hasn't already been initialized.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="8e2ed-106">초기화할 참조의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-106">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="8e2ed-107">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e2ed-108">아직 초기화되지 않은 경우 형식의 기본 생성자를 사용하여 대상 참조 형식을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e2ed-109">초기화된 <paramref name="T" /> 형식의 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-109">The initialized reference of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2ed-110">이 메서드가 참조 형식에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-110">This method may only be used on reference types.</span></span> <span data-ttu-id="8e2ed-111">값 형식의 초기화 위해 EnsureInitialized의 다른 오버 로드 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="8e2ed-112">이 방법을 사용할 수 있습니다 동시에 여러 스레드를 초기화 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="8e2ed-113">여러 스레드에서이 메서드에 액세스 동시에 여러 개 있는지 `T` 를 만들 수 있지만에 저장 하는 하나의 됩니다 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="8e2ed-114">이러한 발생에서이 메서드는 저장 되지 않은 개체 삭제 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="8e2ed-115">이러한 개체를 삭제 해야 하는 경우 개체 사용 되지 확인 하 고 다음 개체를 적절 하 게 삭제를 호출자에 게는 합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8e2ed-116">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="8e2ed-117">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-117">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="8e2ed-118">초기화할 참조의 참조 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-118">The reference type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="8e2ed-119">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="8e2ed-120">참조를 초기화하기 위해 호출되는 함수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-120">The function that is called to initialize the reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e2ed-121">아직 초기화되지 않은 경우 지정된 함수를 사용하여 대상 참조 형식을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e2ed-122">초기화된 <paramref name="T" /> 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-122">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2ed-123">이 메서드는 참조 형식에만 사용할 수 있습니다 및 `valueFactory` null 참조 (Visual Basic에서는 Nothing)를 반환 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="8e2ed-124">값 형식의 초기화 또는 null 참조 형식을 허용 하도록 위해 EnsureInitialized의 다른 오버 로드를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="8e2ed-125">이 방법을 사용할 수 있습니다 동시에 여러 스레드를 초기화 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="8e2ed-126">여러 스레드에서이 메서드에 액세스 동시에 여러 개 있는지 `T` 를 만들 수 있지만에 저장 하는 하나의 됩니다 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="8e2ed-127">이러한 발생에서이 메서드는 저장 되지 않은 개체 삭제 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="8e2ed-128">이러한 개체를 삭제 해야 하는 경우 개체 사용 되지 확인 하 고 다음 개체를 적절 하 게 삭제를 호출자에 게는 합니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="8e2ed-129">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-129">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e2ed-130">
            <paramref name="valueFactory" />가 null을 반환합니다(Visual Basic의 경우 Nothing).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-130">
              <paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="8e2ed-131">초기화할 참조의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-131">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="8e2ed-132">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조 또는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="8e2ed-133">대상이 이미 초기화되었는지 여부를 결정하는 부울 값에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-133">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="8e2ed-134">
            <c>대상</c>을 초기화할 때 상호 배타적인 잠금으로 사용할 개체에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="8e2ed-135">
            <c>syncLock</c>이 <see langword="null" />이면 새 개체를 인스턴스화할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e2ed-136">아직 초기화되지 않은 경우 해당 기본 생성자를 사용하여 대상 참조 또는 값 형식을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e2ed-137">초기화된 <paramref name="T" /> 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-137">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2ed-138">경우 `intialized` 없습니다 추가 초기화가 발생 한 후 true로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8e2ed-139">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="8e2ed-140">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-140">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="8e2ed-141">초기화할 참조의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-141">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="8e2ed-142">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조 또는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="8e2ed-143">대상이 이미 초기화되었는지 여부를 결정하는 부울 값에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-143">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="8e2ed-144">
            <c>대상</c>을 초기화할 때 상호 배타적인 잠금으로 사용할 개체에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="8e2ed-145">
            <c>syncLock</c>이 <see langword="null" />이면 새 개체를 인스턴스화할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="8e2ed-146">참조 또는 값을 초기화하기 위해 호출되는 함수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-146">The function that is called to initialize the reference or value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e2ed-147">아직 초기화되지 않은 경우 지정된 함수를 사용하여 대상 참조 또는 값 형식을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e2ed-148">초기화된 <paramref name="T" /> 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-148">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2ed-149">경우 `intialized` 없습니다 추가 초기화가 발생 한 후 true로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8e2ed-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="8e2ed-150">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="8e2ed-151">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2ed-151">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>