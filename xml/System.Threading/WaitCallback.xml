<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a38353245326738dcba09700a654648f37402fa4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="277ff-101">콜백 메서드에서 사용할 정보가 포함된 개체입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="277ff-101">An object containing information to be used by the callback method.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="277ff-102">스레드 풀 스레드에 의해 실행될 콜백 메서드를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="277ff-102">Represents a callback method to be executed by a thread pool thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="277ff-103"><xref:System.Threading.WaitCallback> 실행 하려는 콜백 메서드를 나타냅니다는 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-103"><xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="277ff-104">콜백 메서드를 전달 하 여 대리자를 만들는 <xref:System.Threading.WaitCallback> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-104">Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor.</span></span> <span data-ttu-id="277ff-105">메서드에 다음과 같은 서명이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-105">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="277ff-106">전달 하 여 실행에 대 한 작업을 큐 대기는 <xref:System.Threading.WaitCallback> 위임 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-106">Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="277ff-107">스레드 풀 스레드가 사용 가능 해지면 콜백 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-107">Your callback method executes when a thread pool thread becomes available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="277ff-108">Visual Basic 사용자를 생략할 수는 <xref:System.Threading.WaitCallback> 생성자 및 사용할은 `AddressOf` 콜백 메서드를 전달 하는 경우 연산자 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-108">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="277ff-109">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-109">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="277ff-110">콜백 메서드에 정보를 전달 하려는 경우 필요한 정보를 포함 하는 개체를 만들고 전달 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 실행에 대 한 작업을 대기 있습니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-110">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution.</span></span> <span data-ttu-id="277ff-111">콜백 메서드가 실행 될 때마다는 `state` 매개 변수는이 개체를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-111">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="277ff-112">콜백을 사용 하 여 스레드 풀 스레드를 동기화 하는 방법에 대 한 자세한 내용은 참조 [관리 되는 스레드 풀](~/docs/standard/threading/the-managed-thread-pool.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-112">For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="277ff-113">이 섹션에는 다음 두 가지 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-113">This section contains two examples.</span></span> <span data-ttu-id="277ff-114">첫 번째 예제는 간단한 작업 스레드 풀에서 실행에 대 한 큐 대기 수를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-114">The first example demonstrates how you can queue a simple task for execution by the thread pool.</span></span>  
  
 <span data-ttu-id="277ff-115">두 번째 예제는 작업을 큐 대기 정보를 전달 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-115">The second example demonstrates how you can queue a task and pass information to it.</span></span>  
  
 <span data-ttu-id="277ff-116">**예 1**</span><span class="sxs-lookup"><span data-stu-id="277ff-116">**Example 1**</span></span>  
  
 <span data-ttu-id="277ff-117">사용 하는 방법을 보여 주는이 예제는 <xref:System.Threading.WaitCallback> 대리자를 스레드 풀에서 실행에 대 한 작업을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-117">This example shows how to use the <xref:System.Threading.WaitCallback> delegate to queue a task for execution by the thread pool.</span></span> <span data-ttu-id="277ff-118">사용 하 여 코드 예제는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 요소로 표시 되는 작업을 큐에 대기 메서드 오버 로드는 <xref:System.Threading.WaitCallback> 를 래핑하는 `ThreadProc` 스레드를 사용할 수 있게 되는 때 실행할 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-118">The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method overload to queue a task, which is represented by a <xref:System.Threading.WaitCallback> that wraps the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="277ff-119">이 오버 로드를 가진 없음 작업 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-119">No task information is supplied with this overload.</span></span> <span data-ttu-id="277ff-120">따라서 사용할 수 있는 정보는 `ThreadProc` 메서드는 메서드가 속한 개체에 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-120">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="277ff-121">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="277ff-121">**Example 2**</span></span>  
  
 <span data-ttu-id="277ff-122">이 예제에는 작업 정보를 포함 하는 개체를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-122">This example shows how to create an object that contains task information.</span></span> <span data-ttu-id="277ff-123">또한 실행을 위해 큐에 대기 된 작업에 스레드 풀에서 해당 개체를 전달 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="277ff-123">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>