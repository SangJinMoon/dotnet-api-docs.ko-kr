<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WaitCallback.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a38353245326738dcba09700a654648f37402fa4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a38353245326738dcba09700a654648f37402fa4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitCallback">
          <source>An object containing information to be used by the callback method.</source>
          <target state="translated">콜백 메서드에서 사용할 정보가 포함된 개체입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitCallback">
          <source>Represents a callback method to be executed by a thread pool thread.</source>
          <target state="translated">스레드 풀 스레드에 의해 실행될 콜백 메서드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> represents a callback method that you want to execute on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 실행 하려는 콜백 메서드를 나타냅니다는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Create the delegate by passing your callback method to the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor.</source>
          <target state="translated">콜백 메서드를 전달 하 여 대리자를 만들는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Your method must have the signature shown here.</source>
          <target state="translated">메서드에 다음과 같은 서명이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Queue your task for execution by passing the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate to <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">전달 하 여 실행에 대 한 작업을 큐 대기는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 위임 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Your callback method executes when a thread pool thread becomes available.</source>
          <target state="translated">스레드 풀 스레드가 사용 가능 해지면 콜백 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 사용자를 생략할 수는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 생성자 및 사용할은 <ph id="ph2">`AddressOf`</ph> 콜백 메서드를 전달 하는 경우 연산자 <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> when you queue your task for execution.</source>
          <target state="translated">콜백 메서드에 정보를 전달 하려는 경우 필요한 정보를 포함 하는 개체를 만들고 전달 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 실행에 대 한 작업을 대기 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Each time your callback method executes, the <ph id="ph1">`state`</ph> parameter contains this object.</source>
          <target state="translated">콜백 메서드가 실행 될 때마다는 <ph id="ph1">`state`</ph> 매개 변수는이 개체를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>For more information about using callbacks to synchronize thread pool threads, see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.</source>
          <target state="translated">콜백을 사용 하 여 스레드 풀 스레드를 동기화 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되는 스레드 풀<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>This section contains two examples.</source>
          <target state="translated">이 섹션에는 다음 두 가지 예제가 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>The first example demonstrates how you can queue a simple task for execution by the thread pool.</source>
          <target state="translated">첫 번째 예제는 간단한 작업 스레드 풀에서 실행에 대 한 큐 대기 수를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>The second example demonstrates how you can queue a task and pass information to it.</source>
          <target state="translated">두 번째 예제는 작업을 큐 대기 정보를 전달 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>This example shows how to use the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate to queue a task for execution by the thread pool.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 대리자를 스레드 풀에서 실행에 대 한 작업을 큐 대기 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> method overload to queue a task, which is represented by a <ph id="ph2">&lt;xref:System.Threading.WaitCallback&gt;</ph> that wraps the <ph id="ph3">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">사용 하 여 코드 예제는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> 요소로 표시 되는 작업을 큐에 대기 메서드 오버 로드는 <ph id="ph2">&lt;xref:System.Threading.WaitCallback&gt;</ph> 를 래핑하는 <ph id="ph3">`ThreadProc`</ph> 스레드를 사용할 수 있게 되는 때 실행할 메서드입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">이 오버 로드를 가진 없음 작업 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">따라서 사용할 수 있는 정보는 <ph id="ph1">`ThreadProc`</ph> 메서드는 메서드가 속한 개체에 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예제 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>This example shows how to create an object that contains task information.</source>
          <target state="translated">이 예제에는 작업 정보를 포함 하는 개체를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitCallback">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">또한 실행을 위해 큐에 대기 된 작업에 스레드 풀에서 해당 개체를 전달 하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>