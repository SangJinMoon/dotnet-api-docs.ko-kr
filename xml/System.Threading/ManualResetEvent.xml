<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c19185907e45c5b7b80aae8627946c15d4efd4f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605908" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>하나 이상의 대기 중인 스레드에 이벤트가 발생했음을 알립니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 버전 2.0에서에서 <xref:System.Threading.ManualResetEvent> 새에서 파생 <xref:System.Threading.EventWaitHandle> 클래스입니다. A <xref:System.Threading.ManualResetEvent> 기능적으로 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>합니다.  
  
> [!NOTE]
>  와 달리는 <xref:System.Threading.ManualResetEvent> 클래스는 <xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.  
  
 <xref:System.Threading.ManualResetEvent> 스레드가 신호를 보내 서로 통신할 수 있습니다. 일반적으로이 통신 관련 된 하나의 스레드가 다른 스레드에서 진행 되기 전에 완료 해야 하는 작업입니다.  
  
 스레드 진행, 호출 스레드가 다른 먼저 완료 되어야 하는 작업을 시작할 때 <xref:System.Threading.EventWaitHandle.Reset%2A> 를 넣을 `ManualResetEvent` 신호 되지 않은 상태에 있습니다. 이 스레드는 일종의 제어는 `ManualResetEvent`합니다. 호출 하는 스레드 <xref:System.Threading.WaitHandle.WaitOne%2A> 에 `ManualResetEvent` 신호를 기다리는 차단 됩니다. 작업 완료 하는 제어 스레드, 호출 <xref:System.Threading.EventWaitHandle.Set%2A> 신호를 대기 중인 스레드에 진행할 수 있습니다. 대기 중인 모든 스레드가 해제 됩니다.  
  
 이 신호를 받은 후 `ManualResetEvent` 수동으로 다시 설정 될 때까지 신호를 받은 상태를 유지 합니다. 즉,에 대 한 호출이 `WaitOne` 즉시 반환 합니다.  
  
 초기 상태를 제어할 수 있습니다는 `ManualResetEvent` 부울 값을 생성자에 전달 하 여 `true` 초기 상태 신호를 받으면 및 `false` 그렇지 않은 경우.  
  
 `ManualResetEvent` 함께 사용할 수도 `static` <xref:System.Threading.WaitHandle.WaitAll%2A> 및 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.  
  
 스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 [ManualResetEvent 및 ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) 개념 설명서에 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 어떻게 <xref:System.Threading.ManualResetEvent> 작동 합니다. 로 시작 하는 예제는 <xref:System.Threading.ManualResetEvent> 에서 보내지 않은 상태로 (즉, `false` 생성자에 전달). 예제에서는 세 개의 스레드를 각 블록에는 <xref:System.Threading.ManualResetEvent> 호출 하 여 해당 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드. 누를 때는 **Enter** 키를 호출 하 여 예제는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 세 개의 스레드를 해제 합니다. 이와 반대로의 동작에서 <xref:System.Threading.AutoResetEvent> 클래스를 릴리스할 때마다 자동으로 재설정 한 번에 스레드 하나를 해제 합니다.  
  
 키를 누르면는 **Enter** 다시 키는 것을 보여 줍니다는 <xref:System.Threading.ManualResetEvent> 신호를 받은 상태로 될 때까지 유지 됩니다 해당 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드는:이 예제에서는 두 개 더 많은 스레드를 시작 합니다. 호출할 때 이러한 스레드를 차단 하지 않습니다는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 대신 실행이 완료 되었지만 합니다.  
  
 키를 누르면는 **Enter** 키를 다시 호출 하도록 예제를 사용 하면는 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출할 때을 차단 하는 한 더 많은 스레드를 시작 하 고 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다. 키를 누르면는 **Enter** 호출 키 <xref:System.Threading.EventWaitHandle.Set%2A> 마지막 스레드가 프로그램을 해제 하기 위해 종료 합니다.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 클래스는 스레드로부터 안전 합니다.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</param>
        <summary>초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.ManualResetEvent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우의 초기 상태는 <xref:System.Threading.ManualResetEvent> 신호를 받는 (전달 하 여 만들어진 경우에, 즉 `true` 에 대 한 `initialState`), 대기 하는 스레드는 <xref:System.Threading.ManualResetEvent> 차단 하지 않습니다. 초기 상태를 신호 없음으로 될 때까지 차단 된 스레드는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>