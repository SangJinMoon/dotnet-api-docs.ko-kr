<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEvent.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56bd57be7d0b7a3e06e014afa452e4dadda84883c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bd57be7d0b7a3e06e014afa452e4dadda84883c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>Notifies one or more waiting threads that an event has occurred.</source>
          <target state="translated">하나 이상의 대기 중인 스레드에 이벤트가 발생했음을 알립니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">.NET Framework 버전 2.0에서에서 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 새에서 파생 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 기능적으로 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 사용 하 여 만든 <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 스레드가 신호를 보내 서로 통신할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Typically, this communication concerns a task which one thread must complete before other threads can proceed.</source>
          <target state="translated">일반적으로이 통신 관련 된 하나의 스레드가 다른 스레드에서 진행 되기 전에 완료 해야 하는 작업입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When a thread begins an activity that must complete before other threads proceed, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> to put <ph id="ph2">`ManualResetEvent`</ph> in the non-signaled state.</source>
          <target state="translated">스레드 진행, 호출 스레드가 다른 먼저 완료 되어야 하는 작업을 시작할 때 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> 를 넣을 <ph id="ph2">`ManualResetEvent`</ph> 신호 되지 않은 상태에 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This thread can be thought of as controlling the <ph id="ph1">`ManualResetEvent`</ph>.</source>
          <target state="translated">이 스레드는 일종의 제어는 <ph id="ph1">`ManualResetEvent`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Threads that call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`ManualResetEvent`</ph> will block, awaiting the signal.</source>
          <target state="translated">호출 하는 스레드 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 에 <ph id="ph2">`ManualResetEvent`</ph> 신호를 기다리는 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the controlling thread completes the activity, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to signal that the waiting threads can proceed.</source>
          <target state="translated">작업 완료 하는 제어 스레드, 호출 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 신호를 대기 중인 스레드에 진행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>All waiting threads are released.</source>
          <target state="translated">대기 중인 모든 스레드가 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Once it has been signaled, <ph id="ph1">`ManualResetEvent`</ph> remains signaled until it is manually reset.</source>
          <target state="translated">이 신호를 받은 후 <ph id="ph1">`ManualResetEvent`</ph> 수동으로 다시 설정 될 때까지 신호를 받은 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>That is, calls to <ph id="ph1">`WaitOne`</ph> return immediately.</source>
          <target state="translated">즉,에 대 한 호출이 <ph id="ph1">`WaitOne`</ph> 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>You can control the initial state of a <ph id="ph1">`ManualResetEvent`</ph> by passing a Boolean value to the constructor, <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">초기 상태를 제어할 수 있습니다는 <ph id="ph1">`ManualResetEvent`</ph> 부울 값을 생성자에 전달 하 여 <ph id="ph2">`true`</ph> 초기 상태 신호를 받으면 및 <ph id="ph3">`false`</ph> 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">`ManualResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`ManualResetEvent`</ph> 함께 사용할 수도 <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> in the conceptual documentation.</source>
          <target state="translated">스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>ManualResetEvent 및 ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> 개념 설명서에 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The following example demonstrates how <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> works.</source>
          <target state="translated">다음 예제에서는 어떻게 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 작동 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example starts with a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> in the unsignaled state (that is, <ph id="ph2">`false`</ph> is passed to the constructor).</source>
          <target state="translated">로 시작 하는 예제는 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 에서 보내지 않은 상태로 (즉, <ph id="ph2">`false`</ph> 생성자에 전달).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example creates three threads, each of which blocks on the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">예제에서는 세 개의 스레드를 각 블록에는 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example calls the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, which releases all three threads.</source>
          <target state="translated">누를 때는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 키를 호출 하 여 예제는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를 세 개의 스레드를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, which releases threads one at a time, resetting automatically after each release.</source>
          <target state="translated">이와 반대로의 동작에서 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 클래스를 릴리스할 때마다 자동으로 재설정 한 번에 스레드 하나를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again demonstrates that the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> remains in the signaled state until its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called: The example starts two more threads.</source>
          <target state="translated">키를 누르면는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 다시 키는 것을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 신호를 받은 상태로 될 때까지 유지 됩니다 해당 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> 메서드는:이 예제에서는 두 개 더 많은 스레드를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>These threads do not block when they call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method, but instead run to completion.</source>
          <target state="translated">호출할 때 이러한 스레드를 차단 하지 않습니다는 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드를 대신 실행이 완료 되었지만 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again causes the example to call the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method and to start one more thread, which blocks when it calls <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</source>
          <target state="translated">키를 누르면는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 키를 다시 호출 하도록 예제를 사용 하면는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> 메서드를 호출할 때을 차단 하는 한 더 많은 스레드를 시작 하 고 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key one final time calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to release the last thread, and the program ends.</source>
          <target state="translated">키를 누르면는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 호출 키 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 마지막 스레드가 프로그램을 해제 하기 위해 종료 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">이 클래스는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to nonsignaled.</source>
          <target state="translated">초기 상태를 신호 받음으로 설정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 사용하고 초기 상태를 신호 없음으로 설정하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state of a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is signaled (that is, if it is created by passing <ph id="ph2">`true`</ph> for <ph id="ph3">`initialState`</ph>), threads that wait on the <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do not block.</source>
          <target state="translated">하는 경우의 초기 상태는 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 신호를 받는 (전달 하 여 만들어진 경우에, 즉 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`initialState`</ph>), 대기 하는 스레드는 <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state is nonsignaled, threads block until the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.</source>
          <target state="translated">초기 상태를 신호 없음으로 될 때까지 차단 된 스레드는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>