<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPoolBoundHandle.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58d6d6bc39f371a703223dd853e8ab8ffdf1fb309.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d6d6bc39f371a703223dd853e8ab8ffdf1fb309</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.7.1,netstandard-2.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Represents an I/O handle that is bound to the system thread pool and enables low-level components to receive notifications for asynchronous I/O operations.</source>
          <target state="translated">시스템 스레드 풀에 바인딩되고 하위 수준의 구성 요소가 비동기 I/O 작업에 대한 알림을 받을 수 있도록 하는 I/O 핸들을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 관리되지 않는 포인터를 반환합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An object from which to create the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pointer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 포인터를 생성하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure using the callback state and buffers associated with the specified <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> object.</source>
          <target state="translated">지정한 <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> 개체와 연결된 콜백 상태 및 버퍼를 사용하여 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대한 관리되지 않는 포인터를 반환합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대한 관리되지 않는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The  <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until the <ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> 될 때까지 실제 메모리의 구조는 고정 되어는 <ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is currently in use for another I/O operation.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph>는 다른 I/O 작업에 대해 현재 사용 중입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> was disposed.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>이 삭제된 후 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> was disposed.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph>가 삭제된 후 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A delegate that represents the callback method to invoke when the asynchronous I/O operation completes.</source>
          <target state="translated">비동기 I/O 작업이 완료될 때 호출할 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 인스턴스를 다른 <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 인스턴스와 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An object or array of objects that represent the input or output buffer for the operation, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">작업에 대한 입력 또는 출력 버퍼를 나타내는 개체의 배열 또는 개체입니다. 또는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Each object represents a buffer, such an array of bytes.</source>
          <target state="translated">각 개체는 바이트 배열과 같은 버퍼를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided object that supplies context, and managed objects that serve as buffers.</source>
          <target state="translated">비동기 I/O 작업이 완료되면 호출되는 대리자, 컨텍스트를 제공하는 사용자 제공 개체, 버퍼로 사용되는 관리되지 않는 개체를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대한 관리되지 않는 포인터를 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대한 관리되지 않는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 개체가 삭제된 후 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>An object that holds the operating system handle.</source>
          <target state="translated">운영 체제 핸들을 보유하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O in unmanaged code.</source>
          <target state="translated">핸들은 비관리 코드의 겹쳐진 I/O에 대해 열려있어야 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for the specified handle, which is bound to the system thread pool.</source>
          <target state="translated">시스템 스레드 풀에 바인딩된, 지정한 핸들에 대해 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, which is bound to the system thread pool.</source>
          <target state="translated">시스템 스레드 풀에 바인딩된, <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>에 대한 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>This method should be called once per handle.</source>
          <target state="translated">이 메서드는 핸들 당 한 번 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph> object does not take ownership of <ph id="ph2">`handle`</ph>; it remains the responsibility of the caller to call <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph> 개체의 소유권을 가져올 <ph id="ph2">`handle`</ph>; 호출 하려면 호출자의 책임 남아 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> does not refer to a valid I/O handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>은 유효한 I/O 핸들을 참조하지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has not been opened for overlapped I/O.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>은 겹쳐진 I/O에 대해 열려 있지 않은 핸들을 참조합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has already been bound.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>은 이미 바인딩된 핸들을 참조합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.Dispose">
          <source>Releases all unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 인스턴스에서 사용하는 관리되지 않는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure structure to be freed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대해 관리되지 않는 포인터가 해제됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Frees the memory associated with a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure allocated by the <ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> 메서드에 의해 할당된 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체와 연결된 메모리를 해제합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>You must call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method exactly once on every <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer allocated by using the <ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph> method.</source>
          <target state="translated">호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> 메서드를 정확히 한 번에 모든 <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> 를 사용 하 여 할당 된 관리 되지 않는 포인터는 <ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you do not call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method, you will leak memory.</source>
          <target state="translated">호출 하지 않으면는 <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> 메서드, 메모리 누수가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method method more than once on the same <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer, memory will be corrupted.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> 메서드 메서드는 동일한 두 번 이상 <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> 관리 되지 않는 포인터 메모리 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> 개체가 삭제된 후 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure from which to return the associated user-provided object.</source>
          <target state="translated">연결된 사용자 제공 개체를 반환하는 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체에 대한 관리되지 않는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>Returns the user-provided object that was specified when the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance was allocated by calling the <ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> 메서드를 호출하여 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 인스턴스가 할당되었을 때 지정된 사용자 제공 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if one was not specified when the intstance was allocated by calling the <ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 인스턴스를 다른 <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 인스턴스와 구별하는 사용자 제공 개체이거나, 또는 <ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> 메서드를 호출하여 인스턴스가 할당되었을 때 지정되지 않은 경우 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>Gets the bound operating system handle.</source>
          <target state="translated">바인딩된 운영 체제 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>An object that holds the bound operating system handle.</source>
          <target state="translated">바인딩된 운영 체제 핸들을 보유하는 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>