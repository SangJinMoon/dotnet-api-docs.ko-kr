<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9087366b105fd0db08981653c09c4fc5801df013" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528987" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>대기 중인 스레드에 이벤트가 발생했음을 알립니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` 스레드가 신호를 보내 서로 통신할 수 있습니다. 일반적으로 스레드가 리소스에 대 한 단독 액세스를 할 때이 클래스를 사용 합니다.  
  
> [!IMPORTANT]
>  이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다. 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 스레드를 호출 하 여 신호를 기다리는 <xref:System.Threading.WaitHandle.WaitOne%2A> 에 `AutoResetEvent`합니다. 경우는 `AutoResetEvent` 신호 되지 않은 상태에 스레드가 현재 제어 하는 리소스를 호출 하 여 사용할 수 있는지를 알리기 위해 리소스를 기다리는 스레드가 차단 <xref:System.Threading.EventWaitHandle.Set%2A>합니다.  
  
 호출 `Set` 신호 `AutoResetEvent` 를 대기 중인 스레드를 해제 합니다. `AutoResetEvent` 대기 중인 단일 스레드가 해제 되 고 신호 되지 않은 상태로 자동으로 반환 될 때까지 신호를 유지 됩니다. 대기 중인 스레드가 없는 경우 상태 무기한 신호를 받은 남아 있습니다.  
  
 스레드가 호출 하는 경우 <xref:System.Threading.WaitHandle.WaitOne%2A> 동안는 <xref:System.Threading.AutoResetEvent> 은 신호를 받은 상태로 스레드가 차단 되지 않습니다. <xref:System.Threading.AutoResetEvent> 는 스레드를 즉시 해제 하 고 신호 되지 않은 상태로 돌아갑니다.  
  
> [!IMPORTANT]
>  보장 되지 않습니다는를 호출할 때마다는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드는 스레드를 해제 합니다. 두 개를 호출 하는 스레드가 해제 되기 전에 두 번째 호출이 발생 너무 가까이 함께 인 하나의 스레드가 해제 됩니다. 두 번째 호출에서는 발생 하지 않았으며 처럼 이며 또한 경우 <xref:System.Threading.EventWaitHandle.Set%2A> 대기 하는 스레드가 없을 때 호출 되 고 <xref:System.Threading.AutoResetEvent> 이미 신호는 호출에 영향을 주지 않습니다.  
  
 초기 상태를 제어할 수 있습니다는 `AutoResetEvent` 부울 값을 생성자에 전달 하 여: `true` 초기 상태 신호를 받으면 및 `false` 그렇지 않은 경우.  
  
 `AutoResetEvent` 함께 사용할 수도 `static` <xref:System.Threading.WaitHandle.WaitAll%2A> 및 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.  
  
 스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) 개념 설명서에 있습니다.  
  
 .NET Framework 버전 2.0 부터는 <xref:System.Threading.AutoResetEvent> 새에서 파생 <xref:System.Threading.EventWaitHandle> 클래스입니다. <xref:System.Threading.AutoResetEvent> 기능적으로 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>합니다.  
  
> [!NOTE]
>  와 달리는 <xref:System.Threading.AutoResetEvent> 클래스는 <xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Threading.AutoResetEvent> 호출 하 여 한 번에 하나의 스레드를 해제 하는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드 (기본 클래스)에서 각 사용자가 시간는 **Enter** 키입니다. 이 예제에서는 세 개의 스레드를 기다리는 시작는 <xref:System.Threading.AutoResetEvent> 신호를 받은 상태에서 만든 합니다. 때문에 첫 번째 스레드가 즉시 해제 됩니다는 <xref:System.Threading.AutoResetEvent> 이미 신호를 받은 상태입니다. 이 다시 설정 된 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태로 후속 스레드를 차단 합니다. 차단 된 스레드 사용자 하나씩 해제 될 때까지 해제 되지 않은 키를 눌러 한 번에는 **Enter** 키입니다.  
  
 스레드는 첫 번째에서 해제 한 후 <xref:System.Threading.AutoResetEvent>, 다른 대기할 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태에서 만든 합니다. 세 개의 스레드를 차단 하므로 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 호출 해야 세 번을 모두 해제 합니다.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 클래스는 스레드로부터 안전 합니다.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</param>
        <summary>초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.AutoResetEvent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Threading.AutoResetEvent> 스레드가 각각 두 활동을 동기화 할 합니다. 응용 프로그램 스레드는 첫 번째 스레드 실행 `Main`합니다. 이 보호 된 리소스에 값을 쓴는 `static` (`Shared` Visual basic에서) 라는 필드 `number`합니다. 두 번째 스레드가 실행 하는 정적 `ThreadProc` 메서드를 작성 하는 값을 읽고 `Main`합니다.  
  
 `ThreadProc` 메서드가 기다리는 <xref:System.Threading.AutoResetEvent>합니다. 때 `Main` 호출은 <xref:System.Threading.EventWaitHandle.Set%2A> 에서 메서드는 <xref:System.Threading.AutoResetEvent>, `ThreadProc` 메서드 하나의 값을 읽습니다. <xref:System.Threading.AutoResetEvent> 즉시 다시 설정 하므로 `ThreadProc` 메서드가 다시 대기 합니다.  
  
 프로그램 논리에 따르면는 `ThreadProc` 메서드 값이 동일한 두 번 읽지 않는 됩니다. 보장 하지 않습니다는 `ThreadProc` 메서드는에서 쓰는 모든 값을 읽습니다 `Main`합니다. 두 번째가 보장 해야 <xref:System.Threading.AutoResetEvent> 잠금.  
  
 각 쓰기 작업 후 `Main` 호출 하 여 생성 된 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 메서드를 실행 하는 두 번째 스레드가 제공할 수 있도록 합니다. 단일 프로세서 컴퓨터에서 그렇지 않으면 `Main` 여러 값을 기록할 사이 두 읽기 작업 합니다.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>