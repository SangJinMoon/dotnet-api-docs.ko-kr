<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AutoResetEvent.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59087366b105fd0db08981653c09c4fc5801df013.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9087366b105fd0db08981653c09c4fc5801df013</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>Notifies a waiting thread that an event has occurred.</source>
          <target state="translated">대기 중인 스레드에 이벤트가 발생했음을 알립니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 스레드가 신호를 보내 서로 통신할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Typically, you use this class when threads need exclusive access to a resource.</source>
          <target state="translated">일반적으로 스레드가 리소스에 대 한 단독 액세스를 할 때이 클래스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>A thread waits for a signal by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`AutoResetEvent`</ph>.</source>
          <target state="translated">스레드를 호출 하 여 신호를 기다리는 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 에 <ph id="ph2">`AutoResetEvent`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If the <ph id="ph1">`AutoResetEvent`</ph> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`AutoResetEvent`</ph> 신호 되지 않은 상태에 스레드가 현재 제어 하는 리소스를 호출 하 여 사용할 수 있는지를 알리기 위해 리소스를 기다리는 스레드가 차단 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Calling <ph id="ph1">`Set`</ph> signals <ph id="ph2">`AutoResetEvent`</ph> to release a waiting thread.</source>
          <target state="translated">호출 <ph id="ph1">`Set`</ph> 신호 <ph id="ph2">`AutoResetEvent`</ph> 를 대기 중인 스레드를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 대기 중인 단일 스레드가 해제 되 고 신호 되지 않은 상태로 자동으로 반환 될 때까지 신호를 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If no threads are waiting, the state remains signaled indefinitely.</source>
          <target state="translated">대기 중인 스레드가 없는 경우 상태 무기한 신호를 받은 남아 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If a thread calls <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> while the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is in the signaled state, the thread does not block.</source>
          <target state="translated">스레드가 호출 하는 경우 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 동안는 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 은 신호를 받은 상태로 스레드가 차단 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases the thread immediately and returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 는 스레드를 즉시 해제 하 고 신호 되지 않은 상태로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread.</source>
          <target state="translated">보장 되지 않습니다는를 호출할 때마다는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드는 스레드를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">두 개를 호출 하는 스레드가 해제 되기 전에 두 번째 호출이 발생 너무 가까이 함께 인 하나의 스레드가 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">두 번째 호출에서는 발생 하지 않았으며 처럼 이며</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">또한 경우 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 대기 하는 스레드가 없을 때 호출 되 고 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 이미 신호는 호출에 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>You can control the initial state of an <ph id="ph1">`AutoResetEvent`</ph> by passing a Boolean value to the constructor: <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">초기 상태를 제어할 수 있습니다는 <ph id="ph1">`AutoResetEvent`</ph> 부울 값을 생성자에 전달 하 여: <ph id="ph2">`true`</ph> 초기 상태 신호를 받으면 및 <ph id="ph3">`false`</ph> 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 함께 사용할 수도 <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in the conceptual documentation.</source>
          <target state="translated">스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> 개념 설명서에 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Beginning with the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 새에서 파생 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>An <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 기능적으로 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 사용 하 여 만든 <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to release one thread at a time, by calling the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method (on the base class) each time the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 호출 하 여 한 번에 하나의 스레드를 해제 하는 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드 (기본 클래스)에서 각 사용자가 시간는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 키입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The example starts three threads, which wait on an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the signaled state.</source>
          <target state="translated">이 예제에서는 세 개의 스레드를 기다리는 시작는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 신호를 받은 상태에서 만든 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The first thread is released immediately, because the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already in the signaled state.</source>
          <target state="translated">때문에 첫 번째 스레드가 즉시 해제 됩니다는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 이미 신호를 받은 상태입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This resets the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to the non-signaled state, so that subsequent threads block.</source>
          <target state="translated">이 다시 설정 된 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 신호 되지 않은 상태로 후속 스레드를 차단 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The blocked threads are not released until the user releases them one at a time by pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">차단 된 스레드 사용자 하나씩 해제 될 때까지 해제 되지 않은 키를 눌러 한 번에는 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 키입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>After the threads are released from the first <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, they wait on another <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the non-signaled state.</source>
          <target state="translated">스레드는 첫 번째에서 해제 한 후 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, 다른 대기할 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 신호 되지 않은 상태에서 만든 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>All three threads block, so the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method must be called three times to release them all.</source>
          <target state="translated">세 개의 스레드를 차단 하므로 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를 호출 해야 세 번을 모두 해제 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">이 클래스는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to non-signaled.</source>
          <target state="translated">초기 상태를 신호 받음으로 설정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 사용하고 초기 상태를 신호 없음으로 설정하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The following example uses an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to synchronize the activities of two threads.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 스레드가 각각 두 활동을 동기화 할 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The first thread, which is the application thread, executes <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">응용 프로그램 스레드는 첫 번째 스레드 실행 <ph id="ph1">`Main`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It writes values to the protected resource, which is a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) field named <ph id="ph3">`number`</ph>.</source>
          <target state="translated">이 보호 된 리소스에 값을 쓴는 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서) 라는 필드 <ph id="ph3">`number`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The second thread executes the static <ph id="ph1">`ThreadProc`</ph> method, which reads the values written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">두 번째 스레드가 실행 하는 정적 <ph id="ph1">`ThreadProc`</ph> 메서드를 작성 하는 값을 읽고 <ph id="ph2">`Main`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">`ThreadProc`</ph> method waits for the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> 메서드가 기다리는 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>When <ph id="ph1">`Main`</ph> calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, the <ph id="ph4">`ThreadProc`</ph> method reads one value.</source>
          <target state="translated">때 <ph id="ph1">`Main`</ph> 호출은 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 에서 메서드는 <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, <ph id="ph4">`ThreadProc`</ph> 메서드 하나의 값을 읽습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> immediately resets, so the <ph id="ph2">`ThreadProc`</ph> method waits again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 즉시 다시 설정 하므로 <ph id="ph2">`ThreadProc`</ph> 메서드가 다시 대기 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The program logic guarantees that the <ph id="ph1">`ThreadProc`</ph> method will never read the same value two times.</source>
          <target state="translated">프로그램 논리에 따르면는 <ph id="ph1">`ThreadProc`</ph> 메서드 값이 동일한 두 번 읽지 않는 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It does not guarantee that the <ph id="ph1">`ThreadProc`</ph> method will read every value written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">보장 하지 않습니다는 <ph id="ph1">`ThreadProc`</ph> 메서드는에서 쓰는 모든 값을 읽습니다 <ph id="ph2">`Main`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>That guarantee would require a second <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> lock.</source>
          <target state="translated">두 번째가 보장 해야 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 잠금.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>After each write operation, <ph id="ph1">`Main`</ph> yields by calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, to give the second thread a chance to execute.</source>
          <target state="translated">각 쓰기 작업 후 <ph id="ph1">`Main`</ph> 호출 하 여 생성 된 <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> 메서드를 실행 하는 두 번째 스레드가 제공할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Otherwise, on a single-processor computer <ph id="ph1">`Main`</ph> would write many values between any two read operations.</source>
          <target state="translated">단일 프로세서 컴퓨터에서 그렇지 않으면 <ph id="ph1">`Main`</ph> 여러 값을 기록할 사이 두 읽기 작업 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>