<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9b7b9-101">대기 중인 스레드에 이벤트가 발생했음을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-101">Notifies a waiting thread that an event has occurred.</span></span> <span data-ttu-id="9b7b9-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b7b9-103">`AutoResetEvent` 스레드가 신호를 보내 서로 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="9b7b9-104">일반적으로 스레드가 리소스에 대 한 단독 액세스를 할 때이 클래스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9b7b9-105">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="9b7b9-106">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="9b7b9-107">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="9b7b9-108">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="9b7b9-109">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="9b7b9-110">스레드를 호출 하 여 신호를 기다리는 <xref:System.Threading.WaitHandle.WaitOne%2A> 에 `AutoResetEvent`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="9b7b9-111">경우는 `AutoResetEvent` 신호 되지 않은 상태에 스레드가 현재 제어 하는 리소스를 호출 하 여 사용할 수 있는지를 알리기 위해 리소스를 기다리는 스레드가 차단 <xref:System.Threading.EventWaitHandle.Set%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="9b7b9-112">호출 `Set` 신호 `AutoResetEvent` 를 대기 중인 스레드를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="9b7b9-113">`AutoResetEvent` 대기 중인 단일 스레드가 해제 되 고 신호 되지 않은 상태로 자동으로 반환 될 때까지 신호를 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="9b7b9-114">대기 중인 스레드가 없는 경우 상태 무기한 신호를 받은 남아 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="9b7b9-115">스레드가 호출 하는 경우 <xref:System.Threading.WaitHandle.WaitOne%2A> 동안는 <xref:System.Threading.AutoResetEvent> 은 신호를 받은 상태로 스레드가 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="9b7b9-116"><xref:System.Threading.AutoResetEvent> 는 스레드를 즉시 해제 하 고 신호 되지 않은 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9b7b9-117">보장 되지 않습니다는를 호출할 때마다는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드는 스레드를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="9b7b9-118">두 개를 호출 하는 스레드가 해제 되기 전에 두 번째 호출이 발생 너무 가까이 함께 인 하나의 스레드가 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="9b7b9-119">두 번째 호출에서는 발생 하지 않았으며 처럼 이며</span><span class="sxs-lookup"><span data-stu-id="9b7b9-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="9b7b9-120">또한 경우 <xref:System.Threading.EventWaitHandle.Set%2A> 대기 하는 스레드가 없을 때 호출 되 고 <xref:System.Threading.AutoResetEvent> 이미 신호는 호출에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="9b7b9-121">초기 상태를 제어할 수 있습니다는 `AutoResetEvent` 부울 값을 생성자에 전달 하 여: `true` 초기 상태 신호를 받으면 및 `false` 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="9b7b9-122">`AutoResetEvent` 함께 사용할 수도 `static` <xref:System.Threading.WaitHandle.WaitAll%2A> 및 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="9b7b9-123">스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) 개념 설명서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="9b7b9-124">.NET Framework 버전 2.0 부터는 <xref:System.Threading.AutoResetEvent> 새에서 파생 <xref:System.Threading.EventWaitHandle> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="9b7b9-125"><xref:System.Threading.AutoResetEvent> 기능적으로 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9b7b9-126">와 달리는 <xref:System.Threading.AutoResetEvent> 클래스는 <xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b7b9-127">다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Threading.AutoResetEvent> 호출 하 여 한 번에 하나의 스레드를 해제 하는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드 (기본 클래스)에서 각 사용자가 시간는 **Enter** 키입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="9b7b9-128">이 예제에서는 세 개의 스레드를 기다리는 시작는 <xref:System.Threading.AutoResetEvent> 신호를 받은 상태에서 만든 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="9b7b9-129">때문에 첫 번째 스레드가 즉시 해제 됩니다는 <xref:System.Threading.AutoResetEvent> 이미 신호를 받은 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="9b7b9-130">이 다시 설정 된 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태로 후속 스레드를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="9b7b9-131">차단 된 스레드 사용자 하나씩 해제 될 때까지 해제 되지 않은 키를 눌러 한 번에는 **Enter** 키입니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="9b7b9-132">스레드는 첫 번째에서 해제 한 후 <xref:System.Threading.AutoResetEvent>, 다른 대기할 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태에서 만든 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="9b7b9-133">세 개의 스레드를 차단 하므로 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 호출 해야 세 번을 모두 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9b7b9-134">이 클래스는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-134">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="9b7b9-135">초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-135"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="9b7b9-136">초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.AutoResetEvent" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9b7b9-137">다음 예제에서는 <xref:System.Threading.AutoResetEvent> 스레드가 각각 두 활동을 동기화 할 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="9b7b9-138">응용 프로그램 스레드는 첫 번째 스레드 실행 `Main`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="9b7b9-139">이 보호 된 리소스에 값을 쓴는 `static` (`Shared` Visual basic에서) 라는 필드 `number`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="9b7b9-140">두 번째 스레드가 실행 하는 정적 `ThreadProc` 메서드를 작성 하는 값을 읽고 `Main`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="9b7b9-141">`ThreadProc` 메서드가 기다리는 <xref:System.Threading.AutoResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="9b7b9-142">때 `Main` 호출은 <xref:System.Threading.EventWaitHandle.Set%2A> 에서 메서드는 <xref:System.Threading.AutoResetEvent>, `ThreadProc` 메서드 하나의 값을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="9b7b9-143"><xref:System.Threading.AutoResetEvent> 즉시 다시 설정 하므로 `ThreadProc` 메서드가 다시 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="9b7b9-144">프로그램 논리에 따르면는 `ThreadProc` 메서드 값이 동일한 두 번 읽지 않는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="9b7b9-145">보장 하지 않습니다는 `ThreadProc` 메서드는에서 쓰는 모든 값을 읽습니다 `Main`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="9b7b9-146">두 번째가 보장 해야 <xref:System.Threading.AutoResetEvent> 잠금.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="9b7b9-147">각 쓰기 작업 후 `Main` 호출 하 여 생성 된 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 메서드를 실행 하는 두 번째 스레드가 제공할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="9b7b9-148">단일 프로세서 컴퓨터에서 그렇지 않으면 `Main` 여러 값을 기록할 사이 두 읽기 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b7b9-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>