<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadAbortException.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51b2a2f2697e92949b7f739964f5f510bbcbe3e0a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2a2f2697e92949b7f739964f5f510bbcbe3e0a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>The exception that is thrown when a call is made to the <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> 메서드를 호출할 때 throw되는 예외입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When a call is made to the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method to destroy a thread, the common language runtime throws a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</source>
          <target state="translated">호출할 때는 <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> 공용 언어 런타임에서 스레드를 소멸 하는 메서드에서 throw 된 <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is a special exception that can be caught, but it will automatically be raised again at the end of the <ph id="ph2">`catch`</ph> block.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> 낼 수 있습니다는 특별 한 예외는 이지만 것은 자동으로 다시 발생의 끝에는 <ph id="ph2">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When this exception is raised, the runtime executes all the <ph id="ph1">`finally`</ph> blocks before ending the thread.</source>
          <target state="translated">런타임에서 모든 실행이 예외가 발생 하는 경우는 <ph id="ph1">`finally`</ph> 스레드를 종료 하기 전에 차단 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Because the thread can do an unbounded computation in the <ph id="ph1">`finally`</ph> blocks or call <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph> to cancel the abort, there is no guarantee that the thread will ever end.</source>
          <target state="translated">스레드가에서 바인딩 해제 된 계산을 수행할 수 있는 때문에 <ph id="ph1">`finally`</ph> 블록 또는 호출 <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph> 중단을 취소 하려면은 스레드 끝나지 않을 아닙니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>If you want to wait until the aborted thread has ended, you can call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">중단 된 스레드 종료 될 때까지 대기 하 고 원하는 경우 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is a blocking call that does not return until the thread actually stops executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> 스레드가 실제로 실행이 중지 될 때까지 반환 하지 않는 한 차단 호출이입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">사용 하지 않는 공용 언어 런타임 (CLR)을 관리 되는 실행 파일에 모든 포그라운드 스레드가 종료 되는 배경 threadsafter 멈추면 <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Therefore, you cannot use <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to detect when background threads are being terminated by the CLR.</source>
          <target state="translated">따라서 사용할 수 없습니다 <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> CLR에 의해 백그라운드 스레드를 종료 하는 시간을 감지 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> 0x80131530 값이 있는 HRESULT COR_E_THREADABORTED를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The value of the inherited <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated">상속된 된 값 <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> 속성은 항상 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The following example demonstrates aborting a thread.</source>
          <target state="translated">다음 예제는 스레드를 중단 하는 중입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The thread that receives the <ph id="ph1">`ThreadAbortException`</ph> uses the <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> method to cancel the abort request and continue executing.</source>
          <target state="translated">받는 스레드는 <ph id="ph1">`ThreadAbortException`</ph> 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> 메서드를 중단 요청을 취소 하 고 계속 실행 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>Gets an object that contains application-specific information related to the thread abort.</source>
          <target state="translated">스레드 중단에 관련된 응용 프로그램 관련 정보가 포함된 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>An object containing application-specific information.</source>
          <target state="translated">응용 프로그램 관련 정보가 포함된 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The object returned by this property is specified through the <ph id="ph1">`stateInfo`</ph> parameter of the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method.</source>
          <target state="translated">이 속성에서 반환 되는 개체를 통해 지정 된 <ph id="ph1">`stateInfo`</ph> 의 매개 변수는 <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</source>
          <target state="translated">정확한 내용과이 개체의 용도; 정의 하는 응용 프로그램 중단 중인 스레드를 의미 있는 정보를 전달 하기 위해 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The following code example shows how to pass information to a thread that is being aborted.</source>
          <target state="translated">다음 코드 예제 정보 중단 중인 스레드를 전달 하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>