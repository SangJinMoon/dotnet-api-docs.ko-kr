<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="802d3-101"><see cref="M:System.Threading.Thread.Abort(System.Object)" /> 메서드를 호출할 때 throw되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-101">The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method.</span></span> <span data-ttu-id="802d3-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="802d3-103">호출할 때는 <xref:System.Threading.Thread.Abort%2A> 공용 언어 런타임에서 스레드를 소멸 하는 메서드에서 throw 된 <xref:System.Threading.ThreadAbortException>합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-103">When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="802d3-104"><xref:System.Threading.ThreadAbortException> 낼 수 있습니다는 특별 한 예외는 이지만 것은 자동으로 다시 발생의 끝에는 `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-104"><xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block.</span></span> <span data-ttu-id="802d3-105">런타임에서 모든 실행이 예외가 발생 하는 경우는 `finally` 스레드를 종료 하기 전에 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-105">When this exception is raised, the runtime executes all the `finally` blocks before ending the thread.</span></span> <span data-ttu-id="802d3-106">스레드가에서 바인딩 해제 된 계산을 수행할 수 있는 때문에 `finally` 블록 또는 호출 <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> 중단을 취소 하려면은 스레드 끝나지 않을 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-106">Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> to cancel the abort, there is no guarantee that the thread will ever end.</span></span> <span data-ttu-id="802d3-107">중단 된 스레드 종료 될 때까지 대기 하 고 원하는 경우 호출할 수 있습니다는 <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="802d3-107">If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="802d3-108"><xref:System.Threading.Thread.Join%2A> 스레드가 실제로 실행이 중지 될 때까지 반환 하지 않는 한 차단 호출이입니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-108"><xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="802d3-109">사용 하지 않는 공용 언어 런타임 (CLR)을 관리 되는 실행 파일에 모든 포그라운드 스레드가 종료 되는 배경 threadsafter 멈추면 <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-109">When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="802d3-110">따라서 사용할 수 없습니다 <xref:System.Threading.ThreadAbortException> CLR에 의해 백그라운드 스레드를 종료 하는 시간을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-110">Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.</span></span>  
  
 <span data-ttu-id="802d3-111"><xref:System.Threading.ThreadAbortException> 0x80131530 값이 있는 HRESULT COR_E_THREADABORTED를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-111"><xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="802d3-112">상속된 된 값 <xref:System.Exception.Data%2A> 속성은 항상 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-112">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="802d3-113">다음 예제는 스레드를 중단 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-113">The following example demonstrates aborting a thread.</span></span> <span data-ttu-id="802d3-114">받는 스레드는 `ThreadAbortException` 사용 하 여는 <xref:System.Threading.Thread.ResetAbort%2A> 메서드를 중단 요청을 취소 하 고 계속 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-114">The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.</span></span>  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 <span data-ttu-id="802d3-115">이 코드의 결과는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-115">This code produces the following output:</span></span>  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="802d3-116">스레드 중단에 관련된 응용 프로그램 관련 정보가 포함된 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-116">Gets an object that contains application-specific information related to the thread abort.</span></span></summary>
        <value><span data-ttu-id="802d3-117">응용 프로그램 관련 정보가 포함된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-117">An object containing application-specific information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="802d3-118">이 속성에서 반환 되는 개체를 통해 지정 된 `stateInfo` 의 매개 변수는 <xref:System.Threading.Thread.Abort%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="802d3-118">The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method.</span></span> <span data-ttu-id="802d3-119">정확한 내용과이 개체의 용도; 정의 하는 응용 프로그램 중단 중인 스레드를 의미 있는 정보를 전달 하기 위해 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-119">The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="802d3-120">다음 코드 예제 정보 중단 중인 스레드를 전달 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="802d3-120">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>