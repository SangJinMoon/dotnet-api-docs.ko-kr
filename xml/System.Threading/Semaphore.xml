<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="47dc3c315c3032983e55c27b5310ada10bd2501f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406835" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="eab8d-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      <span class="sxs-lookup">
        <span data-stu-id="eab8d-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-102">사용 하 여는 <xref:System.Threading.Semaphore> 리소스 풀에 대 한 액세스를 제어 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="eab8d-103">호출 하 여 세마포를 입력 하는 스레드는 <xref:System.Threading.WaitHandle.WaitOne%2A> 에서 상속 된 메서드는 <xref:System.Threading.WaitHandle> 클래스를 호출 하 여 세마포를 해제는 <xref:System.Threading.Semaphore.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="eab8d-104">최대값에 도달한 세마포에 스레드가 세마포를 입력 하 고 스레드가 세마포를 해제 하는 경우에 증가 될 때마다 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="eab8d-105">수가 0 경우 후속 요청이 다른 스레드가 세마포를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="eab8d-106">모든 스레드가 세마포를 해제 수는 최대 값 지정 된 세마포를 만들 때.</span><span class="sxs-lookup"><span data-stu-id="eab8d-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="eab8d-107">예: FIFO 또는 차단 된 스레드가 세마포를 입력할 수 있는 LIFO 보장 된 순서 없이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-108">스레드가 세마포에 들어갈 수를 여러 번 호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반복적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="eab8d-109">이러한 항목의 일부나 전부를 해제 하려면 스레드가 매개 변수가 없는 호출 수 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드를 여러 번 이거나 호출할 수는 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 해제할 항목 수를 지정 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="eab8d-110"><xref:System.Threading.Semaphore> 클래스에 대 한 호출에 스레드 id를 적용 하지 않습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> 또는 <xref:System.Threading.Semaphore.Release%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="eab8d-111">프로그래머의는 스레드를 놓지 마십시오 세마포 너무 여러 번 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="eab8d-112">예를 들어 세마포의 최대 개수가 2개인데 스레드 A와 스레드 B가 모두 세마포를 입력한다고 가정해 보겠습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="eab8d-113">스레드 B에서에서 프로그래밍 오류가 있으면 호출로 인해 <xref:System.Threading.Semaphore.Release%2A> 을 두 번 두 호출은 모두 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="eab8d-114">그러면 세마포 개수가 다 차서 스레드 A가 <xref:System.Threading.Semaphore.Release%2A>를 호출하면 <xref:System.Threading.SemaphoreFullException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="eab8d-115">세마포는 다음 두 가지 유형: 로컬 세마포 및 명명 된 시스템 세마포 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="eab8d-116">만드는 경우는 <xref:System.Threading.Semaphore> 개체 이름을 허용 하는 생성자를 사용 하 여 해당 이름의 운영 체제 세마포와 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="eab8d-117">명명 된 시스템 세마포 운영 체제 전체에 표시 되며 프로세스 작업을 동기화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="eab8d-118">여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 동일한 나타내는 개체를 사용할 수 있습니다 및는 <xref:System.Threading.Semaphore.OpenExisting%2A> 기존 여 메서드를 명명 된 시스템 세마포 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-119">로컬 세마포가 프로세스 내에 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="eab8d-120">로컬 <xref:System.Threading.Semaphore> 개체에 대한 참조가 있는 프로세스의 모든 스레드에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="eab8d-121">각 <xref:System.Threading.Semaphore> 개체는 별도 로컬 세마포입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-122">다음 코드 예제에서는 세 개의 최대 개수 및 0에 대 한 초기 카운트 세마포를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="eab8d-123">이 예제에서는 세마포를 기다리는 동안 차단 5 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="eab8d-124">주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 메서드 오버 로드 세마포 개수 세마포를 입력 하려면 3 개의 스레드를 허용 된 최대값을 늘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="eab8d-125">사용 하 여 각 스레드에 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 작업을 시뮬레이션 한 다음 호출을 대기 하는 메서드는 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드 세마포를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="eab8d-126">세마포가 해제 될 때마다 이전 세마포 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="eab8d-127">콘솔 메시지 세마포 사용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-127">Console messages track semaphore use.</span></span> <span data-ttu-id="eab8d-128">출력을 보다 쉽게 읽을 수 있도록 각 스레드에 대 한 시뮬레이션 된 작업 간격이 약간 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="eab8d-129">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="eab8d-129">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="eab8d-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="eab8d-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-134">이 생성자는 명명 되지 않은 세마포를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-134">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="eab8d-135">이러한 세마포의 인스턴스를 사용 하는 모든 스레드는 인스턴스에 대 한 참조가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-135">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="eab8d-136">경우 `initialCount` 는 보다 작은 `maximumCount`, 마치 현재 스레드를 호출 하는 경우의 결과 같습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 뺀 `initialCount`) 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-136">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="eab8d-137">세마포를 만드는 스레드는 엔트리를 예약 하지 않을 경우 같은 숫자를 사용 하 여 `maximumCount` 및 `initialCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-137">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-138">다음 예제에서는 세마포의 최대 개수가 3 및 0에 대 한 초기 카운트</span><span class="sxs-lookup"><span data-stu-id="eab8d-138">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="eab8d-139">이 예제에서는 세마포를 기다리는 동안 차단 5 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-139">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="eab8d-140">주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 메서드 오버 로드 세마포 개수 세마포를 입력 하려면 3 개의 스레드를 허용 된 최대값을 늘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-140">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="eab8d-141">사용 하 여 각 스레드에 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 작업을 시뮬레이션 한 다음 호출을 대기 하는 메서드는 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드 세마포를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-141">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="eab8d-142">세마포가 해제 될 때마다 이전 세마포 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-142">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="eab8d-143">콘솔 메시지 세마포 사용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-143">Console messages track semaphore use.</span></span> <span data-ttu-id="eab8d-144">출력을 보다 쉽게 읽을 수 있도록 각 스레드에 대 한 시뮬레이션 된 작업 간격이 약간 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-144">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-145">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-145">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eab8d-146">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-146">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="eab8d-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="eab8d-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="eab8d-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="eab8d-150">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-150">The name of a named system semaphore object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-152">이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-152">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="eab8d-153">여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 나타내는 동일한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-153">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-154">초기 카운트 및로 지정 된 최대 수로 생성 된 명명 된 시스템 세마포에 없는 경우 `initialCount` 및 `maximumCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-154">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="eab8d-155">명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 및 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-155">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="eab8d-156">확인 해야 하는 경우 명명된 된 시스템 세마포를 만들지 여부, 사용 된 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> 생성자 오버 로드를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-156">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eab8d-157">권장 되는 방법에 대 한 동일한 수를 지정 하는 것이 생성자 오버 로드를 사용 하면 `initialCount` 및 `maximumCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-157">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="eab8d-158">경우 `initialCount` 는 보다 작은 `maximumCount`, 및 명명된 된 시스템 세마포 만들어지고, 현재 스레드 마치 호출 하는 경우의 결과 같습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 뺀 `initialCount`) 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-158">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="eab8d-159">그러나,이 생성자 오버 로드를 가진 없기 명명 된 시스템 세마포가 만들어졌는지 여부를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-159">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="eab8d-160">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 세마포가 만들어집니다는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-160">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="eab8d-161">명명 된 세마포에서 운영 체제 전체에 표시 되므로 프로세스 경계를 넘어 리소스 사용을 조정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-161">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="eab8d-162">명명 된 시스템 세마포가 있는지 여부를 알아보려면, 사용 하려는 경우는 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-162">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="eab8d-163"><xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 기존 명명 된 세마포를 열려고 시도 하 고 시스템 세마포가 존재 하지 않는 경우 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-163">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-164">다음 코드 예제에서는 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-164">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="eab8d-165">이 예제에서는 명명된 된 세마포 최대 개수가 5와 5에 대 한 초기 카운트</span><span class="sxs-lookup"><span data-stu-id="eab8d-165">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="eab8d-166">프로그램을 세 번 호출 된 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-166">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="eab8d-167">따라서 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 두 번째 복사본은 차단에 대 한 세 번째 호출에서 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-167">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="eab8d-168">두 번째 차단을 해제 하려면 프로그램의 첫 번째 복사본에 있는 하나 이상의 항목을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-168">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-169">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-169">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="eab8d-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eab8d-171">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-171">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="eab8d-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-173">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-173">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="eab8d-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eab8d-176">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-176">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="eab8d-177">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-177">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="eab8d-178">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-178">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="eab8d-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="eab8d-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="eab8d-181">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-181">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="eab8d-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="eab8d-183">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-183">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-185">이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-185">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="eab8d-186">여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 나타내는 동일한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-186">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-187">초기 카운트 및로 지정 된 최대 수로 생성 된 명명 된 시스템 세마포에 없는 경우 `initialCount` 및 `maximumCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-187">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="eab8d-188">명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 및 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-188">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="eab8d-189">사용 하 여 `createdNew` 시스템 세마포가 만들어졌는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="eab8d-189">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="eab8d-190">경우 `initialCount` 는 보다 작은 `maximumCount`, 및 `createdNew` 은 `true`, 마치 현재 스레드를 호출 하는 경우의 결과 같습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 뺀 `initialCount`) 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-190">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="eab8d-191">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 세마포가 만들어집니다는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-191">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="eab8d-192">이 경우 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-192">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="eab8d-193">명명 된 세마포에서 운영 체제 전체에 표시 되므로 프로세스 경계를 넘어 리소스 사용을 조정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-193">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-194">다음 코드 예제에서는 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-194">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="eab8d-195">이 예제에서는 5 개의 최대 개수 및 초기 카운트 2와 명명된 된 세마포를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-195">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="eab8d-196">즉, 세 항목에 대 한 생성자를 호출 하는 스레드를 예약 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-196">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="eab8d-197">경우 `createNew` 은 `false`, 프로그램을 세 번 호출 된 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-197">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="eab8d-198">따라서 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 두 번째 복사본은 차단에 대 한 세 번째 호출에서 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-198">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="eab8d-199">두 번째 차단을 해제 하려면 프로그램의 첫 번째 복사본에 있는 하나 이상의 항목을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-199">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-200">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-200">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="eab8d-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eab8d-202">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-202">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="eab8d-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-204">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-204">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="eab8d-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eab8d-207">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-207">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="eab8d-208">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-208">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="eab8d-209">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="eab8d-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="eab8d-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="eab8d-212">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-212">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="eab8d-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="eab8d-214">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-214">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="semaphoreSecurity">
          <span data-ttu-id="eab8d-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-217">이 생성자를 사용 하 여 다른 코드에서 세마포의 제어권 갖지 못하게를 만들 때 명명 된 시스템 세마포에 액세스 제어 보안을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-217">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-218">이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-218">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="eab8d-219">여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 나타내는 동일한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-219">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-220">명명된 된 시스템 세마포에 없는 경우 지정 된 액세스 제어 보안을 사용 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-220">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="eab8d-221">명명 된 세마포 있으면 지정 된 액세스 제어 보안은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-221">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eab8d-222">새로 만든에 대 한 모든 권한을 호출자에 게 <xref:System.Threading.Semaphore> 경우에도 개체 `semaphoreSecurity` 거부 없거나 현재 사용자에 게 일부 액세스 권한을 부여에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-222">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="eab8d-223">그러나 현재 사용자가 다른 <xref:System.Threading.Semaphore> 개체를 나타내는 동일한 명명 된 세마포를 사용 하 여 생성자 또는 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드를 Windows 액세스 제어 보안 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-223">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="eab8d-224">초기 카운트 및로 지정 된 최대 수로 생성 된 명명 된 시스템 세마포에 없는 경우 `initialCount` 및 `maximumCount`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-224">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="eab8d-225">명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 및 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-225">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="eab8d-226">사용 하 여 `createdNew` 매개 변수를이 생성자에 의해 시스템 세마포가 만들어졌는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-226">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="eab8d-227">경우 `initialCount` 는 보다 작은 `maximumCount`, 및 `createdNew` 은 `true`, 마치 현재 스레드를 호출 하는 경우의 결과 같습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 뺀 `initialCount`) 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-227">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="eab8d-228">지정 하는 경우 `null` 또는 빈 문자열을 `name`를 호출한 것 처럼 로컬 세마포가 만들어집니다는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-228">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="eab8d-229">이 경우 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-229">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="eab8d-230">명명 된 세마포에서 운영 체제 전체에 표시 되므로 프로세스 경계를 넘어 리소스 사용을 조정 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-230">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-231">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-231">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="eab8d-232">이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 세마포의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-232">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="eab8d-233">세마포가 없는 경우 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 고 2의 최대 수와 함께 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-233">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="eab8d-234">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-234">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="eab8d-235">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 세마포를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-235">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="eab8d-236">권한이 변경 된 후 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-236">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="eab8d-237">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-237">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-238">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-238">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="eab8d-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eab8d-240">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-240">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="eab8d-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-243">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-243">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="eab8d-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eab8d-245">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-245">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="eab8d-246">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-246">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="eab8d-247">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-247">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-248">Gets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-248">Gets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-250"><xref:System.Threading.Semaphore.GetAccessControl%2A> 메서드 플래그 (비트 OR 연산을 사용 하 여 결합)는 다음과 같은 조합을 사용 하 여 사용 권한을 검색할: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, 및 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-250">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="eab8d-251">사용자에 게 있어야 <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> 이 메서드와 세마포를 호출 하는 권한으로 연 해야 <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="eab8d-251">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="eab8d-252">로컬 세마포가에서 액세스 제어 보안은 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-252">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="eab8d-253">경우는 <xref:System.Threading.Semaphore> 이 메서드는 반환 개체가 명명된 된 시스템 세마포를 나타내지 않는는 <xref:System.Security.AccessControl.SemaphoreSecurity> 모든 사용자에 게 모든 권한을 부여 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-253">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-254">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-254">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="eab8d-255">이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 세마포의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-255">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-256">세마포가 없는 경우 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 고 2의 최대 수와 함께 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-256">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-257">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-257">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="eab8d-258">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 세마포를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-258">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="eab8d-259">사용 하 여 시스템 세마포에 대 한 액세스 제어 보안 가져온는 <xref:System.Threading.Semaphore.GetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-259">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="eab8d-260">권한이 변경 된 후 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-260">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="eab8d-261">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-261">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
          <span data-ttu-id="eab8d-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eab8d-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-265">Opens a specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-265">Opens a specified named semaphore, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eab8d-266">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-266">The name of the system semaphore to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-267">Opens the specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-267">Opens the specified named semaphore, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-268">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-268">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-269"><xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 지정 된 명명 된 세마포를 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-269">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="eab8d-270">시스템 세마포가 없는 경우이 메서드는 시스템 세마포를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-270">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="eab8d-271">이미 존재 하지 않을 때 시스템 세마포가 만들려는 중 하나를 사용는 <xref:System.Threading.Semaphore.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-271">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="eab8d-272">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 있지만 대표 반환 되는 개체가 동일한 명명 된 시스템 세마포 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-272">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-273">이 메서드 오버 로드 하는 것은 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-273">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="eab8d-274">지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 플래그 세마포를 입력 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.Semaphore.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-274">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-275">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-275">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="eab8d-276">이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 세마포의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-276">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-277">세마포가 없는 경우 세마포를 사용할 수 있는 권한이 현재 사용자 거부는 하지만 읽기 및 세마포에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 고 2의 최대 수와 함께 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-277">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-278">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="eab8d-279">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 세마포를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-279">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="eab8d-280">권한이 변경 된 후 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-280">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="eab8d-281">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-282">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-282">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="eab8d-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eab8d-284">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="eab8d-285">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-285">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-286">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-286">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eab8d-288">명명된 된 시스템 세마포를 열려고 비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-288">for calling unmanaged code to open a named system semaphore.</span>
          </span>
          <span data-ttu-id="eab8d-289">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-289">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="eab8d-290">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-290">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eab8d-291">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-291">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="eab8d-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-294">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-294">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-295">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 세마포를 입력 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.Semaphore.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-295">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="eab8d-296"><xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 기존의 명명 된 세마포를 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-296">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="eab8d-297">시스템 세마포가 없는 경우이 메서드는 시스템 세마포를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-297">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="eab8d-298">이미 존재 하지 않을 때 시스템 세마포가 만들려는 중 하나를 사용는 <xref:System.Threading.Semaphore.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-298">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="eab8d-299">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 있지만 대표 반환 되는 개체가 동일한 명명 된 시스템 세마포 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-299">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-300">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-300">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="eab8d-301">이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 세마포의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-301">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-302">세마포가 없는 경우 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 고 2의 최대 수와 함께 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-302">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-303">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-303">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="eab8d-304">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 세마포를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-304">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="eab8d-305">권한이 변경 된 후 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-305">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="eab8d-306">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-306">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-307">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-307">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="eab8d-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eab8d-309">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-309">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="eab8d-310">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-310">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-311">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-311">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="eab8d-313">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-313">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="eab8d-314">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-314">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="eab8d-315">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-315">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-316">Exits the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-316">Exits the semaphore.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-317">Exits the semaphore and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-317">Exits the semaphore and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-319">스레드는 일반적으로 사용 된 <xref:System.Threading.WaitHandle.WaitOne%2A> 종료 하려면이 메서드 오버 로드를 사용 하는 메서드를 일반적으로 고 세마포를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-319">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="eab8d-320">경우는 <xref:System.Threading.SemaphoreFullException> 에 의해 throw 되는 <xref:System.Threading.Semaphore.Release%2A> 메서드를 호출 하는 스레드에서 문제가 반드시 나타내지는지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-320">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="eab8d-321">다른 스레드의 프로그래밍 오류가 해당 스레드 횟수 보다 더 많이 입력 세마포를 종료 원인이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-321">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="eab8d-322">하는 경우 현재 <xref:System.Threading.Semaphore> 개체가 명명된 된 시스템 세마포를 나타내는 사용자 있어야 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한 및 세마포 열려 있어야와 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="eab8d-322">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-323">다음 코드 예제에서는 세 개의 최대 개수 및 0에 대 한 초기 카운트 세마포를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-323">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="eab8d-324">이 예제에서는 세마포를 기다리는 동안 차단 5 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-324">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="eab8d-325">주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 메서드 오버 로드 세마포 개수 세마포를 입력 하려면 3 개의 스레드를 허용 된 최대값을 늘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-325">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="eab8d-326">사용 하 여 각 스레드에 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 작업을 시뮬레이션 한 다음 호출을 대기 하는 메서드는 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드 세마포를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-326">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-327">세마포가 해제 될 때마다 이전 세마포 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-327">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="eab8d-328">콘솔 메시지 세마포 사용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-328">Console messages track semaphore use.</span></span> <span data-ttu-id="eab8d-329">출력을 보다 쉽게 읽을 수 있도록 각 스레드에 대 한 시뮬레이션 된 작업 간격이 약간 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-329">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="eab8d-330">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-330">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-331">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-331">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
          <span data-ttu-id="eab8d-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="eab8d-334">The number of times to exit the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-334">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-337">스레드가를 입력 한 세마포 여러 번 하는 경우이 메서드 오버 로드에는 전체 세마포 카운트를를 호출 하 여 복원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-337">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="eab8d-338">경우는 <xref:System.Threading.SemaphoreFullException> 에 의해 throw 되는 <xref:System.Threading.Semaphore.Release%2A> 메서드를 호출 하는 스레드에서 문제가 반드시 나타내지는지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-338">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="eab8d-339">다른 스레드의 프로그래밍 오류가 해당 스레드 횟수 보다 더 많이 입력 세마포를 종료 원인이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-339">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="eab8d-340">하는 경우 현재 <xref:System.Threading.Semaphore> 개체가 명명된 된 시스템 세마포를 나타내는 사용자 있어야 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한 및 세마포 열려 있어야와 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="eab8d-340">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-341">다음 코드 예제에서는 세 개의 최대 개수 및 0에 대 한 초기 카운트 세마포를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-341">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="eab8d-342">이 예제에서는 세마포를 기다리는 동안 차단 5 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-342">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="eab8d-343">주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 메서드 오버 로드 세마포 개수 세마포를 입력 하려면 3 개의 스레드를 허용 된 최대값을 늘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-343">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="eab8d-344">사용 하 여 각 스레드에 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 작업을 시뮬레이션 한 다음 호출을 대기 하는 메서드는 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드 세마포를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-344">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-345">세마포가 해제 될 때마다 이전 세마포 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-345">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="eab8d-346">콘솔 메시지 세마포 사용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-346">Console messages track semaphore use.</span></span> <span data-ttu-id="eab8d-347">출력을 보다 쉽게 읽을 수 있도록 각 스레드에 대 한 시뮬레이션 된 작업 간격이 약간 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-347">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eab8d-348">
            <paramref name="releaseCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-348">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="eab8d-349">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-349">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-350">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-350">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
          <span data-ttu-id="eab8d-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">
          <span data-ttu-id="eab8d-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-354">Sets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-354">Sets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-355">에 대해서만 액세스 제어 보안을 설정할 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-355">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="eab8d-356">사용자에 게 있어야 <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> 이 메서드와 세마포를 호출 하는 권한으로 연 해야 <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="eab8d-356">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eab8d-357">다음 코드 예제에서는 액세스 제어 보안을 사용 명명된 된 세마포의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-357">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="eab8d-358">이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 세마포의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-358">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-359">세마포가 없는 경우 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 고 2의 최대 수와 함께 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-359">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="eab8d-360">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-360">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="eab8d-361">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 가진 세마포를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-361">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="eab8d-362">사용 권한을 사용 하 여 변경 된 후의 <xref:System.Threading.Semaphore.SetAccessControl%2A> 메서드를 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-362">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="eab8d-363">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 사용 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-363">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eab8d-364">
            <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-364">
              <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
          <span data-ttu-id="eab8d-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="eab8d-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eab8d-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eab8d-369">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-369">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="eab8d-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="eab8d-371">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-371">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-373">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-373">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-374">명명 된 세마포가 없는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-374">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="eab8d-375">이미 존재 하지 않을 때 시스템 세마포가 만들려는 중 하나를 사용는 <xref:System.Threading.Semaphore.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-375">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="eab8d-376">대신이 메서드 오버 로드를 사용 하 여 명명 된 세마포 있는지 잘 모르는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 세마포 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-376">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="eab8d-377">이 메서드 오버 로드 하는 것은 <xref:System.Threading.Semaphore.TryOpenExisting%2A> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-377">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="eab8d-378">지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 플래그 세마포를 입력 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.Semaphore.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-378">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-379">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-379">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="eab8d-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eab8d-381">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-381">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-382">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-382">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eab8d-384">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-384">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="eab8d-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="eab8d-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="eab8d-387">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-387">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eab8d-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eab8d-389">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-389">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab8d-390">명명 된 세마포가 없는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-390">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="eab8d-391">이미 존재 하지 않을 때 시스템 세마포가 만들려는 중 하나를 사용는 <xref:System.Threading.Semaphore.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-391">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="eab8d-392">대신이 메서드 오버 로드를 사용 하 여 명명 된 세마포 있는지 잘 모르는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 세마포 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-392">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="eab8d-393">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 세마포를 입력 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.Semaphore.Release%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eab8d-393">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="eab8d-394">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 있지만 대표 반환 되는 개체가 동일한 명명 된 시스템 세마포 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eab8d-394">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eab8d-395">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-395">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="eab8d-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eab8d-397">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-397">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eab8d-398">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-398">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eab8d-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eab8d-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>