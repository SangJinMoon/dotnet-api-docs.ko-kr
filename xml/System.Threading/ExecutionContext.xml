<Type Name="ExecutionContext" FullName="System.Threading.ExecutionContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d11eb2e08ac5047a81064d0fe34fde568252e1d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529527" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExecutionContext : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ExecutionContext extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionContext&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionContext sealed : IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d6893-101">현재 스레드의 실행 컨텍스트를 관리합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d6893-101">Manages the execution context for the current thread.</span>
      </span>
      <span data-ttu-id="d6893-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d6893-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-103"><xref:System.Threading.ExecutionContext> 클래스는 실행의 논리적 스레드와 관련 된 모든 정보에 대 한 단일 컨테이너를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-103">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="d6893-104">보안 컨텍스트, 호출 컨텍스트 및 동기화 컨텍스트가이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-104">This includes security context, call context, and synchronization context.</span></span>  
  
 <span data-ttu-id="d6893-105"><xref:System.Threading.ExecutionContext> 클래스 캡처하고 비동기 지점 사용자 정의 간에이 컨텍스트를 전송 하는 사용자 코드에 대 한 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-105">The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points.</span></span> <span data-ttu-id="d6893-106">공용 언어 런타임을 사용 하면는 <xref:System.Threading.ExecutionContext> 관리 되는 프로세스 내에서 비동기 지점 런타임 정의 간에 일관 되 게 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-106">The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.</span></span>  
  
 <span data-ttu-id="d6893-107">실행 컨텍스트는 COM 아파트는 관리 되는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-107">An execution context is the managed equivalent of a COM apartment.</span></span> <span data-ttu-id="d6893-108">응용 프로그램 도메인 내에서 전체 실행 컨텍스트가 스레드가 전송 될 때마다 전송 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-108">Within an application domain, the entire execution context must be transferred whenever a thread is transferred.</span></span> <span data-ttu-id="d6893-109">전송 하는 동안 이러한 상황이 발생는 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 방법, 대부분의 스레드 풀 작업 및 Windows Forms는 Windows 메시지 펌프를 통해 마샬링할 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-109">This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump.</span></span> <span data-ttu-id="d6893-110">안전 하지 않은 스레드 풀 작업에서 발생 하지 않습니다 (같은 <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> 메서드), 압축된 스택을 전송 하지 않는 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-110">It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack.</span></span> <span data-ttu-id="d6893-111">압축된 된 스택을 흐름 곳 마다 관리 되는 보안 주체, 동기화, 로캘 및 사용자 컨텍스트 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-111">Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow.</span></span> <span data-ttu-id="d6893-112"><xref:System.Threading.ExecutionContext> 클래스를 제공는 <xref:System.Threading.ExecutionContext.Capture%2A> 및 <xref:System.Threading.ExecutionContext.CreateCopy%2A> 실행 컨텍스트를 가져오는 메서드를 및 <xref:System.Threading.ExecutionContext.Run%2A> 메서드 현재 스레드에 대 한 실행 컨텍스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-112">The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.</span></span>  
  
 <span data-ttu-id="d6893-113"><xref:System.Threading.ExecutionContext> 연결 된 스레드와 다른 스레드에서 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-113">An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread.</span></span> <span data-ttu-id="d6893-114">이렇게 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-114">Attempting to do so will result in an exception being thrown.</span></span> <span data-ttu-id="d6893-115">전파는 <xref:System.Threading.ExecutionContext> 다른 한 스레드에서 복사본을 만듭니다는 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-115">To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="d6893-116">내부적으로 <xref:System.Threading.ExecutionContext> 연관 된 모든 데이터를 저장 하는 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-116">Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</span></span> <span data-ttu-id="d6893-117">이 통해는 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 때 전파 되는 데이터는 <xref:System.Threading.ExecutionContext> 복사 되 고 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-117">This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Threading.ExecutionContext Capture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.ExecutionContext Capture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ExecutionContext ^ Capture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-118">현재 스레드에서 실행 컨텍스트를 캡처합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-118">Captures the execution context from the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d6893-119">현재 스레드의 실행 컨텍스트를 나타내는 <see cref="T:System.Threading.ExecutionContext" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-119">An <see cref="T:System.Threading.ExecutionContext" /> object representing the execution context for the current thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-120">로 캡처된 실행 컨텍스트를 사용할 수 있습니다는 `executionContext` 에 대 한 매개 변수는 <xref:System.Threading.ExecutionContext.Run%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d6893-120">The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.ExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCopy () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ExecutionContext ^ CreateCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-121">현재 실행 컨텍스트의 복사본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-121">Creates a copy of the current execution context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d6893-122">현재 실행 컨텍스트를 나타내는 <see cref="T:System.Threading.ExecutionContext" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-122">An <see cref="T:System.Threading.ExecutionContext" /> object representing the current execution context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-123">이 메서드는 한 스레드에서 다른 실행 컨텍스트를 전파 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-123">This method is useful for propagating an execution context from one thread to another.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d6893-124">이 컨텍스트가 사용되기 때문에 복사할 수 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-124">This context cannot be copied because it is used.</span>
          </span>
          <span data-ttu-id="d6893-125">새로 캡처한 컨텍스트만 복사할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-125">Only newly captured contexts can be copied.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-126">
            <see cref="T:System.Threading.ExecutionContext" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-126">Releases all resources used by the current instance of the <see cref="T:System.Threading.ExecutionContext" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-127">`Dispose` 사용을 마치면 <xref:System.Threading.ExecutionContext>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-127">Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="d6893-128">`Dispose` 메서드를 사용하면 <xref:System.Threading.ExecutionContext>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-128">The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state.</span></span> <span data-ttu-id="d6893-129">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Threading.ExecutionContext> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Threading.ExecutionContext> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-129">After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="d6893-130">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-130">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d6893-131">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Threading.ExecutionContext>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="d6893-131">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="d6893-132">이렇게 하지 않으면 가비지 수집기가 <xref:System.Threading.ExecutionContext> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-132">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="d6893-133">serialization 정보로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-133">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d6893-134">serialization의 대상 컨텍스트를 나타내는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-134">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure representing the destination context of the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d6893-135">현재 실행 컨텍스트의 인스턴스를 다시 만드는 데 필요한 논리 컨텍스트 정보를 사용하여 지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-135">Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of the current execution context.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-136"><xref:System.Threading.ExecutionContext.GetObjectData%2A> 설정 하는 <xref:System.Runtime.Serialization.SerializationInfo> 논리적 컨텍스트 정보를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-136"><xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information.</span></span> <span data-ttu-id="d6893-137">역직렬화 하는 동안 실행 컨텍스트 개체를 다시 구성 됩니다는 <xref:System.Runtime.Serialization.SerializationInfo> 스트림을 통해 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-137">During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.</span></span>  
  
 <span data-ttu-id="d6893-138">자세한 내용은 <xref:System.Runtime.Serialization.SerializationInfo>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="d6893-138">For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d6893-139">
            <paramref name="info" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-139">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d6893-140">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-140">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d6893-141">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-141">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.IsFlowSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFlowSuppressed () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFlowSuppressed();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-142">실행 컨텍스트의 흐름이 현재 억제되는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-142">Indicates whether the flow of the execution context is currently suppressed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d6893-143">해당 흐름이 억제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-143">
              <see langword="true" /> if the flow is suppressed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-144"><xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> 메서드는 인프라 구성 요소 확인 하는 데를 전송 하는지 여부는 <xref:System.Threading.ExecutionContext> 비동기 작업 중입니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-144">The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFlow">
      <MemberSignature Language="C#" Value="public static void RestoreFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.RestoreFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RestoreFlow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RestoreFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-145">여러 비동기 스레드 사이의 실행 컨텍스트 흐름을 복원합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-145">Restores the flow of the execution context across asynchronous threads.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-146"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> 이전 결과 되돌립니다 <xref:System.Threading.ExecutionContext.SuppressFlow%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-146"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.</span></span>  
  
 <span data-ttu-id="d6893-147">이 메서드는 <xref:System.Threading.AsyncFlowControl.Undo%2A> 의 메서드는 <xref:System.Threading.AsyncFlowControl> 에서 반환 된 구조는 <xref:System.Threading.ExecutionContext.SuppressFlow%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d6893-147">This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.</span></span>  <span data-ttu-id="d6893-148">사용 해야는 <xref:System.Threading.AsyncFlowControl.Undo%2A> 없습니다 실행 컨텍스트의 흐름을 복원 하는 메서드는 <xref:System.Threading.ExecutionContext.RestoreFlow%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="d6893-148">You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d6893-149">현재 억제되어 있지 않아 컨텍스트 흐름을 복원할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-149">The context flow cannot be restored because it is not being suppressed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Threading.ExecutionContext executionContext, class System.Threading.ContextCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Threading::ExecutionContext ^ executionContext, System::Threading::ContextCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Threading.ExecutionContext" />
        <Parameter Name="callback" Type="System.Threading.ContextCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="executionContext">
          <span data-ttu-id="d6893-150">설정할 <see cref="T:System.Threading.ExecutionContext" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-150">The <see cref="T:System.Threading.ExecutionContext" /> to set.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="d6893-151">제공된 실행 컨텍스트에서 실행할 메서드를 나타내는 <see cref="T:System.Threading.ContextCallback" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-151">A <see cref="T:System.Threading.ContextCallback" /> delegate that represents the method to be run in the provided execution context.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="d6893-152">콜백 메서드로 전달할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-152">The object to pass to the callback method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d6893-153">현재 스레드의 지정된 실행 컨텍스트에서 메서드를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-153">Runs a method in a specified execution context on the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-154">메서드가 완료 될 때 실행 컨텍스트를 이전 상태로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-154">The execution context is returned to its previous state when the method completes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d6893-155">
            <paramref name="executionContext" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-155">
              <paramref name="executionContext" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d6893-156">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-156">-or-</span>
          </span>
          <span data-ttu-id="d6893-157">캡처 작업을 통해 <paramref name="executionContext" />를 가져오지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-157">
              <paramref name="executionContext" /> was not acquired through a capture operation.</span>
          </span>
          <span data-ttu-id="d6893-158">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-158">-or-</span>
          </span>
          <span data-ttu-id="d6893-159">
            <paramref name="executionContext" />가 이미 <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> 호출의 인수로 사용된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-159">
              <paramref name="executionContext" /> has already been used as the argument to a <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> call.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d6893-160">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-160">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d6893-161">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-161">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlow">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.SuppressFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressFlow () As AsyncFlowControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::AsyncFlowControl SuppressFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6893-162">여러 비동기 스레드 사이의 실행 컨텍스트 흐름을 억제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-162">Suppresses the flow of the execution context across asynchronous threads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d6893-163">흐름을 복원하기 위한 <see cref="T:System.Threading.AsyncFlowControl" /> 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-163">An <see cref="T:System.Threading.AsyncFlowControl" /> structure for restoring the flow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6893-164">이 메서드를 사용 하 여 흐름을 표시 하지 않으려면는 <xref:System.Threading.ExecutionContext> 현재 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-164">Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.</span></span>  
  
 <span data-ttu-id="d6893-165">사용 해야 합니다는 <xref:System.Threading.AsyncFlowControl.Undo%2A> 메서드 반환 된 <xref:System.Threading.AsyncFlowControl> 의 흐름을 복원 하는 구조는 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-165">You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="d6893-166">이 메서드는로 보호 되는 <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> 에 대 한 <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="d6893-166">This method is protected with a <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> for <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> permission.</span></span> <span data-ttu-id="d6893-167">완전히 신뢰할 수 있는 구성 요소 흐름을 표시 하지 않으려면이 메서드를 호출할 수는 <xref:System.Threading.ExecutionContext> 비동기 호출 중입니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-167">A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls.</span></span> <span data-ttu-id="d6893-168">흐름이 억제 하는 동안는 <xref:System.Security.SecurityContext.Capture%2A> 메서드 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="d6893-168">While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d6893-169">컨텍스트 흐름이 이미 억제되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-169">The context flow is already suppressed.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d6893-170">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-170">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d6893-171">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6893-171">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.AsyncFlowControl" />
      </Docs>
    </Member>
  </Members>
</Type>