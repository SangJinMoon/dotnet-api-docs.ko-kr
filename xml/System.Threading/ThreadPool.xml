<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPool.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac550de54f2e0cde589b4af1c454e85fed39c9f40df.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50de54f2e0cde589b4af1c454e85fed39c9f40df</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">작업 실행, 작업 항목 게시, 비동기 I/O 처리, 다른 스레드 대신 기다리기 및 타이머 처리에 사용할 수 있는 스레드 풀을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">대부분의 응용 프로그램에 상당한 시간 대기 상태에서 발생할 이벤트를 대기 중이거나 보내는 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">다른 스레드에서 대기 상태에이 설정을 선택 해제 정기적으로 상태 정보를 업데이트 하거나 변경 되었는지 폴링하는 데에 입력할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">스레드 풀을 사용 하면 시스템에 의해 관리 되는 작업자 스레드 풀과 응용 프로그램을 제공 하 여 스레드를 보다 효율적으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Examples of operations that use thread pool threads include the following:</source>
          <target state="translated">스레드 풀 스레드를 사용 하는 작업의 예는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">만들 때 한 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> 는 작업은 스레드 풀 스레드에서 실행 되도록 예약 하는 기본적으로 몇 가지 작업을 비동기적으로 수행 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Asynchronous timers use the thread pool.</source>
          <target state="translated">비동기 타이머 스레드 풀을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Thread pool threads execute callbacks from the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class and raise events from the <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">스레드 풀 스레드에서 콜백을 실행는 <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> 클래스에서 이벤트 발생 및는 <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">등록 된 대기 핸들을 사용 하는 경우는 시스템 스레드가 대기 핸들의 상태를 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">스레드 풀의 작업자 스레드가 대기 작업이 완료 되 면 해당 콜백 함수를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 메서드는 스레드 풀 스레드에서 실행에 대 한 메서드를 큐에 대기 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You do this by passing the method a <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate.</source>
          <target state="translated">메서드가 전달 하 여이 작업을 수행는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The delegate has the signature</source>
          <target state="translated">대리자에 서명</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">여기서 <ph id="ph1">`state`</ph> 대리자가 사용할 데이터를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The actual data can be passed to the delegate by calling the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">호출 하 여 실제 데이터를 대리자에 전달할 수 있습니다는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The threads in the managed thread pool are background threads.</source>
          <target state="translated">관리 되는 스레드 풀의 스레드는 백그라운드 스레드입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>That is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> properties are <ph id="ph2">`true`</ph>.</source>
          <target state="translated">즉, 해당 <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This means that a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">즉, 한 <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드 모든 포그라운드 스레드가 종료 된 후 실행 중인 응용 프로그램을 유지 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
          <target state="translated">스레드 풀 스레드를 다시 때로 표시 된 필드 또는 스레드 로컬 저장소에서 데이터는 지우지 않습니다는 <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">메서드는 스레드 로컬 저장소를 검사 하 여 또는 있는 필드가 때으로 표시 된 따라서는 <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> 특성을 찾으면 값 손실 될 수를 통해 스레드 풀 스레드를 사용 하 여 이전 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">스레드 풀에 대기 작업과 관련 되지 않은 작업 항목을 대기 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>To request that a work item be handled by a thread in the thread pool, call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">호출 스레드 풀에 있는 스레드에서 작업 항목을 처리 하도록 요청 하는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">이 메서드는 메서드 또는 스레드 풀에서 선택 된 스레드에서 호출 될 대리자에 대 한 참조를 매개 변수로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">이 큐에 대기 되었습니다 후 작업 항목을 취소 하는 방법이 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">타이머 큐 타이머 및 등록 된 대기 작업 스레드 풀을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">콜백 함수는 스레드 풀에 대기 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is one thread pool per process.</source>
          <target state="translated">프로세스당 하나의 스레드 풀이 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>부터 프로세스에 대한 스레드 풀의 기본 크기는 가상 주소 공간의 크기와 같은 여러 요인에 따라 달라집니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
          <target state="translated">프로세스에서 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> 메서드를 호출하여 스레드 수를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The number of threads in the thread pool can be changed by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> method.</source>
          <target state="translated">사용 하 여 스레드 풀의 스레드 수를 변경할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">각 스레드가 기본 스택 크기를 사용 하 고 기본 우선 순위에서 실행 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph1">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">.NET Framework를 호스트 하는 관리 되지 않는 코드를 사용 하 여 스레드 풀의 크기를 변경할 수는 <ph id="ph1">`CorSetMaxThreads`</ph> mscoree.h 파일에 정의 된 함수입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">최소에 도달 하면 스레드 풀 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>부터는 스레드 풀이 시간 단위당 완료되는 작업 수로 정의된 처리량을 최적화하기 위해 작업자 스레드를 만들고 소멸시킵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> 메서드를 사용하여 이러한 최소값을 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of threads.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> 스레드의 최소 수를 늘리려면 메서드.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">그러나 이러한 값을 불필요하게 늘리면 성능 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">너무 많은 작업이 동시에 시작되는 경우 모두 속도가 느린 것처럼 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">대부분의 경우 스레드 풀은 고유한 스레드 할당 알고리즘에서 성능이 향상됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In the following example, the main application thread  queues a method named <ph id="ph1">`ThreadProc`</ph> to execute on a thread pool thread, sleeps for one second, and then exits.</source>
          <target state="translated">다음 예제에서는 기본 응용 프로그램 스레드 대기 라는 메서드가 <ph id="ph1">`ThreadProc`</ph> 에서 대기한 1 초 한 다음 종료 됩니다에 대 한 스레드 풀 스레드를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The <ph id="ph1">`ThreadProc`</ph> method simply displays a message.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> 메서드 단순히 메시지를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If you comment out the call to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, the main thread exits before         method runs on the thread pool thread.</source>
          <target state="translated">호출을 주석 처리 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> 스레드 풀 스레드에서 메서드는 실행 전에 메서드를 주 스레드를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</source>
          <target state="translated">스레드 풀 응용 프로그램을 실행 하는 경우 모든 포그라운드 스레드가 종료 된 것을 유지 하지 않는 백그라운드 스레드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>(This         is a simple example of a race condition.)</source>
          <target state="translated">(이 간단한 예제는 경합 상태입니다.)</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>에 운영 체제 핸들을 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that holds the handle.</source>
          <target state="translated">핸들을 보유하는 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>에 운영 체제 핸들을 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">핸들이 바인딩되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> that holds the operating system handle.</source>
          <target state="translated">운영 체제 핸들을 보유하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>에 운영 체제 핸들을 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">핸들이 바인딩되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, which derives from the abstract <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">`osHandle`</ph> 매개 변수 이어야 합니다는 <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, 추상에서 파생 되는 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available worker threads.</source>
          <target state="translated">사용 가능한 작업자 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">사용 가능한 비동기 I/O 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> method, and the number currently active.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> 메서드에서 반환하는 최대 스레드 풀 스레드 수와 현재 활성 상태인 스레드 수의 차이를 검색합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> 에 지정 된 변수를 반환 <ph id="ph2">`workerThreads`</ph> 시작할 수 있는 추가 작업자 스레드 및 지정 된 변수의 개수가 <ph id="ph3">`completionPortThreads`</ph> 포함 될 수 있는 추가 비동기 I/O 스레드 수 시작 되었습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">사용 가능한 스레드가 없는 경우 스레드 풀 스레드가 사용 가능 해질 때까지 추가 스레드 풀 요청 큐에 대기 중인 상태로 유지 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The following example displays the number of worker threads and I/O threads available when a simple app is started.</source>
          <target state="translated">다음 예제에서는 간단한 앱을 시작할 때 작업자 스레드 수 및 사용할 수 있는 I/O 스레드 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">스레드 풀에 있는 최대 작업자 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 검색합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> 에 지정 된 변수를 반환 <ph id="ph2">`workerThreads`</ph> 최대 수의 스레드 풀에서 허용 된 작업자 스레드 및 지정 된 변수를 포함 <ph id="ph3">`completionPortThreads`</ph> 에 허용 되는 비동기 I/O 스레드 최대 수를 포함 된 스레드 풀입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> 메서드를 지정된 된 시간에 실제 스레드 풀의 스레드 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> 스레드 풀의 최대 작업자 스레드 및 비동기 I/O 스레드 수를 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">시스템 메모리 내에 허용 스레드 풀 요청을 큐 대기 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">스레드 풀 스레드 보다 더 많은 요청이 없을 경우 스레드 풀 스레드가 사용 가능 해질 때까지 추가 요청은 큐에 대기 중인 상태로 유지 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</source>
          <target state="translated">다음 코드 예제에는 최대 및 사용할 수 있는 스레드 풀의 스레드 수의 개수를 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A work item is queued that uses <ph id="ph1">`FileStream`</ph> to asynchronously write to two files.</source>
          <target state="translated">사용 하 여 작업 항목 큐 <ph id="ph1">`FileStream`</ph> 비동기적으로 두 개의 파일에 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The callback methods are timed to overlap.</source>
          <target state="translated">콜백 메서드는 겹쳐 시간이 초과 되었습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</source>
          <target state="translated">작업자 스레드가 작업 항목을 처리 하 고 완료 포트 스레드 하나 또는 두 개의 속도 및 컴퓨터의 프로세서 수에 따라 쓰기 작업을 처리 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 검색합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">기본적으로 시스템에서 프로세서의 수는 최소 스레드 수 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">최소값에 도달 하면 스레드 풀이 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, 스레드 풀 스레드 하기 위해 만들고 삭제은 시간 단위당 완료 되는 작업의 수로 정의 된 처리량을 최적화 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">다음 예제에서는 최소 작업자 스레드 수를 4 개로 설정 하 고 비동기 I/O 완료 스레드의 최소 수에 대 한 원래 값을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Queues a method for execution.</source>
          <target state="translated">실행을 위해 메서드를 큐에 대기시킵니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the method to be executed.</source>
          <target state="translated">실행할 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Queues a method for execution.</source>
          <target state="translated">실행을 위해 메서드를 큐에 대기시킵니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">메서드가 성공적으로 큐에 대기되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 작업 항목을 큐에 대기할 수 없으면 <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload that accepts an object containing the necessary data.</source>
          <target state="translated">메서드가 정의 된 또는 사용할 수는 클래스의 인스턴스 필드에서 대기 하는 메서드에서 요구 하는 데이터를 배치할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> 필요한 데이터를 포함 하는 개체를 받아들이는 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 사용자를 생략할 수는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 생성자 및 사용할은 <ph id="ph2">`AddressOf`</ph> 콜백 메서드를 전달 하는 경우 연산자 <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0에에서는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> method overload to queue a task, which is represented by the <ph id="ph2">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> 요소로 표시 되는 작업을 큐에 대기 메서드 오버 로드는 <ph id="ph2">`ThreadProc`</ph> 스레드를 사용할 수 있게 되는 때 실행할 메서드입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">이 오버 로드를 가진 없음 작업 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">따라서 사용할 수 있는 정보는 <ph id="ph1">`ThreadProc`</ph> 메서드는 메서드가 속한 개체에 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> representing the method to execute.</source>
          <target state="translated">실행할 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">메서드에서 사용할 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">실행을 위해 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">메서드가 성공적으로 큐에 대기되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 작업 항목을 큐에 대기할 수 없으면 <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">콜백 메서드는 복잡 한 데이터를 필요한 경우 데이터를 포함 하는 클래스를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 사용자를 생략할 수는 <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> 생성자 및 사용할은 <ph id="ph2">`AddressOf`</ph> 콜백 메서드를 전달 하는 경우 연산자 <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0에에서는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The following example shows how to create an object that contains task information.</source>
          <target state="translated">다음 예제에서는 작업 정보를 포함 하는 개체를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">또한 실행을 위해 큐에 대기 된 작업에 스레드 풀에서 해당 개체를 전달 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate that is waiting for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 있는 32비트 정수를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">기본 핸들을 캡슐화하는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">지정된 된 개체가 신호를 받은 상태입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">시간 제한 간격이 경과 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드는 지정된 된 개체의 현재 상태를 확인 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">경우는 <ph id="ph1">`timeOutInterval`</ph> 매개 변수가 0 (영) 및 <ph id="ph2">`executeOnlyOnce`</ph> 매개 변수는 <ph id="ph3">`false`</ph>, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> 된 1의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">대기 작업을 취소 하려면 호출 된 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Win32을 사용 하 여 대기 스레드에서 <ph id="ph1">`WaitForMultipleObjects`</ph> 함수 등록 된 대기 작업을 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, Win32를 사용 하 여 핸들을 복제 해야 <ph id="ph2">`DuplicateHandle`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">예를 들어 세마포 개수는 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">대리자에 전달된 개체입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">기본 핸들을 캡슐화하는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">지정된 된 개체가 신호를 받은 상태입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">시간 제한 간격이 경과 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드는 지정된 된 개체의 현재 상태를 확인 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">경우는 <ph id="ph1">`timeOutInterval`</ph> 매개 변수가 0 (영) 및 <ph id="ph2">`executeOnlyOnce`</ph> 매개 변수는 <ph id="ph3">`false`</ph>, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> 된 1의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">대기 작업을 취소 하려면 호출 된 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Win32을 사용 하 여 대기 스레드에서 <ph id="ph1">`WaitForMultipleObjects`</ph> 함수 등록 된 대기 작업을 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, Win32를 사용 하 여 핸들을 복제 해야 <ph id="ph2">`DuplicateHandle`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">예를 들어 세마포 개수는 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">대리자에 전달된 개체입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>으로 나타낸 제한 시간입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>시간 제한<ept id="p1">&lt;/c&gt;</ept>이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>시간 제한<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">제한 시간에 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 값을 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated">기본 핸들을 캡슐화하는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">지정된 된 개체가 신호를 받은 상태입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">시간 제한 간격이 경과 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드는 지정된 된 개체의 현재 상태를 확인 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">경우는 <ph id="ph1">`timeOutInterval`</ph> 매개 변수가 0 (영) 및 <ph id="ph2">`executeOnlyOnce`</ph> 매개 변수는 <ph id="ph3">`false`</ph>, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> 된 1의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">대기 작업을 취소 하려면 호출 된 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Win32을 사용 하 여 대기 스레드에서 <ph id="ph1">`WaitForMultipleObjects`</ph> 함수 등록 된 대기 작업을 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, Win32를 사용 하 여 핸들을 복제 해야 <ph id="ph2">`DuplicateHandle`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">예를 들어 세마포 개수는 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">대리자에 전달된 개체입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that can be used to cancel the registered wait operation.</source>
          <target state="translated">등록된 대기 작업을 취소하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">지정된 된 개체가 신호를 받은 상태입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">시간 제한 간격이 경과 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드는 지정된 된 개체의 현재 상태를 확인 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">경우는 <ph id="ph1">`timeOutInterval`</ph> 매개 변수가 0 (영) 및 <ph id="ph2">`executeOnlyOnce`</ph> 매개 변수는 <ph id="ph3">`false`</ph>, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> 된 1의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">대기 작업을 취소 하려면 호출 된 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Win32을 사용 하 여 대기 스레드에서 <ph id="ph1">`WaitForMultipleObjects`</ph> 함수 등록 된 대기 작업을 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, Win32를 사용 하 여 핸들을 복제 해야 <ph id="ph2">`DuplicateHandle`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">예를 들어 세마포 개수는 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">이전 버전에서 주 정보를 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 지정 된 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">이 예제에서는 콜백 메서드는 <ph id="ph1">`WaitProc`</ph>, 대기 핸들은 및는 <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">이 예제에서는 정의 <ph id="ph1">`TaskInfo`</ph> 실행 될 때 콜백에 전달 되는 정보를 보관 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">`TaskInfo`</ph> 개체를 문자열 데이터를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 에서 반환 하는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드에 할당 된는 <ph id="ph3">`Handle`</ph> 필드는 <ph id="ph4">`TaskInfo`</ph> 개체 콜백 메서드는에 액세스할 수 있도록는 <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">지정 외에도 <ph id="ph1">`TaskInfo`</ph> 콜백 메서드를 호출에 전달 하는 개체와는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드 지정는 <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 에 대 한 작업에서 대기 하는 <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 를 나타내는 대리자는 <ph id="ph5">`WaitProc`</ph> 콜백 메서드는 1 초 시간 제한 간격 및 여러 콜백 발생 합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">때 신호를 주 스레드는 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 메서드를는 <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> 대리자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드 테스트 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 시간 초과가 발생 한 것인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">대기 핸들에 신호가 전달 되어 콜백이 호출 되는 경우는 <ph id="ph1">`WaitProc`</ph> 메서드 등록을 취소는 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, 추가 콜백을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">시간 제한의 경우 작업이 계속 대기 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">스레드 풀에 있는 최대 작업자 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 설정합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">성공적으로 변경되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">설정할 수 없습니다 최대 작업자 스레드 또는 I/O 완료 스레드 번호를 컴퓨터에서 프로세서 개수 보다 작은 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine how many processors are present, retrieve the value of the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">프로세서를 사용할 수 있는지를 확인 하려면 값을 검색 된 <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">또한 최대 작업자 스레드 또는 작업자 스레드의 최소 해당 번호 보다 작은 수로 I/O 완료 스레드 또는 I/O 완료 스레드 수를 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine the minimum thread pool size,  call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method.</source>
          <target state="translated">개의 최소 스레드 풀 크기를 결정 하려면 호출 된 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">공용 언어 런타임을 호스트 되는 경우 인터넷 정보 서비스 (IIS) 또는 SQL Server의 호스트 수 제한 하거나 스레드 풀 크기를 변경 하지 못하게 합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">스레드 풀에서 스레드의 최대 수를 변경 하는 경우에 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">코드 향상 될 수 있습니다 하다가 변경에는 사용할 코드 라이브러리를에 좋지 않은 영향을 생길 수 있습니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">스레드 풀 크기를 너무 크게 설정 하면 성능 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">너무 많은 스레드를 동시에를 실행 하는 경우 전환 하는 작업이 오버 헤드가 중요 한 요인이 있습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">스레드를 제어 하는 기능입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">권한 값: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">스레드 풀에서 필요할 때 만드는 비동기 I/O 스레드의 최소 개수입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 설정합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">성공적으로 변경되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">최소값에 도달 하면 스레드 풀이 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, 스레드 풀 스레드 하기 위해 만들고 삭제은 시간 단위당 완료 되는 작업의 수로 정의 된 처리량을 최적화 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> returns <ph id="ph3">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">음수 또는 활성 스레드 풀 스레드의 최대 개수 보다 큰 숫자를 지정 하면 (사용 하 여 가져온 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph> 최소 값 중 하나를 변경 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">기본적으로 시스템에서 프로세서의 수는 최소 스레드 수 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number ofthreads.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> 최소 숫자 ofthreads 증가 메서드.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">그러나 이러한 값을 불필요하게 늘리면 성능 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">너무 많은 작업이 동시에 시작되는 경우 모두 속도가 느린 것처럼 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">대부분의 경우 스레드 풀 스레드를 할당 하기 위한 고유한 알고리즘 더 잘 수행 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">최소 프로세서 수가 성능이 저하 될 수 있는 보다 작은 값으로 줄입니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">다음 예제에서는 최소 작업자 스레드 수를 4 개로 설정 하 고 비동기 I/O 완료 스레드의 최소 수에 대 한 원래 값을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">스레드를 제어 하는 기능입니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">권한 값: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to queue.</source>
          <target state="translated">큐에 대기시킬 <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">실행할 중첩된 I/O 작업을 큐에 대기시킵니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation was successfully queued to an I/O completion port; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">작업이 I/O 완료 포트 큐에 성공적으로 대기되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>For information about using native Win32 overlapped I/O, see the <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and the <ph id="ph3">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">네이티브 Win32를 사용 하는 방법은 겹치면 I/O에 대 한 참조는 <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> 구조, 및 <ph id="ph3">`OVERLAPPED`</ph> Win32 플랫폼 SDK에는 구조입니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> 메서드 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출되는 대리자를 나타내는 <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">스레드 풀에서 제공할 때 대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">지정된 대리자를 스레드 풀에 대기시키지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method succeeds; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated">메서드가 성공하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 작업 항목을 큐에 대기할 수 없으면 <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph>이 발생합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">메모리가 부족한 경우</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The work item could not be queued.</source>
          <target state="translated">작업 항목을 큐에 대기할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>를 기다리도록  대리자를 등록하지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 있는 32비트 정수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">등록된 대기 작업을 취소하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">등록된 대기 작업을 취소하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>으로 나타낸 제한 시간입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>시간 제한<ept id="p1">&lt;/c&gt;</ept>이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>시간 제한<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out. This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">제한 시간에 <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 값을 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">등록된 대기 작업을 취소하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">등록할 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>가 아닌 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 신호를 받으면 호출할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">대리자에 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 대리자를 호출한 후 스레드가 <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> 매개 변수를 더 이상 기다리지 않음을 나타내고 <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 기다리는 대리자를 등록합니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">등록된 대기 작업을 취소하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> 실수로 보안 문제가 열 수 있습니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> 에 대 한 <ph id="ph2">`waitObject`</ph> 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">완료 되 면 사용 하 여는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> 이 메서드에서 반환 되는, 호출 해당 <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">항상 호출 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 경우에 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">`executeOnlyOnce`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>