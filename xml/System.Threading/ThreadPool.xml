<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68b7762e25c13529637c3ed6d542d63fee277f04" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31911352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7d7be-101">작업 실행, 작업 항목 게시, 비동기 I/O 처리, 다른 스레드 대신 기다리기 및 타이머 처리에 사용할 수 있는 스레드 풀을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7d7be-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-102">대부분의 응용 프로그램에 상당한 시간 대기 상태에서 발생할 이벤트를 대기 중이거나 보내는 스레드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="7d7be-103">다른 스레드에서 대기 상태에이 설정을 선택 해제 정기적으로 상태 정보를 업데이트 하거나 변경 되었는지 폴링하는 데에 입력할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="7d7be-104">스레드 풀을 사용 하면 시스템에 의해 관리 되는 작업자 스레드 풀과 응용 프로그램을 제공 하 여 스레드를 보다 효율적으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="7d7be-105">스레드 풀 스레드를 사용 하는 작업의 예는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="7d7be-106">만들 때 한 <xref:System.Threading.Tasks.Task> 또는 <xref:System.Threading.Tasks.Task%601> 는 작업은 스레드 풀 스레드에서 실행 되도록 예약 하는 기본적으로 몇 가지 작업을 비동기적으로 수행 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="7d7be-107">비동기 타이머 스레드 풀을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="7d7be-108">스레드 풀 스레드에서 콜백을 실행는 <xref:System.Threading.Timer?displayProperty=nameWithType> 클래스에서 이벤트 발생 및는 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="7d7be-109">등록 된 대기 핸들을 사용 하는 경우는 시스템 스레드가 대기 핸들의 상태를 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="7d7be-110">스레드 풀의 작업자 스레드가 대기 작업이 완료 되 면 해당 콜백 함수를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="7d7be-111">호출 하는 경우는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 메서드는 스레드 풀 스레드에서 실행에 대 한 메서드를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="7d7be-112">메서드가 전달 하 여이 작업을 수행는 <xref:System.Threading.WaitCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="7d7be-113">대리자에 서명</span><span class="sxs-lookup"><span data-stu-id="7d7be-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="7d7be-114">여기서 `state` 대리자가 사용할 데이터를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="7d7be-115">호출 하 여 실제 데이터를 대리자에 전달할 수 있습니다는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-116">관리 되는 스레드 풀의 스레드는 백그라운드 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="7d7be-117">즉, 해당 <xref:System.Threading.Thread.IsBackground%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="7d7be-118">즉, 한 <xref:System.Threading.ThreadPool> 스레드 모든 포그라운드 스레드가 종료 된 후 실행 중인 응용 프로그램을 유지 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d7be-119">스레드 풀 스레드를 다시 때로 표시 된 필드 또는 스레드 로컬 저장소에서 데이터는 지우지 않습니다는 <xref:System.ThreadStaticAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="7d7be-120">메서드는 스레드 로컬 저장소를 검사 하 여 또는 있는 필드가 때으로 표시 된 따라서는 <xref:System.ThreadStaticAttribute> 특성을 찾으면 값 손실 될 수를 통해 스레드 풀 스레드를 사용 하 여 이전 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="7d7be-121">스레드 풀에 대기 작업과 관련 되지 않은 작업 항목을 대기 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="7d7be-122">호출 스레드 풀에 있는 스레드에서 작업 항목을 처리 하도록 요청 하는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="7d7be-123">이 메서드는 메서드 또는 스레드 풀에서 선택 된 스레드에서 호출 될 대리자에 대 한 참조를 매개 변수로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="7d7be-124">이 큐에 대기 되었습니다 후 작업 항목을 취소 하는 방법이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="7d7be-125">타이머 큐 타이머 및 등록 된 대기 작업 스레드 풀을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="7d7be-126">콜백 함수는 스레드 풀에 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="7d7be-127">프로세스당 하나의 스레드 풀이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-127">There is one thread pool per process.</span></span> <span data-ttu-id="7d7be-128">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]부터 프로세스에 대한 스레드 풀의 기본 크기는 가상 주소 공간의 크기와 같은 여러 요인에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="7d7be-129">프로세스에서 <xref:System.Threading.ThreadPool.GetMaxThreads%2A> 메서드를 호출하여 스레드 수를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="7d7be-130">사용 하 여 스레드 풀의 스레드 수를 변경할 수는 <xref:System.Threading.ThreadPool.SetMaxThreads%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="7d7be-131">각 스레드가 기본 스택 크기를 사용 하 고 기본 우선 순위에서 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-132">.NET Framework를 호스트 하는 관리 되지 않는 코드를 사용 하 여 스레드 풀의 크기를 변경할 수는 `CorSetMaxThreads` mscoree.h 파일에 정의 된 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="7d7be-133">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="7d7be-134">최소에 도달 하면 스레드 풀 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="7d7be-135">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]부터는 스레드 풀이 시간 단위당 완료되는 작업 수로 정의된 처리량을 최적화하기 위해 작업자 스레드를 만들고 소멸시킵니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="7d7be-136">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-137">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="7d7be-138"><xref:System.Threading.ThreadPool.GetMinThreads%2A> 메서드를 사용하여 이러한 최소값을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-139">사용할 수는 <xref:System.Threading.ThreadPool.SetMinThreads%2A> 스레드의 최소 수를 늘리려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="7d7be-140">그러나 이러한 값을 불필요하게 늘리면 성능 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="7d7be-141">너무 많은 작업이 동시에 시작되는 경우 모두 속도가 느린 것처럼 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="7d7be-142">대부분의 경우 스레드 풀은 고유한 스레드 할당 알고리즘에서 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-143">다음 예제에서는 기본 응용 프로그램 스레드 대기 라는 메서드가 `ThreadProc` 에서 대기한 1 초 한 다음 종료 됩니다에 대 한 스레드 풀 스레드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="7d7be-144">`ThreadProc` 메서드 단순히 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="7d7be-145">호출을 주석 처리 하는 경우는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 스레드 풀 스레드에서 메서드는 실행 전에 메서드를 주 스레드를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="7d7be-146">스레드 풀 응용 프로그램을 실행 하는 경우 모든 포그라운드 스레드가 종료 된 것을 유지 하지 않는 백그라운드 스레드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="7d7be-147">(이 간단한 예제는 경합 상태입니다.)</span><span class="sxs-lookup"><span data-stu-id="7d7be-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7d7be-148">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7d7be-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7d7be-149">
            <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="7d7be-150">핸들을 보유하는 <see cref="T:System.IntPtr" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="7d7be-151">핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-152">
            <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-153">핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-154">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7d7be-155">비관리 코드를 호출할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="7d7be-156">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="7d7be-157">운영 체제 핸들을 보유하는 <see cref="T:System.Runtime.InteropServices.SafeHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="7d7be-158">핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-159">
            <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-160">핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-161">`osHandle` 매개 변수 이어야 합니다는 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, 추상에서 파생 되는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7d7be-162">
            <paramref name="osHandle" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7d7be-163">비관리 코드를 호출할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="7d7be-164">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="7d7be-165">사용 가능한 작업자 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="7d7be-166">사용 가능한 비동기 I/O 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-167">
            <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 메서드에서 반환하는 최대 스레드 풀 스레드 수와 현재 활성 상태인 스레드 수의 차이를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-168">때 <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> 에 지정 된 변수를 반환 `workerThreads` 시작할 수 있는 추가 작업자 스레드 및 지정 된 변수의 개수가 `completionPortThreads` 포함 될 수 있는 추가 비동기 I/O 스레드 수 시작 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="7d7be-169">사용 가능한 스레드가 없는 경우 스레드 풀 스레드가 사용 가능 해질 때까지 추가 스레드 풀 요청 큐에 대기 중인 상태로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-170">다음 예제에서는 간단한 앱을 시작할 때 작업자 스레드 수 및 사용할 수 있는 I/O 스레드 수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="7d7be-171">스레드 풀에 있는 최대 작업자 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="7d7be-172">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-173">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="7d7be-174">해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-175">때 <xref:System.Threading.ThreadPool.GetMaxThreads%2A> 에 지정 된 변수를 반환 `workerThreads` 최대 수의 스레드 풀에서 허용 된 작업자 스레드 및 지정 된 변수를 포함 `completionPortThreads` 에 허용 되는 비동기 I/O 스레드 최대 수를 포함 된 스레드 풀입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="7d7be-176">사용할 수는 <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> 메서드를 지정된 된 시간에 실제 스레드 풀의 스레드 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="7d7be-177">사용할 수는 <xref:System.Threading.ThreadPool.SetMaxThreads%2A> 스레드 풀의 최대 작업자 스레드 및 비동기 I/O 스레드 수를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="7d7be-178">시스템 메모리 내에 허용 스레드 풀 요청을 큐 대기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="7d7be-179">스레드 풀 스레드 보다 더 많은 요청이 없을 경우 스레드 풀 스레드가 사용 가능 해질 때까지 추가 요청은 큐에 대기 중인 상태로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-180">다음 코드 예제에는 최대 및 사용할 수 있는 스레드 풀의 스레드 수의 개수를 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="7d7be-181">사용 하 여 작업 항목 큐 `FileStream` 비동기적으로 두 개의 파일에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="7d7be-182">콜백 메서드는 겹쳐 시간이 초과 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="7d7be-183">작업자 스레드가 작업 항목을 처리 하 고 완료 포트 스레드 하나 또는 두 개의 속도 및 컴퓨터의 프로세서 수에 따라 쓰기 작업을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="7d7be-184">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="7d7be-185">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-186">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-187">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="7d7be-188">기본적으로 시스템에서 프로세서의 수는 최소 스레드 수 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="7d7be-189">최소값에 도달 하면 스레드 풀이 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="7d7be-190">부터는 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 스레드 풀 스레드 하기 위해 만들고 삭제은 시간 단위당 완료 되는 작업의 수로 정의 된 처리량을 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="7d7be-191">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-192">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-193">다음 예제에서는 최소 작업자 스레드 수를 4 개로 설정 하 고 비동기 I/O 완료 스레드의 최소 수에 대 한 원래 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7d7be-194">실행을 위해 메서드를 큐에 대기시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="7d7be-195">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="7d7be-196">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-197">실행을 위해 메서드를 큐에 대기시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="7d7be-198">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-199">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-200">메서드가 정의 된 또는 사용할 수는 클래스의 인스턴스 필드에서 대기 하는 메서드에서 요구 하는 데이터를 배치할 수는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> 필요한 데이터를 포함 하는 개체를 받아들이는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-201">Visual Basic 사용자를 생략할 수는 <xref:System.Threading.WaitCallback> 생성자 및 사용할은 `AddressOf` 콜백 메서드를 전달 하는 경우 연산자 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="7d7be-202">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-203">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-203">Version Information</span></span>  
 <span data-ttu-id="7d7be-204">.NET Framework 버전 2.0에에서는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="7d7be-205">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-206">다음 예제에서는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> 요소로 표시 되는 작업을 큐에 대기 메서드 오버 로드는 `ThreadProc` 스레드를 사용할 수 있게 되는 때 실행할 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="7d7be-207">이 오버 로드를 가진 없음 작업 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="7d7be-208">따라서 사용할 수 있는 정보는 `ThreadProc` 메서드는 메서드가 속한 개체에 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7d7be-209">
            <paramref name="callBack" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7d7be-210">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="7d7be-211">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-212">메서드에서 사용할 데이터가 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-213">실행을 위해 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="7d7be-214">이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-215">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-216">콜백 메서드는 복잡 한 데이터를 필요한 경우 데이터를 포함 하는 클래스를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d7be-217">Visual Basic 사용자를 생략할 수는 <xref:System.Threading.WaitCallback> 생성자 및 사용할은 `AddressOf` 콜백 메서드를 전달 하는 경우 연산자 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="7d7be-218">Visual Basic에서 올바른 대리 생성자를 자동으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-219">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-219">Version Information</span></span>  
 <span data-ttu-id="7d7be-220">.NET Framework 버전 2.0에에서는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="7d7be-221">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-222">다음 예제에서는 작업 정보를 포함 하는 개체를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="7d7be-223">또한 실행을 위해 큐에 대기 된 작업에 스레드 풀에서 해당 개체를 전달 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7d7be-224">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7d7be-225">
            <paramref name="callBack" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7d7be-226">
            <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-227">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-228">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-229">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-230">대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-231">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-232">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-233">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-234">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-235">제한 시간(밀리초)에 부호 있는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-236">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-237">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-238">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-239">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="7d7be-240"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="7d7be-241">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="7d7be-242">지정된 된 개체가 신호를 받은 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="7d7be-243">시간 제한 간격이 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="7d7be-244"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드는 지정된 된 개체의 현재 상태를 확인 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="7d7be-245">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="7d7be-246">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="7d7be-247">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="7d7be-248">경우는 `timeOutInterval` 매개 변수가 0 (영) 및 `executeOnlyOnce` 매개 변수는 `false`, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d7be-249">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="7d7be-250">대신는 <xref:System.Threading.Mutex>를 사용 하 여는 <xref:System.Threading.Semaphore> 된 1의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="7d7be-251">대기 작업을 취소 하려면 호출 된 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7d7be-252">Win32을 사용 하 여 대기 스레드에서 `WaitForMultipleObjects` 함수 등록 된 대기 작업을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="7d7be-253">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, Win32를 사용 하 여 핸들을 복제 해야 `DuplicateHandle` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="7d7be-254">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="7d7be-255">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="7d7be-256">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="7d7be-257">예를 들어 세마포 개수는 1 씩 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-258">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-258">Version Information</span></span>  
 <span data-ttu-id="7d7be-259">.NET Framework 버전 2.0 부터는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="7d7be-260">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-261">
            <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-262">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-263">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-264">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-265">대리자에 전달된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-266">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-267">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-268">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-269">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-270">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-271">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-272">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-273">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-274">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="7d7be-275"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="7d7be-276">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="7d7be-277">지정된 된 개체가 신호를 받은 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="7d7be-278">시간 제한 간격이 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="7d7be-279"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드는 지정된 된 개체의 현재 상태를 확인 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="7d7be-280">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="7d7be-281">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="7d7be-282">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="7d7be-283">경우는 `timeOutInterval` 매개 변수가 0 (영) 및 `executeOnlyOnce` 매개 변수는 `false`, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d7be-284">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="7d7be-285">대신는 <xref:System.Threading.Mutex>를 사용 하 여는 <xref:System.Threading.Semaphore> 된 1의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="7d7be-286">대기 작업을 취소 하려면 호출 된 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7d7be-287">Win32을 사용 하 여 대기 스레드에서 `WaitForMultipleObjects` 함수 등록 된 대기 작업을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="7d7be-288">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, Win32를 사용 하 여 핸들을 복제 해야 `DuplicateHandle` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="7d7be-289">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="7d7be-290">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="7d7be-291">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="7d7be-292">예를 들어 세마포 개수는 1 씩 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-293">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-293">Version Information</span></span>  
 <span data-ttu-id="7d7be-294">.NET Framework 버전 2.0 부터는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="7d7be-295">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-296">
            <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-297">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-298">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-299">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-300">대리자에 전달된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="7d7be-301">
            <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="7d7be-302">
            <c>시간 제한</c>이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-303">
            <c>시간 제한</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-304">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-305">제한 시간에 <see cref="T:System.TimeSpan" /> 값을 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-306">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-307">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-308">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-309">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="7d7be-310"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="7d7be-311">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="7d7be-312">지정된 된 개체가 신호를 받은 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="7d7be-313">시간 제한 간격이 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="7d7be-314"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드는 지정된 된 개체의 현재 상태를 확인 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="7d7be-315">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="7d7be-316">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="7d7be-317">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="7d7be-318">경우는 `timeOutInterval` 매개 변수가 0 (영) 및 `executeOnlyOnce` 매개 변수는 `false`, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d7be-319">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="7d7be-320">대신는 <xref:System.Threading.Mutex>를 사용 하 여는 <xref:System.Threading.Semaphore> 된 1의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="7d7be-321">대기 작업을 취소 하려면 호출 된 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7d7be-322">Win32을 사용 하 여 대기 스레드에서 `WaitForMultipleObjects` 함수 등록 된 대기 작업을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="7d7be-323">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, Win32를 사용 하 여 핸들을 복제 해야 `DuplicateHandle` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="7d7be-324">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="7d7be-325">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="7d7be-326">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="7d7be-327">예를 들어 세마포 개수는 1 씩 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-328">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-328">Version Information</span></span>  
 <span data-ttu-id="7d7be-329">.NET Framework 버전 2.0 부터는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="7d7be-330">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-331">
            <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7d7be-332">
            <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-333">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-334">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-335">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-336">대리자에 전달된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-337">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-338">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-339">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-340">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-341">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-342">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-343">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-344">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-345">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="7d7be-346"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드 스레드 풀에 지정된 된 대리자를 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="7d7be-347">작업자 스레드는 다음 중 하나가 발생 하면 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="7d7be-348">지정된 된 개체가 신호를 받은 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="7d7be-349">시간 제한 간격이 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="7d7be-350"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드는 지정된 된 개체의 현재 상태를 확인 <xref:System.Threading.WaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="7d7be-351">개체의 상태를 신호 받음 없으면 메서드는 대기 작업을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="7d7be-352">대기 작업을 스레드 풀에서 스레드에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="7d7be-353">대리자는 개체의 상태는 신호를 받거나 시간 제한 간격이 경과 때 작업자 스레드에 의해 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="7d7be-354">경우는 `timeOutInterval` 매개 변수가 0 (영) 및 `executeOnlyOnce` 매개 변수는 `false`, 이벤트가 신호 되거나 시간 제한 간격이 경과 될 때마다 타이머가 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d7be-355">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="7d7be-356">대신는 <xref:System.Threading.Mutex>를 사용 하 여는 <xref:System.Threading.Semaphore> 된 1의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="7d7be-357">대기 작업을 취소 하려면 호출 된 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7d7be-358">Win32을 사용 하 여 대기 스레드에서 `WaitForMultipleObjects` 함수 등록 된 대기 작업을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="7d7be-359">따라서에 동일한 네이티브 운영 체제 핸들을 사용 해야 할 경우를 여러 번 호출 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, Win32를 사용 하 여 핸들을 복제 해야 `DuplicateHandle` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="7d7be-360">에 전달 되는 이벤트 개체를 펄스 하지 해야 참고 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, 대기 스레드에서 다시 설정 되기 전에 이벤트가 신호를 감지 하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="7d7be-361">함수 반환 하기 전에 몇 가지 유형의 동기화 개체의 상태를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="7d7be-362">신호를 받은 상태로 인해 대기 조건이 충족된 하는 개체에 대해서만 수정이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="7d7be-363">예를 들어 세마포 개수는 1 씩 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="7d7be-364">버전 정보</span><span class="sxs-lookup"><span data-stu-id="7d7be-364">Version Information</span></span>  
 <span data-ttu-id="7d7be-365">.NET Framework 버전 2.0 부터는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성 값은 작업자 스레드에 전파를 사용 하 여 큐에 대기 된 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="7d7be-366">이전 버전에서 주 정보를 전파 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-367">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 지정 된 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="7d7be-368">이 예제에서는 콜백 메서드는 `WaitProc`, 대기 핸들은 및는 <xref:System.Threading.AutoResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="7d7be-369">이 예제에서는 정의 `TaskInfo` 실행 될 때 콜백에 전달 되는 정보를 보관 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="7d7be-370">이 예에서는 만듭니다는 `TaskInfo` 개체를 문자열 데이터를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="7d7be-371"><xref:System.Threading.RegisteredWaitHandle> 에서 반환 하는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드에 할당 된는 `Handle` 필드는 `TaskInfo` 개체 콜백 메서드는에 액세스할 수 있도록는 <xref:System.Threading.RegisteredWaitHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="7d7be-372">지정 외에도 `TaskInfo` 콜백 메서드를 호출에 전달 하는 개체와는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드 지정는 <xref:System.Threading.AutoResetEvent> 에 대 한 작업에서 대기 하는 <xref:System.Threading.WaitOrTimerCallback> 를 나타내는 대리자는 `WaitProc` 콜백 메서드는 1 초 시간 제한 간격 및 여러 콜백 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="7d7be-373">때 신호를 주 스레드는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를는 <xref:System.Threading.WaitOrTimerCallback> 대리자가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="7d7be-374">`WaitProc` 메서드 테스트 <xref:System.Threading.RegisteredWaitHandle> 시간 초과가 발생 한 것인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="7d7be-375">대기 핸들에 신호가 전달 되어 콜백이 호출 되는 경우는 `WaitProc` 메서드 등록을 취소는 <xref:System.Threading.RegisteredWaitHandle>, 추가 콜백을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="7d7be-376">시간 제한의 경우 작업이 계속 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="7d7be-377">`WaitProc` 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-378">
            <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="7d7be-379">스레드 풀에 있는 최대 작업자 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="7d7be-380">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-381">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="7d7be-382">해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-383">성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-384">설정할 수 없습니다 최대 작업자 스레드 또는 I/O 완료 스레드 번호를 컴퓨터에서 프로세서 개수 보다 작은 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="7d7be-385">프로세서를 사용할 수 있는지를 확인 하려면 값을 검색 된 <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7d7be-386">또한 최대 작업자 스레드 또는 작업자 스레드의 최소 해당 번호 보다 작은 수로 I/O 완료 스레드 또는 I/O 완료 스레드 수를 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="7d7be-387">개의 최소 스레드 풀 크기를 결정 하려면 호출 된 <xref:System.Threading.ThreadPool.GetMinThreads%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="7d7be-388">공용 언어 런타임을 호스트 되는 경우 인터넷 정보 서비스 (IIS) 또는 SQL Server의 호스트 수 제한 하거나 스레드 풀 크기를 변경 하지 못하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="7d7be-389">스레드 풀에서 스레드의 최대 수를 변경 하는 경우에 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="7d7be-390">코드 향상 될 수 있습니다 하다가 변경에는 사용할 코드 라이브러리를에 좋지 않은 영향을 생길 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="7d7be-391">스레드 풀 크기를 너무 크게 설정 하면 성능 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="7d7be-392">너무 많은 스레드를 동시에를 실행 하는 경우 전환 하는 작업이 오버 헤드가 중요 한 요인이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7d7be-393">스레드를 제어 하는 기능입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="7d7be-394">권한 값: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="7d7be-395">스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="7d7be-396">스레드 풀에서 필요할 때 만드는 비동기 I/O 스레드의 최소 개수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-397">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-398">성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-399">스레드 풀은 각 범주에 대 한 최소값에 도달할 때까지 요청 시 새 작업자 스레드 또는 I/O 완료 스레드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="7d7be-400">최소값에 도달 하면 스레드 풀이 해당 범주에 추가 스레드를 만들 수도 있고 일부 작업이 완료 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="7d7be-401">부터는 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 스레드 풀 스레드 하기 위해 만들고 삭제은 시간 단위당 완료 되는 작업의 수로 정의 된 처리량을 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="7d7be-402">스레드가 너무 적으면 사용 가능한 리소스가 효율적으로 사용되지 않는 반면, 너무 많으면 리소스 경합이 증가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="7d7be-403">요구가 적을 때는 실제 스레드 풀 스레드 수가 최소값보다 작을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="7d7be-404">음수 또는 활성 스레드 풀 스레드의 최대 개수 보다 큰 숫자를 지정 하면 (사용 하 여 가져온 <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> 반환 `false` 최소 값 중 하나를 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-405">기본적으로 시스템에서 프로세서의 수는 최소 스레드 수 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="7d7be-406">사용할 수는 <xref:System.Threading.ThreadPool.SetMinThreads%2A> 최소 숫자 ofthreads 증가 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d7be-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="7d7be-407">그러나 이러한 값을 불필요하게 늘리면 성능 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="7d7be-408">너무 많은 작업이 동시에 시작되는 경우 모두 속도가 느린 것처럼 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="7d7be-409">대부분의 경우 스레드 풀 스레드를 할당 하기 위한 고유한 알고리즘 더 잘 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="7d7be-410">최소 프로세서 수가 성능이 저하 될 수 있는 보다 작은 값으로 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d7be-411">다음 예제에서는 최소 작업자 스레드 수를 4 개로 설정 하 고 비동기 I/O 완료 스레드의 최소 수에 대 한 원래 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7d7be-412">스레드를 제어 하는 기능입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="7d7be-413">권한 값: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="7d7be-414">큐에 대기시킬 <see cref="T:System.Threading.NativeOverlapped" /> 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-415">실행할 중첩된 I/O 작업을 큐에 대기시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-416">작업이 I/O 완료 포트 큐에 성공적으로 대기되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-417">네이티브 Win32를 사용 하는 방법은 겹치면 I/O에 대 한 참조는 <xref:System.Threading.Overlapped> 클래스는 <xref:System.Threading.NativeOverlapped> 구조, 및 `OVERLAPPED` Win32 플랫폼 SDK에는 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-418">사용 하는 <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> 메서드 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-419">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-420">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-421">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-422">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-423">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="7d7be-424">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출되는 대리자를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-425">스레드 풀에서 제공할 때 대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-426">지정된 대리자를 스레드 풀에 대기시키지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-427">메서드가 성공하면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.OutOfMemoryException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-428">와 달리는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 메서드를 <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="7d7be-429">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-430">사용 하 여 <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-431">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-432">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-433">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-434">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="7d7be-435">메모리가 부족한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="7d7be-436">작업 항목을 큐에 대기할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7d7be-437">
            <paramref name="callBack" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-438">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-439">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7d7be-440">
            <see cref="T:System.Threading.WaitHandle" />를 기다리도록  대리자를 등록하지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-441">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-442">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-443">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-444">대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-445">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-446">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-447">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-448">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-449">제한 시간(밀리초)에 부호 있는 32비트 정수를 사용하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-450">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-451">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-452">와 달리는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="7d7be-453">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-454">사용 하 여 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-455">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-456">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-457">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="7d7be-458">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="7d7be-459">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-460">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-461">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-462">
            <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-463">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-464">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-465">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-466">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-467">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-468">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-469">대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-470">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-471">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-472">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-473">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-474">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-475">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-476">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-477">와 달리는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="7d7be-478">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-479">사용 하 여 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-480">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-481">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-482">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="7d7be-483">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="7d7be-484">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-485">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-486">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-487">
            <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-488">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-489">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-490">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-491">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-492">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-493">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-494">대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="7d7be-495">
            <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="7d7be-496">
            <c>시간 제한</c>이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-497">
            <c>시간 제한</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-498">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-499">제한 시간에 <see cref="T:System.TimeSpan" /> 값을 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-500">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-501">와 달리는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="7d7be-502">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-503">사용 하 여 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-504">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-505">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-506">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="7d7be-507">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="7d7be-508">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-509">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-510">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7d7be-511">
            <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7d7be-512">
            <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-513">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-514">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-515">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="7d7be-516">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="7d7be-517">
            <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="7d7be-518">
            <c>waitObject</c> 매개 변수가 신호를 받으면 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="7d7be-519">대리자에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="7d7be-520">제한 시간(밀리초)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-521">
            <c>millisecondsTimeOutInterval</c> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="7d7be-522">
            <c>millisecondsTimeOutInterval</c>이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="7d7be-523">
            <see langword="true" />는 대리자를 호출한 후 스레드가 <c>waitObject</c> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7d7be-524">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="7d7be-525">이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7d7be-526">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d7be-527">와 달리는 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 호출 스택을 작업자 스레드에 전파 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="7d7be-528">따라서 코드가 호출 스택을 손실 되므로 코드를 보안 권한을 상승 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7d7be-529">사용 하 여 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> 실수로 보안 문제가 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="7d7be-530">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="7d7be-531">작업 사용 하 여 스레드 풀 스레드 대기 중인 경우 <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, 스레드 풀 스레드 스택에 실제 호출자의 컨텍스트 포함 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="7d7be-532">악성 코드가 수 권한 검사를 방지 하려면이 옵션을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="7d7be-533">사용 하는 <xref:System.Threading.Mutex> 에 대 한 `waitObject` 기본 Win32 API 기본값을 사용 하기 때문에 콜백에 대 한 상호 제외를 제공 하지 않습니다 `WT_EXECUTEDEFAULT` 플래그를 별도 스레드 풀 스레드에서 각 콜백에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="7d7be-534">완료 되 면 사용 하 여는 <xref:System.Threading.RegisteredWaitHandle> 이 메서드에서 반환 되는, 호출 해당 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대기 핸들에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="7d7be-535">항상 호출 하는 것이 좋습니다는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드를 지정 하는 경우에 `true` 에 대 한 `executeOnlyOnce`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="7d7be-536">가비지 수집 보다 효율적으로 작동 호출 하는 경우는 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> 메서드 대신 등록 된 대기 핸들의 종료자에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d7be-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7d7be-537">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7d7be-538">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7d7be-539">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d7be-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>