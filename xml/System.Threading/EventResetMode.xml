<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventResetMode.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ec1094a66ec69bf9f323cf19ef91b28810a2ba17.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec1094a66ec69bf9f323cf19ef91b28810a2ba17</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.EventResetMode">
          <source>Indicates whether an <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> is reset automatically or manually after receiving a signal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>이 신호를 받은 후 자동이나 수동으로 다시 설정되는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventResetMode">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> 메서드 오버 로드를 주 스레드에서 차단 된 스레드 신호를 보내고는 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventResetMode">
          <source>The example starts five threads and allows them to block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the AutoReset flag, then releases one thread each time the user presses the ENTER key.</source>
          <target state="translated">이 예제에서는 5 개의 스레드를 시작 하 고 있는 경우 차단 될 수 있도록는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> 다음 스레드를 하나씩 때마다 해제는 사용자가 ENTER 키를 누를 AutoReset 플래그를 사용 하 여 만든 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventResetMode">
          <source>The example then queues another five threads and releases them all using an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the ManualReset flag.</source>
          <target state="translated">다음 예제에서는 다른 5 개의 스레드를 큐 대기를 사용 하 여 모든 해제는 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> ManualReset 플래그를 사용 하 여 만든 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Threading.EventResetMode.AutoReset">
          <source>When signaled, the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> resets automatically after releasing a single thread.</source>
          <target state="translated">신호를 받으면 <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>이 스레드 하나를 해제한 후 자동으로 다시 설정됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Threading.EventResetMode.AutoReset">
          <source>If no threads are waiting, the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> remains signaled until a thread blocks, and resets after releasing the thread.</source>
          <target state="translated">대기 중인 스레드가 없으면 <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>은 스레드가 차단될 때까지 신호를 받은 상태로 유지되다가 스레드를 해제한 후 다시 설정됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.EventResetMode.ManualReset">
          <source>When signaled, the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> releases all waiting threads and remains signaled until it is manually reset.</source>
          <target state="translated">신호를 받으면 <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>이 대기하는 스레드를 모두 해제하고 수동으로 다시 설정될 때까지 신호를 받은 상태로 유지됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>