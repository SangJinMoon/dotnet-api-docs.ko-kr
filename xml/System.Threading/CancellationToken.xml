<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de6f75d4506356775c02922ff31f88f46d43b9c8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606424" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0e562-101">작업을 취소하지 않아야 함을 전파합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0e562-101">Propagates notification that operations should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-102">A <xref:System.Threading.CancellationToken> 스레드 스레드 풀 작업 항목 간에 협조적 취소를 사용 하면 또는 <xref:System.Threading.Tasks.Task> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="0e562-103">인스턴스화하여 취소 토큰을 만들는 <xref:System.Threading.CancellationTokenSource> 에서 취소 토큰을 관리 하는 개체를 검색할 해당 <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="0e562-104">그런 다음 원하는 수 스레드, 작업 또는 취소의 통지를 수신 해야 하는 작업의 취소 토큰을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="0e562-105">취소를 시작 하는 토큰을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="0e562-106">개체의 소유자가 호출 하는 경우 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 취소 토큰의 모든 복사본에 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="0e562-107">알림을 수신 하는 개체는 적절 한 방식으로 응답할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="0e562-108">자세한 내용과 코드 예제를 참조 하십시오. [관리 되는 스레드의 취소](~/docs/standard/threading/cancellation-in-managed-threads.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e562-109">다음 예제에서는 다른 계기를 11 개에서 10 정수 계열 값을 읽을 수 있는 데이터 컬렉션 응용 프로그램을 에뮬레이션 하는 난수 생성기를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="0e562-110">값이 0에 대 한 작업을 취소 해야 하는 경우와 없는 전반적인 평균을 계산 해야 하는 하나의 계기에서 측정에 실패 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="0e562-111">이 예제에서는 작업의 가능한 취소를 처리 하려면 인스턴스화합니다는 <xref:System.Threading.CancellationTokenSource> 개체에 전달 되는 취소 토큰을 생성 하는 <xref:System.Threading.Tasks.TaskFactory> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="0e562-112"><xref:System.Threading.Tasks.TaskFactory> 개체 취소 토큰에 전달 된 각 태스크의 특정 계측에 대 한 정보 수집을 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="0e562-113"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> 메서드는 모든 판독값 성공적으로 수집한 후에 평균 계산 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="0e562-114">작업은 취소 되었으므로 때문이 아니라에 경우에 대 한 호출에서 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> 메서드에서 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="0e562-115">모든 공용 및 보호 된 구성원 <see cref="T:System.Threading.CancellationToken" /> 는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0e562-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled">
          <span data-ttu-id="0e562-116">토큰의 취소된 상태입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-116">The canceled state for the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-117">
            <see cref="T:System.Threading.CancellationToken" /> 을(를) 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-117">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-118">이 생성자를 사용 하 여 만든 토큰으로 지정 된 취소 된 상태로 유지 되는 `canceled` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-118">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="0e562-119">경우 `canceled` 은 `false`모두 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 및 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-119">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="0e562-120">경우 `canceled` 은 `true`모두 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 및 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 됩니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-120">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-121">이 토큰이 취소된 상태로 있을 수 있는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-121">Gets whether this token is capable of being in the canceled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e562-122">
            <see langword="true" /> 이 토큰이 취소 된 상태로; 있을 수 있는 경우 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-122">
              <see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-123">경우 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 반환 `false`는 토큰은 전환 되지 않습니다 취소 된 상태로 즉 보장할 수는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 반환 하지 것입니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-123">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="0e562-124">취소할 수 없는 취소 토큰 정적 반환한 <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-124">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="0e562-125">취소 토큰 수 있는지 여부를 확인 하려면이 속성을 선택적으로 사용할 수의 값을 검사 하기 전에 취소는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 취소 되었는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-125">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-126">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 토큰이 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-126">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0e562-127">이 인스턴스와 비교할 다른 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-127">The other object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-128">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 <see cref="T:System.Object" />가 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-128">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-129">
            <paramref name="other" />가 <see cref="T:System.Threading.CancellationToken" />이고 두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-129">
              <see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0e562-130">자세한 내용은 설명 부분을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-130">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="0e562-131">두 취소 토큰은 다음 조건 중 하나에 해당할 경우:</span><span class="sxs-lookup"><span data-stu-id="0e562-131">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="0e562-132">동일한와 연결 된 <xref:System.Threading.CancellationTokenSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-132">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="0e562-133">둘 다 생성 된 public에서 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-133">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="0e562-134">두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-134">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-135">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-135">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="0e562-136">이 인스턴스와 비교할 다른 <see cref="T:System.Threading.CancellationToken" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-136">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-137">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 토큰이 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-137">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-138">인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-138">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0e562-139">자세한 내용은 설명 부분을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-139">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="0e562-140">두 취소 토큰은 다음 조건 중 하나에 해당할 경우:</span><span class="sxs-lookup"><span data-stu-id="0e562-140">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="0e562-141">동일한와 연결 된 <xref:System.Threading.CancellationTokenSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-141">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="0e562-142">둘 다 생성 된 public에서 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-142">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="0e562-143">두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-143">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0e562-144">
            <see cref="T:System.Threading.CancellationToken" />의 해시 함수 역할을 수행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-144">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-145">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스에 대한 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-145">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-146">이 토큰의 취소가 요청되었는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-146">Gets whether cancellation has been requested for this token.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e562-147">
            <see langword="true" /> 취소에이 토큰에 대 한 요청 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-147">
              <see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-148">이 속성은 처음에 취소 된 상태에서 생성 되 고 토큰을 통해 또는 호출을 통해이 토큰에 대 한 취소를 요청 되었는지 여부를 나타냅니다 <xref:System.Threading.CancellationTokenSource.Cancel%2A> 에서 토큰의 연결 된 <xref:System.Threading.CancellationTokenSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-148">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="0e562-149">이 속성이 `true`, 취소가 요청 되었는지만 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-149">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="0e562-150">모든 등록 된 처리기가 실행을 완료 또는 취소 요청 모든 등록 된 처리기에 완전히 전파 완료 있는지는 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-150">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="0e562-151">추가 동기화는 특히 관련된 개체를 동시에 취소 되는 있는 경우에는 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-151">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e562-152">다음은 될 때까지 서버 프로세스를 실행 하는 간단한 예제는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 속성에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-152">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="0e562-153">이 예제에서는 인스턴스화합니다는 <xref:System.Threading.CancellationTokenSource> 취소 토큰에 대 한 액세스를 제어 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-153">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="0e562-154">다음 두 개의 스레드 프로시저를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-154">It then defines two thread procedures.</span></span> <span data-ttu-id="0e562-155">첫 번째 키보드 풀 및 "C" 키를 누를 때 호출 하는 람다 식으로 정의 되어 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> 취소 된 상태로 취소 토큰을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-155">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="0e562-156">두 번째 매개 변수가 있는 메서드는 `ServerClass.StaticMethod`때까지 루프를 실행 하는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-156">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="0e562-157">실행 하는 스레드가 될 때까지 다음가 시작 두 스레드 및 블록은 주 스레드는 `ServerClass.StaticMethod` 메서드를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-157">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-158">빈 <see cref="T:System.Threading.CancellationToken" /> 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-158">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e562-159">빈 취소 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-159">An empty cancellation token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-160">이 속성에서 반환 되는 취소 토큰을 취소할 수 없습니다. 즉, 해당 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 속성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-160">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="0e562-161">C# 사용할 수도 있습니다 [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) 문을 빈 취소 토큰을 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-161">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="0e562-162">두 빈 취소 토큰은 항상 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-162">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0e562-163">첫 번째 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-163">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0e562-164">두 번째 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-164">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-165">두 개의 <see cref="T:System.Threading.CancellationToken" /> 인스턴스가 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-165">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-166">인스턴스가 동일한 경우 <see langword="true" />이며, 그렇지 않은 경우 <see langword="false" />입니다. 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-166">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="0e562-167">두 취소 토큰은 다음 조건 중 하나에 해당할 경우:</span><span class="sxs-lookup"><span data-stu-id="0e562-167">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="0e562-168">동일한와 연결 된 <xref:System.Threading.CancellationTokenSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-168">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="0e562-169">둘 다 생성 된 public에서 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-169">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="0e562-170">두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-170">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-171">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-171">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="0e562-172">첫 번째 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-172">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="0e562-173">두 번째 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-173">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-174">두 <see cref="T:System.Threading.CancellationToken" /> 인스턴스가 서로 다른지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-174">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-175">인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-175">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="0e562-176">같음 정의 대 한 참조는 <xref:System.Threading.CancellationToken.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0e562-176">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-177">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-177">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-178">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-178">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="0e562-179">
            <see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-179">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-180">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-180">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-181">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-181">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-182">이 토큰이 취소 된 상태로 이미 있으면 대리자는 즉시, 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-182">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="0e562-183">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-183">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="0e562-184">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처하고 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-184">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="0e562-185">현재 <xref:System.Threading.SynchronizationContext> 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-185">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-186">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-186">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e562-187">
            <paramref name="callback" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-187">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="0e562-188">
            <see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-188">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="0e562-189">현재 <see cref="T:System.Threading.SynchronizationContext" />를 캡처하여 <c>콜백</c>을 호출할 때 사용할지 여부를 나타내는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-189">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-190">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-190">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-191">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-191">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-192">이 토큰이 취소 된 상태로 이미 있으면 대리자는 즉시, 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-192">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="0e562-193">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-193">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="0e562-194">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처하고 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-194">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="0e562-195">경우 `useSynchronizationContext` 은 `true`, 현재 <xref:System.Threading.SynchronizationContext>, 하는 경우 하나, 대리자와 함께 캡처된도 있으며 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-195">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="0e562-196">그렇지 않으면 <xref:System.Threading.SynchronizationContext> 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-196">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-197">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-197">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e562-198">
            <paramref name="callback" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-198">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="0e562-199">
            <see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0e562-200">대리자가 호출될 때 <c>콜백</c>에 전달할 상태입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-200">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="0e562-201">null일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-201">This may be null.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-202">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-202">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-203">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-203">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-204">이 토큰이 취소 된 상태로 이미 있으면 대리자는 즉시, 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-204">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="0e562-205">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-205">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="0e562-206">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처하고 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-206">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="0e562-207">현재 <xref:System.Threading.SynchronizationContext> 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-207">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-208">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-208">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e562-209">
            <paramref name="callback" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-209">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="0e562-210">
            <see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-210">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="0e562-211">대리자가 호출될 때 <c>콜백</c>에 전달할 상태입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-211">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="0e562-212">null일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-212">This may be null.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="0e562-213">현재 <see cref="T:System.Threading.SynchronizationContext" />를 캡처하여 <c>콜백</c>을 호출할 때 사용할지 여부를 나타내는 부울 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-213">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0e562-214">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-214">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0e562-215">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-215">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-216">이 토큰이 취소 된 상태로 이미 있으면 대리자는 즉시, 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-216">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="0e562-217">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-217">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="0e562-218">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처하고 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-218">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="0e562-219">경우 `useSynchronizationContext` 은 `true`, 현재 <xref:System.Threading.SynchronizationContext>, 하는 경우 하나, 대리자와 함께 캡처된도 있으며 실행할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-219">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="0e562-220">그렇지 않으면 <xref:System.Threading.SynchronizationContext> 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-220">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-221">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-221">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0e562-222">
            <paramref name="callback" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-222">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0e562-223">이 토큰의 취소가 요청된 경우 <see cref="T:System.OperationCanceledException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-223">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-224">이 메서드는 동일한 기능을을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-224">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="0e562-225">C#</span><span class="sxs-lookup"><span data-stu-id="0e562-225">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="0e562-226">이 토큰의 취소가 요청되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-226">The token has had cancellation requested.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-227">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-227">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e562-228">토큰이 취소될 때 신호를 받는 <see cref="T:System.Threading.WaitHandle" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-228">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e562-229">토큰이 취소될 때 신호를 받는 <see cref="T:System.Threading.WaitHandle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-229">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e562-230">이 속성에 액세스 하면는 <xref:System.Threading.WaitHandle> 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-230">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="0e562-231">좋습니다만 필요한 경우이 속성을 사용 하 고 연결을 삭제 해야 <xref:System.Threading.CancellationTokenSource> 이른 시일 내 (이 할당 된 핸들의 소스를 삭제 disposing)에 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0e562-231">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="0e562-232">핸들을 닫거나 직접 삭제 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0e562-232">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="0e562-233">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e562-233">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>