<Type Name="EventWaitHandle" FullName="System.Threading.EventWaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="04ca1c444cfd772670659b4609b267628b38c728" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventWaitHandle : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventWaitHandle extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.EventWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class EventWaitHandle&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandle : System::Threading::WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4049f-101">스레드 동기화 이벤트를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4049f-101">Represents a thread synchronization event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-102"><xref:System.Threading.EventWaitHandle> 클래스를 사용 하면 스레드가 신호를 보내 서로 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-102">The <xref:System.Threading.EventWaitHandle> class allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="4049f-103">에 하나 이상의 스레드가 차단 되는 일반적으로 <xref:System.Threading.EventWaitHandle> 차단 되지 않은 스레드가 호출 될 때까지 <xref:System.Threading.EventWaitHandle.Set%2A> 차단 된 스레드 중 하나 이상을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-103">Typically, one or more threads block on an <xref:System.Threading.EventWaitHandle> until an unblocked thread calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, releasing one or more of the blocked threads.</span></span> <span data-ttu-id="4049f-104">스레드를 표시할 수는 <xref:System.Threading.EventWaitHandle> 후에 호출 하 여 차단할는 `static` (`Shared` Visual basic에서) <xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-104">A thread can signal an <xref:System.Threading.EventWaitHandle> and then block on it, by calling the `static` (`Shared` in Visual Basic) <xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4049f-105"><xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-105">The <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="4049f-106">동작은 <xref:System.Threading.EventWaitHandle> 신호를 받은 다시 설정 모드에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-106">The behavior of an <xref:System.Threading.EventWaitHandle> that has been signaled depends on its reset mode.</span></span> <span data-ttu-id="4049f-107"><xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 신호를 대기 중인 단일 스레드를 해제 한 후 플래그도 자동으로 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-107">An <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag resets automatically when signaled, after releasing a single waiting thread.</span></span> <span data-ttu-id="4049f-108"><xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그는 그대로 남아 신호를 받은 될 때까지 해당 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-108">An <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag remains signaled until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
 <span data-ttu-id="4049f-109">자동 재설정 이벤트를 리소스에 대 한 단독 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-109">Automatic reset events provide exclusive access to a resource.</span></span> <span data-ttu-id="4049f-110">대기 중인 스레드가 없을 때 신호를 받은 자동 재설정 이벤트는 스레드가 이 이벤트에서 대기를 시도할 때까지 신호를 받은 것으로 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-110">If an automatic reset event is signaled when no threads are waiting, it remains signaled until a thread attempts to wait on it.</span></span> <span data-ttu-id="4049f-111">이벤트는 스레드를 해제하고 즉시 다시 설정되어 후속 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-111">The event releases the thread and immediately resets, blocking subsequent threads.</span></span>  
  
 <span data-ttu-id="4049f-112">이벤트는 게이트 처럼 수동 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-112">Manual reset events are like gates.</span></span> <span data-ttu-id="4049f-113">이벤트 신호를 받지 대기 중인 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-113">When the event is not signaled, threads that wait on it will block.</span></span> <span data-ttu-id="4049f-114">이벤트가 신호를 대기 중인 모든 스레드가 해제 되 고, 이벤트 신호를 받은 상태를 유지 하는 경우 (즉, 이후의 대기 작업을 차단 하지 않는지) 될 때까지 해당 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-114">When the event is signaled, all waiting threads are released, and the event remains signaled (that is, subsequent waits do not block) until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span> <span data-ttu-id="4049f-115">수동 다시 설정 이벤트는 하나의 스레드가 다른 스레드에서 진행 되기 전에 작업을 완료 해야 하는 경우에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-115">Manual reset events are useful when one thread must complete an activity before other threads can proceed.</span></span>  
  
 <span data-ttu-id="4049f-116"><xref:System.Threading.EventWaitHandle> 개체에 사용할 수는 `static`(`Shared` Visual basic에서) <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> 및 <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-116"><xref:System.Threading.EventWaitHandle> objects can be used with the `static`(`Shared` in Visual Basic) <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="4049f-117">스레드 동기화 메커니즘에 대 한 자세한 내용은 참조 [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-117">For more information about thread synchronization mechanisms, see [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-118">다음 코드 예제에서는 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 메서드 오버 로드를 주 스레드에서 차단 된 스레드 신호를 보내고는 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-118">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="4049f-119">이 예제에서는 5 개의 스레드를 시작 하 고 있는 경우 차단 될 수 있도록는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 플래그를 다음 릴리스에서 사용자가 ENTER 키를 누를 때마다 스레드를 하나씩 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-119">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="4049f-120">다음 예제에서는 다른 5 개의 스레드를 큐 대기를 사용 하 여 모든 해제는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-120">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="4049f-121">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4049f-121">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.AutoResetEvent" />
    <altmember cref="T:System.Threading.ManualResetEvent" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4049f-122">
            <see cref="T:System.Threading.EventWaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-122">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="4049f-123">초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-123">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set it to nonsignaled.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="4049f-124">이벤트가 자동으로 다시 설정되는지 또는 수동으로 다시 설정되는지를 결정하는 <see cref="T:System.Threading.EventResetMode" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-124">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-125">대기 핸들의 초기 상태를 신호 받음으로 설정할지 여부와 대기 핸들을 자동으로 다시 설정할지 수동으로 다시 설정할지 여부를 지정하여 <see cref="T:System.Threading.EventWaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-125">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-126">이벤트의 초기 상태를 신호 없음으로 이벤트를 대기 하는 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-126">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="4049f-127">초기 상태를 신호를 받으면 및 <xref:System.Threading.EventResetMode.ManualReset> 플래그가 지정 되어 `mode`, 이벤트를 대기 하는 스레드를 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-127">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="4049f-128">초기 상태를 신호를 받으면 및 `mode` 은 <xref:System.Threading.EventResetMode.AutoReset>, 이벤트를 대기 하는 경우 첫 번째 스레드가 즉시 되는 이벤트가 다시 설정, 릴리스되며 후속 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-128">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-129">다음 코드 예제에서는 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 메서드 오버 로드를 주 스레드에서 차단 된 스레드 신호를 보내고는 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-129">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="4049f-130">이 예제에서는 5 개의 스레드를 시작 하 고 있는 경우 차단 될 수 있도록는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 플래그를 다음 릴리스에서 사용자가 ENTER 키를 누를 때마다 스레드를 하나씩 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-130">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses ENTER key.</span></span> <span data-ttu-id="4049f-131">다음 예제에서는 다른 5 개의 스레드를 큐 대기를 사용 하 여 모든 해제는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-131">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="4049f-132">명명된 이벤트가 이 호출의 결과로 만들어지는 경우 초기 상태를 signaled로 설정하려면 <see langword="true" />이고, nonsignaled로 설정하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-132">
              <see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="4049f-133">이벤트가 자동으로 다시 설정되는지 또는 수동으로 다시 설정되는지를 결정하는 <see cref="T:System.Threading.EventResetMode" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-133">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="4049f-134">시스템 차원 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-134">The name of a system-wide synchronization event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-135">이 호출의 결과로 만들어진 대기 핸들의 초기 상태를 신호 받음으로 설정할지 여부, 대기 핸들을 자동으로 다시 설정할지 수동으로 다시 설정할지 여부 및 시스템 동기화 이벤트의 이름을 지정하여 <see cref="T:System.Threading.EventWaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-135">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-136">경우 `name` 은 `null` 또는 빈 문자열인 경우 로컬 <xref:System.Threading.EventWaitHandle> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-136">If `name` is `null` or an empty string, a local <xref:System.Threading.EventWaitHandle> is created.</span></span>  
  
 <span data-ttu-id="4049f-137">경우에 대 한 지정 된 이름과 함께 시스템 이벤트는 `name` 매개 변수가 이미 있습니다는 `initialState` 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-137">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4049f-138">이 생성자를 사용 하 여 명명 된 시스템 이벤트에 대 한을 지정 `false` 에 대 한 `initialState`합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-138">When using this constructor for named system events, specify `false` for `initialState`.</span></span> <span data-ttu-id="4049f-139">이 생성자는 명명 된 이벤트의 상태에 대 한 가정을 만들 수 없습니다 명명된 된 시스템 이벤트 만들어졌는지 여부를 결정할 수 없으므로 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-139">This constructor provides no way to determine whether a named system event was created, so you cannot make any assumptions about the state of the named event.</span></span> <span data-ttu-id="4049f-140">명명된 된 이벤트 만들어졌는지 여부를 확인 하려면는 <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29> 생성자 또는 <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-140">To determine whether a named event was created, use the <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29> constructor or the <xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29> constructor.</span></span>  
  
 <span data-ttu-id="4049f-141">이벤트의 초기 상태를 신호 없음으로 이벤트를 대기 하는 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-141">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="4049f-142">초기 상태를 신호를 받으면 및 <xref:System.Threading.EventResetMode.ManualReset> 플래그가 지정 되어 `mode`, 이벤트를 대기 하는 스레드를 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-142">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="4049f-143">초기 상태를 신호를 받으면 및 `mode` 은 <xref:System.Threading.EventResetMode.AutoReset>, 이벤트를 대기 하는 경우 첫 번째 스레드가 즉시 되는 이벤트가 다시 설정, 릴리스되며 후속 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-143">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-144">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-144">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-145">명명된 이벤트가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-145">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="4049f-146">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 이벤트를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-146">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-147">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-147">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-148">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-148">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-149">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-149">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="4049f-150">명명된 이벤트가 이 호출의 결과로 만들어지는 경우 초기 상태를 signaled로 설정하려면 <see langword="true" />이고, nonsignaled로 설정하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-150">
              <see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="4049f-151">이벤트가 자동으로 다시 설정되는지 또는 수동으로 다시 설정되는지를 결정하는 <see cref="T:System.Threading.EventResetMode" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-151">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="4049f-152">시스템 차원 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-152">The name of a system-wide synchronization event.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="4049f-153">이 메서드가 반환될 때 로컬 이벤트가 만들어진 경우(즉, <c>이름</c>이 <see langword="null" />이거나 빈 문자열인 경우) 또는 지정한 명명된 시스템 이벤트가 만들어진 경우에는 <see langword="true" />가 포함되고, 지정한 명명된 시스템 이벤트가 이미 있는 경우에는 <see langword="false" />가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-153">When this method returns, contains <see langword="true" /> if a local event was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system event was created; <see langword="false" /> if the specified named system event already existed.</span>
          </span>
          <span data-ttu-id="4049f-154">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-154">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-155">이 호출의 결과로 대기 핸들이 초기에 신호를 받는지 여부, 자동으로 재설정되는지 또는 수동으로 재설정되는지, 시스템 동기화 이벤트의 이름, 호출 후에 해당 값이 명명된 시스템 이벤트가 생성되었는지 여부를 나타내는 부울 변수를 지정하여 <see cref="T:System.Threading.EventWaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-155">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-156">경우에 대 한 지정 된 이름과 함께 시스템 이벤트는 `name` 매개 변수가 이미 있습니다는 `initialState` 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-156">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span> <span data-ttu-id="4049f-157">이 생성자를 호출한 후에 대 한 지정 된 변수에 값을 사용 하는 `ref` 매개 변수 (`ByRef` Visual Basic의)`createdNew` 여부는 명명 된 시스템 이벤트 이미 존재 했는지 또는 만들어졌는지를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="4049f-157">After calling this constructor, use the value in the variable specified for the `ref` parameter (`ByRef` parameter in Visual Basic)`createdNew` to determine whether the named system event already existed or was created.</span></span>  
  
 <span data-ttu-id="4049f-158">이벤트의 초기 상태를 신호 없음으로 이벤트를 대기 하는 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-158">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="4049f-159">초기 상태를 신호를 받으면 및 <xref:System.Threading.EventResetMode.ManualReset> 플래그가 지정 되어 `mode`, 이벤트를 대기 하는 스레드를 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-159">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="4049f-160">초기 상태를 신호를 받으면 및 `mode` 은 <xref:System.Threading.EventResetMode.AutoReset>, 이벤트를 대기 하는 경우 첫 번째 스레드가 즉시 되는 이벤트가 다시 설정, 릴리스되며 후속 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-160">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-161">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-161">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-162">명명된 이벤트가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-162">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="4049f-163">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 이벤트를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-163">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-164">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-164">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-165">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-165">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-166">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-166">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean, mode As EventResetMode, name As String, ByRef createdNew As Boolean, eventSecurity As EventWaitHandleSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandle(bool initialState, System::Threading::EventResetMode mode, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
        <Parameter Name="mode" Type="System.Threading.EventResetMode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="4049f-167">명명된 이벤트가 이 호출의 결과로 만들어지는 경우 초기 상태를 signaled로 설정하려면 <see langword="true" />이고, nonsignaled로 설정하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-167">
              <see langword="true" /> to set the initial state to signaled if the named event is created as a result of this call; <see langword="false" /> to set it to nonsignaled.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="4049f-168">이벤트가 자동으로 다시 설정되는지 또는 수동으로 다시 설정되는지를 결정하는 <see cref="T:System.Threading.EventResetMode" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-168">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="4049f-169">시스템 차원 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-169">The name of a system-wide synchronization event.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="4049f-170">이 메서드가 반환될 때 로컬 이벤트가 만들어진 경우(즉, <c>이름</c>이 <see langword="null" />이거나 빈 문자열인 경우) 또는 지정한 명명된 시스템 이벤트가 만들어진 경우에는 <see langword="true" />가 포함되고, 지정한 명명된 시스템 이벤트가 이미 있는 경우에는 <see langword="false" />가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-170">When this method returns, contains <see langword="true" /> if a local event was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system event was created; <see langword="false" /> if the specified named system event already existed.</span>
          </span>
          <span data-ttu-id="4049f-171">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-171">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="eventSecurity">
          <span data-ttu-id="4049f-172">명명된 시스템 이벤트에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-172">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security to be applied to the named system event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-173">이 호출의 결과로 대기 핸들이 초기에 신호를 받는지 여부, 자동으로 재설정되는지 또는 수동으로 재설정되는지, 시스템 동기화 이벤트의 이름, 호출 후에 해당 값이 명명된 시스템 이벤트가 생성되었는지 여부를 나타내는 부울 변수, 생성되는 경우 명명된 이벤트에 적용될 액세스 제어 보안을 지정하여 <see cref="T:System.Threading.EventWaitHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-173">Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, a Boolean variable whose value after the call indicates whether the named system event was created, and the access control security to be applied to the named event if it is created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-174">이 생성자를 사용 하 여 인해 다른 코드에서 이벤트의 제어권을 만들 때 명명 된 시스템 이벤트에 대 한 액세스 제어 보안을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-174">Use this constructor to apply access control security to a named system event when it is created, preventing other code from taking control of the event.</span></span>  
  
 <span data-ttu-id="4049f-175">이 생성자는 <xref:System.Threading.EventWaitHandle> 시스템 이벤트를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-175">This constructor initializes an <xref:System.Threading.EventWaitHandle> object that represents a system event.</span></span> <span data-ttu-id="4049f-176">여러 개 만들 수 있습니다 <xref:System.Threading.EventWaitHandle> 같은 시스템 이벤트를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-176">You can create multiple <xref:System.Threading.EventWaitHandle> objects that represent the same system event.</span></span>  
  
 <span data-ttu-id="4049f-177">시스템 이벤트가 없는 경우 지정 된 액세스 제어 보안을 사용 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-177">If the system event does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="4049f-178">이벤트가 있는 경우 지정 된 액세스 제어 보안 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-178">If the event exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4049f-179">새로 만든에 대 한 모든 권한을 호출자에 게 <xref:System.Threading.EventWaitHandle> 경우에도 개체 `eventSecurity` 거부 없거나 현재 사용자에 게 일부 액세스 권한을 부여에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-179">The caller has full control over the newly created <xref:System.Threading.EventWaitHandle> object even if `eventSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="4049f-180">그러나 현재 사용자가 다른 <xref:System.Threading.EventWaitHandle> 개체를 나타내는 동일한 명명 된 이벤트를 사용 하 여 생성자 또는 <xref:System.Threading.EventWaitHandle.OpenExisting%2A> 메서드를 Windows 액세스 제어 보안 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-180">However, if the current user attempts to get another <xref:System.Threading.EventWaitHandle> object to represent the same named event, using either a constructor or the <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="4049f-181">경우에 대 한 지정 된 이름과 함께 시스템 이벤트는 `name` 매개 변수가 이미 있습니다는 `initialState` 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-181">If a system event with the name specified for the `name` parameter already exists, the `initialState` parameter is ignored.</span></span> <span data-ttu-id="4049f-182">이 생성자를 호출한 후에 대 한 지정 된 변수에 값을 사용 하는 `ref` 매개 변수 (`ByRef` Visual Basic의) `createdNew` 여부는 명명 된 시스템 이벤트 이미 존재 했는지 또는 만들어졌는지를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="4049f-182">After calling this constructor, use the value in the variable specified for the `ref` parameter (`ByRef` parameter in Visual Basic) `createdNew` to determine whether the named system event already existed or was created.</span></span>  
  
 <span data-ttu-id="4049f-183">이벤트의 초기 상태를 신호 없음으로 이벤트를 대기 하는 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-183">If the initial state of the event is nonsignaled, threads that wait on the event will block.</span></span> <span data-ttu-id="4049f-184">초기 상태를 신호를 받으면 및 <xref:System.Threading.EventResetMode.ManualReset> 플래그가 지정 되어 `mode`, 이벤트를 대기 하는 스레드를 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-184">If the initial state is signaled, and the <xref:System.Threading.EventResetMode.ManualReset> flag is specified for `mode`, threads that wait on the event will not block.</span></span> <span data-ttu-id="4049f-185">초기 상태를 신호를 받으면 및 `mode` 은 <xref:System.Threading.EventResetMode.AutoReset>, 이벤트를 대기 하는 경우 첫 번째 스레드가 즉시 되는 이벤트가 다시 설정, 릴리스되며 후속 스레드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-185">If the initial state is signaled, and `mode` is <xref:System.Threading.EventResetMode.AutoReset>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-186">다음 코드 예제에서는 액세스 제어 보안을 사용 된 명명 된 시스템 이벤트의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-186">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="4049f-187">이 예제에서는 사용 된 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 이벤트의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-187">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="4049f-188">이벤트가 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 이벤트를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 변경 이벤트에 대 한 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-188">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="4049f-189">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-189">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="4049f-190">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한으로는 이벤트를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-190">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="4049f-191">권한이 변경 된 후 이벤트 신호를 대기 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-191">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="4049f-192">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우이 예제에서는 새 권한을 사용 하 여 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-192">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-193">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-193">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-194">명명된 이벤트가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-194">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="4049f-195">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 이벤트를 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-195">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-196">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-196">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-197">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-197">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-198">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-198">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As EventWaitHandleSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::EventWaitHandleSecurity ^ GetAccessControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4049f-199">현재 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 개체로 표시되는 명명된 시스템 이벤트에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Threading.EventWaitHandle" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-199">Gets an <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event represented by the current <see cref="T:System.Threading.EventWaitHandle" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-200">명명된 시스템 이벤트에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-200">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-201"><xref:System.Threading.EventWaitHandle.GetAccessControl%2A> 메서드 플래그 (비트 OR 연산을 사용 하 여 결합)는 다음과 같은 조합을 사용 하 여 사용 권한을 검색할: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, 및 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-201">The <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4049f-202">사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> 이 메서드를 호출 하는 이벤트에 대 한 권한을 사용 하 여 열려 있어야는 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-202">The user must have <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the event must have been opened with the <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-203">다음 코드 예제에서는 액세스 제어 보안을 사용 된 명명 된 시스템 이벤트의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-203">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="4049f-204">이 예제에서는 사용 된 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 이벤트의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-204">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="4049f-205">이벤트가 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 이벤트를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 변경 이벤트에 대 한 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-205">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="4049f-206">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-206">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="4049f-207">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한으로는 이벤트를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-207">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="4049f-208">사용 하 여 사용 권한을 읽은 후의 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> 메서드를 변경 하 고, 이벤트 신호를 대기 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-208">After the permissions have been read, using the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A> method, and changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="4049f-209">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우이 예제에서는 새 권한을 사용 하 여 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-209">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-210">현재 <see cref="T:System.Threading.EventWaitHandle" /> 개체가 명명된 시스템 이벤트를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-210">The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="4049f-211">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-211">-or-</span>
          </span>
          <span data-ttu-id="4049f-212">현재 <see cref="T:System.Threading.EventWaitHandle" /> 개체가 명명된 시스템 이벤트를 나타내지만 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />로 열리지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-212">The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4049f-213">Windows 98 또는 Windows Millennium Edition에서 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-213">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4049f-214">
            <see cref="M:System.Threading.WaitHandle.Close" /> 메서드가 이 <see cref="T:System.Threading.EventWaitHandle" />에 대해 이전에 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-214">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4049f-215">이미 있는 경우 지정한 명명된 동기화 이벤트를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-215">Opens a specified named synchronization event, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ OpenExisting(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4049f-216">열려는 시스템 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-216">The name of the system synchronization event to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-217">이미 있는 경우 지정한 명명된 동기화 이벤트를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-217">Opens the specified named synchronization event, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-218">명명된 시스템 이벤트를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-218">An  object that represents the named system event.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-219"><xref:System.Threading.EventWaitHandle.OpenExisting%2A> 메서드는 지정 된 명명 된 시스템 이벤트를 열려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-219">The <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method tries to open the specified named system event.</span></span> <span data-ttu-id="4049f-220">시스템 이벤트가 없는 경우이 메서드는 시스템 이벤트를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-220">If the system event does not exist, this method throws an exception instead of creating the system event.</span></span> <span data-ttu-id="4049f-221">이미 존재 하지 않으면 시스템 이벤트를 만들려면 중 하나를 사용는 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-221">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="4049f-222">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.EventWaitHandle> 반환 되는 개체는 같은 명명 된 시스템 이벤트를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-222">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 <span data-ttu-id="4049f-223">이 메서드 오버 로드 하는 것은 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-223">This method overload is equivalent to calling the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload and specifying <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="4049f-224">지정 하는 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 플래그 명명 된 시스템 이벤트를 대기 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.EventWaitHandle.Set%2A> 및 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-224">Specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the named system event, and specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-225">다음 코드 예제에서는 액세스 제어 보안을 사용 된 명명 된 시스템 이벤트의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-225">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="4049f-226">이 예제에서는 사용 된 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 이벤트의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-226">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="4049f-227">이벤트가 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 이벤트를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 변경 이벤트에 대 한 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-227">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="4049f-228">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-228">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="4049f-229">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한으로는 이벤트를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-229">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="4049f-230">권한이 변경 된 후 이벤트 신호를 대기 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-230">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="4049f-231">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우이 예제에서는 새 권한을 사용 하 여 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-231">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-232">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-232">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="4049f-233">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-233">-or-</span>
          </span>
          <span data-ttu-id="4049f-234">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-234">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4049f-235">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-235">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="4049f-236">명명된 시스템 이벤트가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-236">The named system event does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-237">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-237">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-238">명명된 이벤트가 있지만 사용자에게 이 이벤트를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-238">The named event exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-239">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-239">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-240">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-240">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.EventWaitHandle OpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.EventWaitHandle OpenExisting(string name, valuetype System.Security.AccessControl.EventWaitHandleRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As EventWaitHandleRights) As EventWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::EventWaitHandle ^ OpenExisting(System::String ^ name, System::Security::AccessControl::EventWaitHandleRights rights);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.EventWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.EventWaitHandleRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4049f-241">열려는 시스템 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-241">The name of the system synchronization event to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="4049f-242">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-242">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-243">이미 있는 경우 지정한 명명된 동기화 이벤트를 원하는 보안 액세스로 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-243">Opens the specified named synchronization event, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-244">명명된 시스템 이벤트를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-244">An object that represents the named system event.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-245">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 이벤트를 대기 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.EventWaitHandle.Set%2A> 및 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-245">The `rights` parameter must include the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the event, and the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="4049f-246"><xref:System.Threading.EventWaitHandle.OpenExisting%2A> 메서드 기존 명명 된 시스템 이벤트를 열려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-246">The <xref:System.Threading.EventWaitHandle.OpenExisting%2A> method tries to open an existing named system event.</span></span> <span data-ttu-id="4049f-247">시스템 이벤트가 없는 경우이 메서드는 시스템 이벤트를 만들지 않고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-247">If the system event does not exist, this method throws an exception instead of creating the system event.</span></span> <span data-ttu-id="4049f-248">이미 존재 하지 않으면 시스템 이벤트를 만들려면 중 하나를 사용는 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-248">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="4049f-249">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.EventWaitHandle> 반환 되는 개체는 같은 명명 된 시스템 이벤트를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-249">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-250">다음 코드 예제에서는 액세스 제어 보안을 사용 된 명명 된 시스템 이벤트의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-250">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="4049f-251">이 예제에서는 사용 된 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 이벤트의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-251">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="4049f-252">이벤트가 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 이벤트를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 변경 이벤트에 대 한 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-252">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="4049f-253">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-253">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="4049f-254">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한으로는 이벤트를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-254">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="4049f-255">권한이 변경 된 후 이벤트 신호를 대기 하는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-255">After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="4049f-256">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우이 예제에서는 새 권한을 사용 하 여 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-256">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-257">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-257">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="4049f-258">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-258">-or-</span>
          </span>
          <span data-ttu-id="4049f-259">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-259">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4049f-260">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-260">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="4049f-261">명명된 시스템 이벤트가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-261">The named system event does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-262">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-262">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-263">명명된 이벤트가 존재하지만 사용자에게 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-263">The named event exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-264">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-264">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-265">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-265">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4049f-266">이벤트 상태를 신호 없음으로 설정하여 스레드가 차단되도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-266">Sets the state of the event to nonsignaled, causing threads to block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-267">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-267">
              <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4049f-268">
            <see cref="M:System.Threading.WaitHandle.Close" /> 메서드가 이 <see cref="T:System.Threading.EventWaitHandle" />에 대해 이전에 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-268">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4049f-269">하나 이상의 대기 중인 스레드를 진행할 수 있도록 이벤트 상태를 신호 받음으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-269">Sets the state of the event to signaled, allowing one or more waiting threads to proceed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-270">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-270">
              <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-271">에 대 한 프로그램 <xref:System.Threading.EventWaitHandle> 와 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> (포함 하 여 <xref:System.Threading.AutoResetEvent>), <xref:System.Threading.EventWaitHandle.Set%2A> 메서드는 단일 스레드를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-271">For an <xref:System.Threading.EventWaitHandle> with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> (including <xref:System.Threading.AutoResetEvent>), the <xref:System.Threading.EventWaitHandle.Set%2A> method releases a single thread.</span></span> <span data-ttu-id="4049f-272">대기 스레드가 없는 경우, 또는 될 때까지 대기 하는 스레드를 시도할 때까지 대기 핸들 신호를 받은 되지 해당 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-272">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4049f-273">보장 되지 않습니다는를 호출할 때마다는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드에서 스레드를 해제 합니다는 <xref:System.Threading.EventWaitHandle> 인 재설정 모드는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-273">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread from an <xref:System.Threading.EventWaitHandle> whose reset mode is <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4049f-274">두 개를 호출 하는 스레드가 해제 되기 전에 두 번째 호출이 발생 너무 가까이 함께 인 하나의 스레드가 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-274">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="4049f-275">두 번째 호출에서는 발생 하지 않았으며 처럼 이며</span><span class="sxs-lookup"><span data-stu-id="4049f-275">It is as if the second call did not happen.</span></span> <span data-ttu-id="4049f-276">또한 경우 <xref:System.Threading.EventWaitHandle.Set%2A> 대기 하는 스레드가 없을 때 호출 되 고 <xref:System.Threading.EventWaitHandle> 이미 신호는 호출에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-276">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.EventWaitHandle> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="4049f-277">에 대 한는 <xref:System.Threading.EventWaitHandle> 와 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> (포함 하 여 <xref:System.Threading.ManualResetEvent>) 호출는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드 유지 될 때까지 신호를 받은 상태로 대기 핸들의 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-277">For an <xref:System.Threading.EventWaitHandle> with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> (including <xref:System.Threading.ManualResetEvent>), calling the <xref:System.Threading.EventWaitHandle.Set%2A> method leaves the wait handle in a signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-278">다음 코드 예제에서는 <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> 메서드 오버 로드를 주 스레드에서 차단 된 스레드 신호를 보내고는 스레드가 작업을 완료할 때까지 대기할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-278">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="4049f-279">이 예제에서는 5 개의 스레드를 시작 하 고 있는 경우 차단 될 수 있도록는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> 플래그를 다음 릴리스에서 사용자가 ENTER 키를 누를 때마다 스레드를 하나씩 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-279">The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="4049f-280">다음 예제에서는 다른 5 개의 스레드를 큐 대기를 사용 하 여 모든 해제는 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든는 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-280">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4049f-281">
            <see cref="M:System.Threading.WaitHandle.Close" /> 메서드가 이 <see cref="T:System.Threading.EventWaitHandle" />에 대해 이전에 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-281">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessControl (eventSecurity As EventWaitHandleSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::EventWaitHandleSecurity ^ eventSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSecurity" Type="System.Security.AccessControl.EventWaitHandleSecurity" />
      </Parameters>
      <Docs>
        <param name="eventSecurity">
          <span data-ttu-id="4049f-282">명명된 시스템 이벤트에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-282">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security to be applied to the named system event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-283">명명된 시스템 이벤트에 대해 액세스 제어 보안을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-283">Sets the access control security for a named system event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-284">사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> 이 메서드를 호출 하는 이벤트에 대 한 권한을 사용 하 여 열려 있어야는 <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-284">The user must have <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the event must have been opened with the <xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4049f-285">다음 코드 예제에서는 액세스 제어 보안을 사용 된 명명 된 시스템 이벤트의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-285">The following code example demonstrates the cross-process behavior of a named system event with access control security.</span></span> <span data-ttu-id="4049f-286">이 예제에서는 사용 된 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 메서드 오버 로드 된 명명 된 이벤트의 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-286">The example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload to test for the existence of a named event.</span></span>  
  
 <span data-ttu-id="4049f-287">이벤트가 존재 하지 않는 시스템 뮤텍스의 초기 소유권 및 이벤트를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 변경 이벤트에 대 한 권한을 부여 하는 액세스 제어 보안 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-287">If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</span></span>  
  
 <span data-ttu-id="4049f-288">두 번째 복사본에 대 한 호출에 대 한 액세스 위반 예외가 throw 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하면 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-288">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="4049f-289">예외가 발견 되 고 사용 하 여는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한으로는 이벤트를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-289">The exception is caught, and the example uses the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload to wait on the event with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="4049f-290">사용 권한을 사용 하 여 변경 된 후의 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A> 메서드를 이벤트 대기 및 신호를 보내는 데 필요한 권한으로 열립니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-290">After the permissions are changed, using the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A> method, the event is opened with the rights required to wait on it and signal it.</span></span> <span data-ttu-id="4049f-291">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우이 예제에서는 새 권한을 사용 하 여 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-291">If you run the compiled example from a third command window, the example runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/CS/source.cs#1)]
 [!code-vb[System.Threading.EventWaitHandle.ctor named 5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.EventWaitHandle.ctor named 5/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4049f-292">
            <paramref name="eventSecurity" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-292">
              <paramref name="eventSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-293">사용자에게 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-293">The user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="4049f-294">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-294">-or-</span>
          </span>
          <span data-ttu-id="4049f-295">이벤트가 <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />로 열리지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-295">The event was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="4049f-296">현재 <see cref="T:System.Threading.EventWaitHandle" /> 개체가 명명된 시스템 이벤트를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-296">The current <see cref="T:System.Threading.EventWaitHandle" /> object does not represent a named system event.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4049f-297">
            <see cref="M:System.Threading.WaitHandle.Close" /> 메서드가 이 <see cref="T:System.Threading.EventWaitHandle" />에 대해 이전에 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-297">The <see cref="M:System.Threading.WaitHandle.Close" /> method was previously called on this <see cref="T:System.Threading.EventWaitHandle" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4049f-298">지정된 명명된 synchronization 이벤트(이미 존재하는 경우)를 열고 작업이 성공적으로 수행되었는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-298">Opens a specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.EventWaitHandle result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.EventWaitHandle&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As EventWaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::EventWaitHandle ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.EventWaitHandle&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4049f-299">열려는 시스템 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-299">The name of the system synchronization event to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="4049f-300">이 메서드가 반환될 때 호출에 성공한 경우에는 명명된 동기화 이벤트를 나타내는 <see cref="T:System.Threading.EventWaitHandle" /> 개체를 포함하고 호출에 실패한 경우에는 <see langword="null" />을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-300">When this method returns, contains a <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named synchronization event if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="4049f-301">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-301">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-302">지정한 명명된 동기화 이벤트(이미 존재하는 경우)를 열고 작업이 성공했는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-302">Opens the specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-303">명명된 동기화 이벤트를 열었으면 <see langword="true" />이고, 열지 않았으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-303">
              <see langword="true" /> if the named synchronization event was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-304">명명 된 동기화 이벤트가 없는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-304">If the named synchronization event does not exist, this method does not create it.</span></span> <span data-ttu-id="4049f-305">이미 존재 하지 않으면 시스템 이벤트를 만들려면 중 하나를 사용는 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-305">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="4049f-306">대신이 메서드 오버 로드를 사용 하 여 명명 된 동기화 이벤트 있는지 잘 모르는 경우는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> 동기화 이벤트 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-306">If you are uncertain whether a named synchronization event exists, use this method overload instead of the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29> method overload, which throws an exception if the synchronization event does not exist.</span></span>  
  
 <span data-ttu-id="4049f-307">이 메서드 오버 로드 하는 것은 <xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29> 메서드 오버 로드를 지정 하 고 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-307">This method overload is equivalent to calling the <xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29> method overload and specifying <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="4049f-308">지정 하는 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 플래그 명명 된 시스템 이벤트를 대기 하는 스레드를 사용 하 고 지정 하는 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 플래그를 호출 하는 스레드를 사용할 수 있습니다는 <xref:System.Threading.EventWaitHandle.Set%2A> 및 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-308">Specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the named system event, and specifying the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="4049f-309">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.EventWaitHandle> 반환 되는 개체는 같은 명명 된 시스템 이벤트를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-309">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-310">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-310">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="4049f-311">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-311">-or-</span>
          </span>
          <span data-ttu-id="4049f-312">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-312">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4049f-313">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-313">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-314">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-314">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-315">명명된 이벤트가 존재하지만 사용자에게 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-315">The named event exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-316">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-316">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-317">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-317">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights, out System.Threading.EventWaitHandle result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.EventWaitHandleRights rights, [out] class System.Threading.EventWaitHandle&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As EventWaitHandleRights, ByRef result As EventWaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::EventWaitHandleRights rights, [Runtime::InteropServices::Out] System::Threading::EventWaitHandle ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="result" Type="System.Threading.EventWaitHandle&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4049f-318">열려는 시스템 동기화 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-318">The name of the system synchronization event to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="4049f-319">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-319">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="4049f-320">이 메서드가 반환될 때 호출에 성공한 경우에는 명명된 동기화 이벤트를 나타내는 <see cref="T:System.Threading.EventWaitHandle" /> 개체를 포함하고 호출에 실패한 경우에는 <see langword="null" />을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-320">When this method returns, contains a <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named synchronization event if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="4049f-321">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-321">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4049f-322">지정한 명명된 동기화 이벤트(이미 존재하는 경우)를 원하는 보안 액세스로 열고 작업이 성공적으로 수행되었는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-322">Opens the specified named synchronization event, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4049f-323">명명된 동기화 이벤트를 열었으면 <see langword="true" />이고, 열지 않았으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-323">
              <see langword="true" /> if the named synchronization event was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4049f-324">명명 된 동기화 이벤트가 없는 경우이 메서드가 만드는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-324">If the named synchronization event does not exist, this method does not create it.</span></span> <span data-ttu-id="4049f-325">이미 존재 하지 않으면 시스템 이벤트를 만들려면 중 하나를 사용는 <xref:System.Threading.EventWaitHandle.%23ctor%2A> 있는 생성자는 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-325">To create the system event when it does not already exist, use one of the <xref:System.Threading.EventWaitHandle.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="4049f-326">대신이 메서드 오버 로드를 사용 하 여 명명 된 동기화 이벤트 있는지 잘 모르는 경우는 <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> 동기화 이벤트 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-326">If you are uncertain whether a named synchronization event exists, use this method overload instead of the <xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29> method overload, which throws an exception if the synchronization event does not exist.</span></span>  
  
 <span data-ttu-id="4049f-327">`rights` 매개 변수를 포함 해야 합니다는 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 이벤트를 대기 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 호출 하는 스레드를 허용 하도록 플래그는 <xref:System.Threading.EventWaitHandle.Set%2A> 및 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4049f-327">The `rights` parameter must include the <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the event, and the <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.EventWaitHandle.Set%2A> and <xref:System.Threading.EventWaitHandle.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="4049f-328">에 대 한 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.EventWaitHandle> 반환 되는 개체는 같은 명명 된 시스템 이벤트를 나타낼 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4049f-328">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.EventWaitHandle> object, even though the objects that are returned represent the same named system event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4049f-329">
            <paramref name="name" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-329">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="4049f-330">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-330">-or-</span>
          </span>
          <span data-ttu-id="4049f-331">
            <paramref name="name" />이 260자 보다 긴 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-331">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4049f-332">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-332">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="4049f-333">Win32 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-333">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="4049f-334">명명된 이벤트가 존재하지만 사용자에게 필요한 보안 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-334">The named event exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="4049f-335">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-335">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="4049f-336">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4049f-336">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>