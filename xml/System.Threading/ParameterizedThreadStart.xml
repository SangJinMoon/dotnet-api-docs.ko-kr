<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterizedThreadStart.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51f89ab27a5d48225389ff0ad41c3bbc265121c09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f89ab27a5d48225389ff0ad41c3bbc265121c09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An object that contains data for the thread procedure.</source>
          <target state="translated">스레드 프로시저의 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Represents the method that executes on a <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>에서 실행되는 메서드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When a managed thread is created, the method that executes on the thread is represented by:</source>
          <target state="translated">관리 되는 스레드를 만들면 스레드에서 실행 되는 메서드의으로 표현 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> 에 전달 되는 대리자는 <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has no parameters and that returns <ph id="ph1">`void`</ph> in C# or is a <ph id="ph2">`Sub`</ph> procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">매개 변수가 없는 및 반환 하는 모든 메서드에 <ph id="ph1">`void`</ph> C# 또는 <ph id="ph2">`Sub`</ph> Visual Basic의 프로시저 대리자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 에 전달 되는 대리자는 <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has a single parameter of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">형식의 단일 매개 변수를 가진 모든 메서드에 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 되 고, C#에서 void를 반환 하거나는 Sub 프로시저 Visual Basic에서 대리자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The thread does not begin executing until the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">스레드가 실행 될 때까지 시작 되지 않습니다는 <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 스레드에서 호출 되는 대리자와 대리자가 나타내는 메서드의 첫 번째 줄에서 실행이 시작 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In the case of the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate, the object that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> method is passed to the delegate.</source>
          <target state="translated">경우에 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 대리자에 전달 되는 개체는 <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> 메서드에 대리자에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Visual Basic and C# users can omit the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate constructor when creating a thread.</source>
          <target state="translated">Visual Basic 및 C# 사용자가 생략할 수는 <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 스레드를 만드는 경우에 대리자 생성자입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In Visual Basic, use the <ph id="ph1">`AddressOf`</ph> operator when passing your method to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph> constructor; for example, <ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">Visual Basic에서 사용 하 여는 <ph id="ph1">`AddressOf`</ph> 되어 메서드가 전달 하는 경우 연산자는 <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph> 생성자; 예를 들어 <ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In C#, simply specify the name of the thread procedure.</source>
          <target state="translated">C#에서는 스레드 프로시저의 이름을 지정 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The compiler selects the correct delegate constructor.</source>
          <target state="translated">컴파일러는 올바른 대리자 생성자를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</source>
          <target state="translated">만들 때 한 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> c + +, 생성자의 첫 번째 매개 변수에서에서 인스턴스 메서드의 인스턴스 변수는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the first parameter of the constructor is zero.</source>
          <target state="translated">정적 메서드를 생성자의 첫 번째 매개 변수는 0입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</source>
          <target state="translated">정적 메서드의 대리자 생성자에 매개 변수가 하나만 필요한: 클래스 이름으로 정규화 된 콜백 메서드의 주소입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate and the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 위임 및 <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드 쉽게 데이터를 전달 하는 스레드 프로시저에 있지만이 방법은 형식이 안전 하지 않은 모든 개체에 전달 될 수 있으므로 <ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</source>
          <target state="translated">스레드 프로시저에 데이터를 전달 하는 보다 강력한 방법은 작업자 개체에 데이터 필드와 스레드 프로시저를 넣는 것입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Threads and Passing Data at Start Time<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스레드 만들기 및 시작 시 데이터 전달<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supports only a single parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 대리자에는 하나의 매개 변수만 지원 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>You can pass multiple data items to the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> by making that parameter one of the following:</source>
          <target state="translated">여러 데이터 항목을 전달할 수는 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 해당 매개 변수는 다음 중 하나를 수행 하 여:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An array.</source>
          <target state="translated">배열입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A collection type, if all of the data items are of the same type.</source>
          <target state="translated">데이터 항목은 모두 같은 유형의 컬렉션 형식.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A tuple type, such as <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> or <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>.</source>
          <target state="translated">같은 튜플을 입력 <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate to execute a static method and an instance method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 정적 메서드와 인스턴스 메서드를 실행할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The first <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is represented by the static <ph id="ph2">`DoWork`</ph> method and the second is represented by the instance <ph id="ph3">`DoMoreWork`</ph> method.</source>
          <target state="translated">첫 번째 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 대리자는 정적으로 표현 됩니다 <ph id="ph2">`DoWork`</ph> 메서드 및 두 번째는 인스턴스에서 나타내는 <ph id="ph3">`DoMoreWork`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Both methods match the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate signature; that is, they have a single parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> and don't return a value.</source>
          <target state="translated">두 방법 모두 일치는 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 대리자 시그니처와; 형식의 단일 매개 변수 즉, 서로 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 있으며 값을 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The Visual Basic and C# compilers infer the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate from the signatures of the <ph id="ph2">`DoWork`</ph> and <ph id="ph3">`DoMoreWork`</ph> methods, and call the correct constructor.</source>
          <target state="translated">Visual Basic 및 C# 컴파일러에서 유추할는 <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> 대리자의 시그니처와 <ph id="ph2">`DoWork`</ph> 및 <ph id="ph3">`DoMoreWork`</ph> 메서드와 올바른 생성자를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Thus, there is no explicit constructor call in the code.</source>
          <target state="translated">따라서 코드에 없는 명시적 생성자 호출이입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>