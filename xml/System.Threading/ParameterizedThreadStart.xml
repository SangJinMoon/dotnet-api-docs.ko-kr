<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7e9809df31d945522ec0d059c85cdd015cbce79" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606272" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">An object that contains data for the thread procedure.</param>
    <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되는 스레드를 만들면 스레드에서 실행 되는 메서드의으로 표현 됩니다.  
  
-   A <xref:System.Threading.ThreadStart> 에 전달 되는 대리자는 <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> 생성자입니다.  매개 변수가 없는 및 반환 하는 모든 메서드에 `void` C# 또는 `Sub` Visual Basic의 프로시저 대리자를 나타낼 수 있습니다.  
  
-   A <xref:System.Threading.ParameterizedThreadStart> 에 전달 되는 대리자는 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> 생성자입니다. 형식의 단일 매개 변수를 가진 모든 메서드에 <xref:System.Object> 되 고, C#에서 void를 반환 하거나는 Sub 프로시저 Visual Basic에서 대리자를 나타낼 수 있습니다.  
  
 스레드가 실행 될 때까지 시작 되지 않습니다는 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 메서드를 호출 합니다. <xref:System.Threading.ThreadStart> 또는 <xref:System.Threading.ParameterizedThreadStart> 스레드에서 호출 되는 대리자와 대리자가 나타내는 메서드의 첫 번째 줄에서 실행이 시작 합니다. 경우에 <xref:System.Threading.ParameterizedThreadStart> 대리자에 전달 되는 개체는 <xref:System.Threading.Thread.Start%28System.Object%29> 메서드에 대리자에 전달 됩니다.  
  
> [!NOTE]
>  Visual Basic 및 C# 사용자가 생략할 수는 <xref:System.Threading.ThreadStart> 또는 <xref:System.Threading.ParameterizedThreadStart> 스레드를 만드는 경우에 대리자 생성자입니다. Visual Basic에서 사용 하 여는 `AddressOf` 되어 메서드가 전달 하는 경우 연산자는 <xref:System.Threading.Thread.%23ctor%2A> 생성자; 예를 들어 `Dim t As New Thread(AddressOf ThreadProc)`합니다. C#에서는 스레드 프로시저의 이름을 지정 하면 됩니다. 컴파일러는 올바른 대리자 생성자를 선택 합니다.  
  
> [!NOTE]
>  만들 때 한 <xref:System.Threading.ParameterizedThreadStart> c + +, 생성자의 첫 번째 매개 변수에서에서 인스턴스 메서드의 인스턴스 변수는 대리자입니다. 정적 메서드를 생성자의 첫 번째 매개 변수는 0입니다. 정적 메서드의 대리자 생성자에 매개 변수가 하나만 필요한: 클래스 이름으로 정규화 된 콜백 메서드의 주소입니다.  
  
 <xref:System.Threading.ParameterizedThreadStart> 위임 및 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드 쉽게 데이터를 전달 하는 스레드 프로시저에 있지만이 방법은 형식이 안전 하지 않은 모든 개체에 전달 될 수 있으므로 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>합니다. 스레드 프로시저에 데이터를 전달 하는 보다 강력한 방법은 작업자 개체에 데이터 필드와 스레드 프로시저를 넣는 것입니다. 자세한 내용은 참조 [스레드 만들기 및 시작 시 데이터 전달](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)합니다.  
  
 <xref:System.Threading.ParameterizedThreadStart> 대리자에는 하나의 매개 변수만 지원 합니다. 여러 데이터 항목을 전달할 수는 <xref:System.Threading.ParameterizedThreadStart> 해당 매개 변수는 다음 중 하나를 수행 하 여:  
  
-   배열입니다.  
  
-   데이터 항목은 모두 같은 유형의 컬렉션 형식.  
  
-   같은 튜플을 입력 <xref:System.Tuple%602> 또는 <xref:System.Tuple%604>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Threading.ParameterizedThreadStart> 정적 메서드와 인스턴스 메서드를 실행할 대리자입니다. 첫 번째 <xref:System.Threading.ParameterizedThreadStart> 대리자는 정적으로 표현 됩니다 `DoWork` 메서드 및 두 번째는 인스턴스에서 나타내는 `DoMoreWork` 메서드. 두 방법 모두 일치는 <xref:System.Threading.ParameterizedThreadStart> 대리자 시그니처와; 형식의 단일 매개 변수 즉, 서로 <xref:System.Object> 있으며 값을 반환 하지 않습니다.  
  
> [!NOTE]
>  Visual Basic 및 C# 컴파일러에서 유추할는 <xref:System.Threading.ParameterizedThreadStart> 대리자의 시그니처와 `DoWork` 및 `DoMoreWork` 메서드와 올바른 생성자를 호출 합니다. 따라서 코드에 없는 명시적 생성자 호출이입니다.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>