<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f3e3a0d4297d65c72643c8d8d5fd64c4d366c45" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36500796" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>대화형으로 <see cref="T:System.Windows.Media.Animation.Clock" />을 제어합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 한 <xref:System.Windows.Media.Animation.ClockController> 대화형으로 시작, 일시 중지, 다시 시작, 검색, 건너뛰기, 중지 및 제거 하는 <xref:System.Windows.Media.Animation.Clock>합니다. 루트 수준의 클럭만 대화형으로 제어할 수 있습니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>다음 눈금에서 시작할 대상 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" />을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하면 대상 <xref:System.Windows.Media.Animation.Clock> 것 처럼 동작 하도록 해당 <xref:System.Windows.Media.Animation.Timeline> 개체의 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 다음 틱의 시간으로 설정 되었습니다. 타임 라인의 실제 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 설정은 무시 됩니다 (이지만 변경 되지 않습니다).  
  
 이 메서드는 대상 클록의 변경 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 를 <xref:System.Windows.Media.Animation.ClockState.Active>합니다. <xref:System.Windows.Media.Animation.ClockController.Begin%2A> 메서드 일시 중지 된 클록 다시 시작 되지 않습니다.  
  
 이 메서드는 다음 번 틱을 처리할 때까지 타이밍 트리에 영향을 주지는. 파생 작업으로 적절 한 이벤트는 또한 발생 하지 그때 까지는. 이 메서드를 호출는 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 및 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Media.Animation.Clock" />에 의해 제어되는 <see cref="T:System.Windows.Media.Animation.ClockController" />을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Media.Animation.Clock" />에 의해 제어되는 <see cref="T:System.Windows.Media.Animation.ClockController" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>대상 <see cref="T:System.Windows.Media.Animation.Clock" />의 진행을 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일시 중지할 수 있습니다는 <xref:System.Windows.Media.Animation.Clock> clock 해당 현재 상태와 일시 중지에 관계 없이 현재 상태는 변경 되지 않습니다. 클록 일시 중지할 수 동안 <xref:System.Windows.Media.Animation.ClockState.Active>, <xref:System.Windows.Media.Animation.ClockState.Stopped>, 또는 <xref:System.Windows.Media.Animation.ClockState.Filling>합니다. 사용 하 여 클록 일시 중지를 해제 하는 유일한 방법은는 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> 메서드. 클록을 암시적으로 일시 중지 자식을 일시 중지 됩니다.  
  
 대상 클록 이미 일시 중지 된 경우이 메서드를 호출 해도 아무 효과가 없습니다.  
  
 클록 트리거 일시 중지는 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Windows.Media.Animation.Clock" />와 연결된 <see cref="T:System.Windows.Media.Animation.ClockController" />을 애니메이션이 적용된 속성에서 제거합니다. Clock과 자식 Clock은 더 이상 이러한 속성에 영향을 주지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 트리거합니다는 <xref:System.Windows.Media.Animation.Clock.RemoveRequested> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 클록 대화형으로 제어 하는 방법을 보여 줍니다.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이전에 일시 중지된 <see cref="T:System.Windows.Media.Animation.Clock" />을 활성화하여 진행을 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일시 중지 하거나 다시 시작할 수는 <xref:System.Windows.Media.Animation.Clock> clock의 현재 상태 및 일시 중지 하거나 재개 하는 것에 관계 없이 현재 상태는 변경 되지 않습니다. 클록 일시 중지할 수 동안 <xref:System.Windows.Media.Animation.ClockState.Active>, <xref:System.Windows.Media.Animation.ClockState.Stopped>, 또는 <xref:System.Windows.Media.Animation.ClockState.Filling>합니다. 사용 하 여 일시 중지 된 시계를 다시 시작 하는 유일한 방법은는 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> 메서드. 암시적으로 clock 자식 다시 시작 합니다. 일시 중지 되지 않은 클록에서이 메서드를 호출 해도 아무 효과가 없습니다.  
  
 일시 중지 된 클록 트리거를 다시 시작은 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">대상 클록의 시간으로 측정된 검색 오프셋입니다. 이 오프셋은 <c>origin</c>의 값에 따라 클록의 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 또는 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />을 기준으로 합니다.</param>
        <param name="origin">지정된 오프셋이 대상 Clock의 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 또는 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />을 기준으로 하는지 여부를 나타내는 값입니다.</param>
        <summary>다음 틱이 발생할 때 지정된 크기만큼 대상 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" />을 검색합니다. 대상 클록이 중지된 경우 검색하면 다시 활성화됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seek 작업을 사용 하지 않습니다는 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 또는 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 이 시계의 타임이 라인의 설정을 고려: 클록의 타임 라인에 처럼 처리 되는 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 및 0의 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>합니다.  
  
 이 메서드는 클록의 변경 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 를 <xref:System.Windows.Media.Animation.ClockState.Active>합니다. 이 메서드는 다음 번 틱을 처리할 때까지 타이밍 트리에 영향을 주지는. 파생 작업으로 적합 한 이벤트가 발생 하지 않습니다 그때 까지는 합니다.  
  
 스토리 보드 트리거 검색는 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 및 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 이벤트입니다.  
  
 자식이 대상 클록의 현재 시간 그에 따라 업데이트 됩니다.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 검색 하는 방법을 보여 줍니다는 <xref:System.Windows.Media.Animation.ClockController>합니다.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">대상 클록의 시간으로 측정된 검색 오프셋입니다. 이 오프셋은 <c>origin</c>의 값에 따라 클록의 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 또는 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />을 기준으로 합니다.</param>
        <param name="origin">지정된 오프셋이 대상 Clock의 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 또는 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" />을 기준으로 하는지 여부를 나타내는 값입니다.</param>
        <summary>지정된 크기만큼 대상 <see cref="T:System.Windows.Media.Animation.Clock" />을 즉시 검색합니다. 대상 클록이 중지된 경우 검색하면 다시 활성화됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seek 작업을 사용 하지 않습니다는 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 또는 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 이 시계의 타임이 라인의 설정을 고려: 클록의 타임 라인에 처럼 처리 되는 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 및 0의 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>합니다.  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> seeked 시간을 마지막 클록 틱 효과 맞춥니다. 값이로 인해 변경 내용을 반영 하도록 업데이트 즉시 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>함에도 불구 화면 화면 업데이트 될 때까지이 변경 내용이 반영 되지 것입니다.  
  
 자식이 대상 클록의 현재 시간 그에 따라 업데이트 됩니다.  
  
 이 메서드는 클록의 변경 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 를 <xref:System.Windows.Media.Animation.ClockState.Active>합니다.  
  
 스토리 보드 트리거 검색는 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 및 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 모두는 <xref:System.Windows.Media.Animation.ClockController.Seek%2A> 및 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 의 메서드는 <xref:System.Windows.Media.Animation.ClockController>합니다.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>대상 <see cref="T:System.Windows.Media.Animation.Clock" />의 현재 시간을 활성 기간 끝으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 대상 클록의 이동은 활성 기간의 끝으로 현재 시간 클록의이 시점으로 동작이 지정 되는 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 설정인 해당 <xref:System.Windows.Media.Animation.Timeline>합니다. 경우 타임 라인의 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 속성이 <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>는 속성이로 설정 된 경우 클록 채웁니다; <xref:System.Windows.Media.Animation.FillBehavior.Stop>, 클록 중지 합니다.  
  
 이 메서드는 경우에만 적용 대상 클록의 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 은 <xref:System.Windows.Media.Animation.ClockState.Active>합니다.  
  
 이 메서드는 다음 번 틱을 처리할 때까지 타이밍 트리에 영향을 주지는. 파생 작업으로 적합 한 이벤트가 발생 하지 않습니다 그때 까지는 합니다.  
  
 스토리 보드의 채우기 기간 트리거 당기지는 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 및 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 이벤트입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대상 <see cref="T:System.Windows.Media.Animation.Clock" />의 대화형 속도를 가져오거나 설정합니다.</summary>
        <value>대상 클록의 대화형 속도를 설명하는 0보다 큰 유한 값입니다. 이 값은 Clock <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />의 <see cref="T:System.Windows.Media.Animation.Timeline" /> 값과 곱해집니다. 예를 들어, Timeline의 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />가 0.5이고 <see cref="T:System.Windows.Media.Animation.ClockController" /> 개체의 <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />가 3.0이면 Timeline은 정상 속도의 1.5배로 이동합니다(0.5 * 3.0). 기본값은 1.0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정는 다음 틱까지 효과가 없습니다. 이 속성을 설정 하 고 다음 하기 전에 해당 값을 가져올 경우 다음 틱이 발생할 이전 값을 얻게 됩니다. 이 속성은 다음 틱 후 새 값을 반환 합니다.  
  
 이 속성을 설정 기본 타임 라인의 값을 변경 하지 않는 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>합니다.  
  
 대상 클록의 트리거합니다이 속성을 설정할 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>대상 <see cref="T:System.Windows.Media.Animation.Clock" />을 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 대상 클록의 변경 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> 를 <xref:System.Windows.Media.Animation.Clock.Stopped%2A>합니다.  
  
 A <xref:System.Windows.Media.Animation.Clock.Stopped%2A> 시계를 사용 하 여 다시 시작할 수는 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>, <xref:System.Windows.Media.Animation.ClockController.Seek%2A>, 또는 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 메서드.  
  
 이 메서드는 다음 번 틱을 처리할 때까지 타이밍 트리에 영향을 주지는. 파생 작업으로 적합 한 이벤트가 발생 하지 않습니다 그때 까지는 합니다.  
  
 클록 트리거 중지는 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> 및 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> 이벤트 하지 않고는 <xref:System.Windows.Media.Animation.Clock.Completed> 이벤트입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>