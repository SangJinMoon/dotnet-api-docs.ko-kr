<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Animatable.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58ea9713148e10c8f9a95421b6bcd7b78a6cb4d56.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ea9713148e10c8f9a95421b6bcd7b78a6cb4d56</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Media.Animation.Animatable">
          <source>Abstract class that provides animation support.</source>
          <target state="translated">애니메이션 지원을 제공하는 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Windows.Media.Animation.Animatable">
          <source>Animates the specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>을 사용하여 지정된 <ph id="ph2">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph>에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The clock with which to animate the specified property.</source>
          <target state="translated">지정된 속성에 애니메이션 효과를 주는 데 사용할 시계입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>clock<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, all animations will be removed from the specified property (but not stopped).</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>clock<ept id="p1">&lt;/c&gt;</ept>이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우 지정된 속성에서 모든 애니메이션이 중지되지 않고 제거됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Applies an <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>에 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph>을 적용합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>If the property is already animated, the <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> handoff behavior is used.</source>
          <target state="translated">속성에 이미 애니메이션 효과가 적용되어 있으면 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> 전달 동작이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Note that using this method to removing clocks from a property does not stop those clocks.</source>
          <target state="translated">속성에서 시간이 제거 하려면이 메서드를 사용 하는 해당 clock 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The clock with which to animate the specified property.</source>
          <target state="translated">지정된 속성에 애니메이션 효과를 주는 데 사용할 시계입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> and <bpt id="p2">&lt;c&gt;</bpt>clock<ept id="p2">&lt;/c&gt;</ept> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, all animations will be removed from the specified property (but not stopped).</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>이고 <bpt id="p2">&lt;c&gt;</bpt>clock<ept id="p2">&lt;/c&gt;</ept>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우 지정된 속성에서 모든 애니메이션이 중지되지 않고 제거됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /&gt;</ph> and clock is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, this method has no effect.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /&gt;</ph>이고 clock이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이면 이 메서드를 사용해도 아무런 영향이 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value that specifies how the new animation should interact with any current animations already affecting the property value.</source>
          <target state="translated">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재 애니메이션과 상호 작용하는 방법을 지정하는 값입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>에 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph>을 적용합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the property is already animated, the specified <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.HandoffBehavior" /&gt;</ph> is used.</source>
          <target state="translated">속성에 이미 애니메이션이 적용되어 있으면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.HandoffBehavior" /&gt;</ph>가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note that using this method to remove clocks from a property does not stop those clocks.</source>
          <target state="translated">제거 하려면이 메서드를 사용 하 여 속성에서 시간이 해당 clock 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">사용 하 여 HandoffBehavior 작성</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</source>
          <target state="translated">적용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 사용 하 여 속성에는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>있으면 모든 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> 해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 되지 것입니다 이러한 clock를 자동으로 제거 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To avoid performance issues when you apply a large number of clocks using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">많은 수의 시계를 사용 하 여 적용 하는 경우 성능 문제를 방지 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>There are several ways to remove a clock.</source>
          <target state="translated">여러 가지 방법으로 클록을 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> 애니메이션된 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This will remove all animation clocks from the property.</source>
          <target state="translated">이렇게 하면 해당 속성에서 모든 애니메이션 클록이 제거됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">특정을 제거 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 클록 목록에서 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 검색 하는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, 호출는 <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> 의 메서드는 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock will return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 자식 클록의 속성은 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event will not be called if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 이벤트 시계의 유효 기간을 무제한 인 경우 호출 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>In that case, the user will need to determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">경우에 사용자가 호출 하는 경우를 결정 해야 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When an object is garbage collected, its clocks will also be disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집될 경우 해당 클록도 연결이 끊어지고 가비지가 수집됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For more information about clock objects, see the <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example shows how to apply animation clocks using different <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph> settings.</source>
          <target state="translated">다음 예제에서는 다른을 사용 하 여 애니메이션 클록을 적용 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="T:System.Windows.Media.Animation.Animatable">
          <source>Applies an animation to the specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The animation used to animate the specified property.</source>
          <target state="translated">지정된 속성에 애니메이션 효과를 주는 데 사용할 애니메이션입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the animation's <ph id="ph1">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, any current animations will be removed and the current value of the property will be held.</source>
          <target state="translated">애니메이션의 <ph id="ph1">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이면 현재 애니메이션이 모두 제거되고 속성의 현재 값이 유지됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>animation<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, all animations will be removed from the property and the property value will revert back to its base value.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>animation<ept id="p1">&lt;/c&gt;</ept>이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 모든 애니메이션이 속성에서 제거되고 속성 값이 기준 값으로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Applies an animation to the specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The animation is started when the next frame is rendered.</source>
          <target state="translated">애니메이션은 다음 프레임을 렌더링할 때 시작됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the specified property is already animated, the <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> handoff behavior is used.</source>
          <target state="translated">지정된 속성에 이미 애니메이션 효과가 적용되어 있으면 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> 전달 동작이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the animation has a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</source>
          <target state="translated">애니메이션에는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 0 보다 큼 즉, 해당 시간이 경과한 후 다음 프레임이 렌더링 되는 시간에서 애니메이션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation used to animate the specified property.</source>
          <target state="translated">지정된 속성에 애니메이션 효과를 주는 데 사용할 애니메이션입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> and the animation's <ph id="ph2">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>, any current animations will be removed and the current value of the property will be held.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>이고 애니메이션의 <ph id="ph2">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph>이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>이면 현재 애니메이션은 제거되며 속성의 현재 값이 유지됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph> and <bpt id="p2">&lt;c&gt;</bpt>animation<ept id="p2">&lt;/c&gt;</ept> is a <ph id="ph2">&lt;see langword="null" /&gt;</ph> reference, all animations will be removed from the property and the property value will revert back to its base value.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>이고 <bpt id="p2">&lt;c&gt;</bpt>animation<ept id="p2">&lt;/c&gt;</ept>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 참조이면 모든 애니메이션이 속성에서 제거되며 속성 값이 기준 값으로 되돌아갑니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /&gt;</ph>, this method will have no effect if the animation or its <ph id="ph2">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>handoffBehavior<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /&gt;</ph>인 경우 애니메이션 또는 해당 <ph id="ph2">&lt;see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /&gt;</ph>이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>이면 이 메서드를 사용해도 아무런 영향이 없습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value that specifies how the new animation should interact with any current animations already affecting the property value.</source>
          <target state="translated">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재 애니메이션과 상호 작용하는 방법을 지정하는 값입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an animation to the specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation is started when the next frame is rendered.</source>
          <target state="translated">애니메이션은 다음 프레임을 렌더링할 때 시작됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the specified property is already animated, the specified <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.HandoffBehavior" /&gt;</ph> is used.</source>
          <target state="translated">지정된 속성에 이미 애니메이션이 적용되어 있으면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.HandoffBehavior" /&gt;</ph>가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the animation has a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</source>
          <target state="translated">애니메이션에는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 0 보다 큼 즉, 해당 시간이 경과한 후 다음 프레임이 렌더링 되는 시간에서 애니메이션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">사용 하 여 HandoffBehavior 작성</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</source>
          <target state="translated">적용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 사용 하 여 속성에는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>있으면 모든 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> 해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 되지 것입니다 이러한 clock를 자동으로 제거 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To avoid performance issues when you apply a large number of clocks using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">많은 수의 시계를 사용 하 여 적용 하는 경우 성능 문제를 방지 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>There are several ways to remove a clock.</source>
          <target state="translated">여러 가지 방법으로 클록을 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> 애니메이션된 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This will remove all animation clocks from the property.</source>
          <target state="translated">이렇게 하면 해당 속성에서 모든 애니메이션 클록이 제거됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">특정을 제거 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 클록 목록에서 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 검색 하는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, 호출는 <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> 의 메서드는 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock will return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 자식 클록의 속성은 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event will not be called if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 이벤트 시계의 유효 기간을 무제한 인 경우 호출 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>In that case, the user will need to determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">경우에 사용자가 호출 하는 경우를 결정 해야 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When an object is garbage collected, its clocks will also be disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집될 경우 해당 클록도 연결이 끊어지고 가비지가 수집됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For more information about clock objects, see the <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example shows how to apply animations using different <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph> settings.</source>
          <target state="translated">다음 예제에서는 다른을 사용 하 여 애니메이션을 적용 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>Creates a modifiable clone of this <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph>, making deep copies of this object's values.</source>
          <target state="translated">이 개체 값의 전체 복사본을 만들어 이 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph>의 수정 가능한 복제본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>When copying this object's dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</source>
          <target state="translated">이 개체의 종속성 속성을 복사할 때 이 메서드는 리소스 참조와 데이터 바인딩을 복사하지만 이러한 요소는 더 이상 확인되지 않으며 애니메이션이나 애니메이션의 현재 값은 복사하지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>A modifiable clone of this instance.</source>
          <target state="translated">이 인스턴스의 수정 가능한 복제본입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>The returned clone is effectively a deep copy of the current object.</source>
          <target state="translated">반환되는 복제본은 사실상 현재 개체의 전체 복사본입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>The clone's <ph id="ph1">&lt;see cref="P:System.Windows.Freezable.IsFrozen" /&gt;</ph> property is <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
          <target state="translated">복제본의 <ph id="ph1">&lt;see cref="P:System.Windows.Freezable.IsFrozen" /&gt;</ph> 속성은 <bpt id="p1">**</bpt>false<ept id="p1">**</ept>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.Clone%2A&gt;</ph> method can be used to produce modifiable copies of frozen <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.Clone%2A&gt;</ph> 의 수정 가능한 복사본을 만드는 메서드를 사용할 수 고정 <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.Clone">
          <source>For convenience, this method shadows the inherited <ph id="ph1">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> method to provide a strongly typed implementation.</source>
          <target state="translated">편의 위해이 메서드는 상속 된 숨깁니다 <ph id="ph1">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> 메서드는 강력한 형식의 구현을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this method should simply determine whether this instance can be frozen.</source>
          <target state="translated">이 메서드가 이 인스턴스의 고정 가능 여부만 확인해야 하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고,</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if this instance should actually freeze itself when this method is called.</source>
          <target state="translated">이 메서드가 호출될 때 이 인스턴스를 실제로 고정해야 하면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>Makes this <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> object unmodifiable or determines whether it can be made unmodifiable.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> 개체를 수정할 수 없게 만들거나, 수정할 수 없게 만들 수 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="isChecking" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this method returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> if this <ph id="ph4">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> can be made unmodifiable, or <ph id="ph5">&lt;see langword="false" /&gt;</ph> if it cannot be made unmodifiable.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="isChecking" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>인 경우 이 메서드는 이 <ph id="ph4">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph>을 수정할 수 없게 만들 수 있으면 <ph id="ph3">&lt;see langword="true" /&gt;</ph>를, 그렇지 않으면 <ph id="ph5">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="isChecking" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this method returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> if the if this <ph id="ph4">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> is now unmodifiable, or <ph id="ph5">&lt;see langword="false" /&gt;</ph> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="isChecking" /&gt;</ph>이 <ph id="ph2">&lt;see langword="false" /&gt;</ph>인 경우 이 메서드는 이 <ph id="ph4">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph>이 수정할 수 없게 설정되었으면 <ph id="ph3">&lt;see langword="true" /&gt;</ph>를 반환하고, 이 개체의 고정 상태가 변경되므로 수정할 수 없게 설정할 수 없으면 <ph id="ph5">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>This method will return <bpt id="p1">**</bpt>false<ept id="p1">**</ept> when <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A&gt;</ph> is <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
          <target state="translated">이 메서드는 반환 <bpt id="p1">**</bpt>false<ept id="p1">**</ept> 때 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A&gt;</ph> 은 <bpt id="p2">**</bpt>true<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>Do not call this method directly (except when calling base in an implementation).</source>
          <target state="translated">직접 (제외 경우 기본 구현에서 호출)이이 메서드를 호출 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>This method is called internally by <ph id="ph1">&lt;xref:System.Windows.Freezable.CanFreeze%2A&gt;</ph> (with <ph id="ph2">`isChecking`</ph> equal to <ph id="ph3">`true`</ph>) and  <ph id="ph4">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph> (with <ph id="ph5">`isChecking`</ph> equal to <ph id="ph6">`false`</ph>).</source>
          <target state="translated">이 메서드는 내부적으로 <ph id="ph1">&lt;xref:System.Windows.Freezable.CanFreeze%2A&gt;</ph> (와 <ph id="ph2">`isChecking`</ph> 같지 <ph id="ph3">`true`</ph>) 및 <ph id="ph4">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph> (으로 <ph id="ph5">`isChecking`</ph> 같지 <ph id="ph6">`false`</ph>).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>Classes that derive from <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> must override this method when the class contains data that is not stored using dependency properties.</source>
          <target state="translated">파생 된 클래스 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.Animatable" /&gt;</ph> 클래스 종속성 속성을 사용 하 여 저장 되지 않은 데이터를 포함 하는 경우이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)">
          <source>A typical implementation would call the base implementation, then call the static <ph id="ph1">&lt;see cref="M:System.Windows.Freezable.Freeze" /&gt;</ph> method on all <ph id="ph2">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> typed properties that the class contains, returning <ph id="ph3">&lt;see langword="true" /&gt;</ph> only if all properties were frozen (or could have been frozen, in the case of passing through a <ph id="ph4">&lt;see langword="false" /&gt;</ph> value for <ph id="ph5">&lt;paramref name="isChecking" /&gt;</ph>).</source>
          <target state="translated">일반적인 구현에서 기본 구현을 호출한 다음 호출 하 여 정적 <ph id="ph1">&lt;see cref="M:System.Windows.Freezable.Freeze" /&gt;</ph> 모든 메서드 <ph id="ph2">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> 형식 반환, 클래스에 들어 있는 속성 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 모든 속성이 고정 된 경우에 (또는 고정 수에 통해 전달 하는 사례는 <ph id="ph4">&lt;see langword="false" /&gt;</ph> 값 <ph id="ph5">&lt;paramref name="isChecking" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Identifies the property whose base (non-animated) value should be retrieved.</source>
          <target state="translated">애니메이션이 적용되지 않은 기준 값을 검색하는 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Returns the non-animated value of the specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>의 애니메이션이 적용되지 않은 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The value that would be returned if the specified property were not animated.</source>
          <target state="translated">지정된 속성에 애니메이션이 적용되지 않은 경우 반환되는 값입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If the specified property is not animated, this method returns the same result as <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph>.</source>
          <target state="translated">이 메서드가 반환과 같은 결과가 지정된 된 속성 움직이지 않으면 <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>In the following example, the non-animated values of animated properties are retrieved and displayed.</source>
          <target state="translated">다음 예제에서는 애니메이션이 적용 되지 않은 속성 값을 애니메이션 효과가 적용 된 검색 및 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties">
          <source>Gets a value that indicates whether one or more <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> objects is associated with any of this object's dependency properties.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> 개체가 이 개체의 종속성 속성과 연결되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if one or more <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> objects is associated with any of this object's dependency properties; otherwise, <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>true 이면<ept id="p1">**</ept> 하나 이상 있으면 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Animation.AnimationClock" /&gt;</ph> 개체가 고, 그렇지 않으면이 개체의 종속성 속성의 모든 관련 <bpt id="p2">**</bpt>false<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties">
          <source>This property does not indicate whether this object contains animated sub-objects.</source>
          <target state="translated">이 속성은이 개체에 애니메이션 효과 준된 하위 개체가 포함 되는지 여부를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)">
          <source>Represents an object that participates in the dependency property system.</source>
          <target state="translated">종속성 속성 시스템에 참가하는 개체를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)">
          <source>Specifies whether a dependency object should be serialized.</source>
          <target state="translated">종속성 개체를 serialize해야 하는지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to serialize <ph id="ph2">&lt;paramref name="target" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="target" /&gt;</ph>을 serialize하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> class uses the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A&gt;</ph> method to determine if a property should be serialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> 클래스에서 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A&gt;</ph> 속성을 serialize 해야 하는지 결정 하는 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>