<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ea9713148e10c8f9a95421b6bcd7b78a6cb4d56" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Animatable&#xA;Inherits Freezable&#xA;Implements IAnimatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Animatable abstract : System::Windows::Freezable, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="923c5-101">애니메이션 지원을 제공하는 추상 클래스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="923c5-101">Abstract class that provides animation support.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Animatable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="923c5-102">
            <see cref="T:System.Windows.Media.Animation.Animatable" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-102">Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Animatable" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="923c5-103">지정된 <see cref="T:System.Windows.DependencyProperty" />을 사용하여 지정된 <see cref="T:System.Windows.Media.Animation.AnimationClock" />에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-103">Animates the specified <see cref="T:System.Windows.DependencyProperty" /> using the specified <see cref="T:System.Windows.Media.Animation.AnimationClock" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="923c5-104">애니메이션 효과를 주는 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-104">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="923c5-105">지정된 속성에 애니메이션 효과를 주는 데 사용할 시계입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-105">The clock with which to animate the specified property.</span>
          </span>
          <span data-ttu-id="923c5-106">
            <c>clock</c>이 <see langword="null" />인 경우 지정된 속성에서 모든 애니메이션이 중지되지 않고 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-106">If <c>clock</c> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-107">지정된 <see cref="T:System.Windows.DependencyProperty" />에 <see cref="T:System.Windows.Media.Animation.AnimationClock" />을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-107">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="923c5-108">속성에 이미 애니메이션 효과가 적용되어 있으면 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 전달 동작이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-108">If the property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-109">속성에서 시간이 제거 하려면이 메서드를 사용 하는 해당 clock 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-109">Note that using this method to removing clocks from a property does not stop those clocks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="923c5-110">애니메이션 효과를 주는 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-110">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="923c5-111">지정된 속성에 애니메이션 효과를 주는 데 사용할 시계입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-111">The clock with which to animate the specified property.</span>
          </span>
          <span data-ttu-id="923c5-112">
            <c>handoffBehavior</c>가 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이고 <c>clock</c>이 <see langword="null" />인 경우 지정된 속성에서 모든 애니메이션이 중지되지 않고 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-112">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <c>clock</c> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span>
          </span>
          <span data-ttu-id="923c5-113">
            <c>handoffBehavior</c>가 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />이고 clock이 <see langword="null" />이면 이 메서드를 사용해도 아무런 영향이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-113">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> and clock is <see langword="null" />, this method has no effect.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="923c5-114">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재 애니메이션과 상호 작용하는 방법을 지정하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-114">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-115">지정된 <see cref="T:System.Windows.DependencyProperty" />에 <see cref="T:System.Windows.Media.Animation.AnimationClock" />을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-115">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="923c5-116">속성에 이미 애니메이션이 적용되어 있으면 지정된 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-116">If the property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-117">제거 하려면이 메서드를 사용 하 여 속성에서 시간이 해당 clock 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-117">Note that using this method to remove clocks from a property does not stop those clocks.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="923c5-118">사용 하 여 HandoffBehavior 작성</span><span class="sxs-lookup"><span data-stu-id="923c5-118">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="923c5-119">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>있으면 모든 <xref:System.Windows.Media.Animation.Clock> 해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 되지 것입니다 이러한 clock를 자동으로 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-119">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="923c5-120">많은 수의 시계를 사용 하 여 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-120">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="923c5-121">여러 가지 방법으로 클록을 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-121">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="923c5-122">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="923c5-122">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="923c5-123">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 를 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-123">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="923c5-124">이렇게 하면 해당 속성에서 모든 애니메이션 클록이 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-124">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="923c5-125">특정을 제거 하려면 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 속성의는 <xref:System.Windows.Media.Animation.AnimationClock> 검색 하는 <xref:System.Windows.Media.Animation.ClockController>, 호출는 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 의 메서드는 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-125">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="923c5-126">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-126">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="923c5-127">유일한 루트 클록을 제어할 수 있는 참고는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-127">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="923c5-128">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 이벤트 시계의 유효 기간을 무제한 인 경우 호출 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-128">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="923c5-129">경우에 사용자가 호출 하는 경우를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-129">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="923c5-130">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-130">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="923c5-131">개체가 가비지 수집될 경우 해당 클록도 연결이 끊어지고 가비지가 수집됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-131">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="923c5-132">클록 개체에 대 한 자세한 내용은 참조는 [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-132">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="923c5-133">다음 예제에서는 다른을 사용 하 여 애니메이션 클록을 적용 하는 방법을 보여 줍니다 <xref:System.Windows.Media.Animation.HandoffBehavior> 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-133">The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="923c5-134">지정된 <see cref="T:System.Windows.DependencyProperty" />에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-134">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="923c5-135">애니메이션 효과를 주는 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-135">The property to animate.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="923c5-136">지정된 속성에 애니메이션 효과를 주는 데 사용할 애니메이션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-136">The animation used to animate the specified property.</span>
          </span>
          <span data-ttu-id="923c5-137">애니메이션의 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />이 <see langword="null" />이면 현재 애니메이션이 모두 제거되고 속성의 현재 값이 유지됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-137">If the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span>
          </span>
          <span data-ttu-id="923c5-138">
            <c>animation</c>이 <see langword="null" />이면 모든 애니메이션이 속성에서 제거되고 속성 값이 기준 값으로 돌아갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-138">If <c>animation</c> is <see langword="null" />, all animations will be removed from the property and the property value will revert back to its base value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-139">지정된 <see cref="T:System.Windows.DependencyProperty" />에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-139">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="923c5-140">애니메이션은 다음 프레임을 렌더링할 때 시작됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-140">The animation is started when the next frame is rendered.</span>
          </span>
          <span data-ttu-id="923c5-141">지정된 속성에 이미 애니메이션 효과가 적용되어 있으면 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 전달 동작이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-141">If the specified property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-142">애니메이션에는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 0 보다 큼 즉, 해당 시간이 경과한 후 다음 프레임이 렌더링 되는 시간에서 애니메이션을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-142">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="923c5-143">애니메이션 효과를 주는 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-143">The property to animate.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="923c5-144">지정된 속성에 애니메이션 효과를 주는 데 사용할 애니메이션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-144">The animation used to animate the specified property.</span>
          </span>
          <span data-ttu-id="923c5-145">
            <c>handoffBehavior</c>가 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이고 애니메이션의 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />이 <see langword="null" />이면 현재 애니메이션은 제거되며 속성의 현재 값이 유지됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-145">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span>
          </span>
          <span data-ttu-id="923c5-146">
            <c>handoffBehavior</c>가 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이고 <c>animation</c>이 <see langword="null" /> 참조이면 모든 애니메이션이 속성에서 제거되며 속성 값이 기준 값으로 되돌아갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-146">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <c>animation</c> is a <see langword="null" /> reference, all animations will be removed from the property and the property value will revert back to its base value.</span>
          </span>
          <span data-ttu-id="923c5-147">
            <c>handoffBehavior</c>가 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />인 경우 애니메이션 또는 해당 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />이 <see langword="null" />이면 이 메서드를 사용해도 아무런 영향이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-147">If <c>handoffBehavior</c> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, this method will have no effect if the animation or its <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="923c5-148">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재 애니메이션과 상호 작용하는 방법을 지정하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-148">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-149">지정된 <see cref="T:System.Windows.DependencyProperty" />에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-149">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
          <span data-ttu-id="923c5-150">애니메이션은 다음 프레임을 렌더링할 때 시작됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-150">The animation is started when the next frame is rendered.</span>
          </span>
          <span data-ttu-id="923c5-151">지정된 속성에 이미 애니메이션이 적용되어 있으면 지정된 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-151">If the specified property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-152">애니메이션에는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 0 보다 큼 즉, 해당 시간이 경과한 후 다음 프레임이 렌더링 되는 시간에서 애니메이션을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-152">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="923c5-153">사용 하 여 HandoffBehavior 작성</span><span class="sxs-lookup"><span data-stu-id="923c5-153">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="923c5-154">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>있으면 모든 <xref:System.Windows.Media.Animation.Clock> 해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 되지 것입니다 이러한 clock를 자동으로 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-154">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="923c5-155">많은 수의 시계를 사용 하 여 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-155">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="923c5-156">여러 가지 방법으로 클록을 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-156">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="923c5-157">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="923c5-157">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="923c5-158">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 를 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-158">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="923c5-159">이렇게 하면 해당 속성에서 모든 애니메이션 클록이 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-159">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="923c5-160">특정을 제거 하려면 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 속성의는 <xref:System.Windows.Media.Animation.AnimationClock> 검색 하는 <xref:System.Windows.Media.Animation.ClockController>, 호출는 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 의 메서드는 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-160">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="923c5-161">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-161">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="923c5-162">유일한 루트 클록을 제어할 수 있는 참고는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-162">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="923c5-163">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 이벤트 시계의 유효 기간을 무제한 인 경우 호출 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-163">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="923c5-164">경우에 사용자가 호출 하는 경우를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-164">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="923c5-165">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-165">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="923c5-166">개체가 가비지 수집될 경우 해당 클록도 연결이 끊어지고 가비지가 수집됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-166">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="923c5-167">클록 개체에 대 한 자세한 내용은 참조는 [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-167">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="923c5-168">다음 예제에서는 다른을 사용 하 여 애니메이션을 적용 하는 방법을 보여 줍니다 <xref:System.Windows.Media.Animation.HandoffBehavior> 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-168">The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Animatable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Animatable ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="923c5-169">이 개체 값의 전체 복사본을 만들어 이 <see cref="T:System.Windows.Media.Animation.Animatable" />의 수정 가능한 복제본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-169">Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Animatable" />, making deep copies of this object's values.</span>
          </span>
          <span data-ttu-id="923c5-170">이 개체의 종속성 속성을 복사할 때 이 메서드는 리소스 참조와 데이터 바인딩을 복사하지만 이러한 요소는 더 이상 확인되지 않으며 애니메이션이나 애니메이션의 현재 값은 복사하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-170">When copying this object's dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="923c5-171">이 인스턴스의 수정 가능한 복제본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-171">A modifiable clone of this instance.</span>
          </span>
          <span data-ttu-id="923c5-172">반환되는 복제본은 사실상 현재 개체의 전체 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-172">The returned clone is effectively a deep copy of the current object.</span>
          </span>
          <span data-ttu-id="923c5-173">복제본의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 **false**입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-173">The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is **false**.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-174"><xref:System.Windows.Media.Animation.Animatable.Clone%2A> 의 수정 가능한 복사본을 만드는 메서드를 사용할 수 고정 <xref:System.Windows.Freezable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-174">The <xref:System.Windows.Media.Animation.Animatable.Clone%2A> method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects.</span></span> <span data-ttu-id="923c5-175">편의 위해이 메서드는 상속 된 숨깁니다 <xref:System.Windows.Freezable.Clone%2A> 메서드는 강력한 형식의 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-175">For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">
          <span data-ttu-id="923c5-176">이 메서드가 이 인스턴스의 고정 가능 여부만 확인해야 하는 경우 <see langword="true" />이고,</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-176">
              <see langword="true" /> if this method should simply determine whether this instance can be frozen.</span>
          </span>
          <span data-ttu-id="923c5-177">이 메서드가 호출될 때 이 인스턴스를 실제로 고정해야 하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-177">
              <see langword="false" /> if this instance should actually freeze itself when this method is called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-178">이 <see cref="T:System.Windows.Media.Animation.Animatable" /> 개체를 수정할 수 없게 만들거나, 수정할 수 없게 만들 수 있는지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-178">Makes this <see cref="T:System.Windows.Media.Animation.Animatable" /> object unmodifiable or determines whether it can be made unmodifiable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="923c5-179">
            <paramref name="isChecking" />이 <see langword="true" />인 경우 이 메서드는 이 <see cref="T:System.Windows.Media.Animation.Animatable" />을 수정할 수 없게 만들 수 있으면 <see langword="true" />를, 그렇지 않으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-179">If <paramref name="isChecking" /> is <see langword="true" />, this method returns <see langword="true" /> if this <see cref="T:System.Windows.Media.Animation.Animatable" /> can be made unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable.</span>
          </span>
          <span data-ttu-id="923c5-180">
            <paramref name="isChecking" />이 <see langword="false" />인 경우 이 메서드는 이 <see cref="T:System.Windows.Media.Animation.Animatable" />이 수정할 수 없게 설정되었으면 <see langword="true" />를 반환하고, 이 개체의 고정 상태가 변경되므로 수정할 수 없게 설정할 수 없으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-180">If <paramref name="isChecking" /> is <see langword="false" />, this method returns <see langword="true" /> if the if this <see cref="T:System.Windows.Media.Animation.Animatable" /> is now unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-181">이 메서드는 반환 **false** 때 <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> 은 **true**합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-181">This method will return **false** when <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> is **true**.</span></span>  
  
 <span data-ttu-id="923c5-182">직접 (제외 경우 기본 구현에서 호출)이이 메서드를 호출 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="923c5-182">Do not call this method directly (except when calling base in an implementation).</span></span> <span data-ttu-id="923c5-183">이 메서드는 내부적으로 <xref:System.Windows.Freezable.CanFreeze%2A> (와 `isChecking` 같지 `true`) 및 <xref:System.Windows.Freezable.Freeze%2A> (으로 `isChecking` 같지 `false`).</span><span class="sxs-lookup"><span data-stu-id="923c5-183">This method is called internally by <xref:System.Windows.Freezable.CanFreeze%2A> (with `isChecking` equal to `true`) and  <xref:System.Windows.Freezable.Freeze%2A> (with `isChecking` equal to `false`).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="923c5-184">파생 된 클래스 <see cref="T:System.Windows.Media.Animation.Animatable" /> 클래스 종속성 속성을 사용 하 여 저장 되지 않은 데이터를 포함 하는 경우이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="923c5-184">Classes that derive from <see cref="T:System.Windows.Media.Animation.Animatable" /> must override this method when the class contains data that is not stored using dependency properties.</span>
            </span>
            <span data-ttu-id="923c5-185">일반적인 구현에서 기본 구현을 호출한 다음 호출 하 여 정적 <see cref="M:System.Windows.Freezable.Freeze" /> 모든 메서드 <see cref="T:System.Windows.Freezable" /> 형식 반환, 클래스에 들어 있는 속성 <see langword="true" /> 모든 속성이 고정 된 경우에 (또는 고정 수에 통해 전달 하는 사례는 <see langword="false" /> 값 <paramref name="isChecking" />).</span>
            <span class="sxs-lookup">
              <span data-stu-id="923c5-185">A typical implementation would call the base implementation, then call the static <see cref="M:System.Windows.Freezable.Freeze" /> method on all <see cref="T:System.Windows.Freezable" /> typed properties that the class contains, returning <see langword="true" /> only if all properties were frozen (or could have been frozen, in the case of passing through a <see langword="false" /> value for <paramref name="isChecking" />).</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="923c5-186">애니메이션이 적용되지 않은 기준 값을 검색하는 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-186">Identifies the property whose base (non-animated) value should be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-187">지정된 <see cref="T:System.Windows.DependencyProperty" />의 애니메이션이 적용되지 않은 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-187">Returns the non-animated value of the specified <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="923c5-188">지정된 속성에 애니메이션이 적용되지 않은 경우 반환되는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-188">The value that would be returned if the specified property were not animated.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-189">이 메서드가 반환과 같은 결과가 지정된 된 속성 움직이지 않으면 <xref:System.Windows.DependencyObject.GetValue%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-189">If the specified property is not animated, this method returns the same result as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="923c5-190">다음 예제에서는 애니메이션이 적용 되지 않은 속성 값을 애니메이션 효과가 적용 된 검색 및 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-190">In the following example, the non-animated values of animated properties are retrieved and displayed.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="923c5-191">하나 이상의 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 개체가 이 개체의 종속성 속성과 연결되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-191">Gets a value that indicates whether one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="923c5-192">**true 이면** 하나 이상 있으면 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 개체가 고, 그렇지 않으면이 개체의 종속성 속성의 모든 관련 **false**합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-192">**true** if one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties; otherwise, **false**.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-193">이 속성은이 개체에 애니메이션 효과 준된 하위 개체가 포함 되는지 여부를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="923c5-193">This property does not indicate whether this object contains animated sub-objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldSerializeStoredWeakReference (target As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ShouldSerializeStoredWeakReference(System::Windows::DependencyObject ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="923c5-194">종속성 속성 시스템에 참가하는 개체를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-194">Represents an object that participates in the dependency property system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="923c5-195">종속성 개체를 serialize해야 하는지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-195">Specifies whether a dependency object should be serialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="923c5-196">
            <paramref name="target" />을 serialize하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-196">
              <see langword="true" /> to serialize <paramref name="target" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="923c5-197">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="923c5-197">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="923c5-198"><xref:System.ComponentModel.TypeDescriptor> 클래스에서 사용 하 여 <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> 속성을 serialize 해야 하는지 결정 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="923c5-198">The <xref:System.ComponentModel.TypeDescriptor> class uses the <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> method to determine if a property should be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>