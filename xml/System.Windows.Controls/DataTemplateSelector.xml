<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7cf6ef824251b65f85296296a1a43a3ae2db5d26" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8f925-101">데이터 개체와 데이터 바인딩된 요소를 기반으로 하여 <see cref="T:System.Windows.DataTemplate" />을 선택하는 방법을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f925-101">Provides a way to choose a <see cref="T:System.Windows.DataTemplate" /> based on the data object and the data-bound element.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f925-102">만들 때는 일반적으로 <xref:System.Windows.Controls.DataTemplateSelector> 여러 개 설치한 경우 <xref:System.Windows.DataTemplate> 동일한 유형의 개체에 대 한 원하는 선택 하기 위한 자체 논리를 제공 하는 <xref:System.Windows.DataTemplate> 각 데이터 개체의 속성을 기준으로 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-102">Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object.</span></span> <span data-ttu-id="8f925-103">다른 개체가 여러 개 있는 경우 형식를 설정할 수는 <xref:System.Windows.DataTemplate.DataType%2A> 속성에는 <xref:System.Windows.DataTemplate>합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-103">Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>.</span></span> <span data-ttu-id="8f925-104">이렇게 하면를 만들 필요 없이 경우는 <xref:System.Windows.Controls.DataTemplateSelector>합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-104">If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>.</span></span> <span data-ttu-id="8f925-105">또한 서로 다른 속성과 같지만 동일한 유형의 개체를 사용 하도록 설정한 경우을 고려해볼 수도 있습니다를 사용 하는 <xref:System.Windows.DataTrigger> 또는 데이터 변환기입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-105">Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter.</span></span> <span data-ttu-id="8f925-106">자세한 내용은 [데이터 템플릿 개요](~/docs/framework/wpf/data/data-templating-overview.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="8f925-106">For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md).</span></span>  
  
 <span data-ttu-id="8f925-107">템플릿 선택기를 만들려면에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Controls.DataTemplateSelector> 재정의 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8f925-107">To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="8f925-108">클래스에 정의 되 면 요소의 템플릿 선택기 속성에는 클래스의 인스턴스를 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-108">Once your class is defined you can assign an instance of the class to the template selector property of your element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f925-109">이 예제에서는 바인딩 소스는 목록이 `Task` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-109">In this example, the binding source is a list of `Task` objects.</span></span> <span data-ttu-id="8f925-110">속성 중 하나는 `Task` 개체가 `Priority`합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-110">One of the properties of a `Task` object is `Priority`.</span></span> <span data-ttu-id="8f925-111">정의 하는 두 개의 데이터 템플릿이 `myTaskTemplate` 및 `importantTaskTemplate`합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-111">There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.</span></span>  
  
 <span data-ttu-id="8f925-112">선택할 수는 논리를 제공 <xref:System.Windows.DataTemplate> 에 따라 사용 하는 `Priority` 값 데이터 개체의 서브 클래스를 만든 <xref:System.Windows.Controls.DataTemplateSelector> 재정의 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8f925-112">To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="8f925-113">다음 예제에서는 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 의 값에 따라 적절 한 템플릿을 반환 하는 논리를 제공 하는 메서드는 `Priority` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-113">In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property.</span></span> <span data-ttu-id="8f925-114">반환할 템플릿의 상위 리소스 참조는 <xref:System.Windows.Window> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-114">The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.</span></span>  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 <span data-ttu-id="8f925-115">그런 다음 `TaskListDataTemplateSelector`를 리소스로 선언할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-115">We can then declare the `TaskListDataTemplateSelector` as a resource:</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 <span data-ttu-id="8f925-116">템플릿 선택기 리소스를 사용 하려면에 할당 된 <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> 속성은 <xref:System.Windows.Controls.ListBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-116">To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="8f925-117"><xref:System.Windows.Controls.ListBox> 호출은 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 의 메서드는 `TaskListDataTemplateSelector` 기본 컬렉션의 항목에는 각각에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-117">The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection.</span></span> <span data-ttu-id="8f925-118">이 호출은 데이터 개체를 항목 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-118">The call passes the data object as the item parameter.</span></span> <span data-ttu-id="8f925-119"><xref:System.Windows.DataTemplate> 에서 반환 하는 메서드를 해당 데이터 개체에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-119">The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 <span data-ttu-id="8f925-120">전체 샘플을 보려면 [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)(데이터 템플릿 샘플 소개)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="8f925-120">For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f925-121">
            <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-121">Initializes a new instance of the <see cref="T:System.Windows.Controls.DataTemplateSelector" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="8f925-122">템플릿을 선택할 데이터 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-122">The data object for which to select the template.</span>
          </span>
        </param>
        <param name="container">
          <span data-ttu-id="8f925-123">데이터 바인딩된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-123">The data-bound object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f925-124">파생 클래스에서 재정의되는 경우 사용자 지정 논리에 따라 <see cref="T:System.Windows.DataTemplate" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-124">When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate" /> based on custom logic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f925-125">
            <see cref="T:System.Windows.DataTemplate" /> 또는 <see langword="null" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-125">Returns a <see cref="T:System.Windows.DataTemplate" /> or <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8f925-126">기본값은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f925-126">The default value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f925-127">일반적으로 동일한 유형의 개체에 대해 정의 된 데이터 템플릿을 둘 이상 있는 경우는 템플릿 선택기를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-127">Typically, you use a template selector when you have more than one data template defined for the same type of objects.</span></span> <span data-ttu-id="8f925-128">예를 들어 바인딩 소스 목록에 있으면 학생 개체 목록이 시간제 학생에는 특정 템플릿을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-128">For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students.</span></span> <span data-ttu-id="8f925-129">상속 되는 클래스를 만들어 이렇게 하려면 <xref:System.Windows.Controls.DataTemplateSelector> 재정의 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8f925-129">You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="8f925-130">클래스에 정의 되 면 요소의 템플릿 선택기 속성에는 클래스의 인스턴스를 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-130">Once your class is defined you can assign an instance of the class to the template selector property of your element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f925-131">이 예제에서는 바인딩 소스는 목록이 `Task` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-131">In this example, the binding source is a list of `Task` objects.</span></span> <span data-ttu-id="8f925-132">속성 중 하나는 `Task` 개체가 `Priority`합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-132">One of the properties of a `Task` object is `Priority`.</span></span> <span data-ttu-id="8f925-133">정의 하는 두 개의 데이터 템플릿이 `myTaskTemplate` 및 `importantTaskTemplate`합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-133">There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.</span></span>  
  
 <span data-ttu-id="8f925-134">선택할 수는 논리를 제공 <xref:System.Windows.DataTemplate> 에 따라 사용 하는 `Priority` 값 데이터 개체의 서브 클래스를 만든 <xref:System.Windows.Controls.DataTemplateSelector> 재정의 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8f925-134">To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="8f925-135">다음 예제에서는 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 의 값에 따라 적절 한 템플릿을 반환 하는 논리를 제공 하는 메서드는 `Priority` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-135">In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property.</span></span> <span data-ttu-id="8f925-136">반환할 템플릿의 상위 리소스 참조는 <xref:System.Windows.Window> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-136">The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.</span></span>  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 <span data-ttu-id="8f925-137">그런 다음 `TaskListDataTemplateSelector`를 리소스로 선언할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-137">We can then declare the `TaskListDataTemplateSelector` as a resource:</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 <span data-ttu-id="8f925-138">템플릿 선택기 리소스를 사용 하려면에 할당 된 <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> 속성은 <xref:System.Windows.Controls.ListBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-138">To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="8f925-139"><xref:System.Windows.Controls.ListBox> 호출은 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 의 메서드는 `TaskListDataTemplateSelector` 기본 컬렉션의 항목에는 각각에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-139">The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection.</span></span> <span data-ttu-id="8f925-140">이 호출은 데이터 개체를 항목 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-140">The call passes the data object as the item parameter.</span></span> <span data-ttu-id="8f925-141"><xref:System.Windows.DataTemplate> 에서 반환 하는 메서드를 해당 데이터 개체에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8f925-141">The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 <span data-ttu-id="8f925-142">전체 샘플을 보려면 [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)(데이터 템플릿 샘플 소개)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="8f925-142">For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>