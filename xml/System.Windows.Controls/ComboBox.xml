<Type Name="ComboBox" FullName="System.Windows.Controls.ComboBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="12e9d0b0e68d1f18a7262db439870c0b62e99094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30620587" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ComboBox : System.Windows.Controls.Primitives.Selector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ComboBox extends System.Windows.Controls.Primitives.Selector" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ComboBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ComboBox&#xA;Inherits Selector" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComboBox : System::Windows::Controls::Primitives::Selector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.Selector</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ComboBox)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="ItemContainerStyle", StyleTargetType=typeof(System.Windows.Controls.ComboBoxItem))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.TemplatePart(Name="PART_EditableTextBox", Type=typeof(System.Windows.Controls.TextBox))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.TemplatePart(Name="PART_Popup", Type=typeof(System.Windows.Controls.Primitives.Popup))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>컨트롤의 화살표를 클릭하여 표시하거나 숨길 수 있는 드롭다운 목록을 사용하여 선택 컨트롤을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ComboBox> 사용자 드롭 다운 목록에서 항목을 선택 하거나 필요에 따라 컨트롤의 텍스트 상자에 새 텍스트를 입력할 수 있습니다. <xref:System.Windows.Controls.ComboBox> 이 <xref:System.Windows.Controls.ItemsControl>합니다 (예: 문자열, 이미지 또는 패널) 모든 형식의 개체의 컬렉션을 포함할 수 있다는 의미입니다. 자세한 내용은 <xref:System.Windows.Controls.ItemsControl> 클래스를 참조하세요.  
  
 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A> 속성 지정 방법을 <xref:System.Windows.Controls.ComboBox> 동작 하는 사용자가 다음 중 하나를 수행 하는 경우:  
  
-   문자열에서 항목을 선택 하려면 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   항목에 해당 하지 않는 문자열을 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   텍스트 상자에 있는 문자열의 일부를 선택 합니다.  
  
-   복사 하거나 텍스트 상자에 값을 붙여 넣습니다.  
  
 다음 표에 사용자 수 및의 값에 따라 수행할 수 없는 작업이 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>합니다.  
  
||<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `true`인 경우|<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `false`인 경우|  
|-|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `true`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-문자열에 복사 수는 <xref:System.Windows.Controls.ComboBox> 텍스트 상자의 있지만에 문자열을 붙여 넣을 수 없습니다는 <xref:System.Windows.Controls.ComboBox> 입력란.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-의 항목에 해당 하지 않는 문자열을 입력할 수는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-복사 하거나 문자열에 붙여 넣을 수는 <xref:System.Windows.Controls.ComboBox> 입력란.|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `false`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|  
  
 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A> 속성은 경우에만 효과가 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 은 `true`합니다.  
  
 <xref:System.Windows.Controls.ComboBox> 는 <xref:System.Windows.Controls.ItemsControl>이므로 단순 문자열 이외의 콘텐츠를 표시할 수 있습니다.  예를 들어 만들 수 있습니다는 <xref:System.Windows.Controls.ComboBox> 이미지 목록이 들어 있는입니다. 문자열 이외의 콘텐츠를 설치한 경우는 <xref:System.Windows.Controls.ComboBox>, 무의미 문자열에 나타날 수 있습니다는 <xref:System.Windows.Controls.ComboBox> 드롭 다운 목록은 숨겨집니다. 에 문자열을 표시 하는 <xref:System.Windows.Controls.ComboBox> 문자열이 아닌 항목을 포함 하는 경우 사용 된 <xref:System.Windows.Controls.TextSearch.Text%2A?displayProperty=nameWithType> 또는 <xref:System.Windows.Controls.TextSearch.TextPath%2A?displayProperty=nameWithType> 연결 된 속성입니다.  
  
## <a name="customizing-the-combobox-control"></a>ComboBox 컨트롤 사용자 지정  
 여러 동일한 속성 설정을 적용 하려면 <xref:System.Windows.Controls.ComboBox> 컨트롤을 사용 하 여는 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다. 기본값을 수정할 수 <xref:System.Windows.Controls.ControlTemplate> 고유한 모양을 제어할 수 있습니다. 만들기에 대 한 자세한 내용은 <xref:System.Windows.Controls.ControlTemplate>, 참조 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  부분 및 관련 된 상태를 보려면는 <xref:System.Windows.Controls.ComboBox>, 참조 [콤보 상자 스타일 및 템플릿](~/docs/framework/wpf/controls/combobox-styles-and-templates.md)합니다.  
  
 종속성 속성을이 컨트롤은 컨트롤의 기본 스타일으로 설정할 수 있습니다.  기본 스타일 속성은 응용 프로그램에이 컨트롤이 표시 하는 경우 속성이 기본값에서 변경 될 수 있습니다. 기본 스타일 응용 프로그램이 실행 중인 때 사용 되는 데스크톱 테마에 따라 결정 됩니다.  자세한 내용은 참조 [기본 WPF 테마](http://go.microsoft.com/fwlink/?LinkID=158252)합니다.  
  
> [!NOTE]
>  시각적 속성을 설정만 영향을 미칠 경우 해당 속성을 둘 다에 <xref:System.Windows.Controls.ComboBox> 컨트롤의 기본 템플릿에 하 고 사용 하 여 설정 됩니다는 합니다. "변경의 시각적 구조의 정도 제어" 섹션의 시각적 속성 목록을 찾을 수 있습니다 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Controls.ComboBox>합니다. 이 예제에서는 채웁니다는 <xref:System.Windows.Controls.ComboBox> 바인딩하여는 <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> 형식의 컬렉션 개체에 속성 `VacationSpots`합니다. 이 예에서는 또한 만듭니다는 <xref:System.Windows.Controls.TextBlock> 의 선택된 된 항목을 표시 하는 <xref:System.Windows.Controls.ComboBox>합니다.  
  
 [!code-xaml[ComboBoxItems#ComboBoxClass](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxItems/CSharp/Window1.xaml#comboboxclass)]  
  
 다음 예제에서는 컬렉션 개체를 정의 하는 <xref:System.Windows.Controls.ComboBox> 앞의 예제에 바인딩됩니다.  
  
 [!code-csharp[ComboBoxItems#Data](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxItems/CSharp/Window1.xaml.cs#data)]
 [!code-vb[ComboBoxItems#Data](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ComboBoxItems/VIsualBasic/Window1.xaml.vb#data)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.ComboBoxItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComboBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComboBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ComboBox" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDownClosed">
      <MemberSignature Language="C#" Value="public event EventHandler DropDownClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DropDownClosed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.ComboBox.DropDownClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DropDownClosed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DropDownClosed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자의 드롭다운 목록이 닫힐 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 이벤트 처리기를 할당 하는 방법과 처리 하는 방법을 보여 줍니다.는 <xref:System.Windows.Controls.ComboBox.DropDownOpened> 및 <xref:System.Windows.Controls.ComboBox.DropDownClosed> 이벤트입니다.  
  
 [!code-xaml[ComboBoxSimple#ComboBoxEvents1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxSimple/CSharp/Pane1.xaml#comboboxevents1)]  
  
 [!code-csharp[ComboBoxSimple#ComboBoxEvents2](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxSimple/CSharp/Pane1.xaml.cs#comboboxevents2)]
 [!code-vb[ComboBoxSimple#ComboBoxEvents2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ComboBoxSimple/VisualBasic/Pane1.xaml.vb#comboboxevents2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDownOpened">
      <MemberSignature Language="C#" Value="public event EventHandler DropDownOpened;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DropDownOpened" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.ComboBox.DropDownOpened" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DropDownOpened As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DropDownOpened;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자의 드롭다운 목록이 열릴 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이벤트 처리기를 할당 하 고 처리 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Controls.ComboBox.DropDownOpened> 및 <xref:System.Windows.Controls.ComboBox.DropDownClosed> 이벤트입니다.  
  
 [!code-xaml[ComboBoxSimple#ComboBoxEvents1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxSimple/CSharp/Pane1.xaml#comboboxevents1)]  
  
 [!code-csharp[ComboBoxSimple#ComboBoxEvents2](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxSimple/CSharp/Pane1.xaml.cs#comboboxevents2)]
 [!code-vb[ComboBoxSimple#ComboBoxEvents2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ComboBoxSimple/VisualBasic/Pane1.xaml.vb#comboboxevents2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.DependencyObject GetContainerForItemOverride ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.DependencyObject GetContainerForItemOverride() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.GetContainerForItemOverride" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetContainerForItemOverride () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::DependencyObject ^ GetContainerForItemOverride();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>지정된 항목을 표시하는 데 사용되는 요소를 만들거나 식별합니다.</summary>
        <returns>지정된 항목을 표시하는 데 사용되는 요소입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesScrolling">
      <MemberSignature Language="C#" Value="protected internal override bool HandlesScrolling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandlesScrolling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.HandlesScrolling" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property HandlesScrolling As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HandlesScrolling { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자에서 스크롤을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.ComboBox" />에서 스크롤을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤에 있는 경우는 <xref:System.Windows.Controls.ScrollViewer> 의 스타일에 스크롤 동작을 사용자 지정 키보드 있으며 <xref:System.Windows.Controls.ListBox.HandlesScrolling%2A> 반환할지 `true`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal override bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ComboBox" />에 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.ComboBox" /> 컨트롤에 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDropDownOpen">
      <MemberSignature Language="C#" Value="public bool IsDropDownOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDropDownOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.IsDropDownOpen" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDropDownOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDropDownOpen { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자의 드롭다운이 현재 열려 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          드롭다운이 열려 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsDropDownOpen"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.IsDropDownOpenProperty>|  
|로 메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Controls.ComboBox.IsDropDownOpen%2A> 속성 드롭다운 컨트롤을 사용 하 여 콤보 상자를 만들려면 콤보 상자 시작 되 면 열입니다.  
  
 [!code-xaml[ComboBoxStyles#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxStyles/CS/app.xaml#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDropDownOpenProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDropDownOpenProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDropDownOpenProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.IsDropDownOpenProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDropDownOpenProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDropDownOpenProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditable">
      <MemberSignature Language="C#" Value="public bool IsEditable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.IsEditable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEditable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ComboBox" />의 텍스트 상자에 있는 텍스트의 편집을 허용하거나 금지하는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.ComboBox" />를 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A> 속성 지정 방법을 <xref:System.Windows.Controls.ComboBox> 동작 하는 사용자가 다음 중 하나를 수행 하는 경우:  
  
-   문자열에서 항목을 선택 하려면 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   항목에 해당 하지 않는 문자열을 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   텍스트 상자에 있는 문자열의 일부를 선택 합니다.  
  
-   복사 하거나 텍스트 상자에 값을 붙여 넣습니다.  
  
 다음 표에 사용자 수 및의 값에 따라 수행할 수 없는 작업이 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>합니다.  
  
||<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `true`인 경우|<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `false`인 경우|  
|-|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `true`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-문자열에 복사 수는 <xref:System.Windows.Controls.ComboBox> 텍스트 상자의 있지만에 문자열을 붙여 넣을 수 없습니다는 <xref:System.Windows.Controls.ComboBox> 입력란.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-의 항목에 해당 하지 않는 문자열을 입력할 수는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-복사 하거나 문자열에 붙여 넣을 수는 <xref:System.Windows.Controls.ComboBox> 입력란.|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `false`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|  
  
 때 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 같은지를 `false`, <xref:System.Windows.Controls.ComboBox> 사용 하 여는 <xref:System.Windows.Controls.ContentPresenter> 항목; 때 현재 선택 된 표시할 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 같은지를 `true`, <xref:System.Windows.Controls.TextBox> 대신이 목적을 위해 사용 됩니다. 한 <xref:System.Windows.Controls.TextBox> 표시 하 고 일반 텍스트 표시는 <xref:System.Windows.Controls.ComboBoxItem> 이미지와 같은 비-일반 텍스트 콘텐츠를 포함 될 수 있습니다.  
  
<a name="dependencyPropertyInfo_IsEditable"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.IsEditableProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Controls.ComboBox> 텍스트 대신 항목으로 이미지를 포함 하는 컨트롤입니다. 경우는 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 속성이 `true`, <xref:System.Windows.Controls.TextBox> 이미지의에서 반환 된 값을 표시 <xref:System.Object.ToString%2A> 메서드. 방지 하기 위해는 <xref:System.Windows.Controls.TextBox> 예기치 않은 텍스트를 사용 하 여는 <xref:System.Windows.Controls.TextSearch.Text%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Controls.TextSearch.TextPath%2A?displayProperty=nameWithType> 표시 될 텍스트를 할당 하는 속성입니다.  
  
 [!code-xaml[ComboBoxProps_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxProps_snip/CS/pane1.xaml#1)]  
  
 [!code-xaml[ComboBoxProps_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxProps_snip/CS/pane1.xaml#2)]  
  
 사용 하 여 <xref:System.Windows.Controls.ItemsControl.DisplayMemberPath%2A> 속성입니다. 드롭다운 컨트롤에서 <xref:System.Windows.Controls.ComboBox> 이미지를 표시 하지 것입니다 하지만 지정한 텍스트를 표시 합니다.  
  
 다음 예제에서는 <xref:System.Windows.Controls.ItemsControl.DisplayMemberPath%2A>을 사용하는 방법을 보여 줍니다.  
  
 [!code-xaml[ComboBoxProps_snip#3](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxProps_snip/CS/pane1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEditableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEditableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.IsEditableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEditableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEditableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.IsEditable" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemItsOwnContainerOverride">
      <MemberSignature Language="C#" Value="protected override bool IsItemItsOwnContainerOverride (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsItemItsOwnContainerOverride(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.IsItemItsOwnContainerOverride(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsItemItsOwnContainerOverride (item As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsItemItsOwnContainerOverride(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">지정한 항목입니다.</param>
        <summary>지정된 항목이 고유한 <c>ItemContainer</c>인지(또는 해당 자격이 있는지) 여부를 확인합니다.</summary>
        <returns>
          항목이 고유한 <c>ItemContainer</c>이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자의 내용을 선택할 수 있지만 편집할 수 없는 선택 전용 모드를 활성화하는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see langword="true" />가 읽기 전용이면 <see cref="T:System.Windows.Controls.ComboBox" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A> 속성 지정 방법을 <xref:System.Windows.Controls.ComboBox> 동작 하는 사용자가 다음 중 하나를 수행 하는 경우:  
  
-   문자열에서 항목을 선택 하려면 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   항목에 해당 하지 않는 문자열을 입력에서 <xref:System.Windows.Controls.ComboBox>합니다.  
  
-   텍스트 상자에 있는 문자열의 일부를 선택 합니다.  
  
-   복사 하거나 텍스트 상자에 값을 붙여 넣습니다.  
  
 다음 표에 사용자 수 및의 값에 따라 수행할 수 없는 작업이 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 및 <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>합니다.  
  
||<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `true`인 경우|<xref:System.Windows.Controls.ComboBox.IsReadOnly%2A>가 `false`인 경우|  
|-|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `true`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-문자열에 복사 수는 <xref:System.Windows.Controls.ComboBox> 텍스트 상자의 있지만에 문자열을 붙여 넣을 수 없습니다는 <xref:System.Windows.Controls.ComboBox> 입력란.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-의 항목에 해당 하지 않는 문자열을 입력할 수는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-에서 문자열의 일부 선택 수는 <xref:System.Windows.Controls.ComboBox> 입력란.<br />-복사 하거나 문자열에 붙여 넣을 수는 <xref:System.Windows.Controls.ComboBox> 입력란.|  
|<xref:System.Windows.Controls.ComboBox.IsEditable%2A>가 `false`인 경우|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|-에서 항목을 선택할 수는 <xref:System.Windows.Controls.ComboBox> 문자열을 입력 하 여 합니다.<br />-입력할 수 없습니다와 일치 하지 않는 문자열의 항목에는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-선택할 수 없습니다에서 문자열의 일부는 <xref:System.Windows.Controls.ComboBox>합니다.<br />-복사 하거나에 문자열을 붙여 넣이 없습니다는 <xref:System.Windows.Controls.ComboBox>합니다.|  
  
 때 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 같은지를 `false`, <xref:System.Windows.Controls.ComboBox> 사용 하 여는 <xref:System.Windows.Controls.ContentPresenter> 항목; 때 현재 선택 된 표시할 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 같은지를 `true`, <xref:System.Windows.Controls.TextBox> 대신이 목적을 위해 사용 됩니다. 한 <xref:System.Windows.Controls.TextBox> 표시 하 고 일반 텍스트 표시는 <xref:System.Windows.Controls.ComboBoxItem> 이미지와 같은 비-일반 텍스트 콘텐츠를 포함 될 수 있습니다.  
  
<a name="dependencyPropertyInfo_IsReadOnly"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.IsReadOnlyProperty>|  
|로 메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Windows.Controls.ComboBox> 편집 가능한와 <xref:System.Windows.Controls.TextBox>합니다. <xref:System.Windows.Controls.ComboBox.IsReadOnly%2A> 속성이 `true`이므로 사용자는 텍스트를 입력할 수 없습니다는 <xref:System.Windows.Controls.TextBox>합니다.  
  
 [!code-xaml[ComboBoxItems#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxItems/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnlyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsReadOnlyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsReadOnlyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.IsReadOnlyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsReadOnlyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsReadOnlyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.IsReadOnly" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelectionBoxHighlighted">
      <MemberSignature Language="C#" Value="public bool IsSelectionBoxHighlighted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelectionBoxHighlighted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSelectionBoxHighlighted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSelectionBoxHighlighted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" />이 강조 표시되었는지 여부를 가져옵니다.</summary>
        <value>
          <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" />이 강조 표시되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 종속성 속성입니다. 그러나 종속성 속성 식별자 필드에 <xref:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted%2A> public이 아닙니다. 종속성 속성 식별자에 대 한 호출 등 필요로 하는 속성 시스템 작업에 대 한 보조 종속성 속성을 사용할 수 없습니다 따라서 <xref:System.Windows.DependencyObject.GetValue%2A>합니다. 그러나 계속 사용할 수 있습니다 <xref:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted%2A> 속성 트리거로 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxDropDownHeight">
      <MemberSignature Language="C#" Value="public double MaxDropDownHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxDropDownHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDropDownHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxDropDownHeight { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콤보 상자 드롭다운의 최대 높이를 가져오거나 설정합니다.</summary>
        <value>검색된 높이 또는 설정할 높이를 나타내는 double입니다. 속성 시스템에 정의된 기본값은 시스템 최대 화면 높이 매개 변수의 1/3로 계산된 값이지만, 다양한 컨트롤 템플릿에서 이 기본값을 재정의할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자동 크기 조정을 기본적으로 아니며 잠재적으로 부모 요소에 사용할 수 있는 크기를 초과 하는 크기 드롭다운에 발생 합니다. 일반적으로 것은 바람직하지 않습니다.  
  
<a name="dependencyPropertyInfo_MaxDropDownHeight"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.MaxDropDownHeightProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
<a name="xamlAttributeUsage_MaxDropDownHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object MaxDropDownHeight="double"/>  
- or –  
<object MaxDropDownHeight ="qualifiedDouble"/>  
- or -  
<object MaxDropDownHeight ="Auto"/>  
```  
  
<a name="xamlValues_MaxDropDownHeight"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현은 <xref:System.Double> 값입니다. 이 값으로 해석 되는 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다. 예를 들어 값의 `1` 허용 됩니다.  
  
 동일한 <xref:System.Double> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.  
  
 *qualifiedDouble*  
 A *double* 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값)은 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` is inches; 1in==96px  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` is points; 1pt==(96/72) px  
  
 `Auto`  
 자동 크기 조정 동작을 사용 합니다. 설명 부분을 참조하십시오.  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Controls.ComboBox.MaxDropDownHeight%2A> 속성의 높이 지정 하는 <xref:System.Windows.Controls.ComboBox> 컨트롤의 드롭다운 목록입니다.  
  
 [!code-xaml[ComboBoxStyles#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxStyles/CS/app.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxDropDownHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxDropDownHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxDropDownHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.MaxDropDownHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxDropDownHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxDropDownHeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public override void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnApplyTemplate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />이 호출될 때 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 인프라의 일부로 이 컨트롤에 대한 적절한 <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> 구현을 제공합니다.</summary>
        <returns>형식별 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDropDownClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnDropDownClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDropDownClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnDropDownClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDropDownClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDropDownClosed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="E:System.Windows.Controls.ComboBox.DropDownClosed" /> 이벤트에 대한 이벤트 데이터입니다.</param>
        <summary>콤보 상자의 팝업이 닫힐 때 보고합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDropDownOpened">
      <MemberSignature Language="C#" Value="protected virtual void OnDropDownOpened (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDropDownOpened(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnDropDownOpened(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDropDownOpened (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDropDownOpened(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened" /> 이벤트에 대한 이벤트 데이터입니다.</param>
        <summary>콤보 상자의 팝업이 열릴 때 보고합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected override void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 이벤트에 대한 이벤트 데이터입니다.</param>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> 속성이 변경되었음을 보고합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected override void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> 이벤트에 대한 이벤트 데이터입니다.</param>
        <summary>
          <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 속성이 변경되면 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결된 라우트된 이벤트가 발생할 때 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 이벤트에 대한 이벤트 데이터입니다.</param>
        <summary>마우스 왼쪽 단추를 놓았음을 보고하기 위해 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결된 라우트된 이벤트가 발생할 때 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectionChanged (System.Windows.Controls.SelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectionChanged(class System.Windows.Controls.SelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectionChanged (e As SelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectionChanged(System::Windows::Controls::SelectionChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.SelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" />에 대한 데이터를 제공합니다.</param>
        <summary>
          <see cref="T:System.Windows.Controls.ComboBox" /> 이벤트를 발생시켜 <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> 선택 변경에 응답합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override void PrepareContainerForItemOverride (System.Windows.DependencyObject element, object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PrepareContainerForItemOverride(class System.Windows.DependencyObject element, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ComboBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub PrepareContainerForItemOverride (element As DependencyObject, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void PrepareContainerForItemOverride(System::Windows::DependencyObject ^ element, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element">지정된 항목을 표시하는 데 사용되는 요소입니다.</param>
        <param name="item">지정한 항목입니다.</param>
        <summary>지정한 항목을 표시하기 위해 지정한 요소를 준비합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소를 준비할 때는 바인딩 설정 스타일 적용을 포함 하 고 등 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItem">
      <MemberSignature Language="C#" Value="public object SelectionBoxItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectionBoxItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.SelectionBoxItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionBoxItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectionBoxItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>선택 상자에 표시된 항목을 가져옵니다.</summary>
        <value>선택한 항목입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate> 의 <xref:System.Windows.Controls.ComboBox> 에서 선택한 항목을 표시 하려면이 속성을 사용 하 여는 <xref:System.Windows.Controls.ComboBox>합니다.  선택한 항목을 가져오는 <xref:System.Windows.Controls.ComboBox> 외부에 <xref:System.Windows.Controls.ControlTemplate>를 사용 하 여는 <xref:System.Windows.Controls.Primitives.Selector.SelectedItem%2A?displayProperty=nameWithType> 이 속성 대신 합니다.  
  
<a name="xamlAttributeUsage_SelectionBoxItem"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object property="{TemplateBinding SelectionBoxItem}"/>  
```  
  
<a name="dependencyPropertyInfo_SelectionBoxItem"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.SelectionBoxItemProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Controls.ContentPresenter.Content%2A> 속성의는 <xref:System.Windows.Controls.ContentPresenter> 에 <xref:System.Windows.Controls.ComboBox.SelectionBoxItem%2A> 속성입니다. <xref:System.Windows.Controls.ContentPresenter> 의 일부는 <xref:System.Windows.Controls.ControlTemplate> 에 대 한는 <xref:System.Windows.Controls.ComboBox>합니다. 전체 샘플을 보려면 [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)(ControlTemplate으로 스타일 지정 샘플)을 참조하세요.  
  
 [!code-xaml[ControlTemplateExamples#ComboBoxSelectionBox](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/combobox.xaml#comboboxselectionbox)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItemProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionBoxItemProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionBoxItemProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.SelectionBoxItemProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SelectionBoxItemProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SelectionBoxItemProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItemStringFormat">
      <MemberSignature Language="C#" Value="public string SelectionBoxItemStringFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectionBoxItemStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.SelectionBoxItemStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionBoxItemStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectionBoxItemStringFormat { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>선택된 항목이 문자열로 표시되는 경우 선택 상자에서 해당 항목의 서식 지정 방법을 지정하는 복합 문자열을 가져옵니다.</summary>
        <value>선택된 항목이 문자열로 표시되는 경우 선택 상자에서 해당 항목의 서식 지정 방법을 지정하는 복합 문자열입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItemStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionBoxItemStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionBoxItemStringFormatProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.SelectionBoxItemStringFormatProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SelectionBoxItemStringFormatProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SelectionBoxItemStringFormatProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItemStringFormat" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItemTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate SelectionBoxItemTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate SelectionBoxItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectionBoxItemTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ SelectionBoxItemTemplate { System::Windows::DataTemplate ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>선택 상자 콘텐츠의 항목 템플릿을 가져옵니다.</summary>
        <value>항목 템플릿입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_SelectionBoxItemTemplate"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object property="{TemplateBinding SelectionBoxItemTemplate}"/>  
```  
  
<a name="dependencyPropertyInfo_SelectionBoxItemTemplate"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Controls.ContentPresenter.Content%2A> 속성의는 <xref:System.Windows.Controls.ContentPresenter> 에 <xref:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate%2A> 속성입니다. <xref:System.Windows.Controls.ContentPresenter> 의 일부는 <xref:System.Windows.Controls.ControlTemplate> 에 대 한는 <xref:System.Windows.Controls.ComboBox>합니다. 전체 샘플을 보려면 [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)(ControlTemplate으로 스타일 지정 샘플)을 참조하세요.  
  
 [!code-xaml[ControlTemplateExamples#ComboBoxSelectionBox](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/combobox.xaml#comboboxselectionbox)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionBoxItemTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionBoxItemTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionBoxItemTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SelectionBoxItemTemplateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SelectionBoxItemTemplateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldPreserveUserEnteredPrefix">
      <MemberSignature Language="C#" Value="public bool ShouldPreserveUserEnteredPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldPreserveUserEnteredPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldPreserveUserEnteredPrefix As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldPreserveUserEnteredPrefix { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ComboBox" />가 사용자의 입력을 유지하는지 아니면 해당 입력을 일치하는 항목으로 대체하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.ComboBox" />가 사용자 입력을 유지하면 <see langword="true" />이고, <see cref="T:System.Windows.Controls.ComboBox" />에서 이 입력을 일치하는 항목과 바꾸면 <see langword="false" />입니다. 등록된 기본값은 <see langword="false" />입니다. 값에 영향을 줄 수 요소에 대 한 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자에 문자열을 입력 하면 기본적으로는 <xref:System.Windows.Controls.ComboBox> 해당 항목 중 하 나와 일치 하는 항목을 선택 하 고 사용자가 입력 한 텍스트가 바뀝니다.  이 대/소문자를 변경 하려면 사용자가 입력 한 텍스트를 발생할 수 있습니다. 경우는 <xref:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefix%2A> 속성이 `true`, <xref:System.Windows.Controls.ComboBox> 일치 하는 항목을 선택 하지 않지만 사용자가 입력 한 텍스트를 유지 합니다.   예를 들어 되었다고 가정는 <xref:System.Windows.Controls.ComboBox> 포함 하는 문자열 "Hello" (대문자 H) 소문자 h) (포함에 사용자가 "hello"를 입력 하 고 있습니다.  경우 <xref:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefix%2A> 은 `false`, <xref:System.Windows.Controls.ComboBox> 해당 컬렉션에 "Hello," 일치 하는 항목을 선택 하 고 해당 텍스트 상자에 해당 문자열을 채웁니다.    경우 <xref:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefix%2A> 은 `true`"Hello"는 컬렉션에서 선택 되어 있지만 "hello" 텍스트 상자에 따르면,  
  
<a name="dependencyPropertyInfo_ShouldPreserveUserEnteredPrefix"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefixProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldPreserveUserEnteredPrefixProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShouldPreserveUserEnteredPrefixProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShouldPreserveUserEnteredPrefixProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefixProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShouldPreserveUserEnteredPrefixProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShouldPreserveUserEnteredPrefixProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefix" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StaysOpenOnEdit">
      <MemberSignature Language="C#" Value="public bool StaysOpenOnEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StaysOpenOnEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.StaysOpenOnEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property StaysOpenOnEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StaysOpenOnEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열려 있으며 드롭다운 컨트롤을 표시하는 <see cref="T:System.Windows.Controls.ComboBox" />가 사용자가 <see cref="T:System.Windows.Controls.TextBox" />를 클릭할 때 계속 열려 있는지 여부를 가져오거나 설정합니다.</summary>
        <value>
          사용자가 텍스트 영역을 클릭하여 편집을 시작할 때 드롭다운 컨트롤을 열어 두려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_StaysOpenOnEdit"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.StaysOpenOnEditProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 <xref:System.Windows.Controls.ComboBox.StaysOpenOnEdit%2A> 만들 콤보 상자의 드롭다운 목록 컨트롤이 포함 된 속성의 사용자가 텍스트 상자에 정보를 입력 하는 동안 들이 열린 상태로 유지 합니다.  
  
 [!code-xaml[ComboBoxItems#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxItems/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaysOpenOnEditProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StaysOpenOnEditProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StaysOpenOnEditProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.StaysOpenOnEditProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StaysOpenOnEditProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StaysOpenOnEditProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.StaysOpenOnEdit" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ComboBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 선택된 항목의 텍스트를 가져오거나 설정합니다.</summary>
        <value>현재 선택된 항목의 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 속성은 `true`, 텍스트 상자에 입력 된 초기 텍스트가이 속성을 설정 합니다. 때 <xref:System.Windows.Controls.ComboBox.IsEditable%2A> 은 `false`,이 값을 설정 해도 효과가 없습니다.  
  
<a name="dependencyPropertyInfo_Text"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.ComboBox.TextProperty>|  
|로 메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Journal%2A>|  
  
   
  
## Examples  
 보여 주는이 예제는 방법을 <xref:System.Windows.Controls.ComboBox.Text%2A> 에 텍스트를 설정 하려면 속성을 사용할 수는 <xref:System.Windows.Controls.TextBox> 전에 사용자가 항목을 선택 합니다.  
  
 [!code-xaml[ComboBoxItems#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ComboBoxItems/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ComboBox.TextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TextProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.ComboBox.Text" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>