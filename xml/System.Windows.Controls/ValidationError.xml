<Type Name="ValidationError" FullName="System.Windows.Controls.ValidationError">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b49a8d350a9103902db35f96a98bebb5c043f21" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36365021" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ValidationError" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationError extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationError" />
  <TypeSignature Language="VB.NET" Value="Public Class ValidationError" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationError" />
  <TypeSignature Language="F#" Value="type ValidationError = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Controls.ValidationRule" />이 유효성 검사 오류를 보고할 때 바인딩 엔진에 의해 만들어지거나 <see cref="M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpressionBase,System.Windows.Controls.ValidationError)" /> 메서드를 통해 명시적으로 만들어지는 유효성 검사 오류를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 데이터 바인딩 모델을 사용 하면 유효성 검사 규칙을 연결할 수 있습니다 프로그램 <xref:System.Windows.Data.Binding> 개체입니다. 변환기가 호출 되기 전에 유효성 검사 대상 소스 값을 전송 하는 동안 발생 합니다. 다음 유효성 검사 프로세스에 설명 합니다.  
  
1.  대상 속성 source 속성 값이 전송 되는 경우 데이터 바인딩 엔진 먼저 모두 제거 <xref:System.Windows.Controls.ValidationError> 에 추가 되었을 수 있는 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 연결 된 바인딩된 요소의 속성입니다. 모든 사용자 지정 유효성 검사 규칙에 대해 정의 되어 있는지 확인 한 다음 <xref:System.Windows.Data.Binding>를 호출 하는 경우는 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 각 메서드 <xref:System.Windows.Controls.ValidationRule> 실패할 때까지 기다리거나 모든 될 때까지 전달 합니다.  
  
2.  통과 하지 않는 사용자 지정 규칙을 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError> 개체를에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 바인딩된 요소의 컬렉션입니다. 때 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 비어 있지 않으면는 <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> 요소의 연결된 속성이로 설정 되어 `true`합니다. 또한 경우는 <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> 속성의는 <xref:System.Windows.Data.Binding> 로 설정 되어 `true`, 바인딩 엔진에서 발생 한 후의 <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> 요소에서 연결 된 이벤트입니다.  
  
3.  모든 규칙이 통과 하는 경우 있을 경우 바인딩 엔진이 다음 변환기를 호출 합니다.  
  
4.  변환기가 통과 하는 경우 바인딩 엔진이 소스 속성의 setter를 호출 합니다.  
  
5.  바인딩에 다음과 같은 경우는 <xref:System.Windows.Controls.ExceptionValidationRule> 연관 하 고 있는지 확인 하려면 바인딩 엔진 확인 단계 3 또는 4 중 예외가 발생 한 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>합니다. 사용할 수는 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 콜백 예외 처리에 대 한 사용자 지정 처리기를 제공할 수 있습니다. 경우는 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 에 지정 되어 있지는 <xref:System.Windows.Data.Binding>, 바인딩 엔진을 만듭니다는 <xref:System.Windows.Controls.ValidationError> 예외와에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 바인딩된 요소의 컬렉션입니다.  
  
 유효한 값을 전송 (원본이 나 대상에는 원본 또는 대상) 어느 방향으로든에서 지워집니다는 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 연결 된 속성입니다.  
  
   
  
## Examples  
 다음 예에서는 스타일 트리거를 만드는 <xref:System.Windows.Controls.ToolTip> 유효성 검사 오류 메시지를 보고 하 합니다. <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 연결 된 속성의 컬렉션을 반환 <xref:System.Windows.Controls.ValidationError> 바인딩된 요소에 있는 개체입니다.  
  
 [!code-xaml[DataBindingLab#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
    <altmember cref="T:System.Windows.Controls.ValidationRule" />
    <altmember cref="M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpressionBase,System.Windows.Controls.ValidationError)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ValidationError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationError (System.Windows.Controls.ValidationRule ruleInError, object bindingInError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Controls.ValidationRule ruleInError, object bindingInError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationError.#ctor(System.Windows.Controls.ValidationRule,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ruleInError As ValidationRule, bindingInError As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationError(System::Windows::Controls::ValidationRule ^ ruleInError, System::Object ^ bindingInError);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ValidationError : System.Windows.Controls.ValidationRule * obj -&gt; System.Windows.Controls.ValidationError" Usage="new System.Windows.Controls.ValidationError (ruleInError, bindingInError)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ruleInError" Type="System.Windows.Controls.ValidationRule" />
        <Parameter Name="bindingInError" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ruleInError">유효성 검사 오류를 발견한 규칙입니다.</param>
        <param name="bindingInError">유효성 검사 오류가 있는 <see cref="T:System.Windows.Data.BindingExpression" /> 또는 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체입니다.</param>
        <summary>지정된 매개 변수를 사용하여 <see cref="T:System.Windows.Controls.ValidationError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationError (System.Windows.Controls.ValidationRule ruleInError, object bindingInError, object errorContent, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Controls.ValidationRule ruleInError, object bindingInError, object errorContent, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationError.#ctor(System.Windows.Controls.ValidationRule,System.Object,System.Object,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationError(System::Windows::Controls::ValidationRule ^ ruleInError, System::Object ^ bindingInError, System::Object ^ errorContent, Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ValidationError : System.Windows.Controls.ValidationRule * obj * obj * Exception -&gt; System.Windows.Controls.ValidationError" Usage="new System.Windows.Controls.ValidationError (ruleInError, bindingInError, errorContent, exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ruleInError" Type="System.Windows.Controls.ValidationRule" />
        <Parameter Name="bindingInError" Type="System.Object" />
        <Parameter Name="errorContent" Type="System.Object" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ruleInError">유효성 검사 오류를 발견한 규칙입니다.</param>
        <param name="bindingInError">유효성 검사 오류가 있는 <see cref="T:System.Windows.Data.BindingExpression" /> 또는 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체입니다.</param>
        <param name="errorContent">오류에 대한 정보입니다.</param>
        <param name="exception">유효성 검사 오류를 발생시킨 예외입니다. 이 매개 변수는 선택적 요소이며 <see langword="null" />로 설정될 수 있습니다.</param>
        <summary>지정된 매개 변수를 사용하여 <see cref="T:System.Windows.Controls.ValidationError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingInError">
      <MemberSignature Language="C#" Value="public object BindingInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BindingInError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.BindingInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingInError As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ BindingInError { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingInError : obj" Usage="System.Windows.Controls.ValidationError.BindingInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Data.BindingExpression" />의 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 또는 <see cref="T:System.Windows.Controls.ValidationError" /> 개체를 가져옵니다. 개체가 명시적으로 잘못된 개체로 표시되거나 개체에 실패한 유효성 검사 규칙이 있습니다.</summary>
        <value>이 <see cref="T:System.Windows.Data.BindingExpression" />의 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 또는 <see cref="T:System.Windows.Controls.ValidationError" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.ErrorContent" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorContent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ErrorContent { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorContent : obj with get, set" Usage="System.Windows.Controls.ValidationError.ErrorContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Controls.ValidationError" />에 대한 추가 컨텍스트를 제공하는 개체(예: 오류를 설명하는 문자열)를 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Windows.Controls.ValidationError" />에 대한 추가 컨텍스트를 제공하는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_ErrorContent"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 예를 보려면 예제 단원을 참조 하십시오.  
  
   
  
## Examples  
 다음 예에서는 스타일 트리거를 만드는 <xref:System.Windows.Controls.ToolTip> 유효성 검사 오류 메시지를 보고 하 합니다. <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 연결 된 속성의 컬렉션을 반환 <xref:System.Windows.Controls.ValidationError> 바인딩된 요소에 있는 개체입니다.  
  
 [!code-xaml[DataBindingLab#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Windows.Controls.ValidationError.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류가 예외의 결과인 경우 이 <see cref="T:System.Exception" />의 원인이 된 <see cref="T:System.Windows.Controls.ValidationError" /> 개체를 가져오거나 설정합니다.</summary>
        <value>오류가 예외의 결과인 경우 <see cref="T:System.Exception" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleInError">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ValidationRule RuleInError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ValidationRule RuleInError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.RuleInError" />
      <MemberSignature Language="VB.NET" Value="Public Property RuleInError As ValidationRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ValidationRule ^ RuleInError { System::Windows::Controls::ValidationRule ^ get(); void set(System::Windows::Controls::ValidationRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RuleInError : System.Windows.Controls.ValidationRule with get, set" Usage="System.Windows.Controls.ValidationError.RuleInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류가 유효성 검사 규칙의 결과인 경우 이 <see cref="T:System.Windows.Controls.ValidationRule" />의 원인이 된 <see cref="T:System.Windows.Controls.ValidationError" /> 개체를 가져오거나 설정합니다.</summary>
        <value>오류가 유효성 검사 규칙의 결과인 경우 <see cref="T:System.Windows.Controls.ValidationRule" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>