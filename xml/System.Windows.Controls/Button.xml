<Type Name="Button" FullName="System.Windows.Controls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e26ef8d736010eb85a2596b3b5d7c6aa7fddea97" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30621387" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Button extends System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits ButtonBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Windows::Controls::Primitives::ButtonBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> 이벤트에 반응하는 Windows 단추 컨트롤을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Button> 클래스에서 직접 상속 된 <xref:System.Windows.Controls.Primitives.ButtonBase?displayProperty=nameWithType> 클래스입니다.  
  
 **콘텐츠 모델:** <xref:System.Windows.Controls.Button> 는 <xref:System.Windows.Controls.ContentControl>합니다. 해당 콘텐츠 속성은 <xref:System.Windows.Controls.ContentControl.Content%2A>합니다.  
  
 처리는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=nameWithType> 를 클릭할 때 응답 이벤트는 <xref:System.Windows.Controls.Button>합니다.  
  
 <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> 메서드 표시는 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트를 처리 합니다. 에 응답 하는 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트를 이벤트 처리기를 연결 하는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 이벤트 또는 호출 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` 로 설정 `true`합니다.  
  
## <a name="customizing-the-button-control"></a>단추 컨트롤을 사용자 지정  
 여러 동일한 속성 설정을 적용 하려면 <xref:System.Windows.Controls.Button> 컨트롤을 사용 하 여는 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다. 기본값을 수정할 수 <xref:System.Windows.Controls.ControlTemplate> 고유한 모양을 제어할 수 있습니다. 만들기에 대 한 자세한 내용은 <xref:System.Windows.Controls.ControlTemplate>, 참조 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  부분 및 관련 된 상태를 보려면는 <xref:System.Windows.Controls.Button>, 참조 [단추 스타일 및 템플릿](~/docs/framework/wpf/controls/button-styles-and-templates.md)합니다.  
  
 종속성 속성을이 컨트롤은 컨트롤의 기본 스타일으로 설정할 수 있습니다.  기본 스타일 속성은 응용 프로그램에이 컨트롤이 표시 하는 경우 속성이 기본값에서 변경 될 수 있습니다. 기본 스타일 응용 프로그램이 실행 중인 때 사용 되는 데스크톱 테마에 따라 결정 됩니다.  자세한 내용은 참조 [기본 WPF 테마](http://go.microsoft.com/fwlink/?LinkID=158252)합니다.  
  
> [!NOTE]
>  시각적 속성을 설정만 영향을 미칠 경우 해당 속성을 둘 다에 <xref:System.Windows.Controls.Button> 컨트롤의 기본 템플릿에 하 고 사용 하 여 설정 됩니다는 합니다. "변경의 시각적 구조의 정도 제어" 섹션의 시각적 속성 목록을 찾을 수 있습니다 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 방법으로 클릭에 응답 하는 세 개의 단추를 보여 줍니다.  
  
-   Hover: 첫 번째 단추를 가리킬 때 마우스 단추 위로 색을 변경 합니다.  
  
-   키를 눌러: 두 번째 단추를 사용 하려면 단추 위에 마우스 포인터가 있는 동안 마우스를 눌러야 합니다.  
  
-   릴리스: 마우스를 누른 단추에 발표 될 때까지 세 번째가 단추의 배경색을 설정 하지 않습니다.  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Button" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancel">
      <MemberSignature Language="C#" Value="public bool IsCancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsCancel" />
      <MemberSignature Language="VB.NET" Value="Public Property IsCancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancel { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Button" />이 취소 단추인지 여부를 나타내는 값을 가져오거나 설정합니다. 사용자는 &lt;Esc&gt; 키를 눌러 취소 단추를 활성화할 수 있습니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.Button" />이 취소 단추이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하는 경우는 <xref:System.Windows.Controls.Button.IsCancel%2A> 단추의 속성 `true`를 만들면는 <xref:System.Windows.Controls.Button> 등록 된는 <xref:System.Windows.Input.AccessKeyManager>합니다. 사용자가 ESC 키를 누를 때는 단추가 활성화 됩니다.  
  
<a name="dependencyPropertyInfo_IsCancel"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.Button.IsCancelProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 "취소" 단추가 만들려면이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-xaml[ButtonProps_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsCancelProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsCancelProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsCancelProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsCancelProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsCancelProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Button.IsCancel" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Button" />이 기본 단추인지 여부를 나타내는 값을 가져오거나 설정합니다. Enter 키를 누르면 기본 단추가 호출됩니다.</summary>
        <value>
          <see cref="T:System.Windows.Controls.Button" />이 기본 단추이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하는 경우는 <xref:System.Windows.Controls.Button.IsDefault%2A> 단추의 속성 `true`에 단추가 등록은 <xref:System.Windows.Input.AccessKeyManager> 사용자에서 ENTER 키를 누르거나 단추를 호출할 수 있도록 합니다.  
  
<a name="dependencyPropertyInfo_IsDefault"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.Button.IsDefaultProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 기본 단추로 단추를 지정 하는 방법을 보여 줍니다.  
  
 [!code-xaml[ButtonProps_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaulted">
      <MemberSignature Language="C#" Value="public bool IsDefaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaulted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaulted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Button" />이 사용자가 Enter 키를 누를 때 활성화되는 단추인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          사용자가 Enter 키를 누를 때 단추가 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Button.IsDefaulted%2A> 속성은 `true` 때는 <xref:System.Windows.Controls.Button.IsDefault%2A> 속성이 `true` 포커스가 있는 컨트롤 ENTER 입력으로 허용 하지 않습니다.  예를 들어는 **실행** 대화 상자는 **확인** 단추가 기본 단추입니다. 텍스트 상자에 포커스가 있을 때 <xref:System.Windows.Controls.Button.IsDefaulted%2A> 에 **확인** 단추는 `true` 있으므로 ENTER 키를 누르거나 단추를 활성화할 수 있습니다.  
  
> [!NOTE]
>  기본 단추에 포커스가 있으면 <xref:System.Windows.Controls.Button.IsDefaulted%2A> 은 `false`합니다. 때문에 이것이 <xref:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown%2A> 메서드 입력을 처리 하 고 필요 하지 않습니다 <xref:System.Windows.Controls.Button.IsDefaulted%2A> 로 설정 해야 `true`합니다.  
  
<a name="dependencyPropertyInfo_IsDefaulted"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.Button.IsDefaultedProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 확인 하는 방법을 보여 줍니다. 여부는 <xref:System.Windows.Controls.Button.IsDefaulted%2A> 속성은 `true` 기본 단추에 대 한 합니다.  
  
 [!code-csharp[ButtonProps_snip#3](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml.cs#3)]
 [!code-vb[ButtonProps_snip#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ButtonProps_snip/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Button.IsDefaulted" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Button.IsDefault" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Button" />을 클릭할 때 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 인프라의 일부로 이 컨트롤에 대한 적절한 <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" />를 만듭니다.</summary>
        <returns>이 컨트롤의 <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>