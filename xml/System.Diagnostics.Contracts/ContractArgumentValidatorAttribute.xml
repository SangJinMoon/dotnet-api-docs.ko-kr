<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContractArgumentValidatorAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51cb1413fd21fcf82c4b83c8c37a7173dfd606243.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cb1413fd21fcf82c4b83c8c37a7173dfd606243</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>Enables the factoring of legacy <ph id="ph1">&lt;see langword="if-then-throw" /&gt;</ph> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</source>
          <target state="translated">다시 사용하기 위해 별도의 메서드로 레거시 <ph id="ph1">&lt;see langword="if-then-throw" /&gt;</ph> 코드의 팩터링을 사용하도록 설정하고 throw된 예외 및 인수를 완전히 제어할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>If your code uses explicit <ph id="ph1">`if-then-throw`</ph> code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</source>
          <target state="translated">코드에서 명시적 <ph id="ph1">`if-then-throw`</ph> 매개 변수의 유효성 검사 코드를 있습니다 수 수 적용 하는 방법 검사를 수행 하 고 실패 한 경우, 특정 예외를 throw 하는 도우미 메서드는 다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>In this example, <ph id="ph1">`Execute`</ph> has an elective precondition specifying that the parameter value should not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`Execute`</ph> 에 매개 변수 값 수를 지정 하는 선택적 전제 조건 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>To enable the contract tools to recognize that the call to <ph id="ph1">`ValidationHelper.NotNull`</ph> represents a contract, you can mark the called method with the  <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&gt;</ph> attribute.</source>
          <target state="translated">에 대 한 호출을 인식 하는 계약 도구를 사용 하도록 설정 하려면 <ph id="ph1">`ValidationHelper.NotNull`</ph> 계약을 나타냅니다, 호출된 된 메서드를 표시할 수 있습니다는 <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType&gt;</ph> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType&gt;</ph> 다음과 같은 문서를 생성 및 정적 검사에 대 한 적절 한 사양을 추출 하는 도구를 사용 하도록 설정 하려면 메서드 호출을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>In addition to <ph id="ph1">`if-then-throw`</ph> statements, the contract section of contract validator methods may contain calls to other contract validator methods.</source>
          <target state="translated">외에 <ph id="ph1">`if-then-throw`</ph> 문, 계약 유효성 검사기 메서드의 계약 섹션 다른 계약 유효성 검사기 메서드 호출에 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>However, no other contracts (such as <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph>) are allowed.</source>
          <target state="translated">그러나 다른 계약이 없는 (같은 <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType&gt;</ph>, 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph>)는 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>Code that follows the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType&gt;</ph> call is ignored by all contract tools.</source>
          <target state="translated">뒤에 오는 코드의 <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType&gt;</ph> 호출이 모든 계약 도구에서 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>The following example shows a range argument validator written in terms of an existing <ph id="ph1">`NotNull`</ph> validator method.</source>
          <target state="translated">다음 예제에서는 기존 관련 하 여 작성 하는 범위 인수 유효성 검사기 <ph id="ph1">`NotNull`</ph> 유효성 검사기 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>From a specification point of view, the <ph id="ph1">`Execute`</ph> method has the following three contracts:</source>
          <target state="translated">사양 관점에서의 <ph id="ph1">`Execute`</ph> 메서드에 다음과 같은 세 개의 계약:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
          <source>In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">표준 메서드에서 유효성 검사기 메서드 계약에 대 한 호출 자유롭게 혼합할 수 다른 계약와 같은 <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>