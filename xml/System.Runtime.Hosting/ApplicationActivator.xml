<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ApplicationActivator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac509e881a31fa9ec7f6e692c1d532cec070a27ae58.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09e881a31fa9ec7f6e692c1d532cec070a27ae58</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Provides the base class for the activation of manifest-based assemblies.</source>
          <target state="translated">매니페스트 기반 어셈블리의 활성화를 위한 기본 클래스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>There is a single designated instance of the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> class in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> to which all activation calls are routed.</source>
          <target state="translated">지정 된 인스턴스는 단일는 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 각 클래스 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 호출 라우팅되는 모든 정품 인증 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> can provide its own custom <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> 현재 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 고유한 사용자 지정을 제공할 수 <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 이 목적을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If a custom <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is not provided, an instance of the default <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is created.</source>
          <target state="translated">사용자 지정 하는 경우 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 인스턴스의 기본 제공 하지 않으면 <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps describe the behavior of the default <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> method implementation:</source>
          <target state="translated">다음 단계는 기본 동작 설명 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> 메서드 구현:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Checks if the <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> of the add-in to be activated matches the <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> of the current domain; if not, proceeds to step 2.</source>
          <target state="translated">확인는 <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> 의 추가 기능을 활성화 된 일치 항목 수는 <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> 현재 도메인; 그렇지 않으면 2 단계로 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Otherwise, executes the assembly and returns the result wrapped in an object handle.</source>
          <target state="translated">그렇지 않은 경우 어셈블리를 실행 하 고 개체 핸들에 래핑된 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Activates the add-in in a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">추가 기능을 활성화 하는 새 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps are taken to initialize a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> using the <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> for the add-in.</source>
          <target state="translated">다음 단계를 새 수행 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> 추가 기능에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Creates a new <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object using an <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing the activation context for the add-in.</source>
          <target state="translated">새 <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> 를 사용 하 여 개체는 <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> 추가 기능에 대해 활성화 컨텍스트를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> method to create a new domain using the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> 방법을 사용 하 여 새 도메인을 만들 수는 <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType&gt;</ph> method to acquire an <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object for the add-in.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> 메서드 호출의 <ph id="ph2">&lt;xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType&gt;</ph> 얻으려고 메서드는 <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> 에서 추가 기능에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, the add-in is executed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph>, 추가 기능에 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If not, <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> throws a <ph id="ph2">&lt;xref:System.Security.Policy.PolicyException&gt;</ph> indicating that execution permission could not be acquired.</source>
          <target state="translated">그렇지 않으면 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> throw 한 <ph id="ph2">&lt;xref:System.Security.Policy.PolicyException&gt;</ph> 나타내는 실행 권한을 획득 하지 못했습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the add-in is trusted to run, then a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is created and configured for the <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> of the add-in, and the add-in is loaded and executed.</source>
          <target state="translated">추가 기능에 신뢰할 수 있는 경우 실행 한 다음 새 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 만들어지고 구성에 대 한는 <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> 의 추가 기능 및 추가 기능이 로드 되 고 실행 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The result of the activation of the add-in is returned, wrapped in an object handle.</source>
          <target state="translated">추가 기능을 활성화 결과 개체 핸들에 래핑되어 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>A custom activator can tailor the activation of an add-in to a particular set of circumstances.</source>
          <target state="translated">사용자 지정 활성기 상황의 특정 집합의 추가 기능 활성화를 조정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>For example, a custom activator could find an existing <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> to activate this add-in instead of creating a new domain every time.</source>
          <target state="translated">예를 들어 기존 사용자 지정 활성기를 찾을 수 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 기능을 활성화이 추가 될 때마다 새 도메인을 만드는 대신 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps describe the behavior of a custom <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> that activates an add-in in an existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>:</source>
          <target state="translated">다음 단계는 사용자 지정의 동작을 설명 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 가 기존으로 추가 기능을 활성화 하는 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The custom activator finds a domain that has the same <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> as the add-in that is being activated.</source>
          <target state="translated">사용자 지정 활성기 같은 도메인을 찾습니다 <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> 로 활성화 되는 추가 기능에 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> has never been seen before in the process, the custom activator creates a new <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> for this <ph id="ph3">&lt;xref:System.ActivationContext&gt;</ph> by calling the <ph id="ph4">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method directly, or delegating this activity to the <ph id="ph5">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> in the base class.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> 사용한 적 과정에서 사용자 지정 활성기를 만들기 전에 새 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 이 <ph id="ph3">&lt;xref:System.ActivationContext&gt;</ph> 호출 하 여는 <ph id="ph4">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> 메서드를 직접 또는이 작업을 위임는 <ph id="ph5">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> 기본 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If there is an existing domain with the same <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>, then the activator can delegate the <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> method call to the <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> in the target domain.</source>
          <target state="translated">같은 기존 도메인에 없는 경우 <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>, 활성기 위임할 수 있는 다음는 <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> 메서드를 호출 하는 <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 대상 도메인에 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Note that this would be a cross-domain call to an <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> that resides in the target <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">이에 대 한 도메인 간 호출 수는 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 대상에 있는 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following code example shows how to obtain an <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> object from the current <ph id="ph2">&lt;xref:System.AppDomain.DomainManager%2A&gt;</ph> for a manifest-based application.</source>
          <target state="translated">다음 코드 예제에서는 가져오는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> 개체는 현재에서 <ph id="ph2">&lt;xref:System.AppDomain.DomainManager%2A&gt;</ph> 매니페스트 기반 응용 프로그램에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ApplicationActivator" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ApplicationActivator" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Creates an instance of the application to be activated, using an activation context that identifies the application.</source>
          <target state="translated">응용 프로그램을 식별하는 활성화 컨텍스트를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph> that identifies the application to activate.</source>
          <target state="translated">활성화할 응용 프로그램을 식별하는 <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>Creates an instance of the application to be activated, using the specified activation context.</source>
          <target state="translated">지정된 활성화 컨텍스트를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">응용 프로그램 실행의 반환 값을 래핑하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph> that identifies the application to activate.</source>
          <target state="translated">활성화할 응용 프로그램을 식별하는 <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>Custom activation data.</source>
          <target state="translated">사용자 지정 활성화 데이터입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>Creates an instance of the application to be activated, using the specified activation context  and custom activation data.</source>
          <target state="translated">지정된 활성화 컨텍스트 및 사용자 지정 활성화 데이터를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">응용 프로그램 실행의 반환 값을 래핑하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>The activation data consists of information such as the query string portion of a URL.</source>
          <target state="translated">정품 인증 데이터 URL의 쿼리 문자열 부분은 같은 정보로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object whose <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property identifies the application to activate.</source>
          <target state="translated">활성화할 응용 프로그램을 식별하는 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 속성을 갖는 <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>Creates an instance of an application using the specified <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 개체를 사용하여 응용 프로그램의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">응용 프로그램 실행의 반환 값을 래핑하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="adSetup" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="adSetup" /&gt;</ph>의 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The application instance failed to execute because the policy settings on the current application domain do not provide permission for this application to run.</source>
          <target state="translated">현재 응용 프로그램 도메인의 정책 설정이 이 응용 프로그램에 대한 실행 권한을 제공하지 않아 응용 프로그램 인스턴스를 실행하지 못한 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>