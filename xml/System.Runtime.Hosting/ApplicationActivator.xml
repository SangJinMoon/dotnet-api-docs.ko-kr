<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d9c7e46b422c36123dd6ccae1ab2e5b26bc459a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48644652" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <TypeSignature Language="F#" Value="type ApplicationActivator = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="90946-101">매니페스트 기반 어셈블리의 활성화를 위한 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-101">Provides the base class for the activation of manifest-based assemblies.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90946-102">한 인스턴스가 지정 된 된 <xref:System.Runtime.Hosting.ApplicationActivator> 각 클래스 <xref:System.AppDomain> 호출 라우팅되는 모든 정품 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-102">There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all activation calls are routed.</span></span> <span data-ttu-id="90946-103">합니다 <xref:System.AppDomainManager> 현재 <xref:System.AppDomain> 자체 사용자 지정을 제공할 수 있습니다 <xref:System.Runtime.Hosting.ApplicationActivator> 이 목적을 위해.</span><span class="sxs-lookup"><span data-stu-id="90946-103">The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator> for this purpose.</span></span> <span data-ttu-id="90946-104">사용자 지정 하는 경우 <xref:System.Runtime.Hosting.ApplicationActivator> 를 제공 하지 않으면 기본 인스턴스에 <xref:System.Runtime.Hosting.ApplicationActivator> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="90946-104">If a custom <xref:System.Runtime.Hosting.ApplicationActivator> is not provided, an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.</span></span>  
  
 <span data-ttu-id="90946-105">다음 단계는 기본 동작 설명 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> 메서드 구현:</span><span class="sxs-lookup"><span data-stu-id="90946-105">The following steps describe the behavior of the default <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> method implementation:</span></span>  
  
1.  <span data-ttu-id="90946-106">확인 합니다 <xref:System.ActivationContext> 의 추가 기능 활성화과 일치 하는 <xref:System.ActivationContext> 현재 도메인입니다; 그렇지 않은 경우 2 단계로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90946-106">Checks if the <xref:System.ActivationContext> of the add-in to be activated matches the <xref:System.ActivationContext> of the current domain; if not, proceeds to step 2.</span></span> <span data-ttu-id="90946-107">이 고, 그렇지 어셈블리를 실행 하 고 래핑된 개체 핸들에 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-107">Otherwise, executes the assembly and returns the result wrapped in an object handle.</span></span>  
  
2.  <span data-ttu-id="90946-108">새 추가 기능을 활성화 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-108">Activates the add-in in a new <xref:System.AppDomain>.</span></span> <span data-ttu-id="90946-109">다음 단계를 새 이동 <xref:System.AppDomain> 를 사용 하 여는 <xref:System.Runtime.Hosting.ActivationArguments> 추가 기능에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-109">The following steps are taken to initialize a new <xref:System.AppDomain> using the <xref:System.Runtime.Hosting.ActivationArguments> for the add-in.</span></span>  
  
    1.  <span data-ttu-id="90946-110">새로 만듭니다 <xref:System.AppDomainSetup> 를 사용 하 여 개체를 <xref:System.Runtime.Hosting.ActivationArguments> 추가 기능에 대해 활성화 컨텍스트를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-110">Creates a new <xref:System.AppDomainSetup> object using an <xref:System.Runtime.Hosting.ActivationArguments> object containing the activation context for the add-in.</span></span>  
  
    2.  <span data-ttu-id="90946-111">호출 된 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 메서드를 사용 하 여 새 도메인 만들기를 <xref:System.AppDomainSetup> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-111">Calls the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> method to create a new domain using the <xref:System.AppDomainSetup> object.</span></span>  
  
    3.  <span data-ttu-id="90946-112"><xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 메서드 호출을 <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> 획득 하는 방법은 <xref:System.Security.Policy.ApplicationTrust> 추가 기능에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-112">The <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> method calls the <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> method to acquire an <xref:System.Security.Policy.ApplicationTrust> object for the add-in.</span></span> <span data-ttu-id="90946-113">경우는 <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> 속성이 반환 `true`, 추가 기능에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90946-113">If the <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> property returns `true`, the add-in is executed.</span></span> <span data-ttu-id="90946-114">그러지 않으면 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> throw를 <xref:System.Security.Policy.PolicyException> 나타내는 실행 권한을 획득할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90946-114">If not, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> throws a <xref:System.Security.Policy.PolicyException> indicating that execution permission could not be acquired.</span></span>  
  
    4.  <span data-ttu-id="90946-115">실행 한 다음 새 신뢰할 수 있는 추가 기능의 경우 <xref:System.AppDomain> 만들어지고 구성 되는 <xref:System.ActivationContext> 는 추가 기능에 추가 기능에서 로드 되 고 실행 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-115">If the add-in is trusted to run, then a new <xref:System.AppDomain> is created and configured for the <xref:System.ActivationContext> of the add-in, and the add-in is loaded and executed.</span></span>  
  
    5.  <span data-ttu-id="90946-116">추가 기능의 활성화 하면 개체 핸들에 래핑되어 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90946-116">The result of the activation of the add-in is returned, wrapped in an object handle.</span></span>  
  
 <span data-ttu-id="90946-117">사용자 지정 활성기 상황의 특정 집합의 추가 기능 활성화를 조정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90946-117">A custom activator can tailor the activation of an add-in to a particular set of circumstances.</span></span> <span data-ttu-id="90946-118">예를 들어, 기존 사용자 지정 활성기를 찾을 수 <xref:System.AppDomain> 기능을 활성화이 추가 될 때마다 새 도메인을 만드는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-118">For example, a custom activator could find an existing <xref:System.AppDomain> to activate this add-in instead of creating a new domain every time.</span></span>  
  
 <span data-ttu-id="90946-119">사용자 지정 동작을 설명 하는 다음 단계 <xref:System.Runtime.Hosting.ApplicationActivator> 기존으로 추가 기능을 활성화 하는 <xref:System.AppDomain>:</span><span class="sxs-lookup"><span data-stu-id="90946-119">The following steps describe the behavior of a custom <xref:System.Runtime.Hosting.ApplicationActivator> that activates an add-in in an existing <xref:System.AppDomain>:</span></span>  
  
1.  <span data-ttu-id="90946-120">사용자 지정 활성기 같은 도메인을 찾습니다 <xref:System.ActivationContext> 는 추가 기능으로 활성화 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-120">The custom activator finds a domain that has the same <xref:System.ActivationContext> as the add-in that is being activated.</span></span>  
  
2.  <span data-ttu-id="90946-121">경우는 <xref:System.ActivationContext> 사용한 적 전에 프로세스에서 사용자 지정 활성기를 만듭니다 <xref:System.AppDomain> 이 대 한 <xref:System.ActivationContext> 호출 하 여를 <xref:System.AppDomain.CreateDomain%2A> 메서드를 직접 또는이 작업을 위임 합니다 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 기본 클래스에서.</span><span class="sxs-lookup"><span data-stu-id="90946-121">If the <xref:System.ActivationContext> has never been seen before in the process, the custom activator creates a new <xref:System.AppDomain> for this <xref:System.ActivationContext> by calling the <xref:System.AppDomain.CreateDomain%2A> method directly, or delegating this activity to the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> in the base class.</span></span>  
  
3.  <span data-ttu-id="90946-122">같은 기존 도메인에 없는 경우 <xref:System.ActivationContext>, 다음 활성기를 위임할 수는 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> 메서드를 호출 하는 <xref:System.Runtime.Hosting.ApplicationActivator> 대상 도메인에서.</span><span class="sxs-lookup"><span data-stu-id="90946-122">If there is an existing domain with the same <xref:System.ActivationContext>, then the activator can delegate the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> method call to the <xref:System.Runtime.Hosting.ApplicationActivator> in the target domain.</span></span> <span data-ttu-id="90946-123">이 수에 대 한 도메인 간 호출을 <xref:System.Runtime.Hosting.ApplicationActivator> 대상에 상주 하는 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-123">Note that this would be a cross-domain call to an <xref:System.Runtime.Hosting.ApplicationActivator> that resides in the target <xref:System.AppDomain>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90946-124">다음 코드 예제에서는 가져오는 방법을 보여 줍니다.는 <xref:System.Runtime.Hosting.ApplicationActivator> 현재에서 개체 <xref:System.AppDomain.DomainManager%2A> 매니페스트 기반 응용 프로그램에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-124">The following code example shows how to obtain an <xref:System.Runtime.Hosting.ApplicationActivator> object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.</span></span>  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90946-125"><see cref="T:System.Runtime.Hosting.ApplicationActivator" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-125">Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90946-126">응용 프로그램을 식별하는 활성화 컨텍스트를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90946-126">Creates an instance of the application to be activated, using an activation context that identifies the application.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="90946-127">활성화할 응용 프로그램을 식별하는 <see cref="T:System.ActivationContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-127">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</span></span></param>
        <summary><span data-ttu-id="90946-128">지정된 활성화 컨텍스트를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90946-128">Creates an instance of the application to be activated, using the specified activation context.</span></span></summary>
        <returns><span data-ttu-id="90946-129">응용 프로그램 실행의 반환 값을 래핑하는 <see cref="T:System.Runtime.Remoting.ObjectHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-129">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span></span> <span data-ttu-id="90946-130">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-130">The return value must be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90946-131">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-131">This method is intended for the manifest-based activation of applications.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90946-132"><paramref name="activationContext" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90946-132"><paramref name="activationContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext"><span data-ttu-id="90946-133">활성화할 응용 프로그램을 식별하는 <see cref="T:System.ActivationContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-133">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</span></span></param>
        <param name="activationCustomData"><span data-ttu-id="90946-134">사용자 지정 활성화 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-134">Custom activation data.</span></span></param>
        <summary><span data-ttu-id="90946-135">지정된 활성화 컨텍스트 및 사용자 지정 활성화 데이터를 사용하여 활성화될 응용 프로그램의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90946-135">Creates an instance of the application to be activated, using the specified activation context  and custom activation data.</span></span></summary>
        <returns><span data-ttu-id="90946-136">응용 프로그램 실행의 반환 값을 래핑하는 <see cref="T:System.Runtime.Remoting.ObjectHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-136">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span></span> <span data-ttu-id="90946-137">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-137">The return value must be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90946-138">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-138">This method is intended for the manifest-based activation of applications.</span></span> <span data-ttu-id="90946-139">정품 인증 데이터는 URL의 쿼리 문자열 부분 등의 정보 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90946-139">The activation data consists of information such as the query string portion of a URL.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90946-140"><paramref name="activationContext" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90946-140"><paramref name="activationContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceHelper : AppDomainSetup -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper adSetup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup"><span data-ttu-id="90946-141">활성화할 응용 프로그램을 식별하는 <see cref="T:System.AppDomainSetup" /> 속성을 갖는 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-141">An <see cref="T:System.AppDomainSetup" /> object whose <see cref="P:System.AppDomainSetup.ActivationArguments" /> property identifies the application to activate.</span></span></param>
        <summary><span data-ttu-id="90946-142">지정된 <see cref="T:System.AppDomainSetup" /> 개체를 사용하여 응용 프로그램의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90946-142">Creates an instance of an application using the specified <see cref="T:System.AppDomainSetup" /> object.</span></span></summary>
        <returns><span data-ttu-id="90946-143">응용 프로그램 실행의 반환 값을 래핑하는 <see cref="T:System.Runtime.Remoting.ObjectHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-143">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span></span> <span data-ttu-id="90946-144">실제 개체에 액세스하려면 반환 값을 래핑 해제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90946-144">The return value must be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90946-145">이 메서드는 응용 프로그램의 매니페스트 기반 활성화를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-145">This method is intended for the manifest-based activation of applications.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90946-146"><paramref name="adSetup" />의 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90946-146">The <see cref="P:System.AppDomainSetup.ActivationArguments" /> property of <paramref name="adSetup" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="90946-147">현재 응용 프로그램 도메인의 정책 설정이 이 응용 프로그램에 대한 실행 권한을 제공하지 않아 응용 프로그램 인스턴스를 실행하지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="90946-147">The application instance failed to execute because the policy settings on the current application domain do not provide permission for this application to run.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>