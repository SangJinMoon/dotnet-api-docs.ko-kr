<Type Name="ObjectHandle" FullName="System.Runtime.Remoting.ObjectHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="200f7ccaece3b89464b033bc5a53624a5053e211" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectHandle extends System.MarshalByRefObject implements class System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.ObjectHandle" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IObjectHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectHandle : MarshalByRefObject, System::Runtime::Remoting::IObjectHandle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.IObjectHandle</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e9da2-101">값으로 마샬링된 개체 참조를 래핑하여 간접 참조를 통해 반환할 수 있도록 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e9da2-101">Wraps marshal-by-value object references, allowing them to be returned through an indirection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9da2-102"><xref:System.Runtime.Remoting.ObjectHandle> 클래스는 각 래핑된 개체에 대 한 메타 데이터를 로드 하지 않고 여러 응용 프로그램 도메인 간에 (래핑된)에 개체를 전달 하는 데 사용 <xref:System.AppDomain> 있는 <xref:System.Runtime.Remoting.ObjectHandle> 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9da2-102">The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels.</span></span> <span data-ttu-id="e9da2-103">따라서는 <xref:System.Runtime.Remoting.ObjectHandle> 클래스의 경우 호출자에 게 제어를 통해는 <xref:System.Type> 원격 개체의 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9da2-103">Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9da2-104">다음 코드 예제에는 다른 개체를 만드는 방법을 보여 줍니다 <xref:System.AppDomain>, 한 프록시 개체를 검색 하 고는 <xref:System.Runtime.Remoting.ObjectHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9da2-104">The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a <xref:System.Runtime.Remoting.ObjectHandle>.</span></span> <span data-ttu-id="e9da2-105">이 예제에서는 한다고 간주 해도의 코드는 `MyType` 클래스 "ObjectHandleAssembly" 라는 어셈블리에 컴파일됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9da2-105">In this example, you can assume that the code of the `MyType` class is compiled into an assembly called "ObjectHandleAssembly".</span></span>  
  
 [!code-cpp[ObjectHandle#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]
 [!code-csharp[ObjectHandle#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]
 [!code-vb[ObjectHandle#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (o As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectHandle(System::Object ^ o);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="e9da2-106">새 <see cref="T:System.Runtime.Remoting.ObjectHandle" />이 래핑하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-106">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9da2-107">
            <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 클래스의 인스턴스를 초기화하고 제공된 개체 <paramref name="o" />를 래핑합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-107">Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object <paramref name="o" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e9da2-108">래핑된 개체의 수명 임대를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-108">Initializes the lifetime lease of the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9da2-109">래핑된 개체의 수명을 제어하도록 허용하는 초기화된 <see cref="T:System.Runtime.Remoting.Lifetime.ILease" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-109">An initialized <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> that allows you to control the lifetime of the wrapped object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public object Unwrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Unwrap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.Unwrap" />
      <MemberSignature Language="VB.NET" Value="Public Function Unwrap () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Unwrap();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.IObjectHandle.Unwrap</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e9da2-110">래핑된 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-110">Returns the wrapped object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9da2-111">래핑된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9da2-111">The wrapped object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e9da2-112">다음 코드 예제에는 다른 개체를 활성화 하는 방법을 보여 줍니다 <xref:System.AppDomain>, 프록시를 사용 하 여 검색 된 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> 메서드를 사용 하 여 원격 개체에 액세스 하려면 프록시입니다.</span><span class="sxs-lookup"><span data-stu-id="e9da2-112">The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> method, and use the proxy to access the remote object.</span></span>  
  
 [!code-cpp[ObjectHandle#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]
 [!code-csharp[ObjectHandle#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]
 [!code-vb[ObjectHandle#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="e9da2-113">A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 은 원격 <see cref="T:System.MarshalByRefObject" /> 원격 수명 서비스에서 추적 되는 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="e9da2-113">A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> is a remoted <see cref="T:System.MarshalByRefObject" /> that is tracked by the remoting lifetime service.</span>
            </span>
            <span data-ttu-id="e9da2-114">수명 임대가 현재 메서드에 대 한 호출에 실패할 수 있습니다는 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 만료 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="e9da2-114">A call to the current method can fail if the lifetime lease on the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expires.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>