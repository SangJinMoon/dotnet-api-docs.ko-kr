<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IObjectHandle.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a5309dca8c103c6a7b73e020af65efd45032074c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5309dca8c103c6a7b73e020af65efd45032074c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.IObjectHandle">
          <source>Defines the interface for unwrapping marshal-by-value objects from indirection.</source>
          <target state="translated">간접 참조에서 값으로 마샬링된 개체를 래핑 해제하기 위한 인터페이스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.IObjectHandle">
          <source>Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain.</source>
          <target state="translated">값 방식 마샬링 개체는 간접 참조를 호출자가 제어 하는 개체의 도메인에 로드 되 면 통한 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.IObjectHandle">
          <source>The caller can unwrap the object from the indirection through this interface.</source>
          <target state="translated">호출자는이 인터페이스를 통해 간접 참조에서 개체 래핑 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.IObjectHandle">
          <source>The class implementing the <ph id="ph1">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> through which the <ph id="ph3">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> travels.</source>
          <target state="translated">구현 하는 클래스는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> 인터페이스 데 사용할 수 있습니다 (래핑된)에 개체를 전달 합니다. 각 래핑된 개체에 대 한 메타 데이터를 로드 하지 않고 여러 응용 프로그램 도메인 간에 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 있는 <ph id="ph3">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> 이동 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.IObjectHandle">
          <source>Thus, the <ph id="ph1">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> class gives the caller control of when the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the remote object is loaded into their domain.</source>
          <target state="translated">따라서는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> 클래스의 경우 호출자에 게 제어를 통해는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 원격 개체의 해당 도메인에 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
          <source>Unwraps the object.</source>
          <target state="translated">개체의 래핑을 해제합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
          <source>The unwrapped object.</source>
          <target state="translated">래핑이 해제된 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> is a remoted <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> and is tracked by the remoting lifetime service.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> 은 원격 <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 원격 수명 서비스에서 추적 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
          <source>A call to the current method might fail if the lifetime lease on the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> expires.</source>
          <target state="translated">수명 임대가 현재 메서드에 대 한 호출 실패할 수 있습니다는 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> 만료 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>