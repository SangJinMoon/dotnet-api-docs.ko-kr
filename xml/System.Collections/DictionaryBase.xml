<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DictionaryBase.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac565985fb884fc3e9f8ea0e99a2fb18bb6607c9a63.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65985fb884fc3e9f8ea0e99a2fb18bb6607c9a63</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.DictionaryBase">
          <source>Provides the <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> base class for a strongly typed collection of key/value pairs.</source>
          <target state="translated">강력한 형식의 키/값 쌍 컬렉션에 대한 <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> 기본 클래스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated">C# 언어 (각각에 대해 Visual basic에서)의 컬렉션에 있는 요소 형식의 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Since each element of the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">이후의 각 요소는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 는 키/값 쌍 요소 형식이 키의 형식 또는 값의 형식입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.</source>
          <target state="translated">요소 형식이 대신 <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> 문에 열거자를 컬렉션에 쓰는 것부터 읽기 가능 주변 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> method.</source>
          <target state="translated">키는 상속 될 수 때문에 동작을 변경할의 절대적인 고유성을 보장할 수 없습니다 사용한 비교는 <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">공용 정적 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>This implementation does not provide a synchronized (thread-safe) wrapper for a <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>, but derived classes can create their own synchronized versions of the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> using the <ph id="ph3">&lt;see cref="P:System.Collections.ICollection.SyncRoot" /&gt;</ph> property.</source>
          <target state="translated">이 구현에 대 한 동기화 (스레드로부터 안전한 지) 래퍼를 제공 하지 않습니다는 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>, 파생 된 클래스의 동기화 된 고유 버전을 만들 수 있지만 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 를 사용 하는 <ph id="ph3">&lt;see cref="P:System.Collections.ICollection.SyncRoot" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>This base class is provided to make it easier for implementers to create a strongly typed custom collection.</source>
          <target state="translated">이 기본 클래스는 쉽게 강력한 형식의 사용자 지정 컬렉션을 만들 수 있도록 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Implementers are encouraged to extend this base class instead of creating their own.</source>
          <target state="translated">구현자는 직접 만드는 대신이 기본 클래스를 확장 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.DictionaryBase">
          <source>Members of this base class are protected and are intended to be used through a derived class only.</source>
          <target state="translated">이 기본 클래스의 멤버 보호 되 고 파생된 클래스를 통해 사용 하기에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.Clear">
          <source>Clears the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스의 콘텐츠를 지웁니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph> 가 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryEntry" /&gt;</ph> objects copied from the <ph id="ph3">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 인스턴스에서 복사된 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryEntry" /&gt;</ph> 개체의 대상인 1차원 <ph id="ph3">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>배열<ept id="p1">&lt;/c&gt;</ept>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> elements to a one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> at the specified index.</source>
          <target state="translated">지정한 인덱스에서 1차원 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> 엔트리를 복사합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>.</source>
          <target state="translated">요소가 복사 되는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 열거자가 반복는 동일한 순서로 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.DictionaryBase.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>의 요소 수가 대상 <ph id="ph3">&lt;paramref name="array" /&gt;</ph>의 <ph id="ph2">&lt;paramref name="index" /&gt;</ph>부터 끝까지 사용 가능한 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>의 형식을 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 포함된 요소의 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 포함된 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.Dictionary">
          <source>Gets the list of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 포함된 요소의 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Dictionary">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> representing the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance itself.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 인스턴스 자체를 나타내는 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Dictionary">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Dictionary">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.Dictionary">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> that iterates through the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> 인스턴스를 반복하는 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 대한 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">@FSHO1@C# 언어의 <ph id="ph1">`foreach`</ph> 문(Visual Basic의 경우 <ph id="ph2">`for each`</ph>)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">그러므로 열거자를 직접 조작하는 대신 <ph id="ph1">`foreach`</ph>를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">이 위치에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>는 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>의 값을 읽기 전에 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환할 수도 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.GetEnumerator">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.InnerHashtable">
          <source>Gets the list of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 포함된 요소의 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.InnerHashtable">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> representing the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance itself.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> 인스턴스 자체를 나타내는 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.InnerHashtable">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.InnerHashtable">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>Performs additional custom processes before clearing the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스의 내용을 지우기 전에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</source>
          <target state="translated">이 메서드의 기본 구현 컬렉션을 지울 전에 동작을 수행 하는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에서 모든 요소를 삭제 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnClear" /&gt;</ph> is invoked before the standard Clear behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnClearComplete" /&gt;</ph> is invoked after the standard Clear behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnClear" /&gt;</ph> 표준 지우기 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnClearComplete" /&gt;</ph> 표준 지우기 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClear">
          <source>For example, implementers can exempt certain elements from deletion by a global Clear.</source>
          <target state="translated">예를 들어 구현자 삭제 작업으로 전역 Clear의에서 특정 요소를 제외할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>Performs additional custom processes after clearing the contents of the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스의 내용을 지운 후에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</source>
          <target state="translated">이 메서드의 기본 구현 컬렉션의 선택을 취소 한 후 작업을 수행할 수는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에서 모든 요소를 삭제 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnClearComplete">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnClear" /&gt;</ph> is invoked before the standard Clear behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnClearComplete" /&gt;</ph> is invoked after the standard Clear behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnClear" /&gt;</ph> 표준 지우기 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnClearComplete" /&gt;</ph> 표준 지우기 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>The key of the element to get.</source>
          <target state="translated">가져올 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>The current value of the element associated with <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>키<ept id="p1">&lt;/c&gt;</ept>와 연관된 요소의 현재 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>Gets the element with the specified key and value in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에서 지정한 키와 값이 있는 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> containing the element with the specified key and value.</source>
          <target state="translated">지정된 키와 값의 요소를 포함하는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>The default implementation of this method returns <ph id="ph1">`currentValue`</ph>.</source>
          <target state="translated">이 메서드의 기본 구현에서는 반환 <ph id="ph1">`currentValue`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</source>
          <target state="translated">것은 지정된 된 요소를 검색할 때 추가 동작을 수행 하려면 파생된 클래스에서 재정의 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed when executing the standard Get behavior of the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 기본의 표준 동작을 실행할 때 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /&gt;</ph> can be used to specify processes to perform before returning the value retrieved from the underlying <ph id="ph2">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /&gt;</ph> 내부에서 검색 한 값을 반환 하기 전에 수행할 프로세스를 지정 하는 데 사용할 수 <ph id="ph2">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
          <source>For example, implementers can cast the value into another type before returning it.</source>
          <target state="translated">예를 들어 구현자 수 다른 형식으로 반환 하기 전에 값을 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The key of the element to insert.</source>
          <target state="translated">삽입할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The value of the element to insert.</source>
          <target state="translated">삽입할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>Performs additional custom processes before inserting a new element into the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 새 요소를 삽입하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소를 삽입 하기 전에 몇 가지 작업을 수행 하는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed before inserting the element into the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에 요소를 삽입 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /&gt;</ph> is invoked before the standard Insert behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /&gt;</ph> is invoked after the standard Insert behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /&gt;</ph> 표준 Insert 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /&gt;</ph> 표준 삽입 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
          <source>For example, implementers can restrict which types of objects can be inserted into the <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">예를 들어 구현자에 삽입할 수 있는 개체 형식을 제한할 수는 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>The key of the element to insert.</source>
          <target state="translated">삽입할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>The value of the element to insert.</source>
          <target state="translated">삽입할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>Performs additional custom processes after inserting a new element into the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 새 요소를 삽입한 후에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소를 삽입 한 후 작업을 수행할 수는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed after inserting the element into the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에 요소를 삽입 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /&gt;</ph> is invoked before the standard Insert behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /&gt;</ph> is invoked after the standard Insert behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /&gt;</ph> 표준 Insert 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /&gt;</ph> 표준 삽입 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">제거할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The value of the element to remove.</source>
          <target state="translated">제거할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>Performs additional custom processes before removing an element from the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에서 요소를 제거하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소를 제거 하기 전에 몇 가지 작업을 수행 하는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed before removing the element from the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에서 요소를 제거 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph> is invoked before the standard Remove behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /&gt;</ph> is invoked after the standard Remove behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph> 표준 제거 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /&gt;</ph> 표준 제거 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
          <source>For example, implementers can prevent removal of elements by always throwing an exception in <ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">구현자 항상 예외를 throw 하 여 요소의 제거를 방지할 수 예를 들어 <ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">제거할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>The value of the element to remove.</source>
          <target state="translated">제거할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>Performs additional custom processes after removing an element from the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에서 요소를 제거한 후에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소를 제거한 후 작업을 수행할 수는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed after removing the element from the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에서 요소를 제거한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph> is invoked before the standard Remove behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /&gt;</ph> is invoked after the standard Remove behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /&gt;</ph> 표준 제거 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /&gt;</ph> 표준 제거 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The key of the element to locate.</source>
          <target state="translated">찾을 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The old value of the element associated with <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>키<ept id="p1">&lt;/c&gt;</ept>와 연관된 요소의 이전 값입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The new value of the element associated with <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>키<ept id="p1">&lt;/c&gt;</ept>와 연관된 요소의 새 값입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>Performs additional custom processes before setting a value in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 값을 설정하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소를 설정 하기 전에 몇 가지 작업을 수행 하는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed before setting the specified element in the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 내부에 지정된 된 요소를 설정 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph> is invoked before the standard Set behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /&gt;</ph> is invoked after the standard Set behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph> 표준 설정 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /&gt;</ph> 표준 설정 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
          <source>For example, implementers can restrict which values can be overwritten by performing a check inside <ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">예를 들어 내부에서 검사를 수행 하 여 어떤 값을 덮어쓸 수 구현자를 제한할 수 <ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The key of the element to locate.</source>
          <target state="translated">찾을 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The old value of the element associated with <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>키<ept id="p1">&lt;/c&gt;</ept>와 연관된 요소의 이전 값입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The new value of the element associated with <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>키<ept id="p1">&lt;/c&gt;</ept>와 연관된 요소의 새 값입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>Performs additional custom processes after setting a value in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 인스턴스에 값을 설정한 후에 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</source>
          <target state="translated">이 메서드의 기본 구현 지정한 요소를 설정한 후 작업을 수행할 수는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed after setting the specified element in the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 지정된 된 요소는 기본 설정 후에 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph> is invoked before the standard Set behavior, whereas <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /&gt;</ph> is invoked after the standard Set behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /&gt;</ph> 표준 설정 동작 전에 호출 되 고 <ph id="ph2">&lt;see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /&gt;</ph> 표준 설정 동작 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The key of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The value of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>Performs additional custom processes when validating the element with the specified key and value.</source>
          <target state="translated">지정한 키와 값을 가지는 요소의 유효성을 검사할 때 추가로 사용자 지정 프로세스를 수행합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.</source>
          <target state="translated">이 메서드의 기본 구현 지정된 된 요소의 유효성을 검사할 때 특별 한 조치를 수행 하는 파생된 클래스에서 재정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The On* methods are invoked only on the instance returned by the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> property, but not on the instance returned by the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> property.</source>
          <target state="translated">반환 된 인스턴스에만 On * 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase.Dictionary%2A&gt;</ph> 속성에 의해 반환 되는 인스턴스는 없지만 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase.InnerHashtable%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The default implementation of this method is an O(1) operation.</source>
          <target state="translated">이 메서드의 기본 구현 하는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 기본의 표준 동작을 실행할 때 수행 해야 하는 프로세스를 정의 하는 데 사용 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</source>
          <target state="translated">이 메서드를 정의 하 여 구현자 기능을 추가할 수 상속 된 메서드를 다른 모든 메서드를 재정의 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /&gt;</ph> can be used to impose restrictions on the type of objects that are accepted into the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /&gt;</ph> 용도 컬렉션에 허용 되는 개체의 형식 제한 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
          <source>The default implementation prevents <ph id="ph1">&lt;see langword="null" /&gt;</ph> from being added to or removed from the underlying <ph id="ph2">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>.</source>
          <target state="translated">기본 구현은 방지 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 에 추가 또는 제거의 기본 <ph id="ph2">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to a <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>A <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object is not synchronized.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체 동기화 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>Derived classes can provide a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class using the <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 사용은 <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 열거 하는 동안 속성입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to a <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class using the <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 사용은 <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object, not directly on the <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object.</source>
          <target state="translated">동기화 하는 코드에서 작업을 수행 해야는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체에 대해 직접는 <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object.</source>
          <target state="translated">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 열거 하는 동안 속성입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The key of the element to add.</source>
          <target state="translated">추가할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The value of the element to add.</source>
          <target state="translated">추가할 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>Adds an element with the specified key and value into the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated">지정한 키와 값을 가지는 요소를 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에 추가합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>An object that has no correlation between its state and its hash code value should typically not be used as the key.</source>
          <target state="translated">개체의 상태와 해시 코드 값 간에 상관 관계가 있는 일반적으로 쓰일 수 없습니다 키로 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>For example, <ph id="ph1">&lt;xref:System.String&gt;</ph> objects are better than <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> objects for use as keys.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.String&gt;</ph> 개체는 보다 나은 <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> 키로 사용할 개체입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> 에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>등 <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">그러나 지정된 된 키에 이미 있는 경우는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph>설정는 <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> 속성 이전 값을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">반면,는 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> 메서드는 기존 요소를 수정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated">같은 키를 가진 요소가 이미 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에 있는 경우</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에서 찾을 수 있는 키입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> contains a specific key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에 특정 키가 들어 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>에 지정한 키가 있는 요소가 포함되어 있으면 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`key`</ph> to determine whether <ph id="ph4">`item`</ph> exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`key`</ph> 확인 하려면 여부 <ph id="ph4">`item`</ph> 존재 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`key`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`key`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source>Gets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체의 크기가 고정되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</source>
          <target state="translated">컬렉션 크기가 고정된 된 컬렉션 만들어지기는 하지만 기존 요소를 수정할 수는 다음에 추가 하거나 제거할 요소의 수 없습니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source>Gets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체가 읽기 전용이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>The key whose value to get or set.</source>
          <target state="translated">가져오거나 설정할 값이 있는 키입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>Gets or sets the value associated with the specified key.</source>
          <target state="translated">지정된 키에 연결된 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>The value associated with the specified key.</source>
          <target state="translated">지정한 키와 연결된 값입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>If the specified key is not found, attempting to get it returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>, and attempting to set it creates a new element using the specified key.</source>
          <target state="translated">지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 요소가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">이 속성은 <ph id="ph1">`myCollection[key]`</ph> 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> 에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph>등 <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">그러나 지정된 된 키에 이미 있는 경우는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph>설정는 <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> 속성 이전 값을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">반면,는 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> 메서드는 기존 요소를 수정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>The property is set and the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> is read-only.</source>
          <target state="translated">속성이 설정되어 있으며 <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>가 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)">
          <source>The property is set, <ph id="ph1">&lt;paramref name="key" /&gt;</ph> does not exist in the collection, and the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> has a fixed size.</source>
          <target state="translated">속성이 설정되어 있고 <ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 컬렉션에 없으며 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>의 크기가 고정된 경우</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the keys in the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 개체의 키가 포함된 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the keys in the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 개체의 키가 포함된 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is the same order as the associated values in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.</source>
          <target state="translated">에 있는 키의 순서는 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 개체가 지정 되어 있지만에 연결 된 값과 순서가 동일는 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 에서 반환 된 개체는 <ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> refers back to the keys in the original <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 정적 복사 하지 않습니다; 대신는 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 원래에서 키를 다시 참조할 <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> continue to be reflected in the returned <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">따라서 변경는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 계속 반영 됩니다 반환 된 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> property of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 속성입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">제거할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>에서 키가 지정된 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> does not contain an element with the specified key, the <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph> remains unchanged.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 지정된 키를 가진 요소가 포함 되지 않습니다는 <ph id="ph2">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 그대로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>No exception is thrown.</source>
          <target state="translated">예외가 throw되지 않습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 한 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 개체의 값이 포함된 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 개체의 값이 포함된 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is the same order as the associated keys in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property.</source>
          <target state="translated">에 있는 값의 순서는 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 개체가 지정 되어 있지만에 연결 된 키와 순서가 동일는 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 에서 반환 된 개체는 <ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> refers back to the values in the original <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> object.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 정적 복사 하지 않습니다; 대신는 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 원래에서 값을 다시 참조 <ph id="ph3">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> continue to be reflected in the returned <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">따라서 변경는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 계속 반영 됩니다 반환 된 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
          <source>The following code example implements the <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> class and uses that implementation to create a dictionary of <ph id="ph2">&lt;xref:System.String&gt;</ph> keys and values that have a <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> property of 5 characters or less.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 <ph id="ph1">&lt;xref:System.Collections.DictionaryBase&gt;</ph> 클래스 및 해당 구현을의 사전을 만드는 데 사용 하 여 <ph id="ph2">&lt;xref:System.String&gt;</ph> 키와 값이 있는 <ph id="ph3">&lt;xref:System.String.Length%2A&gt;</ph> 5 자 이하로 속성입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that iterates through the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>를 반복하는 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Collections.DictionaryBase" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">@FSHO1@C# 언어의 <ph id="ph1">`foreach`</ph> 문(Visual Basic의 경우 <ph id="ph2">`for each`</ph>)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">그러므로 열거자를 직접 조작하는 대신 <ph id="ph1">`foreach`</ph>를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">이 위치에서, 호출 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>의 값을 읽기 전에 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환할 수도 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, calling <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>호출, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throw는 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>