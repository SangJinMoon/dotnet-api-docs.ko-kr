<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b076be1b16d28e1970639f6c9d747547a754fdba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36712628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>컬렉션 개체의 구조적 비교를 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable> 인터페이스를 사용 하면 컬렉션 멤버에 대 한 사용자 지정 된 비교를 구현할 수 있습니다. 즉, 정확 하 게 그 의미를 앞에 따르거나 정렬 순서에서 두 번째 컬렉션 개체를 같은 위치에서 발생 한 컬렉션 개체에 대 한을 정의할 수 있습니다. 이 정의 허용 하는 컬렉션 형식으로 사용할 수 있는지 지정할 수 있습니다는 <xref:System.Collections.IStructuralComparable> 인터페이스입니다.  
  
 인터페이스에는 단일 멤버 <xref:System.Collections.IStructuralComparable.CompareTo%2A>, 현재 컬렉션 개체 보다 작은지, 같은지 또는 정렬 순서에서 두 번째 개체 보다 크면 인지를 결정 합니다. 멤버 또는 두 번째 개체를 사용 하 여 현재 인스턴스의 요소 실제 비교를 수행 하 여 프로그램 <xref:System.Collections.IComparer> 사용자 지정 비교의 정의 포함 하는 인터페이스 구현.  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralComparable> 인터페이스 정렬 또는 순서에 대 한 구조 비교만 지원 합니다. <xref:System.Collections.IStructuralEquatable> 인터페이스 구조적 같음에 대 한 사용자 지정 비교를 지원 합니다.  
  
 .NET Framework는 두 명의 기본 비교자를 제공합니다. 반환 되는 <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> 속성에서 반환 되 고 다른는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 속성입니다.  
  
 제네릭 튜플 클래스 (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>등) 및 <xref:System.Array> 클래스의 명시적 구현을 제공는 <xref:System.Collections.IStructuralComparable> 인터페이스입니다. 캐스팅 (C#) 또는 변환 (Visual Basic의 경우)의 배열 또는 튜플의 현재 인스턴스에 의해는 <xref:System.Collections.IStructuralComparable> 인터페이스 값 제공 하 여 <xref:System.Collections.IComparer> 구현에 대 한 인수로 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드를 사용자 지정 정렬 순서를 정의할 수 있습니다는 배열 또는 컬렉션입니다. 그러나 호출 하지는 않습니다는 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 대부분의 경우에서 직접 메서드. 대신,는 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드는 같은 정렬 메서드 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>합니다. 정의 하는 경우에 프로그램 <xref:System.Collections.IComparer> 구현 된 정렬 메서드나 컬렉션 개체의 클래스 생성자에 인수로 전달 합니다. <xref:System.Collections.IStructuralComparable.CompareTo%2A> 사용자 사용자 지정 비교자와 함께 메서드는 컬렉션을 정렬할 될 때마다 자동으로 호출 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960에서 2000 세 미국 도시의 인구 데이터에 포함 된 개체입니다. 6 중의 첫 번째 구성 요소는 도시 이름입니다. 나머지 5 개의 구성 요소를 2000 1960에서 10 년 간격 인구를 나타냅니다.  
  
 `PopulationComparer` 클래스를 제공는 <xref:System.Collections.IComparer> 해당 구성 요소 중 하나에 의해 정렬 로스엔젤레스와 6 배열을 구현 합니다. 두 값에 제공 되는 `PopulationComparer` 클래스의 생성자에: 정렬 순서를 정의 하는 구성 요소 및 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 부울 값의 위치입니다.  
  
 이 예제에서는 다음 순서로 정렬 되지 않은 배열 요소를 표시, 세 번째 구성 요소 (1970의 인구)를 기준으로 정렬 하 고, 및 다음 여섯 번째 구성 요소 (2000에서 인구)를 기준으로 정렬을 표시 하 합니다. 이 예제에서는 직접 호출 하지 않는 참고는 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드. 메서드가 의해 암시적으로 호출 되는 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> 메서드는 배열에 있는 각 튜플 개체에 대 한 합니다.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
        <param name="comparer">현재 컬렉션 개체의 멤버를 <c>other</c>의 해당하는 멤버와 비교하는 개체입니다.</param>
        <summary>정렬 순서에서 현재 컬렉션 개체의 위치가 다른 개체보다 앞인지, 뒤인지 또는 동일한지를 확인합니다.</summary>
        <returns>다음 표와 같이 현재 컬렉션 개체와 <paramref name="other" /> 사이의 관계를 나타내는 정수입니다.  
  
 <list type="table"><listheader><term> 반환 값  </term><description> 설명  </description></listheader><item><term> -1 </term><description> 현재 인스턴스가 <paramref name="other" /> 앞에 옵니다.  </description></item><item><term> 0  </term><description> 현재 인스턴스와 <paramref name="other" />가 같습니다.  </description></item><item><term> 1  </term><description> 현재 인스턴스가 <paramref name="other" /> 뒤에 옵니다.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 구조적 사용자 지정 비교 및 정렬 배열과 튜플 개체의 메서드를 지원 합니다. <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드 호출의 `comparer` 개체의 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 튜플 구성, 첫 번째 요소 또는 구성 요소 시작 또는 개별 배열 요소를 비교 하는 메서드. 에 대 한 개별 호출이 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 끝 및 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 다음 조건 중 하나가 해지면 메서드 값을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 메서드는-1을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 메서드 1을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 마지막 요소 또는 구성 요소 컬렉션 개체에 대해 메서드가 호출 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960에서 2000 세 미국 도시의 인구 데이터에 포함 된 개체입니다. 6 중의 첫 번째 구성 요소는 도시 이름입니다. 나머지 5 개의 구성 요소를 2000 1960에서 10 년 간격 인구를 나타냅니다.  
  
 `PopulationComparer` 클래스를 제공는 <xref:System.Collections.IComparer> 해당 구성 요소 중 하나에 의해 정렬 로스엔젤레스와 6 배열을 구현 합니다. 두 값에 제공 되는 `PopulationComparer` 클래스의 생성자에: 정렬 순서를 정의 하는 구성의 위치 및 <xref:System.Boolean> 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 값입니다.  
  
 이 예제에서는 다음 순서로 정렬 되지 않은 배열 요소를 표시, 세 번째 구성 요소 (1970의 인구)를 기준으로 정렬 하 고, 및 다음 여섯 번째 구성 요소 (2000에서 인구)를 기준으로 정렬을 표시 하 합니다. 이 예제에서는 직접 호출 하지 않는 참고는 <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> 구현 합니다. 메서드가 의해 암시적으로 호출 되는 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> 메서드는 배열에 있는 각 튜플 개체에 대 한 합니다.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 인스턴스와 <paramref name="other" />가 동일한 형식이 아닌 경우</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>