<Type Name="Queue" FullName="System.Collections.Queue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="35a21c57df8f37e412b63620230c911fe166fb4d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Queue : ICloneable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Queue" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue&#xA;Implements ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queue : ICloneable, System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e6242-101">개체의 선입선출(FIFO) 컬렉션을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-101">Represents a first-in, first-out collection of objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-102">이 클래스는 순환 배열로 큐를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-102">This class implements a queue as a circular array.</span></span> <span data-ttu-id="e6242-103">에 저장 된 개체는 <xref:System.Collections.Queue> 한쪽 끝에 삽입 되 고 다른에서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-103">Objects stored in a <xref:System.Collections.Queue> are inserted at one end and removed from the other.</span></span>  
  
 <span data-ttu-id="e6242-104">큐 및 스택은 유용 정보에 대 한 임시 저장소를 사용 해야 하는 경우 즉 때 하려는 경우도 요소 값을 검색 한 후 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-104">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="e6242-105">사용 하 여 <xref:System.Collections.Queue> 순서는 컬렉션에 저장 된 정보에 액세스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-105">Use <xref:System.Collections.Queue> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="e6242-106">사용 하 여 <xref:System.Collections.Stack> 반대 순서로 정보에 액세스 해야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="e6242-106">Use <xref:System.Collections.Stack> if you need to access the information in reverse order.</span></span> <span data-ttu-id="e6242-107">사용 하 여 <xref:System.Collections.Concurrent.ConcurrentQueue%601> 또는 <xref:System.Collections.Concurrent.ConcurrentStack%601> 동시에 여러 스레드에서 컬렉션에 액세스 해야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="e6242-107">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="e6242-108">세 가지 주요 작업을 수행할 수는 <xref:System.Collections.Queue> 와 해당 요소:</span><span class="sxs-lookup"><span data-stu-id="e6242-108">Three main operations can be performed on a <xref:System.Collections.Queue> and its elements:</span></span>  
  
-   <span data-ttu-id="e6242-109"><xref:System.Collections.Queue.Enqueue%2A> 끝에 요소를 추가 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-109"><xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="e6242-110"><xref:System.Collections.Queue.Dequeue%2A> 시작 부분부터 가장 오래 된 요소를 제거는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-110"><xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="e6242-111"><xref:System.Collections.Queue.Peek%2A> 시작 부분에 있는 가장 오래 된 요소를 반환 하는 <xref:System.Collections.Queue> 하지만 제거 하지 않습니다는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-111"><xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the <xref:System.Collections.Queue> but does not remove it from the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-112">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-112">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span> <span data-ttu-id="e6242-113">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-113">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-114">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-114">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-115">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-115">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-116">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-116">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="e6242-117">기본 증가 비율은 2.0입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-117">The default growth factor is 2.0.</span></span> <span data-ttu-id="e6242-118">용량은 <xref:System.Collections.Queue> 최소한 증가 비율에 관계 없이 다음 4 개 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-118">The capacity of the <xref:System.Collections.Queue> will always increase by at least a minimum of four, regardless of the growth factor.</span></span> <span data-ttu-id="e6242-119">예를 들어 한 <xref:System.Collections.Queue> 1.0 증가 비율와 항상 증가 용량에 네 개의 때 더 큰 용량이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-119">For example, a <xref:System.Collections.Queue> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</span></span>  
  
 <span data-ttu-id="e6242-120"><xref:System.Collections.Queue> 허용 `null` 을 유효한 값으로 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-120"><xref:System.Collections.Queue> accepts `null` as a valid value and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e6242-121">이 컬렉션의 제네릭 버전은를 참조 하세요. <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e6242-121">For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-122">만들고 값을 추가 하는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue> 및 해당 값을 출력 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-122">The following example shows how to create and add values to a <xref:System.Collections.Queue> and how to print out its values.</span></span>  
  
 [!code-cpp[Classic Queue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e6242-123">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-123">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="e6242-124">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-124">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="e6242-125">스레드로부터 안전을 보장 하려면는 <see cref="T:System.Collections.Queue" />에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> 메서드.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-125">To guarantee the thread safety of the <see cref="T:System.Collections.Queue" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> method.</span>
      </span>
      <span data-ttu-id="e6242-126">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-126">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="e6242-127">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-127">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="e6242-128">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6242-128">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.Generic.Queue`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e6242-129">
            <see cref="T:System.Collections.Queue" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-129">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-130">비어 있는 상태이고 기본 초기 용량을 가지며 기본 증가 비율을 사용하는 <see cref="T:System.Collections.Queue" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-130">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the default initial capacity, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-131">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-131">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="e6242-132">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-132">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-133">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-133">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-134">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-134">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-135">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-135">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="e6242-136">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-136">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.ICollection col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection col) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (col As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::ICollection ^ col);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="col" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="col">
          <span data-ttu-id="e6242-137">요소를 복사할 원본 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-137">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-138">지정한 컬렉션에서 복사된 요소가 포함되어 있고, 복사된 요소의 수와 같은 초기 용량을 가지며, 기본 증가 비율을 사용하는 <see cref="T:System.Collections.Queue" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-138">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-139">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-139">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="e6242-140">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-140">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-141">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-141">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-142">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-142">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-143">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-143">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="e6242-144">요소에 복사 됩니다는 <xref:System.Collections.Queue> 가 읽는 순서는 <xref:System.Collections.IEnumerator> 의 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-144">The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="e6242-145">이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `col`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-145">This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6242-146">
            <paramref name="col" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-146">
              <paramref name="col" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="e6242-147">
            <see cref="T:System.Collections.Queue" />에 포함될 수 있는 초기 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-147">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-148">비어 있는 상태이고 지정한 초기 용량을 가지며 기본 증가 비율을 사용하는 <see cref="T:System.Collections.Queue" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-148">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the default growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-149">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-149">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="e6242-150">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-150">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-151">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-151">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-152">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-152">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-153">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-153">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="e6242-154">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-154">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-155">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-155">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6242-156">
            <paramref name="capacity" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-156">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity, float growFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 growFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, growFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity, float growFactor);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="growFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="e6242-157">
            <see cref="T:System.Collections.Queue" />에 포함될 수 있는 초기 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-157">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span>
          </span>
        </param>
        <param name="growFactor">
          <span data-ttu-id="e6242-158">
            <see cref="T:System.Collections.Queue" />의 용량이 확장될 때 곱해지는 비율입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-158">The factor by which the capacity of the <see cref="T:System.Collections.Queue" /> is expanded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-159">비어 있는 상태이고 지정한 초기 용량을 가지며 지정한 증가 비율을 사용하는 <see cref="T:System.Collections.Queue" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-159">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the specified growth factor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-160">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-160">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="e6242-161">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-161">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-162">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-162">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-163">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-163">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-164">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-164">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="e6242-165">용량은 <xref:System.Collections.Queue> 증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 <xref:System.Collections.Queue> 의 크기가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-165">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="e6242-166">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-166">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-167">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-167">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6242-168">
            <paramref name="capacity" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-168">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e6242-169">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-169">-or-</span>
          </span>
          <span data-ttu-id="e6242-170">
            <paramref name="growFactor" />가 1.0보다 작거나 10.0보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-170">
              <paramref name="growFactor" /> is less than 1.0 or greater than 10.0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-171">
            <see cref="T:System.Collections.Queue" />에서 개체를 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-171">Removes all objects from the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-172"><xref:System.Collections.Queue.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-172"><xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="e6242-173">용량 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-173">The capacity remains unchanged.</span></span> <span data-ttu-id="e6242-174">용량을 다시 설정 하는 <xref:System.Collections.Queue>, 호출 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-174">To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="e6242-175">빈 트리밍 <xref:System.Collections.Queue> 의 용량 설정는 <xref:System.Collections.Queue> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-175">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="e6242-176">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-176">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-177">값을 지우는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-177">The following example shows how to clear the values of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-178">
            <see cref="T:System.Collections.Queue" />의 부분 복사본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-178">Creates a shallow copy of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-179">
            <see cref="T:System.Collections.Queue" />의 부분 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-179">A shallow copy of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-180">컬렉션의 단순 복사본은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다 여부는 컬렉션의 요소에만 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-180">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="e6242-181">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-181">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="e6242-182">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-182">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="e6242-183">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-183">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e6242-184">
            <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.Queue" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-184">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="e6242-185">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-185">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-186">
            <see cref="T:System.Collections.Queue" />에 요소가 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-186">Determines whether an element is in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-187">
            <see langword="true" />가 <paramref name="obj" />에 있으면 <see cref="T:System.Collections.Queue" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-187">
              <see langword="true" /> if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Queue" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-188">이 메서드를 호출 하 여 일치 여부를 확인 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-188">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e6242-189">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-189">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 <span data-ttu-id="e6242-190">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `obj` 확인 하려면 여부 `item` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-190">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists.</span></span> <span data-ttu-id="e6242-191">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `obj` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-191">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="e6242-192">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Queue" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-192">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="e6242-193">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-193">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e6242-194">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-194">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-195">
            <see cref="T:System.Collections.Queue" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-195">Copies the <see cref="T:System.Collections.Queue" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-196">요소가 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-196">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-197">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-197">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-198">복사 하는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue> 1 차원 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-198">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6242-199">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-199">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6242-200">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-200">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e6242-201">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-201">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="e6242-202">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-202">-or-</span>
          </span>
          <span data-ttu-id="e6242-203">소스 <see cref="T:System.Collections.Queue" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-203">The number of elements in the source <see cref="T:System.Collections.Queue" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="e6242-204">소스 <see cref="T:System.Collections.Queue" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-204">The type of the source <see cref="T:System.Collections.Queue" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6242-205">
            <see cref="T:System.Collections.Queue" />에 포함된 요소 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-205">Gets the number of elements contained in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6242-206">
            <see cref="T:System.Collections.Queue" />에 포함된 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-206">The number of elements contained in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-207">용량은 <xref:System.Collections.Queue> 요소의 수가 하는 <xref:System.Collections.Queue> 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-207">The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store.</span></span> <span data-ttu-id="e6242-208"><xref:System.Collections.Queue.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-208"><xref:System.Collections.Queue.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-209">용량을 <xref:System.Collections.Queue> 보다 크거나 같은 경우는 항상 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-209">The capacity of a <xref:System.Collections.Queue> is always greater than or equal to <xref:System.Collections.Queue.Count%2A>.</span></span> <span data-ttu-id="e6242-210">경우 <xref:System.Collections.Queue.Count%2A> 요소를 추가 하는 동안 용량을 초과, 용량 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-210">If <xref:System.Collections.Queue.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span> <span data-ttu-id="e6242-211">새 용량 증가 비율을은 현재 용량을 곱하여 결정 됩니다 때 결정는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-211">The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="e6242-212">용량은 <xref:System.Collections.Queue> 증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 <xref:System.Collections.Queue> 의 크기가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-212">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="e6242-213">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-213">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-214">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-214">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public virtual object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Dequeue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-215">
            <see cref="T:System.Collections.Queue" />의 시작 부분에서 개체를 제거하고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-215">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-216">
            <see cref="T:System.Collections.Queue" />의 시작에서 제거하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-216">The object that is removed from the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-217">이 메서드는 <xref:System.Collections.Queue.Peek%2A> 메서드와 유사하지만 <xref:System.Collections.Queue.Peek%2A>는 <xref:System.Collections.Queue>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-217">This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-218">`null` 에 추가할 수는 <xref:System.Collections.Queue> 값으로.</span><span class="sxs-lookup"><span data-stu-id="e6242-218">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="e6242-219">끝과 null 값을 구분 하기 위해는 <xref:System.Collections.Queue>, 확인는 <xref:System.Collections.Queue.Count%2A> 속성 또는 catch는 <xref:System.InvalidOperationException>때 throw 되는 <xref:System.Collections.Queue> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-219">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="e6242-220">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e6242-220">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-221">다음 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <xref:System.Collections.Queue>, 요소를 제거할는 <xref:System.Collections.Queue>, 맨 앞에 요소를 보거나는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-221">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6242-222">
            <see cref="T:System.Collections.Queue" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-222">The <see cref="T:System.Collections.Queue" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual void Enqueue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Enqueue (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Enqueue(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e6242-223">
            <see cref="T:System.Collections.Queue" />에 추가할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-223">The object to add to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
          <span data-ttu-id="e6242-224">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-224">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-225">개체를 <see cref="T:System.Collections.Queue" />의 끝 부분에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-225">Adds an object to the end of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-226">용량을 <xref:System.Collections.Queue> 요소의 수가는 <xref:System.Collections.Queue> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-226">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="e6242-227">요소에 추가 되는 <xref:System.Collections.Queue>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-227">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="e6242-228">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-228">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="e6242-229">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-229">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="e6242-230">증가 비율은 결정 됩니다 때는 <xref:System.Collections.Queue> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-230">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="e6242-231">용량은 <xref:System.Collections.Queue> 증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 <xref:System.Collections.Queue> 의 크기가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-231">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="e6242-232">경우 <xref:System.Collections.Queue.Count%2A> 작으면 내부 배열의 용량 보다이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-232">If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="e6242-233">내부 배열을 재할당 하 여 새 요소로 적용 하는 경우이 메서드는 O는 됩니다 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-233">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-234">다음 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <xref:System.Collections.Queue>, 요소를 제거할는 <xref:System.Collections.Queue>, 맨 앞에 요소를 보거나는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-234">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.Dequeue" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-235">
            <see cref="T:System.Collections.Queue" />를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-235">Returns an enumerator that iterates through the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-236">
            <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.Queue" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-236">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-237">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-237">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="e6242-238">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-238">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="e6242-239">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-239">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="e6242-240">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-240">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="e6242-241"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-241"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="e6242-242">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-242">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e6242-243">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-243">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="e6242-244"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-244"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="e6242-245"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-245"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="e6242-246">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-246">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e6242-247">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-247">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="e6242-248">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-248">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e6242-249"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-249">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="e6242-250">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-250">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e6242-251">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-251">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="e6242-252">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-252">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="e6242-253">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-253">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e6242-254">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-254">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e6242-255">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e6242-255">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6242-256">
            <see cref="T:System.Collections.Queue" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-256">Gets a value indicating whether access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6242-257">
            <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.Queue" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-257">
              <see langword="true" /> if access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e6242-258">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-258">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-259">스레드로부터 안전을 보장 하려면는 <xref:System.Collections.Queue>에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <xref:System.Collections.Queue.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6242-259">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="e6242-260">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-260">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e6242-261">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-261">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="e6242-262">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-262">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-263">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Queue.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-263">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="e6242-264">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-264">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="e6242-265">동기화 하는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue>를 결정 하는 경우는 <xref:System.Collections.Queue> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-265">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Peek();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-266">
            <see cref="T:System.Collections.Queue" />의 시작 부분에서 개체를 제거하지 않고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-266">Returns the object at the beginning of the <see cref="T:System.Collections.Queue" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-267">
            <see cref="T:System.Collections.Queue" />의 처음에 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-267">The object at the beginning of the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-268">이 메서드는 <xref:System.Collections.Queue.Dequeue%2A> 메서드와 유사하지만 <xref:System.Collections.Queue.Peek%2A>는 <xref:System.Collections.Queue>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-268">This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="e6242-269">`null` 에 추가할 수는 <xref:System.Collections.Queue> 값으로.</span><span class="sxs-lookup"><span data-stu-id="e6242-269">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="e6242-270">끝과 null 값을 구분 하기 위해는 <xref:System.Collections.Queue>, 확인는 <xref:System.Collections.Queue.Count%2A> 속성 또는 catch는 <xref:System.InvalidOperationException>때 throw 되는 <xref:System.Collections.Queue> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-270">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="e6242-271">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e6242-271">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-272">다음 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <xref:System.Collections.Queue>, 요소를 제거할는 <xref:System.Collections.Queue>, 맨 앞에 요소를 보거나는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-272">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6242-273">
            <see cref="T:System.Collections.Queue" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-273">The <see cref="T:System.Collections.Queue" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Queue Synchronized (System.Collections.Queue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Queue Synchronized(class System.Collections.Queue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Queue ^ Synchronized(System::Collections::Queue ^ queue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Queue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="System.Collections.Queue" />
      </Parameters>
      <Docs>
        <param name="queue">
          <span data-ttu-id="e6242-274">동기화할 <see cref="T:System.Collections.Queue" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-274">The <see cref="T:System.Collections.Queue" /> to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6242-275">원래 큐를 래핑하고 스레드로부터 안전한 새 <see cref="T:System.Collections.Queue" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-275">Returns a new <see cref="T:System.Collections.Queue" /> that wraps the original queue, and is thread safe.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-276">동기화되어 스레드로부터 안전하게 보호되는 <see cref="T:System.Collections.Queue" /> 래퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-276">A <see cref="T:System.Collections.Queue" /> wrapper that is synchronized (thread safe).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-277">이 메서드에 의해 반환 되는 래퍼를 스레드로부터 안전한 방식으로 수행 되는 작업을 수행 하기 전에 큐를 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-277">The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</span></span>  
  
 <span data-ttu-id="e6242-278">스레드로부터 안전을 보장 하려면는 <xref:System.Collections.Queue>만이 래퍼를 통해 모든 작업을 완료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-278">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="e6242-279">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-279">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e6242-280">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-280">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="e6242-281">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-281">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-282">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Queue.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-282">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="e6242-283">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e6242-283">This method is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="e6242-284">동기화 하는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue>를 결정 하는 경우는 <xref:System.Collections.Queue> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-284">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6242-285">
            <paramref name="queue" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-285">
              <paramref name="queue" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6242-286">
            <see cref="T:System.Collections.Queue" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-286">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6242-287">
            <see cref="T:System.Collections.Queue" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-287">An object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-288">동기화 된 버전을 만들려면는 <xref:System.Collections.Queue>를 사용 하 여는 <xref:System.Collections.Queue.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e6242-288">To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span> <span data-ttu-id="e6242-289">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.Queue> 를 사용 하는 <xref:System.Collections.Queue.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-289">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the <xref:System.Collections.Queue.SyncRoot%2A> property.</span></span> <span data-ttu-id="e6242-290">동기화 하는 코드에서 작업을 수행 해야는 <xref:System.Collections.Queue.SyncRoot%2A> 의 <xref:System.Collections.Queue>에서 직접는 <xref:System.Collections.Queue>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-290">The synchronizing code must perform operations on the <xref:System.Collections.Queue.SyncRoot%2A> of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>.</span></span> <span data-ttu-id="e6242-291">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-291">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="e6242-292">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Queue> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-292">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.</span></span>  
  
 <span data-ttu-id="e6242-293">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-293">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e6242-294">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-294">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="e6242-295">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-295">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-296">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Queue.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-296">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="e6242-297">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-297">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToArray () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-298">
            <see cref="T:System.Collections.Queue" /> 요소를 새 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-298">Copies the <see cref="T:System.Collections.Queue" /> elements to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6242-299">
            <see cref="T:System.Collections.Queue" />에서 복사된 요소를 포함하는 새 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-299">A new array containing elements copied from the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-300"><xref:System.Collections.Queue> 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-300">The <xref:System.Collections.Queue> is not modified.</span></span> <span data-ttu-id="e6242-301">새 배열의 요소 순서의 시작 부분에서 요소의 순서와 같습니다는 <xref:System.Collections.Queue> 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-301">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.</span></span>  
  
 <span data-ttu-id="e6242-302">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-302">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6242-303">복사 하는 방법을 보여 주는 다음 예제는 <xref:System.Collections.Queue> 1 차원 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-303">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6242-304">용량을 <see cref="T:System.Collections.Queue" />의 실제 요소 수로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-304">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Queue" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6242-305">새 요소가 더 이상 큐에 추가 될 경우 큐의 메모리 오버 헤드를 최소화할이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-305">This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</span></span>  
  
 <span data-ttu-id="e6242-306">다시 설정 하는 <xref:System.Collections.Queue> 를 초기 상태로 호출는 <xref:System.Collections.Queue.Clear%2A> 메서드 호출 하기 전에 <xref:System.Collections.Queue.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-306">To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="e6242-307">빈 트리밍 <xref:System.Collections.Queue> 의 용량 설정는 <xref:System.Collections.Queue> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-307">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="e6242-308">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Queue.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e6242-308">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e6242-309">
            <see cref="T:System.Collections.Queue" />이 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6242-309">The <see cref="T:System.Collections.Queue" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Queue.Clear" />
        <altmember cref="P:System.Collections.Queue.Count" />
      </Docs>
    </Member>
  </Members>
</Type>