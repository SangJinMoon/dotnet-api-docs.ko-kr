<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ArrayList.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59a105732aa94698f5ea781b6eed29feca20656b5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a105732aa94698f5ea781b6eed29feca20656b5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface using an array whose size is dynamically increased as required.</source>
          <target state="translated">필요에 따라 크기가 동적으로 증가하는 배열을 사용하여 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> class is designed to hold heterogeneous collections of objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 클래스 개체의 유형이 다른 컬렉션을 보유 하도록 설계 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>However, it does not always offer the best performance.</source>
          <target state="translated">그러나 항상를 제공 하지 않습니다 최상의 성능을 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Instead, we recommend the following:</source>
          <target state="translated">대신, 다음 좋습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>For a heterogeneous collection of objects, use the <ph id="ph1">`List&lt;Object&gt;`</ph> (in C#) or <ph id="ph2">`List(Of Object)`</ph> (in Visual Basic) type.</source>
          <target state="translated">개체의 유형이 다른 컬렉션을 사용 하 여는 <ph id="ph1">`List&lt;Object&gt;`</ph> (C#에서) 또는 <ph id="ph2">`List(Of Object)`</ph> (Visual Basic)에서는 입력 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>For a homogeneous collection of objects, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">개체의 유형이 같은 컬렉션을 사용 하 여는 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>See the "Performance Considerations" section in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> reference topic for a discussion of the relative performance of these classes.</source>
          <target state="translated">"성능 고려 사항" 섹션을 참조는 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 이러한 클래스의 상대 성능을 토론에 대 한 참조 항목입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is not guaranteed to be sorted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 정렬할 보장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>You must sort the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> method prior to performing operations (such as <ph id="ph3">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph>) that require the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> to be sorted.</source>
          <target state="translated">정렬 해야는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> 메서드 작업을 수행 하기 전에 (같은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph>) 해야 하는 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>To maintain a collection that is automatically sorted as new elements are added, you can use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedSet%601&gt;</ph> class.</source>
          <target state="translated">새 요소를 추가할 때 자동으로 정렬 된 컬렉션을 유지 하려면 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.Generic.SortedSet%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The capacity of an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.</source>
          <target state="translated">용량은 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 요소 수는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>As elements are added to an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">호출 하 여 용량을 줄일 수 있습니다 <ph id="ph1">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> 하거나 설정 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 속성이 명시적으로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">에 대 한 매우 큰 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 개체를 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 <ph id="ph2">`enabled`</ph> 에 구성 요소의 특성 <ph id="ph3">`true`</ph> 런타임 환경에서 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">이 컬렉션의 인덱스는 0부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> collection accepts <ph id="ph2">`null`</ph> as a valid value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 컬렉션에는 <ph id="ph2">`null`</ph> 을 유효한 값으로.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>It also allows duplicate elements.</source>
          <target state="translated">또한 중복 되는 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Using multidimensional arrays as elements in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> collection is not supported.</source>
          <target state="translated">다차원 배열에서 요소로 사용 하 여 프로그램 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 수집이 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>The following code example shows how to create and initialize an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and how to display its values.</source>
          <target state="translated">다음 코드 예제를 만들고 초기화 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 및 해당 값을 표시 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">공용 정적 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 수 여러 판독기 동시에 지원할으로 컬렉션은 수정 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" /&gt;</ph> method.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <ph id="ph2">&lt;see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ArrayList">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">비어 있는 상태에서 기본 초기 용량을 가지는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor">
          <source>The capacity of an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.</source>
          <target state="translated">용량은 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 요소의 수가 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor">
          <source>As elements are added to an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> whose elements are copied to the new list.</source>
          <target state="translated">요소가 새 목록에 복사되는 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</source>
          <target state="translated">지정한 컬렉션에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 가지는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>The capacity of an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.</source>
          <target state="translated">용량은 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 요소의 수가 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>As elements are added to an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">요소에 복사 됩니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 가 읽는 순서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> 의 <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`c`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 에 있는 요소의 수는 <ph id="ph3">`c`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="c" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="c" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>The number of elements that the new list can initially store.</source>
          <target state="translated">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> class that is empty and has the specified initial capacity.</source>
          <target state="translated">비어 있는 상태에서 지정한 초기 용량을 가지는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>The capacity of an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can hold.</source>
          <target state="translated">용량은 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 요소의 수가 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>As elements are added to an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`capacity`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> to wrap.</source>
          <target state="translated">래핑할 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper for a specific <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">특정 <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>에 대해 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼를 만듭니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper around the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 주변의 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> does not copy the contents of <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> 내용을 복사 하지 않습니다 <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>Instead, it only creates an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper around <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>; therefore, changes to the <ph id="ph3">&lt;xref:System.Collections.IList&gt;</ph> also affect the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">만 만듭니다 대신는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 래퍼 <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>; 따라서로 변경는 <ph id="ph3">&lt;xref:System.Collections.IList&gt;</ph> 에 영향을 줄의 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> class provides generic <ph id="ph2">&lt;xref:System.Collections.ArrayList.Reverse%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 클래스는 제네릭 제공 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Reverse%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>This wrapper can be a means to use those methods on <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>.</source>
          <target state="translated">이 래퍼를 사용 하는 수단 수 <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>소비량이 적어지지만 래퍼를 통해 이러한 일반 작업 수행에 직접 적용 되는 작업 보다 수 있습니다는 <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>Version Compatibility</source>
          <target state="translated">버전 호환성</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>In the .NET Framework version 1.0 and 1.1, calling the <ph id="ph1">&lt;xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload on the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서에서 호출 된 <ph id="ph1">&lt;xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt;</ph> 메서드 오버 로드에는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 래퍼 아닌 수로 상한을으로 두 번째 인수를 처리 하는 열거자를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> 두 번째 인수 수로 올바르게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to be added to the end of the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>의 끝에 추가할 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">개체를 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 끝 부분에 추가합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> index at which the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> has been added.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph>가 추가된 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 이미 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>의 용량이 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> 자동으로 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 는 보다 작은 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>,이 메서드는 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O 됩니다 용량을 새 요소로 적용로 늘려야 하는 경우 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The following code example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> whose elements should be added to the end of the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">요소가 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>의 끝에 추가되어야 하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">컬렉션 자체가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수는 없지만 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 요소를 포함할 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>Adds the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to the end of the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>의 끝에 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소를 복사합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The order of the elements in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소 순서는 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 에 보존 되는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">하는 경우 새 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (현재 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 컬렉션의 크기를 더한) 보다 커야 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>의 용량이 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> 자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 및 새 요소가 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> can accommodate the new elements without increasing the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, this method is an O(<ph id="ph3">`n`</ph>) operation, where <ph id="ph4">`n`</ph> is the number of elements to be added.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 을 늘리지 않고도 새 요소를 수용할 수는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>,이 메서드는 O는 (<ph id="ph3">`n`</ph>) 작업, 여기서 <ph id="ph4">`n`</ph> 추가할 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) operation, where <ph id="ph4">`n`</ph> is the number of elements to be added and <ph id="ph5">`m`</ph> is <ph id="ph6">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">용량을 새 요소를 수용 하기 위해 증가 하는 경우이 메서드는 O는 됩니다 (<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) 작업을 여기서 <ph id="ph4">`n`</ph> 요소를 추가할 수의 수 및 <ph id="ph5">`m`</ph> 은 <ph id="ph6">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The following code example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="c" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="c" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Uses a binary search algorithm to locate a specific element in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or a portion of it.</source>
          <target state="translated">이진 검색 알고리즘을 사용하여 정렬된 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>나 그 일부에서 특정 요소를 찾습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate.</source>
          <target state="translated">찾을 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.</source>
          <target state="translated">기본 비교자를 사용하여 정렬된 전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="value" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 있는 경우 정렬된 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <ph id="ph4">&lt;paramref name="value" /&gt;</ph>보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>의 비트 보수입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter and each element of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> must implement the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface, which is used for comparisons.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 매개 변수 및의 각 요소는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 구현 해야 합니다는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 비교에 사용 되는 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The elements of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 사용 하는 경우 예외가 생성 되지 않습니다 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">에 값을 삽입할 때는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph> to locate a specific object in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;</ph> 의 특정 개체를 찾을 수는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source>Neither <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nor the elements of <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> implement the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>와 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 둘 다 <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> 인터페이스를 구현하지 않습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not of the same type as the elements of the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소와 동일한 형식이 아닙니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate.</source>
          <target state="translated">찾을 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">요소를 비교할 때 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default comparer that is the <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> implementation of each element.</source>
          <target state="translated">각 요소의 <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> 구현인 기본 비교자를 사용하면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">지정된 비교자를 사용하여 정렬된 전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="value" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 있는 경우 정렬된 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <ph id="ph4">&lt;paramref name="value" /&gt;</ph>보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>의 비트 보수입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">예를 들어 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> 인스턴스도 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 제공의 요소는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 사용 하 여 지정된 된 값과 비교할 <ph id="ph3">&lt;xref:System.Collections.IComparer&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The elements of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by <ph id="ph2">`comparer`</ph>; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 <ph id="ph2">`comparer`</ph>, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the comparison is done using the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> implementation provided by the element itself or by the specified value.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 은 <ph id="ph2">`null`</ph>, 비교를 수행를 사용 하는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The elements of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 사용 하는 경우 예외가 생성 되지 않습니다 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">에 값을 삽입할 때는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> of colored animals.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 색이 지정 된 동물 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The provided <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> performs the string comparison for the binary search.</source>
          <target state="translated">제공 된 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 이진 검색에 대 한 문자열 비교를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source>The results of both an iterative search and a binary search are displayed.</source>
          <target state="translated">반복 검색 및 이진 검색의 결과가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and neither <ph id="ph3">&lt;paramref name="value" /&gt;</ph> nor the elements of <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> implement the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 및 <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 둘 다 <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> 인터페이스를 구현하지 않습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is not of the same type as the elements of the <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소와 동일한 형식이 아닙니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The zero-based starting index of the range to search.</source>
          <target state="translated">검색할 범위의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The length of the range to search.</source>
          <target state="translated">검색할 범위의 길이입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate.</source>
          <target state="translated">찾을 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">요소를 비교할 때 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default comparer that is the <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> implementation of each element.</source>
          <target state="translated">각 요소의 <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> 구현인 기본 비교자를 사용하면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>Searches a range of elements in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">지정된 비교자를 사용하여 정렬된 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="value" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 있는 경우 정렬된 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <ph id="ph4">&lt;paramref name="value" /&gt;</ph>보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <ph id="ph5">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>의 비트 보수입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">예를 들어 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> 인스턴스도 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.IComparer&gt;</ph> implementation.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 제공의 요소는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 사용 하 여 지정된 된 값과 비교할 <ph id="ph3">&lt;xref:System.Collections.IComparer&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The elements of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by <ph id="ph2">`comparer`</ph>; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 <ph id="ph2">`comparer`</ph>, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the comparison is done using the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> implementation provided by the element itself or by the specified value.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 은 <ph id="ph2">`null`</ph>, 비교를 수행를 사용 하는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>The elements of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must already be sorted in increasing value according to the sort order defined by the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 사용 하는 경우 예외가 생성 되지 않습니다 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">에 값을 삽입할 때는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and neither <ph id="ph3">&lt;paramref name="value" /&gt;</ph> nor the elements of <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> implement the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 및 <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 둘 다 <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> 인터페이스를 구현하지 않습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is not of the same type as the elements of the <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph4">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소와 동일한 형식이 아닙니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Capacity">
          <source>Gets or sets the number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 포함될 수 있는 요소의 수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 포함될 수 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 요소의 수가 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 에 실제로 있는 요소의 수가 고 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 보다 크거나 같은 경우는 항상 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 초과 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">호출 하 여 용량을 줄일 수 있습니다 <ph id="ph1">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> 하거나 설정 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 속성이 명시적으로 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</source>
          <target state="translated">때의 값 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 설정 된 명시적으로 지정된 된 용량을 수용 하기 위해 내부 배열을 다시 할당 됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the new capacity.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 새 용량입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.ArrayList.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.ArrayList.Capacity" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 작은 값으로 설정되어 있습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">시스템에 사용 가능한 메모리가 부족합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 모든 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 가 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> or set the <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">용량을 다시 설정 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 호출 <ph id="ph2">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph> 설정 또는 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 속성을 직접 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> to the default capacity.</source>
          <target state="translated">빈 트리밍 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 의 용량 설정는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 기본 용량을 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clear">
          <source>The following code example shows how to trim the unused portions of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and how to clear the values of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 사용 되지 않은 부분 trim 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 값의 선택을 취소 하는 방법과 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clear">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clone">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 부분 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Clone">
          <source>A shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 부분 복사본입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clone">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">컬렉션의 단순 복사본은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다 여부는 컬렉션의 요소에만 복사 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clone">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clone">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Clone">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 요소가 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="item" /&gt;</ph>에 있으면 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Contains(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or a portion of it to a one-dimensional array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 또는 그 일부를 1차원 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에서 복사한 요소의 대상인 일차원 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the beginning of the target array.</source>
          <target state="translated">대상 배열의 맨 처음부터 시작하여 전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>를 호환되는 1차원 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>에 복사합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> 요소를 복사해올 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소가 복사 되는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 열거자가 반복는 동일한 순서로 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The following code example shows how to copy an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> into a one-dimensional <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 로 <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is greater than the number of elements that the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph> can contain.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 요소 수가 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>를 포함할 수 있는 요소 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 형식을 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에서 복사한 요소의 대상인 일차원 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>배열<ept id="p1">&lt;/c&gt;</ept>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">대상 배열의 지정된 인덱스에서 시작하여 전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>을 호환되는 1차원 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>에 복사합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> 요소를 복사해올 합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소가 복사 되는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 열거자가 반복는 동일한 순서로 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The following code example shows how to copy an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> into a one-dimensional <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 로 <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 수가 대상 <ph id="ph3">&lt;paramref name="array" /&gt;</ph>의 <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph>부터 끝까지 사용 가능한 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 형식을 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based index in the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> at which copying begins.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 복사가 시작되는 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에서 복사한 요소의 대상인 일차원 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>배열<ept id="p1">&lt;/c&gt;</ept>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of elements to copy.</source>
          <target state="translated">복사할 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Copies a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">대상 배열의 지정한 인덱스에서 시작하여 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위를 호환되는 1차원 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>에 복사합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> 요소를 복사해올 합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소가 복사 되는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 열거자가 반복는 동일한 순서로 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The following code example shows how to copy an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> into a one-dimensional <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 로 <ph id="ph2">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph> of the source <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 소스 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 크거나 같습니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of elements from <ph id="ph1">&lt;paramref name="index" /&gt;</ph> to the end of the source <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is greater than the available space from <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph4">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>부터 끝까지에 포함된 요소 수가 대상 <ph id="ph4">&lt;paramref name="array" /&gt;</ph>의 <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph>부터 끝까지의 사용 가능한 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 형식을 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Count">
          <source>Gets the number of elements actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 실제로 포함된 요소의 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source>The number of elements actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 실제로 포함된 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 요소의 수가 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 에 실제로 있는 요소의 수가 고 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 보다 크거나 같은 경우는 항상 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 초과 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph> 요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns a list wrapper with a fixed size, where elements are allowed to be modified, but not added or removed.</source>
          <target state="translated">요소를 수정할 수는 있지만 추가하거나 제거할 수는 없는 고정 크기의 목록 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to wrap.</source>
          <target state="translated">래핑할 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper with a fixed size.</source>
          <target state="translated">고정 크기의 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper with a fixed size.</source>
          <target state="translated">고정 크기의 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>This wrapper can be used to prevent additions to and deletions from the original <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">이 래퍼를 추가 및 삭제를에서 방지 하기 위해 사용할 수 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>The elements can still be modified or replaced.</source>
          <target state="translated">여전히 요소를 수정 하거나 바꿀 수 있습니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source>The following code example shows how to create a fixed-size wrapper around an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에는 고정 크기의 래퍼를 만드는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> to wrap.</source>
          <target state="translated">래핑할 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper with a fixed size.</source>
          <target state="translated">고정 크기의 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper with a fixed size.</source>
          <target state="translated">고정 크기의 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>This wrapper can be used to prevent additions to and deletions from the original <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>.</source>
          <target state="translated">이 래퍼를 추가 및 삭제를에서 방지 하기 위해 사용할 수 <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>The elements can still be modified or replaced.</source>
          <target state="translated">여전히 요소를 수정 하거나 바꿀 수 있습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>를 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>Returns an enumerator for the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 대한 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the entire <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">전체 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">@FSHO1@C# 언어의 <ph id="ph1">`foreach`</ph> 문(Visual Basic의 경우 <ph id="ph2">`for each`</ph>)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">그러므로 열거자를 직접 조작하는 대신 <ph id="ph1">`foreach`</ph>를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">이 위치에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>는 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>의 값을 읽기 전에 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환할 수도 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator">
          <source>The following example gets the enumerator for an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, and the enumerator for a range of elements in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 예제에 대 한 열거자를 가져옵니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 및의 요소 범위에 대 한 열거자는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>The zero-based starting index of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> section that the enumerator should refer to.</source>
          <target state="translated">열거자가 참조해야 하는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 섹션의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>The number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> section that the enumerator should refer to.</source>
          <target state="translated">열거자가 참조해야 하는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 섹션의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Returns an enumerator for a range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 대한 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the specified range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>의 지정된 요소 범위에 대한 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual C++, <ph id="ph3">`For Each`</ph> Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`for each`</ph> Visual c + +에서 <ph id="ph3">`For Each`</ph> Visual Basic)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">그러므로 열거자를 직접 조작하는 대신 <ph id="ph1">`foreach`</ph>를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">이 위치에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>는 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>의 값을 읽기 전에 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환할 수도 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>Version Compatibility</source>
          <target state="translated">버전 호환성</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>In the .NET Framework versions 1.0 and 1.1, the enumerator for an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> wrapper returned by the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> method treated the second argument as an upper bound rather than as a count.</source>
          <target state="translated">에 대 한.NET Framework 버전 1.0 및 1.1에서는 열거자는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 반환한 래퍼는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Adapter%2A&gt;</ph> 메서드 아닌 수로 상한을으로 두 번째 인수를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> 두 번째 인수 수로 올바르게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>The following example gets the enumerator for an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, and the enumerator for a range of elements in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 예제에 대 한 열거자를 가져옵니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, 및의 요소 범위에 대 한 열거자는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 올바른 범위를 지정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>The zero-based <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> index at which the range starts.</source>
          <target state="translated">범위가 시작되는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>The number of elements in the range.</source>
          <target state="translated">범위의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> which represents a subset of the elements in the source <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소의 하위 집합을 나타내는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> which represents a subset of the elements in the source <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소의 하위 집합을 나타내는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>This method does not create copies of the elements.</source>
          <target state="translated">이 메서드는 요소의 복사본을 만들지 않습니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>The new <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is only a view window into the source <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 소스에만 보기 창이 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>However, all subsequent changes to the source <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> must be done through this view window <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">그러나 원본의 모든 후속 변경 내용이 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 이 보기 창을 통해 수행 해야 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>If changes are made directly to the source <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, the view window <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> is invalidated and any operations on it will return an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">소스에 직접 변경 되 면 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>를 보기 창 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 무효화 될 것에 대 한 모든 작업을 반환 합니다는 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>The following code example shows how to set and get a range of elements in the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에는 설정 하 고의 요소 범위를 가져오는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 요소의 올바른 범위를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns the zero-based index of the first occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or in a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 또는 그 일부에서 처음 나오는 값의 인덱스(0부터 시작)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the first occurrence within the entire <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>를 검색하고, 전체 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 내에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 있으면 전체 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 검색은 앞으로 첫 번째 요소부터 마지막 요소입니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object)">
          <source>The following code example shows how to determine the index of the first occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 첫 번째 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">검색의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0은 빈 목록에서 유효합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>를 검색하고, 지정된 인덱스부터 마지막 요소까지 포함되는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that extends from <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> to the last element, if found; otherwise, -1.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>부터 마지막 요소까지 포함하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 까지 검색은 <ph id="ph2">`startIndex`</ph> 마지막 요소의 끝입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements from <ph id="ph3">`startIndex`</ph> to the end of the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 의 요소 수 <ph id="ph3">`startIndex`</ph> 의 끝에는 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source>The following code example shows how to determine the index of the first occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 첫 번째 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">검색의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0은 빈 목록에서 유효합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">검색할 섹션에 있는 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>를 검색하고, 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that starts at <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph> and contains <ph id="ph4">&lt;paramref name="count" /&gt;</ph> number of elements, if found; otherwise, -1.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하여 <ph id="ph4">&lt;paramref name="count" /&gt;</ph>개의 요소를 포함하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 까지 검색은 <ph id="ph2">`startIndex`</ph> 에서 끝나는 <ph id="ph3">`startIndex`</ph> 플러스 <ph id="ph4">`count`</ph> 에서 1을 뺀 경우 <ph id="ph5">`count`</ph> 가 0 보다 크면 합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>The following code example shows how to determine the index of the first occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 첫 번째 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 올바른 섹션을 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>를 삽입할 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert.</source>
          <target state="translated">삽입할 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 지정된 인덱스에 요소를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 이미 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>의 용량이 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> 자동으로 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, <ph id="ph3">`value`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 같으면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, <ph id="ph3">`value`</ph> 의 끝에 추가 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The following code example shows how to insert elements into the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 요소를 삽입 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The zero-based index at which the new elements should be inserted.</source>
          <target state="translated">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> whose elements should be inserted into the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">요소가 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 삽입되어야 하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">컬렉션 자체가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수는 없지만 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 요소를 포함할 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>Inserts the elements of a collection into the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">하는 경우 새 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> (현재 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 컬렉션의 크기를 더한) 보다 커야 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;</ph>의 용량이 <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> 자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 및 새 요소가 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, the elements are added to the end of <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 같으면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>, 요소의 끝에 추가 되어 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The order of the elements in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소 순서는 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 에 보존 되는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>This method is an O(<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) operation, where <ph id="ph4">`n`</ph> is the number of elements to be added and <ph id="ph5">`m`</ph> is <ph id="ph6">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) 작업, 여기서 <ph id="ph4">`n`</ph> 요소를 추가할 수의 수 및 <ph id="ph5">`m`</ph> 은 <ph id="ph6">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The following code example shows how to insert elements into the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 요소를 삽입 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="c" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="c" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>의 크기가 고정되어 있으면 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsFixedSize">
          <source>The following code example shows how to create a fixed-size wrapper around an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에는 고정 크기의 래퍼를 만드는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 읽기 전용이면 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsReadOnly">
          <source>The following code example shows how to create a read-only wrapper around an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and how to determine if an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> is read-only.</source>
          <target state="translated">다음 코드 예제에는 읽기 전용 래퍼를 만드는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 여부를 확인 하는 방법과 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 열거 하는 중입니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.IsSynchronized">
          <source>The following code example shows how to synchronize an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, determine if an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> is synchronized and use a synchronized <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 동기화 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>를 결정 하는 경우는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 동기화 되 고 동기화를 사용 하 여 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">지정한 인덱스의 요소입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> returns an <ph id="ph2">&lt;xref:System.Object&gt;</ph>, so you may need to cast the returned value to the original type in order to manipulate it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 반환는 <ph id="ph2">&lt;xref:System.Object&gt;</ph>이므로 조작 하기 위해 원래 형식으로 반환된 된 값을 캐스팅 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>It is important to note that <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is not a strongly-typed collection.</source>
          <target state="translated">사항에 유의 해야 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 는 강력한 형식의 컬렉션이 아닙니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>For a strongly-typed alternative, see <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">강력한 형식의 대신 참조 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">이 속성은 <ph id="ph1">`myCollection[index]`</ph> 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph>을 기본 속성으로 구현합니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The following code example creates an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and adds several items.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 여러 항목을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The example demonstrates accessing elements with the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property (the indexer in C#), and changing an element by assigning a new value to the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property for a specified index.</source>
          <target state="translated">예제와 요소에 액세스 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 속성 (C# 인덱서)에 새 값을 할당 하 여 요소를 변경 하 고는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 지정된 된 인덱스에 대 한 속성입니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The example also shows that the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property cannot be used to access or add elements outside the current size of the list.</source>
          <target state="translated">또한이 예제에서는 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 에 액세스 하거나 목록의 현재 크기 외부 요소를 추가 속성을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> property explicitly to assign values to items in the list.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Item%2A&gt;</ph> 명시적으로 값을 할당 하는 목록의 항목의 속성입니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>The example defines a class that inherits an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and adds a method to scramble the list items.</source>
          <target state="translated">이 예제에서는 상속 하는 클래스 정의 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 목록 항목을 암호화 하는 메서드를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns the zero-based index of the last occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or in a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 또는 그 일부에서 마지막으로 나오는 값의 인덱스(0부터 시작)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the last occurrence within the entire <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 검색하고, 전체 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 내에서 마지막으로 검색된 항목의 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the entire the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">전체 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
          <source>The following code example shows how to determine the index of the last occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">역방향 검색의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>를 검색하고, 첫 번째 요소부터 지정된 인덱스까지 확장되는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에서 마지막으로 검색된 항목의 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that extends from the first element to <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">첫 번째 요소부터 <ph id="ph3">&lt;paramref name="startIndex" /&gt;</ph>까지 확장하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 뒤로 검색 됩니다에 <ph id="ph2">`startIndex`</ph> 첫 번째 요소의 끝입니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements from the beginning of the <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> to <ph id="ph4">`startIndex`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 의 시작 부분에서 요소 수는는 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> 를 <ph id="ph4">`startIndex`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source>The following code example shows how to determine the index of the last occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 찾을 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">역방향 검색의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">검색할 섹션에 있는 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>Searches for the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에서 마지막으로 검색되는 0부터 시작하는 인덱스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> that contains <ph id="ph3">&lt;paramref name="count" /&gt;</ph> number of elements and ends at <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="count" /&gt;</ph>개의 요소를 포함하고 <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph>에서 끝나는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 마지막으로 검색한 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 뒤로 검색 됩니다에 <ph id="ph2">`startIndex`</ph> 에서 끝나는 <ph id="ph3">`startIndex`</ph> 뺀 <ph id="ph4">`count`</ph> + 1, 경우 <ph id="ph5">`count`</ph> 가 0 보다 크면 합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">`item`</ph> 항목이 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> 의 메서드는 <ph id="ph3">`item`</ph> 컬렉션의 개체에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>The following code example shows how to determine the index of the last occurrence of a specified element.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>Note that <ph id="ph1">`LastIndexOf`</ph> is a backward search; therefore, <ph id="ph2">`count`</ph> must be less than or equal to <ph id="ph3">`startIndex`</ph> + 1.</source>
          <target state="translated"><ph id="ph1">`LastIndexOf`</ph> 은 이전 버전과 검색 이므로, <ph id="ph2">`count`</ph> 보다 짧거나 같은 <ph id="ph3">`startIndex`</ph> + 1입니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 올바른 섹션을 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns a list wrapper that is read-only.</source>
          <target state="translated">읽기 전용인 목록 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to wrap.</source>
          <target state="translated">래핑할 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>Returns a read-only <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper.</source>
          <target state="translated">읽기 전용 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>A read-only <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper around <ph id="ph2">&lt;paramref name="list" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="list" /&gt;</ph> 주변의 읽기 전용 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>To prevent any modifications to <ph id="ph1">`list`</ph>, expose <ph id="ph2">`list`</ph> only through this wrapper.</source>
          <target state="translated">수정 하지 못하게 하려면 <ph id="ph1">`list`</ph>, 노출 <ph id="ph2">`list`</ph> 이 래퍼를 사용할 때만 합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>If changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source>The following code example shows how to create a read-only wrapper around an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and how to determine if an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> is read-only.</source>
          <target state="translated">다음 코드 예제에는 읽기 전용 래퍼를 만드는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 여부를 확인 하는 방법과 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> to wrap.</source>
          <target state="translated">래핑할 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>Returns a read-only <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper.</source>
          <target state="translated">읽기 전용 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>A read-only <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper around <ph id="ph2">&lt;paramref name="list" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="list" /&gt;</ph> 주변의 읽기 전용 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>To prevent any modifications to <ph id="ph1">`list`</ph>, expose <ph id="ph2">`list`</ph> only through this wrapper.</source>
          <target state="translated">수정 하지 못하게 하려면 <ph id="ph1">`list`</ph>, 노출 <ph id="ph2">`list`</ph> 이 래퍼를 사용할 때만 합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>If changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 제거할 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 맨 처음 발견되는 특정 개체를 제거합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not contain the specified object, the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> remains unchanged.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 지정 된 개체가 들어 있지 않은 여 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 그대로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>No exception is thrown.</source>
          <target state="translated">예외가 throw되지 않습니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>This method determines equality by calling <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 일치 여부를 확인 <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>The following code example shows how to remove elements from the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">제거할 요소의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 지정된 인덱스에 있는 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>After the element is removed, the size of the collection is adjusted and the value of the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> property is decreased by one.</source>
          <target state="translated">컬렉션의 크기 조정 되는 요소를 제거한 후의 값은 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph> 속성은 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>The following code example shows how to remove elements from the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range of elements to remove.</source>
          <target state="translated">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>The number of elements to remove.</source>
          <target state="translated">제거할 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>Removes a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소의 범위를 제거합니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>The following code example shows how to remove elements from the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 요소의 올바른 범위를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to copy multiple times in the new <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>에서 여러 번 복사할 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>The number of times <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be copied.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>가 복사되어야 하는 횟수입니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> whose elements are copies of the specified value.</source>
          <target state="translated">요소가 지정된 값의 복사본인 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> with <ph id="ph2">&lt;paramref name="count" /&gt;</ph> number of elements, all of which are copies of <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">모두 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 복사본에 해당하는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 요소 수를 포함하는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source>The following code example shows how to create and initialize a new <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> with the same value.</source>
          <target state="translated">다음 코드 예제를 만들고 새 초기화 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 값과 동일한 값입니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Reverses the order of the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 또는 그 일부에서 요소의 순서를 반대로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse">
          <source>Reverses the order of the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에서 요소의 순서를 반대로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements, such that the element at <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> [i], where i is any index within the range, moves to <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> [j], where j equals <ph id="ph4">`index`</ph><ph id="ph5"> + </ph><ph id="ph6">`index`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - i - 1.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> 는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> [i] 여기서 i 범위 내에 있는 인덱스는 이동 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> [j] 여기서 j는 <ph id="ph4">`index`</ph> <ph id="ph5"> + </ph> <ph id="ph6">`index`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`count`</ph> -i-1입니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse">
          <source>The following code example shows how to reverse the sort order of the values in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에 있는 값의 정렬 순서를 반대로 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range to reverse.</source>
          <target state="translated">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>The number of elements in the range to reverse.</source>
          <target state="translated">순서를 반대로 바꿀 범위의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>Reverses the order of the elements in the specified range.</source>
          <target state="translated">지정된 범위에서 요소의 순서를 반대로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements, such that the element at <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> [i], where i is any index within the range, moves to <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> [j], where j equals <ph id="ph4">`index`</ph><ph id="ph5"> + </ph><ph id="ph6">`index`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - i - 1.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> 는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> [i] 여기서 i 범위 내에 있는 인덱스는 이동 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph> [j] 여기서 j는 <ph id="ph4">`index`</ph> <ph id="ph5"> + </ph> <ph id="ph6">`index`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`count`</ph> -i-1입니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>The following code example shows how to reverse the sort order of the values in a range of elements in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 요소 범위에 있는 값의 정렬 순서를 반대로 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 요소의 올바른 범위를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The zero-based <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> index at which to start copying the elements of <bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept>의 요소 복사를 시작할 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> whose elements to copy to the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 요소를 복사할 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">컬렉션 자체가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수는 없지만 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 요소를 포함할 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>Copies the elements of a collection over a range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 대해 컬렉션의 요소를 복사합니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 허용 <ph id="ph2">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The order of the elements in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is preserved in the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">요소 순서는 <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 에 보존 되는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>This method is an O(<ph id="ph1">`n`</ph> + 1) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph> + 1) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The following code example shows how to set and get a range of elements in the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에는 설정 하 고의 요소 범위를 가져오는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> plus the number of elements in <ph id="ph2">&lt;paramref name="c" /&gt;</ph> is greater than <ph id="ph3">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="c" /&gt;</ph>의 요소 수를 더한 값이 <ph id="ph3">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="c" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="c" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Sorts the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 또는 그 일부에 포함된 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which uses the QuickSort algorithm.</source>
          <target state="translated">이 방법은 사용 하 여 <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, QuickSort 알고리즘을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a "less than or equal to" comparison operation determines which of two elements should occur first in the final sorted list.</source>
          <target state="translated">QuickSort 알고리즘은 비교 하는 "작음 보다 크거나 같음" 의미 정렬 (불안정 한 정렬을 라고도 함)은 최종 정렬 된 목록에서 먼저 발생 되어야 두 요소 중 비교 연산을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>However, if two elements are equal, their original order might not be preserved.</source>
          <target state="translated">그러나 두 요소가 같은 경우 원래 순서 유지 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>To perform a stable sort, you must implement a custom <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> interface to use with the other overloads of this method.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 이 메서드의 다른 오버 로드와 함께 사용 하는 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>; in the worst case it is an O(<ph id="ph5">`n`</ph>^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>최악의 경우에는 o (<ph id="ph5">`n`</ph>^2) 작업입니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort">
          <source>The following code example shows how to sort the values in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 값을 정렬 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">요소를 비교할 때 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) to use the <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> implementation of each element.</source>
          <target state="translated">각 요소의 <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> 구현을 사용하기 위한 null 참조(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">지정된 비교자를 사용하여 전체 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> method to  sort a list of objects with a custom comparer that implements the <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> interface.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.Sort%2A&gt;</ph> 메서드를 구현 하는 사용자 지정 비교자로 개체의 목록을 정렬 하는 <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>If you pass <ph id="ph1">`null`</ph> for <ph id="ph2">`comparer`</ph>, this method uses the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> implementation of each element.</source>
          <target state="translated">전달 하는 경우 <ph id="ph1">`null`</ph> 에 대 한 <ph id="ph2">`comparer`</ph>, 사용 하 여이 메서드는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 각 요소의 구현 합니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>In this case, you must make sure that the objects contained in the list implement the <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> interface or an exception will occur.</source>
          <target state="translated">이 경우 목록에 포함 된 개체를 구현 하는지 확인 해야는 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 인터페이스 또는 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>In addition, using the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">또한를 사용 하는 <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> 구현 목록 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 의미 이므로, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지 합니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>To perform a stable sort, you must implement a custom <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> interface.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>; in the worst case it is an O(<ph id="ph5">`n`</ph>^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>최악의 경우에는 o (<ph id="ph5">`n`</ph>^2) 작업입니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>The following code example shows how to sort the values in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> using the default comparer and a custom comparer that reverses the sort order.</source>
          <target state="translated">다음 코드 예제에서는 값을 정렬 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source>An error occurred while comparing two elements.</source>
          <target state="translated">두 요소를 비교하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> is passed for <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>, and the elements in the list do not implement <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>에 대해 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 전달되고 목록에 있는 요소가 <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph>을 구현하지 않습니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">정렬할 범위의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>The length of the range to sort.</source>
          <target state="translated">정렬할 범위의 길이입니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">요소를 비교할 때 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.IComparer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) to use the <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> implementation of each element.</source>
          <target state="translated">각 요소의 <ph id="ph2">&lt;see cref="T:System.IComparable" /&gt;</ph> 구현을 사용하기 위한 null 참조(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>Sorts the elements in a range of elements in <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">지정된 비교자를 사용하여 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 범위에 있는 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>If <ph id="ph1">`comparer`</ph> is set to <ph id="ph2">`null`</ph>, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 로 설정 된 <ph id="ph2">`null`</ph>, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지 않으면이 메서드 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>To perform a stable sort, you must implement a custom <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> interface.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">`count`</ph>; in the worst case it is an O(n^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">`count`</ph>최악의 경우에는 O(n^2) 연산입니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>The following code example shows how to sort the values in a range of elements in an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> using the default comparer and a custom comparer that reverses the sort order.</source>
          <target state="translated">다음 코드 예제에서는의 요소 범위에서 값을 정렬 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 올바른 범위를 지정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
          <source>An error occurred while comparing two elements.</source>
          <target state="translated">두 요소를 비교하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Returns a list wrapper that is synchronized (thread safe).</source>
          <target state="translated">동기화되어 스레드로부터 안전하게 보호되는 목록 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to synchronize.</source>
          <target state="translated">동기화할 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper that is synchronized (thread safe).</source>
          <target state="translated">동기화되어 스레드로부터 안전하게 보호되는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> wrapper that is synchronized (thread safe).</source>
          <target state="translated">동기화되어 스레드로부터 안전하게 보호되는 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through this wrapper.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>,이 래퍼를 통해 모든 작업을 완료 해야 합니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 열거 하는 중입니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source>The following code example shows how to synchronize an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, determine if an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> is synchronized and use a synchronized <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 동기화 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>를 결정 하는 경우는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 동기화 되 고 동기화를 사용 하 여 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> to synchronize.</source>
          <target state="translated">동기화할 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper that is synchronized (thread safe).</source>
          <target state="translated">동기화되어 스레드로부터 안전하게 보호되는 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> wrapper that is synchronized (thread safe).</source>
          <target state="translated">동기화되어 스레드로부터 안전하게 보호되는 <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, all operations must be done through this wrapper.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>,이 래퍼를 통해 모든 작업을 완료 해야 합니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 열거 하는 중입니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>To create a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">동기화 된 버전을 만들려면는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>However, derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">동기화 하는 코드에서 작업을 수행 해야는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>에서 직접는 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> object.</source>
          <target state="translated">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList.SyncRoot%2A&gt;</ph> 열거 하는 중입니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ArrayList.SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="T:System.Collections.ArrayList">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a new array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소를 새 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a new <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소를 새 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> array containing copies of the elements of the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>의 요소 복사본을 포함하는 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ToArray">
          <source>The elements are copied using <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, which is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 요소가 복사 되 <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, 변수인는 O (<ph id="ph2">`n`</ph>) 작업을 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>The element <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the destination array to create and copy elements to.</source>
          <target state="translated">요소를 복사해 넣기 위해 새로 만들 대상 배열의 요소 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to a new array of the specified element type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소를 지정된 요소 형식의 새 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>An array of the specified element type containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 요소 복사본을 포함하는 지정된 요소 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>All of the objects in the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> object will be cast to the <ph id="ph2">&lt;xref:System.Type&gt;</ph> specified in the <ph id="ph3">`type`</ph> parameter.</source>
          <target state="translated">개체는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 개체 캐스팅는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 에 지정 된는 <ph id="ph3">`type`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>The elements are copied using <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, which is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 요소가 복사 되 <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, 변수인는 O (<ph id="ph2">`n`</ph>) 작업을 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>The following copy example shows how to copy the elements of an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> to a string array.</source>
          <target state="translated">요소를 복사 하는 방법을 보여 주는 다음 복사 예제는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 문자열 배열에 있습니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.ToArray(System.Type)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> cannot be cast automatically to the specified type.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 형식을 지정된 형식으로 자동 캐스팅할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>.</source>
          <target state="translated">용량을 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>의 실제 요소 수로 설정합니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph>.</source>
          <target state="translated">다시 설정 하는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 를 초기 상태로 호출는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Clear%2A&gt;</ph> 메서드 호출 하기 전에 <ph id="ph3">&lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> to the default capacity.</source>
          <target state="translated">빈 트리밍 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 의 용량 설정는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 기본 용량을 합니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>The following code example shows how to trim the unused portions of the <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and how to clear the values of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 사용 되지 않은 부분 trim 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> 값의 선택을 취소 하는 방법과 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Collections.ArrayList.TrimToSize">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>가 고정 크기입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>