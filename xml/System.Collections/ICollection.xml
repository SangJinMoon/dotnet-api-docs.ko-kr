<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICollection.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54f42e3fe1e4a092331e9d66ec69fb6411fda725d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f42e3fe1e4a092331e9d66ec69fb6411fda725d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.ICollection">
          <source>Defines size, enumerators, and synchronization methods for all nongeneric collections.</source>
          <target state="translated">제네릭이 아닌 모든 컬렉션에 대한 크기, 열거자 및 동기화 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface is the base interface for classes in the <ph id="ph2">&lt;xref:System.Collections&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 인터페이스는 클래스에 대 한 기본 인터페이스는 <ph id="ph2">&lt;xref:System.Collections&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface extends <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>; <ph id="ph3">&lt;xref:System.Collections.IDictionary&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.IList&gt;</ph> are more specialized interfaces that extend <ph id="ph5">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> 확장 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>; <ph id="ph3">&lt;xref:System.Collections.IDictionary&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Collections.IList&gt;</ph> 확장 하는 더욱 특수화 된 인터페이스는 <ph id="ph5">&lt;xref:System.Collections.ICollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>An <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> implementation is a collection of key/value pairs, like the <ph id="ph2">&lt;xref:System.Collections.Hashtable&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> 구현 같은 키/값 쌍의 컬렉션입니다는 <ph id="ph2">&lt;xref:System.Collections.Hashtable&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>An <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> implementation is a collection of values and its members can be accessed by index, like the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> 구현 값의 컬렉션 이며 인덱스로 같은 해당 멤버를 액세스할 수는 <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>Some collections that limit access to their elements, such as the <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> class, directly implement the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph> interface.</source>
          <target state="translated">와 같은 요소에 대 한 액세스를 제한 하는 일부 컬렉션은 <ph id="ph1">&lt;xref:System.Collections.Queue&gt;</ph> 클래스 및 <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> 클래스를 직접 구현에서 <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>If neither the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface nor the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> interface meet the requirements of the required collection, derive the new collection class from the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph> interface instead for more flexibility.</source>
          <target state="translated">모두는 <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> 인터페이스와 <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> 인터페이스 필요한 컬렉션의 요구 사항을에서 새 컬렉션 클래스를 파생는 <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph> 대신 더 많은 유연성에 대 한 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ICollection">
          <source>For the generic version of this interface, see <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 인터페이스의 제네릭 버전은 참조 <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에서 복사한 요소의 대상인 일차원 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>에는 0부터 시작하는 인덱스가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>배열<ept id="p1">&lt;/c&gt;</ept>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">특정 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 인덱스부터 시작하여 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>의 요소를 <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>에 복사합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>의 요소 수가 대상 <ph id="ph3">&lt;paramref name="array" /&gt;</ph>의 <ph id="ph2">&lt;paramref name="index" /&gt;</ph>부터 끝까지 사용 가능한 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">소스 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>의 형식을 대상 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Collections.ICollection.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 포함된 요소 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 포함된 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>Most collection classes in the <ph id="ph1">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</source>
          <target state="translated">대부분의 컬렉션 클래스에 <ph id="ph1">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> 네임 스페이스는 내부 컬렉션에 동기화 된 래퍼를 제공 하는 한 Synchronized 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 열거 하는 동안 속성입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.</source>
          <target state="translated">내부 저장소를 공개적으로 사용할 수 없는 컬렉션의 경우 예상된 구현에서는 현재 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's <ph id="ph1">`SyncRoot`</ph> property.</source>
          <target state="translated">현재 인스턴스에 대 한 포인터 되지 않을 수 있습니다; 다른 컬렉션을 래핑하는 컬렉션에 대 한 충분 한 참고 내부 컬렉션을 반환 해야 하는 것 <ph id="ph1">`SyncRoot`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Most collection classes in the <ph id="ph1">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespace also implement a <ph id="ph2">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> 네임스페이스에 있는 대부분의 컬렉션 클래스는 내부 컬렉션에 동기화된 래퍼를 제공하는 <ph id="ph2">`Synchronized`</ph> 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>However, derived classes can provide their own synchronized version of the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">그러나 파생 클래스는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 속성을 사용하여 컬렉션의 동기화된 고유 버전을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property of the collection, not directly on the collection.</source>
          <target state="translated">동기화하는 코드는 컬렉션에 직접 작업을 수행하지 않고 컬렉션의 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 속성에 대해 작업을 수행해야 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</source>
          <target state="translated">특히 컬렉션 인스턴스를 동시에 수정할 수 있는 다른 스레드와 적절한 동기화가 유지됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>In the absence of a <ph id="ph1">`Synchronized`</ph> method on a collection, the expected usage for <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> looks as follows:</source>
          <target state="translated">없는 경우에는 <ph id="ph1">`Synchronized`</ph> 메서드는 컬렉션의 예상된 사용량에 <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 모양은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ICollection.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property during the entire enumeration.</source>
          <target state="translated">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 열거 하는 동안 속성입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>