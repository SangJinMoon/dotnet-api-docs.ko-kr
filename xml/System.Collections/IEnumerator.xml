<Type Name="IEnumerator" FullName="System.Collections.IEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="655088f36c3067166e0713ecb39df2830a03420a" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/13/2018" />
    <Meta Name="ms.locfileid" Value="35417188" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("496B0ABF-CDEE-11d3-88E8-00902754C43A")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f3a41-101">제네릭이 아닌 컬렉션을 단순하게 반복할 수 있도록 지원합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f3a41-101">Supports a simple iteration over a non-generic collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3a41-102"><xref:System.Collections.IEnumerator> 모든 제네릭이 아닌 열거자에 대 한 기본 인터페이스가입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-102"><xref:System.Collections.IEnumerator> is the base interface for all non-generic enumerators.</span></span>  
  
 <span data-ttu-id="f3a41-103">이 인터페이스의 제네릭 버전에 대 한 참조 <xref:System.Collections.Generic.IEnumerator%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-103">For the generic version of this interface see <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 <span data-ttu-id="f3a41-104">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-104">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="f3a41-105">따라서 사용 하 여 `foreach` 열거자를 직접 조작 하는 대신 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-105">Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="f3a41-106">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-106">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="f3a41-107"><xref:System.Collections.IEnumerator.Reset%2A> 메서드는 COM 상호 운용성을 위해 제공 되며 완벽 하 게 구현 하지 않아도; 구현자 대신 throw 할 수는 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-107">The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability and does not need to be fully implemented; instead, the implementer can throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="f3a41-108">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-108">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="f3a41-109">호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.IEnumerator.Current%2A>, 그렇지 않으면 <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-109">You must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>; otherwise, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="f3a41-110"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-110"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="f3a41-111"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="f3a41-112">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f3a41-113">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="f3a41-114">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="f3a41-115">설정 하려면 <xref:System.Collections.IEnumerator.Current%2A> 다시 컬렉션의 첫 번째 요소를 호출할 수 있습니다 <xref:System.Collections.IEnumerator.Reset%2A>구현 되는 경우, 다음 <xref:System.Collections.IEnumerator.MoveNext%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-115">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A>, if it’s implemented, followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="f3a41-116">경우 <xref:System.Collections.IEnumerator.Reset%2A> 는 구현 하지 않은 만들어야 새 열거자 인스턴스를 컬렉션의 첫 번째 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-116">If <xref:System.Collections.IEnumerator.Reset%2A> is not implemented, you must create a new enumerator instance to return to the first element of the collection.</span></span>  
  
 <span data-ttu-id="f3a41-117">요소, 삭제 또는 추가, 수정 하는 등 컬렉션에 변경 내용이 열거자의 동작이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-117">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="f3a41-118">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-118">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f3a41-119">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-119">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="f3a41-120">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-120">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3a41-121">다음 코드 예제에서는의 구현을 설명는 <xref:System.Collections.IEnumerable> 및 <xref:System.Collections.IEnumerator> 사용자 지정 컬렉션에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-121">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> interfaces for a custom collection.</span></span> <span data-ttu-id="f3a41-122">이 예제에서는 이러한 인터페이스의 멤버는 명시적으로 호출 되지 않지만의 사용을 지원 하도록 구현 됩니다 `foreach` (`for each` Visual basic에서)는 컬렉션을 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-122">In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of `foreach` (`for each` in Visual Basic) to iterate through the collection.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3a41-123">컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-123">Gets the element in the collection at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3a41-124">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-124">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3a41-125"><xref:System.Collections.IEnumerator.Current%2A> 다음 조건에서 정의 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-125"><xref:System.Collections.IEnumerator.Current%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="f3a41-126">열거자는 열거자를 만든 직후는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-126">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</span></span>   <span data-ttu-id="f3a41-127"><xref:System.Collections.IEnumerator.MoveNext%2A> 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 <xref:System.Collections.IEnumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-127"><xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
-   <span data-ttu-id="f3a41-128">마지막으로 호출한 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-128">The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
-   <span data-ttu-id="f3a41-129">열거자는 컬렉션을 추가, 수정 또는 삭제 요소와 같은 변경 작업으로 인해 무효화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-129">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>  
  
 <span data-ttu-id="f3a41-130"><xref:System.Collections.IEnumerator.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-130"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="f3a41-131"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-131"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3a41-132">다음 코드 예제에서는의 구현을 설명는 <xref:System.Collections.IEnumerator> 사용자 지정 컬렉션에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-132">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerator> interfaces for a custom collection.</span></span> <span data-ttu-id="f3a41-133">이 예제에서는 <xref:System.Collections.IEnumerator.Current%2A> 명시적으로 호출 하지 하지만의 사용을 지원 하도록 구현 됩니다 `foreach` (`for each` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f3a41-133">In this example, <xref:System.Collections.IEnumerator.Current%2A> is not explicitly called, but it is implemented to support the use of `foreach` (`for each` in Visual Basic).</span></span> <span data-ttu-id="f3a41-134">이 코드 예제는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IEnumerator> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-134">This code example is part of a larger example for the <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f3a41-135">열거자를 컬렉션의 다음 요소로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-135">Advances the enumerator to the next element of the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f3a41-136">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-136">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3a41-137">열거자를 만든 후 또는 이후에 <xref:System.Collections.IEnumerator.Reset%2A> 메서드가 호출 되 면 열거자는 컬렉션 및 첫 번째 호출의 첫 번째 요소 앞에 배치 됩니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드 열거자는 컬렉션의 첫 번째 요소를 통해 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-137">After an enumerator is created or after the <xref:System.Collections.IEnumerator.Reset%2A> method is called, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Collections.IEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="f3a41-138">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-138">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f3a41-139">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false` 될 때까지 <xref:System.Collections.IEnumerator.Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-139">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false` until <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="f3a41-140">추가, 수정 또는의 동작 요소를 삭제 하는 등 컬렉션 변경 되 면 <xref:System.Collections.IEnumerator.MoveNext%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-140">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of <xref:System.Collections.IEnumerator.MoveNext%2A> is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3a41-141">다음 코드 예제에서는의 구현을 설명는 <xref:System.Collections.IEnumerator> 사용자 지정 컬렉션에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-141">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerator> interfaces for a custom collection.</span></span> <span data-ttu-id="f3a41-142">이 예제에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 명시적으로 호출 하지 하지만의 사용을 지원 하도록 구현 됩니다 `foreach` (`for each` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f3a41-142">In this example, <xref:System.Collections.IEnumerator.MoveNext%2A> is not explicitly called, but it is implemented to support the use of `foreach` (`for each` in Visual Basic).</span></span> <span data-ttu-id="f3a41-143">이 코드 예제는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IEnumerator> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-143">This code example is part of a larger example for the <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f3a41-144">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-144">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3a41-145">추가, 수정 또는의 동작 요소를 삭제 하는 등 컬렉션 변경 되 면 <xref:System.Collections.IEnumerator.Reset%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-145">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of <xref:System.Collections.IEnumerator.Reset%2A> is undefined.</span></span>  
  
 <span data-ttu-id="f3a41-146"><xref:System.Collections.IEnumerator.Reset%2A> 메서드는 COM 상호 운용성을 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-146">The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability.</span></span> <span data-ttu-id="f3a41-147">구현 해야; 반드시 필요 하지 않습니다. 구현 자가 단순히 대신 throw 할 수는 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-147">It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3a41-148">다음 코드 예제에서는의 구현을 설명는 <xref:System.Collections.IEnumerator> 사용자 지정 컬렉션에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-148">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerator> interfaces for a custom collection.</span></span> <span data-ttu-id="f3a41-149">이 예제에서는 <xref:System.Collections.IEnumerator.Reset%2A> 명시적으로 호출 하지 하지만의 사용을 지원 하도록 구현 됩니다 `foreach` (`for each` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f3a41-149">In this example, <xref:System.Collections.IEnumerator.Reset%2A> is not explicitly called, but it is implemented to support the use of `foreach` (`for each` in Visual Basic).</span></span> <span data-ttu-id="f3a41-150">이 코드 예제는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IEnumerator> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f3a41-150">This code example is part of a larger example for the <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#2)]
 [!code-vb[System.Collections_EnumeratorInterfaces#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="f3a41-151">
            <para>에 대 한 모든 호출 <see cref="M:System.Collections.IEnumerator.Reset" /> 열거자에 대 한 동일한 상태에서 발생 해야 합니다. 기본 설정된 구현은 첫 번째 요소 앞의 컬렉션의 시작 부분에 열거자를 옮기는 것입니다. 와 일치 하는 열거자를 만든 후 컬렉션이 수정 되어 열거자가 무효화이 <see cref="M:System.Collections.IEnumerator.MoveNext" /> 및 <see cref="P:System.Collections.IEnumerator.Current" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f3a41-151">
              <para>All calls to <see cref="M:System.Collections.IEnumerator.Reset" /> must result in the same state for the enumerator. The preferred implementation is to move the enumerator to the beginning of the collection, before the first element. This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Collections.IEnumerator.MoveNext" /> and <see cref="P:System.Collections.IEnumerator.Current" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="P:System.Collections.IEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>