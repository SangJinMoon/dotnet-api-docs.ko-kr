<Type Name="SortedList" FullName="System.Collections.SortedList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3124b7bda8739a20a75d51b771ab675fd3a27c3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortedList : ICloneable, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.SortedList" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements ICloneable, IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : ICloneable, System::Collections::IDictionary" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="14019-101">키를 기준으로 정렬되고 키와 인덱스로 액세스할 수 있는 키/값 쌍의 컬렉션을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-102">이 컬렉션의 제네릭 버전은 참조 <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-102">For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="14019-103">A <xref:System.Collections.SortedList> 요소에서 모든 요소와 같은 키를 통해 액세스할 수 <xref:System.Collections.IDictionary> 구현 또는 모든 요소와 마찬가지로 해당 인덱스로 <xref:System.Collections.IList> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-103">A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.</span></span>  
  
 <span data-ttu-id="14019-104">A <xref:System.Collections.SortedList> 두 배열 목록, 즉 키에 대 한 하나의 배열로의 요소를 저장 및 연관된 된 값에 대 한 다른 배열 개체를 내부적으로 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-104">A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.</span></span> <span data-ttu-id="14019-105">각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-105">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="14019-106">키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-106">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="14019-107">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-107">The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-108">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-108">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="14019-109">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A> 하거나 설정 하는 <xref:System.Collections.SortedList.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-109">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span>  
  
 <span data-ttu-id="14019-110">에 대 한 매우 큰 <xref:System.Collections.SortedList> 개체를 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 `enabled` 에 구성 요소의 특성 `true` 런타임 환경에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-110">For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="14019-111">요소는 <xref:System.Collections.SortedList> 개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 가 생성 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-111">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span> <span data-ttu-id="14019-112">두 경우 모두는 <xref:System.Collections.SortedList> 중복 키를 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-112">In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.</span></span>  
  
 <span data-ttu-id="14019-113">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-113">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-114">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-114">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-115">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-115">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-116">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-116">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-117">에 대 한 작업을 <xref:System.Collections.SortedList> 개체에 대 한 작업 보다 느릴 수 경향이 <xref:System.Collections.Hashtable> 은 정렬로 인해 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-117">Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting.</span></span> <span data-ttu-id="14019-118">그러나는 <xref:System.Collections.SortedList> 연결 된 키 또는 인덱스를 통해 값에 대 한 액세스를 허용 하 여 더 많은 유연성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-118">However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</span></span>  
  
 <span data-ttu-id="14019-119">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-119">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="14019-120">이 컬렉션의 인덱스는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-120">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="14019-121">`foreach` C# 언어의 (`for each` Visual basic에서) 컬렉션의 요소 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-121">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="14019-122">이후의 각 요소는 <xref:System.Collections.SortedList> 는 키/값 쌍 개체, 요소 형식은 아닙니다 키의 유형 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-122">Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="14019-123">요소 형식이 대신 <xref:System.Collections.DictionaryEntry>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-123">Rather, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="14019-124">예:</span><span class="sxs-lookup"><span data-stu-id="14019-124">For example:</span></span>  
  
 [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]
 [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="14019-125">`foreach` 문에 주변 열거자를 컬렉션에 쓰는 것부터 읽기를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-125">The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-126">다음 코드 예제를 만들고 초기화 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체 및 해당 키와 값을 출력 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-126">The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.</span></span>  
  
 [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="14019-127">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="14019-128">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-128">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="14019-129">A <see cref="T:System.Collections.SortedList" /> 개체 수 여러 판독기 동시에 지원할으로 컬렉션은 수정 되지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-129">A <see cref="T:System.Collections.SortedList" /> object can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="14019-130">스레드로부터 안전을 보장 하려면는 <see cref="T:System.Collections.SortedList" />에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> 메서드.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-130">To guarantee the thread safety of the <see cref="T:System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> method.</span>
      </span>
      <span data-ttu-id="14019-131">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-131">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="14019-132">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-132">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="14019-133">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14019-133">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="14019-134">
            <see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-134">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-135">비어 있는 상태이고 기본 초기 용량을 가지며 <see cref="T:System.Collections.SortedList" /> 개체에 추가된 각 키에서 구현하는 <see cref="T:System.IComparable" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-135">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-136">각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-136">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-137">요소에 따라 정렬 되며는 <xref:System.IComparable> 에 추가 된 각 키의 구현에서 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-137">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-138">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-138">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-139">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-139">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-140">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-140">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-141">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-141">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-142">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-142">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="14019-143">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-143">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="14019-144">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-144">-or-</span>
          </span>
          <span data-ttu-id="14019-145">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-145">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-146">비어 있고 기본 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-146">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-147">요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-147">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="14019-148">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-148">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-149">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-149">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-150">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-150">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-151">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-151">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-152">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-153">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-153">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="14019-154">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.SortedList" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-154">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-155">지정된 사전에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 갖고 있으며 각 키에서 구현된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.IComparable" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-155">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-156">각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-156">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-157">요소에 따라 정렬 되며는 <xref:System.IComparable> 에 추가 된 각 키의 구현에서 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-157">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-158">A <xref:System.Collections.Hashtable> 개체의 한 예로 <xref:System.Collections.IDictionary> 이 생성자에 전달 될 수 있는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-158">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="14019-159">새 <xref:System.Collections.SortedList> 키와에 저장 된 값의 복사본을 포함 하는 개체는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-159">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="14019-160">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-160">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-161">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-161">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-162">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-162">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-163">이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-163">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-164">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-164">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-165">
            <paramref name="d" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-165">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="14019-166">
            <paramref name="d" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-166">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int initialCapacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity">
          <span data-ttu-id="14019-167">
            <see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 초기 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-167">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-168">비어 있는 상태이고 지정된 초기 용량을 가지며 <see cref="T:System.Collections.SortedList" /> 개체에 추가된 각 키에서 구현된 <see cref="T:System.IComparable" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-168">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-169">각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-169">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-170">요소에 따라 정렬 되며는 <xref:System.IComparable> 에 추가 된 각 키의 구현에서 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-170">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-171">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-171">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-172">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-172">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-173">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-173">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-174">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `initialCapacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-174">This constructor is an O(`n`) operation, where `n` is `initialCapacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-175">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-175">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-176">
            <paramref name="initialCapacity" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-176">
              <paramref name="initialCapacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="14019-177">지정된 <paramref name="initialCapacity" />의 <see cref="T:System.Collections.SortedList" /> 개체를 만드는 데 사용할 수 있는 메모리가 충분하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-177">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer, int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="14019-178">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-178">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="14019-179">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-179">-or-</span>
          </span>
          <span data-ttu-id="14019-180">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-180">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <param name="capacity">
          <span data-ttu-id="14019-181">
            <see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 초기 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-181">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-182">비어 있고 지정된 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-182">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-183">요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-183">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="14019-184">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-184">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-185">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-185">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-186">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-186">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-187">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-187">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-188">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-188">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-189">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-189">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-190">
            <paramref name="capacity" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-190">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="14019-191">지정된 <paramref name="capacity" />의 <see cref="T:System.Collections.SortedList" /> 개체를 만드는 데 사용할 수 있는 메모리가 충분하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-191">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d, System::Collections::IComparer ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="14019-192">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.SortedList" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-192">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="14019-193">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-193">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="14019-194">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-194">-or-</span>
          </span>
          <span data-ttu-id="14019-195">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-195">
              <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-196">지정된 사전에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-196">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-197">요소가 정렬에 따라 지정 된 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-197">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="14019-198">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-198">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-199">A <xref:System.Collections.Hashtable> 개체의 한 예로 <xref:System.Collections.IDictionary> 이 생성자에 전달 될 수 있는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-199">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="14019-200">새 <xref:System.Collections.SortedList> 키와에 저장 된 값의 복사본을 포함 하는 개체는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-200">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="14019-201">용량은 <xref:System.Collections.SortedList> 개체는 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-201">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="14019-202">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-202">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="14019-203">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-203">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-204">이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-204">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-205">다음 코드 예제에서는 사용 하 여 컬렉션을 다른 <xref:System.Collections.SortedList> 생성자의 컬렉션의 동작 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14019-205">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-206">
            <paramref name="d" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-206">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="14019-207">
            <paramref name="comparer" />가 <see langword="null" />이고 <paramref name="d" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-207">
              <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-208">추가할 요소의 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-208">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="14019-209">추가할 요소의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-209">The value of the element to add.</span>
          </span>
          <span data-ttu-id="14019-210">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-210">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-211">지정한 키와 값을 가진 요소를 <see cref="T:System.Collections.SortedList" /> 개체에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-211">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-212">삽입 지점이 명시적으로 또는 기본적으로 선택 된 비교자에 따라 결정 됩니다 때는 <xref:System.Collections.SortedList> 개체가 생성 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-212">The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.</span></span>  
  
 <span data-ttu-id="14019-213">경우 <xref:System.Collections.SortedList.Count%2A> 이미 <xref:System.Collections.SortedList.Capacity%2A>의 용량이 <xref:System.Collections.SortedList> 개체가 자동으로 내부 배열을 다시 할당 하 여 증가 하 고 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-213">If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="14019-214">사용할 수도 있습니다는 <xref:System.Collections.SortedList.Item%2A> 에 속성 키의 값을 설정 하 여 새 요소를 추가할 수 없습니다.는 <xref:System.Collections.SortedList> 개체 (예를 들어 `myCollection["myNonexistentKey"] = myValue`).</span><span class="sxs-lookup"><span data-stu-id="14019-214">You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="14019-215">그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.SortedList>설정는 <xref:System.Collections.SortedList.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-215">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="14019-216">반면,는 <xref:System.Collections.SortedList.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-216">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="14019-217">요소는 <xref:System.Collections.SortedList> 개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 가 생성 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-217">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="14019-218">키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-218">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="14019-219">이 메서드는 O는 (`n`) 정렬 되지 않은 데이터에 대 한 작업이 있는 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-219">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="14019-220">o (로그 `n`) 새 요소 목록 끝에 추가 되는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-220">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="14019-221">삽입으로 크기가 조정 작업이 O 되었습니다 (`n`).</span><span class="sxs-lookup"><span data-stu-id="14019-221">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-222">다음 코드 예제에서는 요소를 추가 하는 방법을 보여 줍니다.는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-222">The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-223">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-223">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="14019-224">지정한 <paramref name="key" />를 가진 요소가 이미 <see cref="T:System.Collections.SortedList" /> 개체에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-224">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="14019-225">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-225">-or-</span>
          </span>
          <span data-ttu-id="14019-226">
            <see cref="T:System.Collections.SortedList" />가 <see cref="T:System.IComparable" /> 인터페이스를 사용하도록 설정되었으나 <paramref name="key" />는 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-226">The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-227">
            <see cref="T:System.Collections.SortedList" />이 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-227">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="14019-228">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-228">-or-</span>
          </span>
          <span data-ttu-id="14019-229">
            <see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-229">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="14019-230">
            <see cref="T:System.Collections.SortedList" />에 요소를 추가할 수 있는 메모리가 충분하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-230">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="14019-231">비교자에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-231">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.Item(System.Object)" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-232">
            <see cref="T:System.Collections.SortedList" /> 개체의 용량을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-232">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-233">
            <see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-233">The number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-234"><xref:System.Collections.SortedList.Capacity%2A> 요소의 수가 하는 <xref:System.Collections.SortedList> 개체를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-234"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="14019-235"><xref:System.Collections.SortedList.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-235"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-236"><xref:System.Collections.SortedList.Capacity%2A> 보다 크거나 같은 경우는 항상 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-236"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="14019-237">경우 <xref:System.Collections.SortedList.Count%2A> 초과 <xref:System.Collections.SortedList.Capacity%2A> 요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-237">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="14019-238">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A> 하거나 설정 하는 <xref:System.Collections.SortedList.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-238">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="14019-239">때의 값 <xref:System.Collections.SortedList.Capacity%2A> 설정 된 명시적으로 지정된 된 용량을 수용 하기 위해 내부 배열을 다시 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-239">When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="14019-240">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (`n`) 작업, 여기서 `n` 은 새 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-240">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-241">할당된 값이 <see cref="T:System.Collections.SortedList" /> 개체의 현재 요소 수보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-241">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="14019-242">시스템에 사용 가능한 메모리가 부족합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-242">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-243">
            <see cref="T:System.Collections.SortedList" /> 개체에서 요소를 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-243">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-244"><xref:System.Collections.SortedList.Count%2A> 0으로 설정 된 한 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-244"><xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="14019-245"><xref:System.Collections.SortedList.Capacity%2A> 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-245"><xref:System.Collections.SortedList.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="14019-246">용량을 다시 설정 하는 <xref:System.Collections.SortedList> 개체, 호출 <xref:System.Collections.SortedList.TrimToSize%2A> 설정 또는 <xref:System.Collections.SortedList.Capacity%2A> 속성을 직접 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-246">To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly.</span></span> <span data-ttu-id="14019-247">빈 트리밍 <xref:System.Collections.SortedList> 의 용량 설정는 <xref:System.Collections.SortedList> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-247">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="14019-248">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-248">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-249">다음 코드 예제에서는의 사용 되지 않은 부분 trim 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체 및 값의 선택을 취소 하는 방법의 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-249">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-250">
            <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-250">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="14019-251">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-251">-or-</span>
          </span>
          <span data-ttu-id="14019-252">
            <see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-252">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-253">
            <see cref="T:System.Collections.SortedList" /> 개체의 단순 복사본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-253">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-254">
            <see cref="T:System.Collections.SortedList" /> 개체의 단순 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-254">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-255">컬렉션의 단순 복사본은 참조 형식 또는 값 형식, 이지만 참조에서 참조 하는 개체를 복사 하지 않습니다는 컬렉션의 요소에만 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-255">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.</span></span> <span data-ttu-id="14019-256">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="14019-256">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="14019-257">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-257">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="14019-258">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-258">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-259">
            <see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-259">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-260">
            <see cref="T:System.Collections.SortedList" /> 개체에 특정 키가 포함되어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-260">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-261">
            <see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="key" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-261">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-262">요소는 <xref:System.Collections.SortedList> 개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 가 생성 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-262">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="14019-263"><xref:System.Collections.SortedList.Contains%2A>는 <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-263"><xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="14019-264">와 동일 하 게 작동 <xref:System.Collections.SortedList.ContainsKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-264">It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="14019-265">이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-265">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="14019-266">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-266">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="14019-267">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-267">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-268">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 개체에 특정 요소가 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-268">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-269">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-269">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="14019-270">비교자에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-270">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-271">
            <see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-271">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-272">
            <see cref="T:System.Collections.SortedList" /> 개체에 특정 키가 포함되어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-272">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-273">
            <see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="key" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-273">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-274">요소는 <xref:System.Collections.SortedList> 개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 가 생성 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-274">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="14019-275">와 동일 하 게 동작 하는이 메서드는 <xref:System.Collections.SortedList.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="14019-275">This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="14019-276">이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-276">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="14019-277">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-277">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="14019-278">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-278">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-279">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 개체에 특정 요소가 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-279">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-280">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-280">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="14019-281">비교자에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-281">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="14019-282">
            <see cref="T:System.Collections.SortedList" /> 개체에서 찾을 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-282">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="14019-283">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-283">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-284">
            <see cref="T:System.Collections.SortedList" /> 개체에 특정 값이 포함되어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-284">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-285">
            <see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="value" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-285">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-286">요소는 <xref:System.Collections.SortedList> 사용 하 여 지정 된 값 비교 개체는 <xref:System.Object.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="14019-286">The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="14019-287">이 메서드는 선형 검색; 수행 따라서 평균 실행 시간에 비례 하는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-287">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="14019-288">즉,이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-288">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="14019-289">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-289">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="14019-290">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-290">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-291">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 개체에 특정 요소가 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-291">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="14019-292">
            <see cref="T:System.Array" />에서 복사한 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-292">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span>
          </span>
          <span data-ttu-id="14019-293">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-293">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="14019-294">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-294">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-295">
            <see cref="T:System.Collections.SortedList" /> 요소를 지정한 배열 인덱스에서 시작하여 1차원 <see cref="T:System.Array" /> 개체에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-295">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-296">키/값 쌍에 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 개체는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-296">The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-297">에 있는 키를 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Keys.CopyTo`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-297">To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="14019-298">값만 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Values.CopyTo`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-298">To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="14019-299">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-299">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-300">다음 코드 예제에서는의 값을 복사 하는 방법을 보여 줍니다.는 <xref:System.Collections.SortedList> 개체에는 1 차원 <xref:System.Array> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-300">The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.</span></span>  
  
 [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-301">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-301">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-302">
            <paramref name="arrayIndex" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-302">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="14019-303">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-303">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="14019-304">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-304">-or-</span>
          </span>
          <span data-ttu-id="14019-305">소스 <see cref="T:System.Collections.SortedList" /> 개체의 요소 수가 <paramref name="arrayIndex" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-305">The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="14019-306">소스 <see cref="T:System.Collections.SortedList" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-306">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.SortedList.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-307">
            <see cref="T:System.Collections.SortedList" /> 개체에 포함된 요소 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-307">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-308">
            <see cref="T:System.Collections.SortedList" /> 개체에 포함된 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-308">The number of elements contained in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-309">각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-309">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="14019-310"><xref:System.Collections.SortedList.Capacity%2A> 요소의 수가 하는 <xref:System.Collections.SortedList> 개체를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-310"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="14019-311"><xref:System.Collections.SortedList.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-311"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-312"><xref:System.Collections.SortedList.Capacity%2A> 보다 크거나 같은 경우는 항상 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-312"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="14019-313">경우 <xref:System.Collections.SortedList.Count%2A> 초과 <xref:System.Collections.SortedList.Capacity%2A> 요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-313">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="14019-314">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-314">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetByIndex">
      <MemberSignature Language="C#" Value="public virtual object GetByIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetByIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetByIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByIndex (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetByIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="14019-315">가져올 값의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-315">The zero-based index of the value to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-316">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-316">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-317">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에 있는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-317">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-318">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-318">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-319">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-319">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-320">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-320">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-321">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-321">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-322">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-322">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-323">하나 또는 모든 키를 가져오는 방법을 보여 줍니다 또는 값을 다음 코드 예제는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-323">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-324">
            <paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-324">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-325">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반복하는 <see cref="T:System.Collections.SortedList" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-325">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-326">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체의 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-326">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-327">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-327">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="14019-328">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-328">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="14019-329">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-329">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="14019-330">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-330">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="14019-331"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-331"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="14019-332">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-332">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="14019-333">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-333">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="14019-334"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-334"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="14019-335"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-335"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="14019-336">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-336">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="14019-337">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-337">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="14019-338">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-338">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="14019-339"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-339">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="14019-340">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-340">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="14019-341">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-341">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="14019-342">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="14019-342">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="14019-343">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-343">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="14019-344">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-344">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="14019-345">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-345">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual object GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKey (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKey(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="14019-346">가져올 키의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-346">The zero-based index of the key to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-347">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 키를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-347">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-348">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-348">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-349">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-349">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-350">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-350">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-351">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-351">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-352">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-352">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-353">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-353">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-354">하나 또는 모든 키를 가져오는 방법을 보여 줍니다 또는 값을 다음 코드 예제는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-354">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-355">
            <paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-355">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetKeyList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetKeyList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKeyList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetKeyList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-356">
            <see cref="T:System.Collections.SortedList" /> 개체의 키를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-356">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-357">
            <see cref="T:System.Collections.IList" /> 개체의 키가 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-357">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-358">반환 된 <xref:System.Collections.IList> 개체의 키의 읽기 전용 보기는의 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-358">The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-359">수정 내용은 기본 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.IList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-359">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="14019-360">반환된 된 요소의 <xref:System.Collections.IList> 의 키와 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-360">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-361">이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Keys%2A> 속성이 아니라 반환 된 <xref:System.Collections.IList> 개체 대신는 <xref:System.Collections.ICollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-361">This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="14019-362">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-362">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-363">하나 또는 모든 키를 가져오는 방법을 보여 줍니다 또는 값을 다음 코드 예제는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-363">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
      </Docs>
    </Member>
    <Member MemberName="GetValueList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetValueList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetValueList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetValueList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetValueList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-364">
            <see cref="T:System.Collections.SortedList" /> 개체의 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-364">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-365">
            <see cref="T:System.Collections.IList" /> 개체의 값이 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-365">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-366">반환 된 <xref:System.Collections.IList> 개체는 값의 읽기 전용 보기는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-366">The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-367">수정 내용은 기본 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.IList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-367">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="14019-368">반환된 된 요소의 <xref:System.Collections.IList> 의 값과 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-368">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-369">이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Values%2A> 속성이 아니라 반환 된 <xref:System.Collections.IList> 개체 대신는 <xref:System.Collections.ICollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-369">This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="14019-370">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-370">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-371">하나 또는 모든 키를 가져오는 방법을 보여 줍니다 또는 값을 다음 코드 예제는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-371">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <altmember cref="P:System.Collections.SortedList.Values" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-372">
            <see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-372">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-373">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정된 키 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-373">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-374">
            <paramref name="key" />가 <see cref="T:System.Collections.SortedList" /> 개체에 있으면 <paramref name="key" /> 매개 변수의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-374">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-375">요소는 <xref:System.Collections.SortedList> 개체의 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 를 만들거나 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-375">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="14019-376">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-376">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-377">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-377">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-378">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-378">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-379">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-379">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-380">이 메서드는 이진 검색 알고리즘; 사용 따라서이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-380">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="14019-381">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-381">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="14019-382">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-382">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-383">다음 코드 예제에는 키 또는 값의 인덱스를 결정 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-383">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-384">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-384">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="14019-385">비교자에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-385">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public virtual int IndexOfValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfValue (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="14019-386">
            <see cref="T:System.Collections.SortedList" /> 개체에서 찾을 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-386">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="14019-387">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-387">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-388">지정한 값이 <see cref="T:System.Collections.SortedList" /> 개체에서 맨 처음 발견되는 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-388">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-389">
            <paramref name="value" />가 <see cref="T:System.Collections.SortedList" /> 개체에 있으면 <paramref name="value" /> 매개 변수가 맨 처음 발견되는 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-389">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-390">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-390">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-391">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-391">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-392">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-392">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-393">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-393">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-394">요소는 <xref:System.Collections.SortedList> 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="14019-394">The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="14019-395">이 메서드는; 선형 검색을 사용합니다. 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-395">This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="14019-396">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 에 대 한 메서드 `item` 항목이 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-396">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="14019-397">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-397">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-398">다음 코드 예제에는 키 또는 값의 인덱스를 결정 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-398">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-399">
            <see cref="T:System.Collections.SortedList" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-399">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-400">
            <see cref="T:System.Collections.SortedList" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-400">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="14019-401">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-401">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-402">컬렉션 크기가 고정된 된 컬렉션 만들어지기는 하지만 기존 요소를 수정할 수는 다음에 추가 하거나 제거할 요소의 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-402">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="14019-403">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-403">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="14019-404">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-404">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-405">
            <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-405">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-406">
            <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-406">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="14019-407">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-407">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-408">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-408">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="14019-409">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-409">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="14019-410">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-410">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-411">
            <see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-411">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-412">
            <see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-412">
              <see langword="true" /> if access to the <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="14019-413">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-413">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-414">스레드로부터 안전을 보장 하려면는 <xref:System.Collections.SortedList> 개체에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 <xref:System.Collections.SortedList.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="14019-414">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="14019-415">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-415">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="14019-416">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-416">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="14019-417">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-417">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-418">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-418">The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="14019-419">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-419">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 <span data-ttu-id="14019-420">다음 코드 예제에서는 동기화 하는 방법을 보여 줍니다.는 <xref:System.Collections.SortedList> 개체, 확인 여부는 <xref:System.Collections.SortedList> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-420">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-421">가져오거나 설정할 값과 관련된 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-421">The key associated with the value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-422">
            <see cref="T:System.Collections.SortedList" /> 개체의 특정 키와 연관된 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-422">Gets and sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-423">
            <paramref name="key" />가 있으면 <see cref="T:System.Collections.SortedList" /> 개체의 <paramref name="key" /> 매개 변수와 연관된 값이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-423">The value associated with the <paramref name="key" /> parameter in the <see cref="T:System.Collections.SortedList" /> object, if <paramref name="key" /> is found; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-424">사용할 수는 <xref:System.Collections.SortedList.Item%2A> 다음 구문을 지정 하 여 컬렉션의 특정 요소에 액세스 하는 속성: `myCollection[key]`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-424">You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="14019-425">에 존재 하지 않는 키의 값을 설정 하 여 새 요소를 추가 하려면이 속성을 사용할 수도 있습니다는 <xref:System.Collections.SortedList> 개체 (예를 들어 `myCollection["myNonexistentKey"] = myValue)`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-425">You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue)`.</span></span> <span data-ttu-id="14019-426">그러나 지정된 된 키에 이미 있는 경우는 <xref:System.Collections.SortedList>설정는 <xref:System.Collections.SortedList.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-426">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="14019-427">반면,는 <xref:System.Collections.SortedList.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-427">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="14019-428">키 일 수 없습니다 `null`, 하지만 값이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-428">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="14019-429">구분 하기 위해 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 하 여는 <xref:System.Collections.SortedList.Contains%2A> 메서드 또는 <xref:System.Collections.SortedList.ContainsKey%2A> 여부를 확인 하는 메서드 키 목록에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-429">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="14019-430">요소는 <xref:System.Collections.SortedList> 키에 따라 정렬 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 가 생성 따라는 <xref:System.IComparable> 키 자체가 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-430">The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="14019-431">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.SortedList.Keys%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-431">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A> property.</span></span> <span data-ttu-id="14019-432">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.SortedList.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-432">Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="14019-433">이 속성의 값을 검색 하는 O은 (로그 `n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-433">Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="14019-434">속성을 설정 하는 O (로그 `n`) 키가 이미 있는 경우 작업은 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-434">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="14019-435">키 목록에 없는 경우 속성을 설정 하는 O (`n`) 정렬 되지 않은 데이터에 대 한 작업 (로그 `n`) 경우 새 요소 목록 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-435">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="14019-436">삽입으로 크기가 조정 작업이 O 되었습니다 (`n`).</span><span class="sxs-lookup"><span data-stu-id="14019-436">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-437">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-437">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-438">속성이 설정되어 있고 <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-438">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="14019-439">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-439">-or-</span>
          </span>
          <span data-ttu-id="14019-440">속성이 설정되어 있고 <paramref name="key" />가 컬렉션에 없으며 <see cref="T:System.Collections.SortedList" />의 크기가 고정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-440">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="14019-441">
            <see cref="T:System.Collections.SortedList" />에 요소를 추가할 수 있는 메모리가 충분하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-441">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="14019-442">비교자에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-442">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-443">
            <see cref="T:System.Collections.SortedList" /> 개체의 키를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-443">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-444">
            <see cref="T:System.Collections.ICollection" /> 개체의 키가 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-444">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-445"><xref:System.Collections.ICollection> 개체의 키의 읽기 전용 보기는의 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-445">The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-446">수정 내용은 기본 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-446">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="14019-447">요소는 <xref:System.Collections.ICollection> 의 키와 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-447">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-448">이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetKeyList%2A> 메서드이지만 반환은 <xref:System.Collections.ICollection> 개체가 아니라는 <xref:System.Collections.IList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-448">This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="14019-449">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-449">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Values" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14019-450">제거할 요소의 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-450">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-451">
            <see cref="T:System.Collections.SortedList" /> 개체에서 지정된 키를 가진 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-451">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-452"><xref:System.Collections.SortedList> 개체에 지정한 키를 가진 요소가 없으면 <xref:System.Collections.SortedList>가 변경되지 않은 상태로 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-452">If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged.</span></span> <span data-ttu-id="14019-453">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-453">No exception is thrown.</span></span>  
  
 <span data-ttu-id="14019-454">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-454">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="14019-455">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-455">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="14019-456">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-456">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="14019-457">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-457">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-458">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-458">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-459">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-459">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-460">
            <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-460">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="14019-461">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-461">-or-</span>
          </span>
          <span data-ttu-id="14019-462">
            <see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-462">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="14019-463">제거할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-463">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-464">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-464">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-465">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-465">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-466">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-466">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-467">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-467">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-468">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-468">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-469">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-469">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="14019-470">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-470">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="14019-471">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-471">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="14019-472">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-472">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-473">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-473">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-474">
            <paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-474">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-475">
            <see cref="T:System.Collections.SortedList" />이 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-475">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="14019-476">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-476">-or-</span>
          </span>
          <span data-ttu-id="14019-477">
            <see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-477">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetByIndex">
      <MemberSignature Language="C#" Value="public virtual void SetByIndex (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetByIndex(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetByIndex (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetByIndex(int index, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="14019-478">
            <c>value</c>를 저장할 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-478">The zero-based index at which to save <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="14019-479">
            <see cref="T:System.Object" /> 개체에 저장할 <see cref="T:System.Collections.SortedList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-479">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="14019-480">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-480">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-481">
            <see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 값을 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-481">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-482">인덱스 시퀀스 정렬 순서를 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-482">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="14019-483">에 삽입 되는 요소가 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-483">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="14019-484">요소를 제거 하는 경우 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-484">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="14019-485">따라서 특정 키/값 쌍의 인덱스 요소가 추가 되거나에서 제거할 때 변경 될 수 있습니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-485">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-486">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-486">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-487">다음 코드 예제에서는의 기존 요소 값을 대체 하는 방법을 보여 줍니다.는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-487">The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="14019-488">
            <paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-488">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList Synchronized(class System.Collections.SortedList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (list As SortedList) As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ Synchronized(System::Collections::SortedList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.SortedList" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="14019-489">동기화할 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-489">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14019-490">
            <see cref="T:System.Collections.SortedList" /> 개체에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-490">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-491">
            <see cref="T:System.Collections.SortedList" /> 개체에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-491">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-492">스레드로부터 안전을 보장 하려면는 <xref:System.Collections.SortedList> 개체를 통해이 래퍼만 모든 작업을 완료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-492">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="14019-493">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-493">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="14019-494">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-494">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="14019-495">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-495">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-496">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-496">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="14019-497">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-497">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="14019-498">다음 코드 예제에서는 동기화 하는 방법을 보여 줍니다.는 <xref:System.Collections.SortedList> 개체, 확인 여부는 <xref:System.Collections.SortedList> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-498">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14019-499">
            <paramref name="list" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-499">
              <paramref name="list" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-500">
            <see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-500">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-501">
            <see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-501">An object that can be used to synchronize access to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-502">동기화 된 버전을 만들려면는 <xref:System.Collections.SortedList> 개체를 가져오려면는 <xref:System.Collections.SortedList.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="14019-502">To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span> <span data-ttu-id="14019-503">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 <xref:System.Collections.SortedList> 를 사용 하는 <xref:System.Collections.SortedList.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-503">However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property.</span></span> <span data-ttu-id="14019-504">동기화 하는 코드에서 작업을 수행 해야는 <xref:System.Collections.SortedList.SyncRoot%2A> 의 <xref:System.Collections.SortedList>에서 직접는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-504">The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="14019-505">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-505">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="14019-506">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-506">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="14019-507">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-507">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="14019-508">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-508">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="14019-509">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-509">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-510">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-510">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="14019-511">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-511">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-512">
            <see cref="T:System.Collections.IEnumerator" />를 반복하는 <see cref="T:System.Collections.SortedList" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-512">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14019-513">
            <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.SortedList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-513">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-514">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="14019-514">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="14019-515">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="14019-515">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="14019-516">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-516">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="14019-517">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-517">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="14019-518">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-518">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="14019-519"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-519"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="14019-520">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-520">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="14019-521">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-521">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="14019-522"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-522"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="14019-523"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-523"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="14019-524">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-524">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="14019-525">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-525">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="14019-526">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-526">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="14019-527"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-527">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="14019-528">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-528">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="14019-529">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-529">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="14019-530">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-530">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="14019-531">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="14019-531">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="14019-532">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-532">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="14019-533">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14019-533">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="14019-534">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-534">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14019-535">용량을 <see cref="T:System.Collections.SortedList" /> 개체의 실제 요소 수로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-535">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-536">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14019-536">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span>  
  
 <span data-ttu-id="14019-537">다시 설정 하는 <xref:System.Collections.SortedList> 를 초기 상태로 호출 개체는 <xref:System.Collections.SortedList.Clear%2A> 메서드 호출 하기 전에 <xref:System.Collections.SortedList.TrimToSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-537">To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>.</span></span> <span data-ttu-id="14019-538">빈 트리밍 <xref:System.Collections.SortedList> 의 용량 설정는 <xref:System.Collections.SortedList> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-538">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="14019-539">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-539">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14019-540">다음 코드 예제에서는 표시의 사용 되지 않은 부분을 지우는 방법에는 <xref:System.Collections.SortedList> 개체 및 해당 값의 선택을 취소 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-540">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14019-541">
            <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-541">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="14019-542">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-542">-or-</span>
          </span>
          <span data-ttu-id="14019-543">
            <see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-543">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Clear" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14019-544">
            <see cref="T:System.Collections.SortedList" /> 개체의 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-544">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14019-545">
            <see cref="T:System.Collections.ICollection" /> 개체의 값이 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14019-545">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14019-546"><xref:System.Collections.ICollection> 개체는 값의 읽기 전용 보기는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-546">The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="14019-547">수정 내용은 기본 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-547">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="14019-548">요소는 <xref:System.Collections.ICollection> 의 값과 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="14019-548">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="14019-549">이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetValueList%2A> 메서드이지만 반환은 <xref:System.Collections.ICollection> 개체가 아니라는 <xref:System.Collections.IList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14019-549">This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="14019-550">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="14019-550">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
      </Docs>
    </Member>
  </Members>
</Type>