<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a2fa35f21d501233854b1e609716c45f5c69687" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563492" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9cd0a-101">메시지 큐 배달 매커니즘의 서버측 재생 오류 및 클라이언트측 실패를 예외적으로 처리하는 데 사용되는 큐 사용 구성 요소의 함수입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9cd0a-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cd0a-102">COM + 카탈로그에 구성 요소 둘 다 구현에 대해 정의 된 예외 클래스 <xref:System.EnterpriseServices.IPlaybackControl> 및 원본 클래스에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="9cd0a-103">원본 클래스 인터페이스의 메서드 구현은 예외 클래스 자체의 실패 한 메서드에 대 한 처리를 수행 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="9cd0a-104">후 호출 됩니다 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> 또는 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> 원래 호출 된 메서드가 대 한 예외를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="9cd0a-105">큐 구성 요소 플레이어의 메서드를 호출 <xref:System.EnterpriseServices.IPlaybackControl> 메시지가 최종 채로 두거나 배달 못 한 편지 큐에 배치 하는 예외 처리기 개체를 알릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="9cd0a-106">다음 구성 요소 큐 플레이어는 원래 메서드 호출에서 실패 한 예외 처리기 개체의 동일한 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="9cd0a-107">예외 처리기 개체 문제 진단 정보를 수집 하거나 개체 또는 클라이언트의 문제를 알리는 메시지를 생성 하 여는 대신을 예를 들어 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="9cd0a-108">응용 프로그램을 구현 하지 않는 경우 <xref:System.EnterpriseServices.IPlaybackControl>, 포이즌 메시지가 큐에 대기 구성 요소 플레이어 소모 모든 다시 시도 하는 경우 마지막 채로 두거나 배달 못 한 편지 큐에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="9cd0a-109">포이즌 메시지는 처리할 수 없는 몇 가지 이유로 아마도 서버 또는 큐 시스템에 문제가 있어서 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="9cd0a-110">트랜잭션이 롤백되고 포이즌 메시지 큐의 맨 위로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="9cd0a-111">메시지 큐에서 제거 다시, 동일한 조건을 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="9cd0a-112">이 메시지는 문제를 해결 하려면 이루어진다는 것 때까지 무한정 계속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="9cd0a-113">대기 중인 구성 요소 서비스는 일련의 재시도 사용 하 여 포이즌 메시지를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="9cd0a-114">실패 한 여러 차례 다시 시도한 후 메시지가 최종 도착 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="9cd0a-115">포이즌 메시지 큐에 대기 구성 요소 메시지 Mover 도구를 사용 하 여 수동으로 이동 될 때까지 평평 큐에 남아 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="9cd0a-116">포이즌 메시지 상황 해결할 수도 있습니다를 프로그래밍 방식으로 사용 하 여는 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> 메서드는 지연된 된 활성화를 다시 재생 하려는 모든 시도가 실패 한 서버 쪽 구성 요소 작성자에 게 알립니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="9cd0a-117">포이즌 메시지를 발견 한 경우에 문제의 근본 원인을 신속 하 게 해결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="9cd0a-118">예를 들어 서버에서 몇 가지 이유로 오프 라인 상태를 다시 온라인으로 서버를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="9cd0a-119">이 문제를 신속 하 게 해결할 수 없는 경우 트랜잭션이 발생 하지 않았던 요청자에 게 알리는 다른 트랜잭션을 자동으로 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="9cd0a-120">요청자는 이미 커밋된 트랜잭션 효과 취소 하는 보정 트랜잭션을 확인 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9cd0a-121">메시지를 서버에 배달하기 위한 모든 메시지 큐의 시도가 거부되었음을 클라이언트측 예외 처리 구성 요소에 알리고 클라이언트측 Xact 배달 못 한 큐로 메시지를 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cd0a-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cd0a-122">트랜잭션 배달 못 한 편지 큐에 메시지가 도착, COM + 하려고이 알림을 배달 서버 클래스와 관련 클라이언트 쪽 예외 처리기를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="9cd0a-123">첫 번째 호출 하 여 작업을 수행 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, 예외 처리기 개체의 예외 처리 버전의 실패 한 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="9cd0a-124">그러면이 예외 메서드 실패를 기록 하 여 메일 메시지 관리자를 보내거나 (이전 트랜잭션의 결과 반대로) 클라이언트 쪽 보정 작업을 수행 하는 같은 예외 동작을를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="9cd0a-125">Exception 메서드 실패할 경우 메시지는 트랜잭션 배달 못 한 편지 큐에 그대로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="9cd0a-126">트랜잭션 배달 못 한 편지 큐는 Microsoft Message Queue (MSMQ) 탐색기에서 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9cd0a-127">서버에 대한 지연된 활성화를 재생하려는 모든 시도가 실패하여 메시지가 마지막 휴면 큐로 이동하려고 한다는 것을 서버측 예외 클래스 구현에 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cd0a-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cd0a-128">트랜잭션 배달 못 한 편지 큐에 메시지가 도착, COM + 하려고 클래스와 관련 된 서버가이 알림을 배달 하는 서버 쪽 예외 처리기를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="9cd0a-129">첫 번째 호출 하 여 작업을 수행 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, 예외 처리 버전의 예외 처리기 개체에서 실패 한 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="9cd0a-130">그러면이 예외 메서드 실패를 기록 하 여 메일 메시지 관리자를 보내거나 (이전 트랜잭션의 결과 반대로) 클라이언트 쪽 보정 작업을 수행 하는 같은 예외 동작을를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="9cd0a-131">서버 개체는이 거래를 성공적으로 완료 하기 위한 모든 작업을 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="9cd0a-132">그렇지 않으면 메시지를 다시 처리 하려면 수동 개입이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="9cd0a-133">Exception 메서드 실패할 경우 메시지가 최종 도착 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cd0a-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>