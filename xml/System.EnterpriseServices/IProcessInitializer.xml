<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IProcessInitializer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac571de6c95b5ac06ee9ff4c5ad83a05ad3542abd35.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71de6c95b5ac06ee9ff4c5ad83a05ad3542abd35</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>Supports methods that can be called when a COM component starts up or shuts down.</source>
          <target state="translated">COM 구성 요소를 시작하거나 종료할 때 호출할 수 있는 메서드를 지원합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>Implement the <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</source>
          <target state="translated">구현 된 <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> 인터페이스 메서드를 서비스 구성 요소 초기화를 실행 하려면 또는 때 서버 프로세스 (Dllhost.exe) 종료 코드 시작 또는 종료, 각각.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>COM+ provides <ph id="ph1">`Startup`</ph> and <ph id="ph2">`Shutdown`</ph> events when Dllhost.exe starts and ends.</source>
          <target state="translated">COM + 제공 <ph id="ph1">`Startup`</ph> 및 <ph id="ph2">`Shutdown`</ph> Dllhost.exe 시작 되 고 끝날 때 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</source>
          <target state="translated">이 기능을 사용 하면 (라고도 함 서버 구성 요소 이후) 사용자 지정 초기화를 실행 하 고 코드를 정리 하려면 COM + 서버 응용 프로그램에 설치 되어 있는 모든 COM + 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>An instance of each component that implements the <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</source>
          <target state="translated">구현 하는 각 구성 요소의 인스턴스는 <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> 인터페이스 생성 및 프로세스의 기간 동안만 저장 되며 시작 및 종료 하는 동안 인터페이스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>When implemented on a <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>, during registration of the component, the <ph id="ph2">`InitializesServerApplication`</ph> parameter in the <ph id="ph3">`COMAdminCatalogObject`</ph> within the Components collection is set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">구현 되는 경우는 <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>, 구성 요소를 등록 하는 동안는 <ph id="ph2">`InitializesServerApplication`</ph> 에서 매개 변수는 <ph id="ph3">`COMAdminCatalogObject`</ph> 컬렉션으로 설정 되는 구성 요소 내에서 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>Using the <ph id="ph1">`Startup`</ph> and <ph id="ph2">`Shutdown`</ph> events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</source>
          <target state="translated">사용 하는 <ph id="ph1">`Startup`</ph> 및 <ph id="ph2">`Shutdown`</ph> 이벤트, 리소스를 초기화할 연결을 만들 수 있습니다, 초기화 데이터를 공유 및 정리 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</source>
          <target state="translated">그러나 서버 구성 요소 인스턴스가 아직 만들지 않은 때문에 COM +에 적용 되는 상태를 액세스 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>In addition, the code in the <ph id="ph1">`Startup`</ph> and <ph id="ph2">`Shutdown`</ph> events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</source>
          <target state="translated">또한 코드에는 <ph id="ph1">`Startup`</ph> 및 <ph id="ph2">`Shutdown`</ph> 90 초만 시스템 프로세스를 시작 합니다. 활성화를 허용 하도록 준비 하는 Dllhost.exe에 대 한 대기 하기 때문에 이벤트를 최대한 빨리 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</source>
          <target state="translated">Dllhost.exe 신호를 보내지 않는 준비가 되었음을 90 초 이내, 시스템 프로세스를 종료 따라서 모든 초기화를 처리 하는이 기간 내에 완료 해야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>Each server component that participates in initialization must support the <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> interface.</source>
          <target state="translated">초기화에 참여 하는 각 서버 구성 요소를 지원 해야 합니다는 <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>On DllHost.exe startup, COM+ creates all server components that requested this service, calls <ph id="ph1">`QueryInterface`</ph> for the <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> interface, and calls the <ph id="ph3">&lt;xref:System.EnterpriseServices.IProcessInitializer.Startup%2A&gt;</ph> function.</source>
          <target state="translated">DllHost.exe 시작할 때 COM + 만듭니다 요청한이 서비스를 호출 하는 모든 서버 구성 요소 <ph id="ph1">`QueryInterface`</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitializer&gt;</ph> 인터페이스 및 호출 된 <ph id="ph3">&lt;xref:System.EnterpriseServices.IProcessInitializer.Startup%2A&gt;</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EnterpriseServices.IProcessInitializer">
          <source>Similarly, when the DllHost.exe process is shut down, it calls the <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A&gt;</ph> function on those previously stored interface pointers.</source>
          <target state="translated">마찬가지로, 경우 DllHost.exe 프로세스를 종료 하 고, 호출 하는 <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A&gt;</ph> 함수 항목에 이전에 인터페이스 포인터를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Shutdown">
          <source>Performs shutdown actions.</source>
          <target state="translated">종료 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Shutdown">
          <source>Called when Dllhost.exe is shut down.</source>
          <target state="translated">Dllhost.exe가 종료될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IProcessInitializer.Shutdown">
          <source><ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A&gt;</ph> is not called during a failfast or other catastrophic shutdown events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A&gt;</ph> failfast 또는 기타 심각한 종료 이벤트가 발생 하는 동안 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>In Microsoft Windows XP, a pointer to the <ph id="ph1">&lt;see langword="IUnknown" /&gt;</ph> interface of the COM component starting up.</source>
          <target state="translated">Microsoft Windows XP에서는 COM 구성 요소 시작의 <ph id="ph1">&lt;see langword="IUnknown" /&gt;</ph> 인터페이스에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>In Microsoft Windows 2000, this argument is always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Microsoft Windows 2000에서는 이 인수가 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>Performs initialization at startup.</source>
          <target state="translated">시작할 때 초기화를 수행합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>Called when Dllhost.exe is started.</source>
          <target state="translated">Dllhost.exe가 시작될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>The object referenced by <ph id="ph1">`punkProcessControl`</ph> implements an <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl&gt;</ph> interface.</source>
          <target state="translated">참조 하는 개체 <ph id="ph1">`punkProcessControl`</ph> 구현 하는 <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source><ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitControl&gt;</ph> supports the single method <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitControl&gt;</ph> 단일 메서드를 지원 <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
          <source>The initialization code in <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Startup%2A&gt;</ph> can call the <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;</ph>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</source>
          <target state="translated">초기화 코드가 <ph id="ph1">&lt;xref:System.EnterpriseServices.IProcessInitializer.Startup%2A&gt;</ph> 호출할 수는 <ph id="ph2">&lt;xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A&gt;</ph>, 구성 요소의 제한 시간을 시작 하기 전까지 남은 시간 (초)의 수는 동일 하 게 설정 시간 제한을 사용 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>