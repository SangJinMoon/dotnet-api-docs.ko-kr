<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5bd8b2ee8ce26e275361abfceb6617f00debf341" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30407437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.EnterpriseServices.Activity" />에 의해 만들어진 작업을 통해 전송된 일괄 작업을 구현합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.EnterpriseServices.IServiceCall> COM + 서비스를 사용 하 여 해당 서비스를 사용 하기 위해 구성 요소를 만들지 않고 일괄 처리 작업을 수행 합니다. 예: 인터넷 정보 서비스 (IIS) 및 ASP.NET 스크립트 환경 COM + 구성 요소를 만들 필요 없이 COM + 서비스를 활용 하 여이 인터페이스를 사용할 수 있습니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 메서드에 구현된 일괄 작업을 실행하기 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드가 실행 되는 일괄 처리 작업을 호출 하 여 만들어진 활동의 컨텍스트 및 스레드 아파트에서 실행 <xref:System.EnterpriseServices.Activity>합니다. 이 메서드의 일괄 처리 작업에 대 한 호출에 의해 실행 된 <xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType> 또는 <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>합니다.  
  
> [!CAUTION]
>  이 메서드는 스레드로부터 안전 하 게 보호 하 여 활동 개체가 만들어진 경우에 있는지 확인 해야 <xref:System.EnterpriseServices.Activity> 이러한 경우에는 대부분에 대 한 호출이 때문에 동기화 된 컨텍스트에으로 생성 되지 않는 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 동시에 실행할 수 있습니다.  
  
 시스템에서 최상의 성능을 위해 활동의 컨텍스트 구성에서 만든 <xref:System.EnterpriseServices.Activity> 에서 수행 하는 일괄 처리 작업에는 일치 해야 합니다는 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 메서드. 예를 들어 일괄 처리에서 작동 하는 경우는 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 풀링 가능한 개체를 생성 하 여 활동을 사용 하 여 메서드 <xref:System.EnterpriseServices.Activity> 다중 스레드 아파트 (MTA)를 사용 하도록 구성 되어야 합니다.  
  
 풀링 가능한 개체에 대 한 내용은 하십시오 "요구 사항에 대 한 풀링 가능한 개체" MSDN에 플랫폼 SDK에 항목을 참조 하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>