<Type Name="ServicedComponent" FullName="System.EnterpriseServices.ServicedComponent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e28683e0422618541308a662f8e8e0a0ba5f086c" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52732188" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServicedComponent : ContextBoundObject, IDisposable, System.EnterpriseServices.IRemoteDispatch, System.EnterpriseServices.IServicedComponentInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable ServicedComponent extends System.ContextBoundObject implements class System.EnterpriseServices.IRemoteDispatch, class System.EnterpriseServices.IServicedComponentInfo, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServicedComponent&#xA;Inherits ContextBoundObject&#xA;Implements IDisposable, IRemoteDispatch, IServicedComponentInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServicedComponent abstract : ContextBoundObject, IDisposable, System::EnterpriseServices::IRemoteDispatch, System::EnterpriseServices::IServicedComponentInfo" />
  <TypeSignature Language="F#" Value="type ServicedComponent = class&#xA;    inherit ContextBoundObject&#xA;    interface IRemoteDispatch&#xA;    interface IDisposable&#xA;    interface IServicedComponentInfo" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ContextBoundObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IRemoteDispatch</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IServicedComponentInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c2c6f-101">COM + 서비스를 사용 하 여 모든 클래스의 기본 클래스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-101">Represents the base class of all classes using COM+ services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-102">특정 조건에서 파생 된 클래스에서 <xref:System.EnterpriseServices.ServicedComponent> COM + 응용 프로그램에서 실행 응답을 중지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-102">Under certain conditions, a class that is derived from <xref:System.EnterpriseServices.ServicedComponent> that runs in a COM+ application may stop responding.</span></span> <span data-ttu-id="c2c6f-103">이 문제는 작업 교착 상태에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-103">This problem is caused by an Activity deadlock.</span></span> <span data-ttu-id="c2c6f-104">작업 구성 요소 참조의 비동기 정리로 인해 다중 스레드 응용 프로그램에서 교착 상태 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-104">Activities can deadlock on multithreaded applications because of an asynchronous cleanup of component references.</span></span> <span data-ttu-id="c2c6f-105">이 문제를 해결 하기 위해 호출 된 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 에서 파생 된 개체를 사용 하 여 작업을 완료 하면 메서드가 <xref:System.EnterpriseServices.ServicedComponent>합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-105">To work around this problem, call the <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> method when you complete work with objects derived from <xref:System.EnterpriseServices.ServicedComponent>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="c2c6f-106">클라이언트 코드를 호출 해야 `Dispose` 에서 제대로 작동 하도록 구성 요소를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-106">Client code must call `Dispose` on serviced components to ensure proper operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2c6f-107">다음 코드 예제에서는 구성 된 COM 구성 요소로 클래스를 노출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-107">The following code example demonstrates how to expose a class as a configured COM component.</span></span>  
  
 [!code-cpp[EnterpriseServices_Basic#1](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Basic/CPP/calculator.cpp#1)]
 [!code-csharp[EnterpriseServices_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Basic/CS/calculator.cs#1)]  
  
 <span data-ttu-id="c2c6f-108">구성 된 COM 구성 요소와이 클래스를 배포 하려면 강력한 키를 생성, compile을 라이브러리로 클래스 및 라이브러리를 등록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-108">To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library.</span></span> <span data-ttu-id="c2c6f-109">다음 세 단계는 다음 세 가지 명령을 사용 하 여 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-109">These three steps are accomplished by the following three commands.</span></span>  
  
```  
sn -k Calculator.snk  
csc /t:library Calculator.cs  
regsvcs Calculator.dll  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicedComponent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServicedComponent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c6f-110"><see cref="T:System.EnterpriseServices.ServicedComponent" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-110">Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-111">이 생성자는이 형식에 대 한 상태를 초기화 하기 위해 파생된 클래스 생성자에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-111">This constructor is called by derived class constructors to initialize state in this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="protected internal virtual void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Activate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Activate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Activate();" />
      <MemberSignature Language="F#" Value="abstract member Activate : unit -&gt; unit&#xA;override this.Activate : unit -&gt; unit" Usage="servicedComponent.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c6f-112">개체가 만들어지거나 풀에서 할당 될 때 인프라에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-112">Called by the infrastructure when the object is created or allocated from a pool.</span></span> <span data-ttu-id="c2c6f-113">개체에 사용자 지정 초기화 코드를 추가 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-113">Override this method to add custom initialization code to objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c6f-114">다음 코드 예제에서는이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-114">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#3](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#3)]
 [!code-csharp[EnterpriseServices_Pooling#3](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#3)]
 [!code-vb[EnterpriseServices_Pooling#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBePooled">
      <MemberSignature Language="C#" Value="protected internal virtual bool CanBePooled ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool CanBePooled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.CanBePooled" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CanBePooled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool CanBePooled();" />
      <MemberSignature Language="F#" Value="abstract member CanBePooled : unit -&gt; bool&#xA;override this.CanBePooled : unit -&gt; bool" Usage="servicedComponent.CanBePooled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c6f-115">개체 풀에 다시 배치 되기 전에이 메서드는 인프라에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-115">This method is called by the infrastructure before the object is put back into the pool.</span></span> <span data-ttu-id="c2c6f-116">개체는 풀에 다시 배치 여부에 대해 투표 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-116">Override this method to vote on whether the object is put back into the pool.</span></span></summary>
        <returns><span data-ttu-id="c2c6f-117"><see langword="true" /> 경우는 서비스 구성 요소를 풀링 될 수 있습니다. 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-117"><see langword="true" /> if the serviced component can be pooled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c6f-118">다음 코드 예제에서는이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-118">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#5](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#5)]
 [!code-csharp[EnterpriseServices_Pooling#5](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#5)]
 [!code-vb[EnterpriseServices_Pooling#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="protected internal virtual void Construct (string s);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Construct(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Construct (s As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Construct(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member Construct : string -&gt; unit&#xA;override this.Construct : string -&gt; unit" Usage="servicedComponent.Construct s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2c6f-119">생성 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-119">The construction string.</span></span></param>
        <summary><span data-ttu-id="c2c6f-120">생성자 문자열에 전달 생성자가 호출 후 바로 인프라에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-120">Called by the infrastructure just after the constructor is called, passing in the constructor string.</span></span> <span data-ttu-id="c2c6f-121">이 메서드를 재정의 생성 문자열 값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-121">Override this method to make use of the construction string value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="protected internal virtual void Deactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Deactivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Deactivate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Deactivate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Deactivate();" />
      <MemberSignature Language="F#" Value="abstract member Deactivate : unit -&gt; unit&#xA;override this.Deactivate : unit -&gt; unit" Usage="servicedComponent.Deactivate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c6f-122">개체가 비활성화 되려고 할 때 인프라에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-122">Called by the infrastructure when the object is about to be deactivated.</span></span> <span data-ttu-id="c2c6f-123">시간 (JIT) 컴파일된 코드 또는 개체 풀링이 사용 될 때 개체에 사용자 지정 종료 코드를 추가 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-123">Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2c6f-124">다음 코드 예제에서는이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-124">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#4](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#4)]
 [!code-csharp[EnterpriseServices_Pooling#4](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#4)]
 [!code-vb[EnterpriseServices_Pooling#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2c6f-125"><see cref="T:System.EnterpriseServices.ServicedComponent" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-125">Releases the resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="servicedComponent.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2c6f-126"><see cref="T:System.EnterpriseServices.ServicedComponent" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-126">Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-127">개체를 종료 하 고 연결 된 COM + 컨텍스트를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-127">Finalizes the object and removes the associated COM+ context.</span></span>  
  
 <span data-ttu-id="c2c6f-128">가비지 수집기에서 개체를 해제 하기 전에 명시적으로 COM + 개체와 외부 리소스를 해제 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-128">It is recommended to explicitly release COM+ objects and external resources before the garbage collector frees the object.</span></span> <span data-ttu-id="c2c6f-129">외부 리소스 부족 또는 비용이 많이 드는 경우 더 이상 필요 없는 경우 명시적으로 COM + 리소스를 해제 하 여 더 나은 성능을 구현할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-129">If the external resource is scarce or expensive, better performance can be achieved by explicitly releasing COM+ resources when they are no longer needed.</span></span> <span data-ttu-id="c2c6f-130">제공 하는 명시적으로 제어를 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-130">Explicit control is provided by the <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="c2c6f-131">호출 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 에서 사용 하는 리소스는 <xref:System.EnterpriseServices.ServicedComponent> 다른 용도로 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-131">Calling <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> allows the resources used by the <xref:System.EnterpriseServices.ServicedComponent> to be reallocated for other purposes.</span></span> <span data-ttu-id="c2c6f-132">에 대 한 자세한 내용은 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-132">For more information about <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c2c6f-133">재정의 <see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /> 이 클래스에 대 한 후 삭제 논리를 사용자 지정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-133">Override the <see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /> method to customize the dispose logic for this class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="servicedComponent.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="c2c6f-134"><see langword="true" /> 관리 및 관리 되지 않는 리소스만 해제 하려면 그렇지 않으면 <see langword="false" /> 관리 되지 않는 리소스만 해제 하려면.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-134"><see langword="true" /> to release both managed and unmanaged resources; otherwise, <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="c2c6f-135"><see cref="T:System.EnterpriseServices.ServicedComponent" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-135">Releases the unmanaged resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-136">이 메서드는 공용 `Dispose` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-136">This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="c2c6f-137">`Dispose` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-137">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="c2c6f-138"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-138"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="c2c6f-139">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.EnterpriseServices.ServicedComponent>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-139">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.EnterpriseServices.ServicedComponent> references.</span></span> <span data-ttu-id="c2c6f-140">이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-140">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c2c6f-141">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-141">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="c2c6f-142"><see langword="Dispose(Boolean)" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-142">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="c2c6f-143">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-143">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="c2c6f-144">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-144">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DisposeObject">
      <MemberSignature Language="C#" Value="public static void DisposeObject (System.EnterpriseServices.ServicedComponent sc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisposeObject(class System.EnterpriseServices.ServicedComponent sc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisposeObject (sc As ServicedComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisposeObject(System::EnterpriseServices::ServicedComponent ^ sc);" />
      <MemberSignature Language="F#" Value="static member DisposeObject : System.EnterpriseServices.ServicedComponent -&gt; unit" Usage="System.EnterpriseServices.ServicedComponent.DisposeObject sc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sc" Type="System.EnterpriseServices.ServicedComponent" />
      </Parameters>
      <Docs>
        <param name="sc"><span data-ttu-id="c2c6f-145">삭제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-145">The object to dispose.</span></span></param>
        <summary><span data-ttu-id="c2c6f-146">개체를 종료 하 고 연결된 된 COM + 참조를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-146">Finalizes the object and removes the associated COM+ reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-147">사용 하는 것이 좋습니다 합니다 `Dispose` 디자인 패턴 대신 <xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-147">It is preferable to use the `Dispose` design pattern rather than <xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchAutoDone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.EnterpriseServices.AutoComplete(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2c6f-148">구현 하는 요청 개체로 변환 될 문자열은 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-148">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span></span></param>
        <summary><span data-ttu-id="c2c6f-149">되도록 COM + 컨텍스트에서 합니다 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 클래스 개체의 <see langword="done" /> 비트가 <see langword="true" /> 원격 메서드 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-149">Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's <see langword="done" /> bit is set to <see langword="true" /> after a remote method invocation.</span></span></summary>
        <returns><span data-ttu-id="c2c6f-150">구현 하는 응답 개체에서 변환 된 문자열을 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-150">A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="c2c6f-151">합니다 <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A> 메서드는 요소의 게시 된 인터페이스에 속하지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent> 클래스 및 다른 곳에서 구현 될 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-151">The <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchNotAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchNotAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchNotAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchNotAutoDone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.EnterpriseServices.AutoComplete(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2c6f-152">구현 하는 요청 개체로 변환 될 문자열은 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-152">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span></span></param>
        <summary><span data-ttu-id="c2c6f-153">되도록 보장 하지 않습니다, COM + 컨텍스트에서 합니다 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 클래스 개체의 <see langword="done" /> 비트가 <see langword="true" /> 원격 메서드 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-153">Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's <see langword="done" /> bit is set to <see langword="true" /> after a remote method invocation.</span></span></summary>
        <returns><span data-ttu-id="c2c6f-154">구현 하는 응답 개체에서 변환 된 문자열을 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-154">A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-155">합니다 <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A> 메서드는 요소의 게시 된 인터페이스에 속하지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent> 클래스 및 다른 곳에서 구현 될 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-155">The <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo">
      <MemberSignature Language="C#" Value="void IServicedComponentInfo.GetComponentInfo (ref int infoMask, out string[] infoArray);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int32&amp; infoMask, [out] string[]&amp; infoArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetComponentInfo (ByRef infoMask As Integer, ByRef infoArray As String()) Implements IServicedComponentInfo.GetComponentInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int % infoMask, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % infoArray) = System::EnterpriseServices::IServicedComponentInfo::GetComponentInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="infoMask" Type="System.Int32" RefType="ref" />
        <Parameter Name="infoArray" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="infoMask"><span data-ttu-id="c2c6f-156">여기서 0x00000001은 서비스 구성 요소의 프로세스 ID에 대 한 키, 0x00000002는 응용 프로그램 도메인 ID에 대 한 키 및 상태는 0x00000004는 서비스 구성 요소의 원격 URI에 대 한 키를 비트 마스크입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-156">A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</span></span></param>
        <param name="infoArray"><span data-ttu-id="c2c6f-157">다음을 순서 대로 중 일부 또는 모두를 포함할 수 있는 문자열 배열: 서비스 구성 요소의 프로세스 ID, 응용 프로그램 도메인 ID 및 서비스 구성 요소의 원격 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-157">A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</span></span></param>
        <summary><span data-ttu-id="c2c6f-158">에 대 한 특정 정보를 가져옵니다는 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 클래스 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-158">Obtains certain information about the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2c6f-159">합니다 <xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A> 메서드는 요소의 게시 된 인터페이스에 속하지 않습니다는 <xref:System.EnterpriseServices.ServicedComponent> 클래스 및 다른 곳에서 구현 될 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c2c6f-159">The <xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>