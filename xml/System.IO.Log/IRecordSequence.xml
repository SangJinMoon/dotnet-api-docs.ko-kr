<Type Name="IRecordSequence" FullName="System.IO.Log.IRecordSequence">
  <TypeSignature Language="C#" Value="public interface IRecordSequence : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRecordSequence implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.IRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRecordSequence&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRecordSequence : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a8c5c-101">레코드 시퀀스에 대한 제네릭 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-101">Provides a generic interface to a sequence of records.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-102"><xref:System.IO.Log.IRecordSequence> 인터페이스는 레코드 기반 스트림에 대한 추상 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-102">The <xref:System.IO.Log.IRecordSequence> interface provides an abstract interface to a record-oriented stream.</span></span> <span data-ttu-id="a8c5c-103"><xref:System.IO.Log.IRecordSequence> 인스턴스를 사용하여 로그 레코드를 읽고 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-103">A <xref:System.IO.Log.IRecordSequence> instance can be used to read and write log records.</span></span>  
  
 <span data-ttu-id="a8c5c-104"><xref:System.IO.Log.IRecordSequence> 인터페이스는 다음 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-104">The <xref:System.IO.Log.IRecordSequence> interface provides the following capabilities,</span></span>  
  
-   <span data-ttu-id="a8c5c-105"><xref:System.IO.Log.IRecordSequence.Append%2A> 메서드를 사용하여 로그 레코드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-105">Append log records using the <xref:System.IO.Log.IRecordSequence.Append%2A> methods.</span></span>  
  
-   <span data-ttu-id="a8c5c-106"><xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 메서드를 사용하여 추가된 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-106">Read the appended records using the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
-   <span data-ttu-id="a8c5c-107"><xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 메서드를 사용하여 특수 재시작 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-107">Write a special restart record using the <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
-   <span data-ttu-id="a8c5c-108"><xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 가장 최근에 쓴 재시작 레코드에서 재시작 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-108">Read restart records from the most recently written restart record using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
-   <span data-ttu-id="a8c5c-109"><xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 사용하여 영속 저장소에 레코드를 플러시합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-109">Flush the records to durable store using the  <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
-   <span data-ttu-id="a8c5c-110">레코드를 추가하기 위한 공간을 예약합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-110">Reserve space for appending records.</span></span>  
  
-   <span data-ttu-id="a8c5c-111">로그의 기준을 앞으로 이동하여 로그 공간을 확보합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-111">Free log space by advancing the base of the log.</span></span>  
  
-   <span data-ttu-id="a8c5c-112">로그의 기준을 여유 공간으로 이동하기 위해 <xref:System.IO.Log.IRecordSequence.TailPinned> 이벤트 알림을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-112">Receive <xref:System.IO.Log.IRecordSequence.TailPinned> event notifications to move the base of the log to free space.</span></span>  
  
 <span data-ttu-id="a8c5c-113">로그 레코드가 <xref:System.IO.Log.IRecordSequence> 인스턴스에 추가되고 각 로그 레코드에 고유한 시퀀스 번호가 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-113">Log records are appended to a <xref:System.IO.Log.IRecordSequence> instance, and each log record is given a unique sequence number.</span></span> <span data-ttu-id="a8c5c-114">시퀀스 번호는 지정된 레코드 시퀀스에서 일정한 값으로 순차적으로 증가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-114">Sequence numbers are strictly monotonically increasing within a given record sequence.</span></span> <span data-ttu-id="a8c5c-115">로그 레코드는 바이트 배열 세그먼트의 <xref:System.IO.Log.IRecordSequence>에 있는 <xref:System.Collections.IList> 인스턴스에 제공되는 불투명 데이터로 구성됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-115">A log record consists of opaque data, supplied to the <xref:System.IO.Log.IRecordSequence> instance in an <xref:System.Collections.IList> of ArraySegments of bytes.</span></span>  
  
 <span data-ttu-id="a8c5c-116"><xref:System.IO.Log.IRecordSequence> 인터페이스는 로그 경계에 대한 정보를 제공하는 몇 가지 기본 속성도 노출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-116">The <xref:System.IO.Log.IRecordSequence> interface also exposes a few basic properties which provides information about log boundaries.</span></span>  
  
-   <span data-ttu-id="a8c5c-117"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 속성에는 레코드 시퀀스에 있는 유효한 첫 번째 레코드의 시퀀스 번호가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-117">The <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> property contains the sequence number of the first valid record in the record sequence.</span></span>  
  
-   <span data-ttu-id="a8c5c-118"><xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 속성에는 마지막으로 추가된 레코드의 시퀀스 번호보다 반드시 큰 시퀀스 번호가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-118">The <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span>  
  
-   <span data-ttu-id="a8c5c-119"><xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> 속성에는 마지막으로 기록된 재시작 영역의 시퀀스 번호가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-119">The <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> property contains the sequence number of the last written restart area.</span></span>  
  
-   <span data-ttu-id="a8c5c-120"><xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> 속성에는 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-120">The <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> property contains the size of the largest record that can be appended to, or read from the sequence.</span></span>  
  
-   <span data-ttu-id="a8c5c-121"><xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> 속성에는 이 레코드 시퀀스에서 만든 모든 예약의 총 크기가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-121">The <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> property contains the total size of all reservations made in this record sequence.</span></span>  
  
-   <span data-ttu-id="a8c5c-122"><xref:System.IO.Log.IRecordSequence.RetryAppend%2A> 속성이 `true`로 설정되어 있고 시퀀스에 공간이 없기 때문에 <xref:System.IO.Log.IRecordSequence.Append%2A> 작업이 실패하면 레코드 시퀀스에서 공간을 확보하려고 시도하고 추가 작업을 다시 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-122">If the <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> property is set to `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-123">레코드 시퀀스의 새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-123">The new base sequence number of the record sequence.</span></span></param>
        <summary><span data-ttu-id="a8c5c-124">로그의 기준 시퀀스 번호를 앞으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-124">Moves the base sequence number of the log forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-125"><xref:System.IO.Log.LogRecordSequence> 인스턴스를 사용하고 로그에서 공간을 확보하기 위해 시퀀스 번호를 앞으로 이동하려고 하면 새 기준 시퀀스 번호가 다른 로그 범위에 있어야 이전 범위가 빈 것으로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-125">When you use a <xref:System.IO.Log.LogRecordSequence> instance and try to advance the sequence number to free up space in the log, the new base sequence number must reside in a different log extent for the previous extent to be marked as empty.</span></span> <span data-ttu-id="a8c5c-126">범위를 부분적으로 해제할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-126">Freeing extents partially is not supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a8c5c-127"><paramref name="newBaseSequenceNumber" />이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-127"><paramref name="newBaseSequenceNumber" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a8c5c-128"><paramref name="newBaseSequenceNumber" />가 로그에서 활성 상태가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-128"><paramref name="newBaseSequenceNumber" /> is not active in the log.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-129">시퀀스를 수정하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-129">An I/O error occurred while modifying the sequence.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-130">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-130">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-131">레코드 시퀀스가 꽉 찼습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-131">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-132">파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-132">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-133">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-133">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-134">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-134">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-135">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-135">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-136">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-136">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="a8c5c-137">파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-137">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-138">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-138">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-139">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-139">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-140">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-140">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-141">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-141">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-142">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-142">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-143">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-143">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-144">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-144">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-145">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-145">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-146">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-146">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-147">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-147">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-148">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-148">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-149">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-149">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-150">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-150">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="a8c5c-151">파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-151">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-152">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-152">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-153">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-153">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-154">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-154">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-155">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-155">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-156">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-156">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-157">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-157">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-158">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-158">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-159">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-159">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-160">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-160">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-161">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-161">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-162">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-162">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-163">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-163">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-164">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-164">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-165">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-165">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="a8c5c-166">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-166">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-167">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-167">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-168">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-168">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-169">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-169">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-170">추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-170">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="a8c5c-171">추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-171">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-172">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-172">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-173">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-173">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-174">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-174">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-175">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-175">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-176">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-176">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-177">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-177">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-178">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-178">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-179">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-179">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-180">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-180">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-181">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-181">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-182">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-182">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="a8c5c-183">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-183">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-184">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-184">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-185">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-185">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-186">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-186">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-187">추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-187">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="a8c5c-188">추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-188">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-189">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-189">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-190">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-190">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-191">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-191">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-192">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-192">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-193">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-193">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-194">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-194">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-195">파생 클래스에서 재정의되는 경우 현재 <see cref="T:System.IO.Log.IRecordSequence" />에서 유효한 첫 번째 레코드의 시퀀스 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-195">When overridden in a derived class, gets the sequence number of the first valid record in the current <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <value><span data-ttu-id="a8c5c-196"><see cref="T:System.IO.Log.IRecordSequence" />에서 유효한 레코드에 해당하는 가장 작은 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-196">The lowest sequence number that corresponds to a valid record in the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-197">유효한 시퀀스 번호는 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>보다 크거나 같고 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-197">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
 <span data-ttu-id="a8c5c-198">이 속성의 값은 <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> 또는 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 메서드를 호출하여 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-198">The value of this property can be changed by calling the <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> or <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-199">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-199">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-200">파생 클래스에서 재정의되는 경우 비동기 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-200">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-201">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-201">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-202">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-202">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-203">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-203">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-204">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-204">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-205">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-205">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-206">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-206">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-207">파생 클래스에서 재정의되는 경우 비동기 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-207">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-208">보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-208">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-209">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-209">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-210">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-210">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-211">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-211">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-212">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-212">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-213">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-213">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-214">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-214">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-215">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-215">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-216">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-216">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-217">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-217">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-218">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-218">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-219">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-219">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-220">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-220">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-221">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-221">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-222">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-222">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-223">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-223">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-224">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-224">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-225">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-225">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-226">보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-226">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-227">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-227">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-228">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-228">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-229">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-229">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-230">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-230">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-231">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-231">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-232">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-232">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-233">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-233">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-234">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-234">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-235">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-235">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-236">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-236">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-237">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-237">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-238">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-238">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-239">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-239">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-240">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-240">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-241">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-241">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-242">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-242">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-243">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-243">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-244">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-244">When overridden in a derived class, begins an asynchronous append operation using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-245">보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-245">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-246">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-246">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-247">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-247">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-248">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-248">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-249">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-249">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-250">추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-250">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="a8c5c-251">추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-251">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-252">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-252">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-253">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-253">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-254">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-254">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-255">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-255">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-256">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-256">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-257">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-257">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousUndoRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousUndoRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-258">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-258">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-259">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-259">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousUndoRecord"><span data-ttu-id="a8c5c-260">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-260">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-261">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-261">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-262">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-262">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-263">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-263">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-264">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-264">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-265">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-265">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-266">보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-266">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-267">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-267">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-268">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-268">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-269">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-269">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-270">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-270">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-271">추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-271">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="a8c5c-272">추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-272">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-273">일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-273">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="a8c5c-274">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-274">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-275">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-275">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-276">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-276">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-277">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-277">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-278">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-278">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="a8c5c-279">써야 하는 최신 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-279">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="a8c5c-280">이 <see cref="T:System.IO.Log.SequenceNumber" />가 유효하지 않은 경우 모든 레코드를 써야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-280">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-281">플러시가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-281">An optional asynchronous callback, to be called when the flush is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-282">이 특정 비동기 플러시 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-282">A user-provided object that distinguishes this particular asynchronous flush request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-283">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 플러시 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-283">When overridden in a derived class, begins an asynchronous flush operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-284">보류 중일 수 있는 비동기 플러시 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-284">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous flush operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-285">현재 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 메서드에 전달하여 플러시를 완료하고 리소스를 적절하게 해제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-285">You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately.</span></span> <span data-ttu-id="a8c5c-286">비동기 플러시 중에 오류가 발생하는 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndFlush%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-286">If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-287">이 메서드를 호출하면 <xref:System.IO.Log.IRecordSequence>에 추가된 모든 레코드가 영속적으로 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-287">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> are durably written.</span></span>  
  
 <span data-ttu-id="a8c5c-288">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-288">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-289">비동기 플러시 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)로 인해 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 메서드를 호출할 때 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-289">Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-290">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-290">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-291">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-291">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-292">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-292">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-293">파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-293">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-294">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-294">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-295">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-295">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-296">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-296">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-297">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-297">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="a8c5c-298">예약을 만들 예약 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-298">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-299">만들 예약(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-299">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-300">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-300">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-301">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-301">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-302">파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-302">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-303">보류 중일 수 있는 이 비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-303">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-304">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-304">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-305">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-305">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-306">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-306">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-307">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-307">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-308">지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-308">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="a8c5c-309">추가가 실패하면 공간이 예약되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-309">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="a8c5c-310">일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-310">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="a8c5c-311">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-311">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-312">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-312">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-313">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-313">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-314">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-314">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-315">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-315">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-316">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-316">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-317">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-317">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-318">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-318">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-319">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-319">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-320">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-320">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-321">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-321">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="a8c5c-322">예약을 만들 예약 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-322">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-323">만들 예약(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-323">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-324">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-324">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-325">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-325">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-326">파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-326">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-327">보류 중일 수 있는 이 비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-327">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-328">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-328">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-329">비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-329">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-330">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-330">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-331">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-331">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-332">지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-332">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="a8c5c-333">추가가 실패하면 공간이 예약되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-333">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="a8c5c-334">일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-334">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="a8c5c-335">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-335">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-336">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-336">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-337">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-337">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-338">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-338">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-339">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-339">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-340">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-340">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-341">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-341">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-342">파생 클래스에서 재정의되는 경우 비동기 재시작 영역 쓰기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-342">When overridden in a derived class, begins an asynchronous restart area write operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-343">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-343">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-344">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-344">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-345">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-345">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="a8c5c-346">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-346">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-347">재시작 영역 쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-347">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-348">이 특정 비동기 재시작 영역 쓰기 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-348">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-349">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 재시작 영역 쓰기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-349">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-350">보류 중일 수 있는 비동기 재시작 영역 쓰기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-350">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-351">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드에 전달하여 재시작 영역 쓰기 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-351">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-352">비동기 재시작 영역 쓰기 작업 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-352">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-353">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-353">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-354">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-354">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-355">작업이 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-355">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-356">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-356">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="a8c5c-357"><xref:System.IO.Log.ReservationCollection>을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-357">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="a8c5c-358">메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-358">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-359">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-359">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-360">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-360">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-361">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-361">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-362">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-362">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-363">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-363">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="a8c5c-364">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-364">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="a8c5c-365">재시작 영역 쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-365">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="a8c5c-366">이 특정 비동기 재시작 영역 쓰기 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-366">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="a8c5c-367">파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 재시작 영역 쓰기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-367">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-368">보류 중일 수 있는 비동기 재시작 영역 쓰기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-368">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-369">이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드에 전달하여 재시작 영역 쓰기 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-369">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="a8c5c-370">비동기 재시작 영역 쓰기 작업 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-370">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="a8c5c-371">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-371">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-372">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-372">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-373">작업이 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-373">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-374">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-374">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="a8c5c-375"><xref:System.IO.Log.ReservationCollection>을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-375">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="a8c5c-376">메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-376">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-377">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-377">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-378">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-378">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-379">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-379">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-380">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-380">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-381">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-381">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-382">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-382">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8c5c-383">파생 클래스에서 재정의할 때 새 <see cref="T:System.IO.Log.ReservationCollection" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-383">When overridden in a derived class, creates a new <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-384">새로 만든 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-384">The newly created <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-385">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-385">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="a8c5c-386">처리 중인 비동기 I/O 요청에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-386">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="a8c5c-387">파생 클래스에서 재정의되는 경우 비동기 추가 작업을 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-387">When overridden in a derived class, ends an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-388">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-388">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-389">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-389">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="a8c5c-390">비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 호출할 때 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-390">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="a8c5c-391">이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginAppend%2A>마다 정확히 한 번만 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-391">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-392">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-392">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-393">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-393">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="a8c5c-394">처리 중인 비동기 I/O 요청에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-394">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="a8c5c-395">파생 클래스에서 재정의되는 경우 비동기 플러시 작업을 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-395">When overridden in a derived class, ends an asynchronous flush operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-396">마지막으로 쓴 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-396">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-397">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-397">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="a8c5c-398">비동기 플러시 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndFlush%2A>를 호출할 때 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-398">Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndFlush%2A> is called.</span></span>  
  
 <span data-ttu-id="a8c5c-399">이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginFlush%2A>마다 정확히 한 번만 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-399">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-400">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-400">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-401">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-401">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="a8c5c-402">처리 중인 비동기 I/O 요청에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-402">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="a8c5c-403">파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-403">When overridden in a derived class, ends an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-404">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-404">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-405">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-405">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="a8c5c-406">비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 호출할 때 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-406">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="a8c5c-407">이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A>마다 정확히 한 번만 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-407">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-408">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-408">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-409">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-409">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="a8c5c-410">처리 중인 비동기 I/O 요청에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-410">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="a8c5c-411">파생 클래스에서 재정의되는 경우 비동기 재시작 영역 쓰기 작업을 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-411">When overridden in a derived class, ends an asynchronous restart area write operation.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-412">쓴 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-412">The sequence number of the written log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-413">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-413">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="a8c5c-414">비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 호출할 때 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-414">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> is called.</span></span>  
  
 <span data-ttu-id="a8c5c-415">이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A>마다 정확히 한 번만 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-415">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-416">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-416">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-417">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-417">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-418">파생 클래스에서 재정의되는 경우 추가된 레코드가 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-418">When overridden in a derived class, causes appended records to be written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8c5c-419">파생 클래스에서 재정의되는 경우 추가된 모든 레코드가 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-419">When overridden in a derived class, ensures that all appended records have been written.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-420">마지막으로 쓴 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-420">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-421">이 메서드를 호출하면 <xref:System.IO.Log.IRecordSequence>에 추가된 모든 레코드가 영속적으로 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-421">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-422">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-422">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-423">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-423">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="a8c5c-424">써야 하는 최신 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-424">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="a8c5c-425">이 <see cref="T:System.IO.Log.SequenceNumber" />가 유효하지 않은 경우 모든 레코드를 써야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-425">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <summary><span data-ttu-id="a8c5c-426">파생 클래스에서 재정의되는 경우 지정된 시퀀스 번호 이하의 시퀀스 번호를 가진 추가된 모든 레코드가 영속적으로 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-426">When overridden in a derived class, ensures that all appended records up to and including the record with the specified sequence number have been durably written.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-427">마지막으로 쓴 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-427">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-428">이 메서드를 호출하면 지정된 시퀀스 번호 이하의 시퀀스 번호를 가진 모든 레코드가 영속적으로 기록됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-428">Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-429">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-429">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-430">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-430">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-431">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-431">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-432">파생 클래스에서 재정의되는 경우 마지막으로 추가된 레코드보다 큰 시퀀스 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-432">When overridden in a derived class, gets the sequence number which is greater than the last record appended.</span></span></summary>
        <value><span data-ttu-id="a8c5c-433">마지막으로 추가된 레코드보다 큰 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-433">A sequence number which is greater than the last record appended.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-434">이 속성에는 마지막으로 추가된 레코드의 시퀀스 번호보다 반드시 큰 시퀀스 번호가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-434">This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span> <span data-ttu-id="a8c5c-435">유효한 시퀀스 번호는 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>보다 크거나 같고 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-435">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a8c5c-436"><xref:System.IO.Log.LogRecordSequence> 인스턴스를 사용하는 경우 <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> 값은 레코드가 로그로 플러시될 때까지 최신이 아닐 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-436">When using a <xref:System.IO.Log.LogRecordSequence> instance, the <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> value can become out of date until records are flushed to the log.</span></span> <span data-ttu-id="a8c5c-437">레코드 플러시에 대한 자세한 내용은 <xref:System.IO.Log.IRecordSequence.Flush%2A> 및 <xref:System.IO.Log.RecordAppendOptions>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-437">See <xref:System.IO.Log.IRecordSequence.Flush%2A> and <xref:System.IO.Log.RecordAppendOptions> for more information on flushing records..</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-438">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-438">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-439">파생 클래스에서 재정의되는 경우 이 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기(바이트)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-439">When overridden in a derived class, gets the size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></summary>
        <value><span data-ttu-id="a8c5c-440">이 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-440">The size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-441">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-441">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="a8c5c-442">읽기가 시작되는 첫 번째 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-442">The sequence number of the first record where the reading starts.</span></span></param>
        <param name="logRecordEnum"><span data-ttu-id="a8c5c-443"><see cref="T:System.IO.Log.LogRecordEnumeratorType" />에서 레코드를 읽는 방식(즉 앞으로 또는 뒤로)을 지정하는 유효한 <see cref="T:System.IO.Log.LogRecordSequence" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-443">A valid <see cref="T:System.IO.Log.LogRecordEnumeratorType" /> value that specifies the manner (that is, forward or backward) in which records should be read from a <see cref="T:System.IO.Log.LogRecordSequence" />.</span></span></param>
        <summary><span data-ttu-id="a8c5c-444">파생 클래스에서 재정의되는 경우 시퀀스에 있는 레코드의 열거 가능한 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-444">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-445">시퀀스에 있는 레코드의 열거 가능한 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-445">An enumerable collection of records in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-446">파생 클래스에서 재정의되는 경우 시퀀스에 있는 레코드의 열거 가능한 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-446">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span> <span data-ttu-id="a8c5c-447">열거되는 레코드의 순서는 `logRecordEnum` 매개 변수의 값에 따라 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-447">The order of the enumerated records depends on the value of the `logRecordEnum` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8c5c-448">이 샘플에서는 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-448">This sample demonstrates the use of the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
```csharp  
using System;  
 using System.IO;  
 using System.IO.Log;  
  
 class ReadRecordsSample  
 {  
     static SequenceNumber AppendRecord(IRecordSequence sequence,  
                                        string message,  
                                        SequenceNumber user,  
                                        SequenceNumber previous)  
     {  
         MemoryStream data = new MemoryStream();  
         BinaryWriter writer = new BinaryWriter(data);  
         writer.Write(message);  
  
         ArraySegment<byte>[] segments;  
         segments = new ArraySegment<byte>[1];  
         segments[0] = new ArraySegment(data.GetBuffer(),  
                                        0,  
                                        Data.Length);  
  
         return sequence.Append(segments,  
                                user,  
                                previous,  
                                WriteFlags.None);  
     }  
  
     public static void Main(string[] args)  
     {  
         IRecordSequence sequence;  
         sequence = new FileIRecordSequence(args[0]);  
  
         SequenceNumber a, b, c, d;  
  
         a = AppendRecord(sequence,  
                          "This is record A",  
                          SequenceNumber.Invalid,  
                          SequenceNumber.Invalid);  
         Console.WriteLine("Record A has sequence number System.IO.Log", a);  
  
         b = AppendRecord(sequence,  
                          "This is record B",  
                          a,  
                          a);  
         Console.WriteLine("Record B has sequence number System.IO.Log", b);  
  
         c = AppendRecord(sequence,  
                          "This is record C",  
                          a,  
                          a);  
         Console.WriteLine("Record C has sequence number System.IO.Log", c);  
  
         d = AppendRecord(sequence,  
                          "This is record D",  
                          b,  
                          c);  
         Console.WriteLine("Record D has sequence number System.IO.Log", d);  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(a, ReadDirection.Forward))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.User))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.Previous))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
     }  
       }  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-449">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-449">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-450">레코드를 읽는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-450">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-451">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-451">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8c5c-452">파생 클래스에서 재정의되는 경우 시퀀스에 있는 재시작 영역의 열거 가능한 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-452">When overridden in a derived class, returns an enumerable collection of the restart areas in the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-453">시퀀스에 있는 재시작 영역의 열거 가능한 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-453">An enumerable collection of the restart areas in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-454">재시작 영역은 시퀀스 번호의 역순(가장 큰 시퀀스 번호부터 가장 작은 시퀀스 번호까지)으로 열거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-454">The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.</span></span> <span data-ttu-id="a8c5c-455">마지막 시퀀스 번호와 기준 시퀀스 번호 사이의 시퀀스 번호를 가진 재시작 영역만 열거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-455">Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a8c5c-456"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>가 포함된 로그 범위가 손상되면 이 메서드에서 "예기치 않은 I/O 예외 때문에 요청을 수행할 수 없습니다. 오류 코드 '80070026'을(를) 반환했습니다." 오류 메시지와 함께 <xref:System.IO.IOException>을</span><span class="sxs-lookup"><span data-stu-id="a8c5c-456">If the log extent containing the <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> becomes corrupted, this method can throw an <xref:System.IO.IOException> with the error message "The request could not be performed because of an unexpected I/O exception.</span></span> <span data-ttu-id="a8c5c-457">throw할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-457">The following error code was returned: '80070026'".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-458">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-458">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-459">레코드를 읽는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-459">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-460">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-460">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-461">파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-461">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-462">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-462">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-463">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-463">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-464">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-464">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-465">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-465">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="a8c5c-466">예약을 만들 컬렉션이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-466">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-467">만들 예약(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-467">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="a8c5c-468">파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-468">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-469">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-469">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-470">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-470">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-471">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-471">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-472">지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-472">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="a8c5c-473">추가가 실패하면 공간이 예약되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-473">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="a8c5c-474">일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-474">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="a8c5c-475">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-475">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-476">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-476">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-477">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-477">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-478">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-478">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-479">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-479">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-480">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-480">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="a8c5c-481">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-481">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="a8c5c-482">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-482">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="a8c5c-483">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-483">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="a8c5c-484">예약을 만들 예약 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-484">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="a8c5c-485">만들 예약(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-485">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="a8c5c-486">파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-486">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-487">추가된 로그 레코드의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-487">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-488">`data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-488">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-489">그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-489">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="a8c5c-490">지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-490">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="a8c5c-491">추가가 실패하면 공간이 예약되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-491">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="a8c5c-492">일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-492">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="a8c5c-493">레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-493">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-494">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-494">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-495">레코드를 추가하는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-495">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-496">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-496">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-497">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-497">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-498">파생 클래스에서 재정의되는 경우 예약된 총 바이트 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-498">When overridden in a derived class, gets the total number of bytes that have been reserved.</span></span></summary>
        <value><span data-ttu-id="a8c5c-499">이 레코드 시퀀스에서 만들어진 모든 예약의 총 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-499">The total size of all reservations made in this record sequence.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-500">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-500">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-501">파생 클래스에서 재정의되는 경우 가장 최근에 기록된 재시작 영역의 시퀀스 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-501">When overridden in a derived class, gets the sequence number of the most recently written restart area.</span></span></summary>
        <value><span data-ttu-id="a8c5c-502">가장 최근에 기록된 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-502">The sequence number of the most recently written restart area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-503">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-503">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-504">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-504">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-505">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-505">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-506">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-506">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-507">로그가 꽉 차는 경우 추가 작업이 자동으로 다시 시도되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-507">Gets or sets a value indicating whether appends are automatically retried if the log is full.</span></span></summary>
        <value>
          <span data-ttu-id="a8c5c-508">로그가 꽉 차는 경우 추가 작업이 자동으로 다시 시도되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-508"><see langword="true" /> if appends are automatically retried if the log is full; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a8c5c-509">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-509">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-510">이 속성의 값이 `true`이고 시퀀스에 충분한 공간이 없기 때문에 <xref:System.IO.Log.IRecordSequence.Append%2A> 호출이 실패하면 레코드 시퀀스에서 공간을 확보하려고 시도하고 추가 작업을 다시 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-510">If the value of this property is `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-511">시퀀스가 삭제된 후 속성에 액세스한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-511">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.IRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8c5c-512">레코드 시퀀스에서 테일이 앞으로 이동해야 한다고 결정하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-512">Occurs when the record sequence determines that the tail must be moved forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-513">레코드 시퀀스에 공간이 부족하면 이 이벤트를 발생시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-513">You can fire this event when the record sequence has run out of space.</span></span> <span data-ttu-id="a8c5c-514">이 이벤트가 발생하면 공간을 확보하기 위해 시퀀스의 테일(즉, 기준 시퀀스 번호)이 앞으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-514">When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8c5c-515">파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-515">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-516">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-516">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-517">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-517">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-518">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-518">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-519">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-519">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-520">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-520">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="a8c5c-521">파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-521">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-522">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-522">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-523">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-523">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-524">CLFS(Common Log File System)에서는 적어도 하나의 유효한 영역을 항상 사용할 수 있도록 하기 위해 두 개의 재시작 영역을 유지 관리합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-524">The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.</span></span> <span data-ttu-id="a8c5c-525">복구가 필요한 경우 CLFS에서는 재시작 영역을 읽고 마지막 검사점 작업에서 데이터를 모두 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-525">When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-526">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-526">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 <span data-ttu-id="a8c5c-527">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-527">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-528">바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-528">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-529">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-529">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-530">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-530">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-531">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-531">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-532">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-532">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-533">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-533">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-534">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-534">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="a8c5c-535">파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-535">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-536">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-536">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-537">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-537">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-538">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-538">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-539">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-539">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-540">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-540">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-541">바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-541">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-542">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-542">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-543">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-543">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-544">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-544">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-545">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-545">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-546">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-546">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-547">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-547">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-548">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-548">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-549">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-549">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="a8c5c-550">파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-550">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="a8c5c-551">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-551">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-552">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-552">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-553">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-553">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-554">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-554">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-555">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-555">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-556">재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-556">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-557">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-557">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="a8c5c-558">이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-558">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-559">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-559">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-560">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-560">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-561">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-561">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-562">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-562">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-563">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-563">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-564">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-564">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-565">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-565">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-566">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-566">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="a8c5c-567">파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-567">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-568">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-568">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-569">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-569">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-570">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-570">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-571">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-571">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-572">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-572">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-573">재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-573">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-574">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-574">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="a8c5c-575">이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-575">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-576">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-576">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-577">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-577">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-578">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-578">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-579">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-579">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-580">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-580">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-581">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-581">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-582">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-582">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-583">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-583">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="a8c5c-584">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-584">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="a8c5c-585">파생 클래스에서 재정의되는 경우 예약을 사용하여 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-585">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="a8c5c-586">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-586">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-587">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-587">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-588">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-588">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-589">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-589">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-590">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-590">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-591">재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-591">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-592">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-592">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="a8c5c-593">예약을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-593">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="a8c5c-594">메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-594">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-595">이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-595">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-596">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-596">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="a8c5c-597">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-597">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-598">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-598">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-599">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-599">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-600">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-600">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-601">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-601">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-602">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-602">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="a8c5c-603">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-603">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="a8c5c-604">새 기준 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-604">The new base sequence number.</span></span> <span data-ttu-id="a8c5c-605">지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-605">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="a8c5c-606">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-606">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="a8c5c-607">파생 클래스에서 재정의되는 경우 예약을 사용하여 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-607">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="a8c5c-608">쓴 재시작 영역의 시퀀스 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-608">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8c5c-609">재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-609">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-610">복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-610">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="a8c5c-611">이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-611">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="a8c5c-612">재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-612">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="a8c5c-613">재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-613">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="a8c5c-614">재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-614">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="a8c5c-615">예약을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-615">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="a8c5c-616">메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-616">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="a8c5c-617">이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-617">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="a8c5c-618">새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-618">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="a8c5c-619">레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-619">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="a8c5c-620">비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8c5c-620">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8c5c-621">하나 이상의 인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-621">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a8c5c-622">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-622">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="a8c5c-623">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-623">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a8c5c-624">시퀀스가 삭제된 후 메서드가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="a8c5c-624">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>