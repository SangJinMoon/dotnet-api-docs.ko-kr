<Type Name="FilteredCatalog" FullName="System.ComponentModel.Composition.Hosting.FilteredCatalog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="687d83268e20921844b2fb7ee50f58d05a9c4259" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36644518" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog, System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilteredCatalog extends System.ComponentModel.Composition.Primitives.ComposablePartCatalog implements class System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Class FilteredCatalog&#xA;Inherits ComposablePartCatalog&#xA;Implements INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilteredCatalog : System::ComponentModel::Composition::Primitives::ComposablePartCatalog, System::ComponentModel::Composition::Hosting::INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="F#" Value="type FilteredCatalog = class&#xA;    inherit ComposablePartCatalog&#xA;    interface INotifyComposablePartCatalogChanged" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.Primitives.ComposablePartCatalog</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="ade36-101">필터 함수가 적용된 후의 카탈로그를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ade36-101">Represents a catalog after a filter function is applied to it.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="ade36-102">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-102">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ade36-103">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-103">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ade36-104">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-104">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ade36-105">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-105">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ade36-106">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-106">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilteredCatalog (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, filter As Func(Of ComposablePartDefinition, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilteredCatalog(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, Func&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^, bool&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog * Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="new System.ComponentModel.Composition.Hosting.FilteredCatalog (catalog, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="filter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="catalog">
          <span data-ttu-id="ade36-107">내부 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-107">The underlying catalog.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="ade36-108">부분을 필터링하는 함수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-108">The function to filter parts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-109">지정된 기본 카탈로그 및 필터를 사용하여 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-109">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> class with the specified underlying catalog and filter.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As EventHandler(Of ComposablePartCatalogChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^&gt; ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " Usage="member this.Changed : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ade36-110">기본 카탈로그가 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-110">Occurs when the underlying catalog has changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changing" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changing As EventHandler(Of ComposablePartCatalogChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^&gt; ^ Changing;" />
      <MemberSignature Language="F#" Value="member this.Changing : EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " Usage="member this.Changing : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ade36-111">기본 카탈로그가 변경될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-111">Occurs when the underlying catalog is changing.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog Complement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Composition.Hosting.FilteredCatalog Complement" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Complement As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Composition::Hosting::FilteredCatalog ^ Complement { System::ComponentModel::Composition::Hosting::FilteredCatalog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Complement : System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ade36-112">기본 카탈로그에 있지만 필터 함수로 필터링된 부분을 포함하는 카탈로그를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-112">Gets a catalog that contains parts that are present in the underlying catalog but that were filtered out by the filter function.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ade36-113">이 카탈로그의 보수를 포함하는 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-113">A catalog that contains the complement of this catalog.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="filteredCatalog.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ade36-114">관리되는 리소스와 관리되지 않는 리소스를 해제하려면 <see langword="true" />이고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-114">
              <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-115">
            <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 클래스의 현재 인스턴스에서 사용하는 관리되는 리소스와 관리되지 않는 리소스를 해제하기 위해 <see langword="Dispose()" /> 및 <see langword="Finalize()" /> 메서드에 의해 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-115">Called by the <see langword="Dispose()" /> and <see langword="Finalize()" /> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ade36-116">공개적으로만이 메서드는 `Dispose()` 및 `Finalize()` 방식의이 메서드를 직접 호출 하지 않습니다. 부울 매개 변수 삭제 패턴을 구현 하는 경우는 `Dispose(Boolean)` 메서드를 다음과 같이 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-116">This method is called only by the public `Dispose()` and `Finalize()` methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the `Dispose(Boolean)` method should be used as follows:</span></span>  
  
-   <span data-ttu-id="ade36-117">`Dispose()` 현재 개체의 메서드를 호출 해야 `Dispose(Boolean)` 로 설정 부울 매개 변수와 함께 `true` 와 관리 되지 않는 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-117">The `Dispose()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `true` to release both managed and unmanaged resources.</span></span>  
  
-   <span data-ttu-id="ade36-118">`Finalize()` 현재 개체의 메서드를 호출 해야 `Dispose(Boolean)` 로 설정 부울 매개 변수와 함께 `false` 만 관리 되지 않는 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="ade36-118">The `Finalize()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `false` to release only unmanaged resources.</span></span>  
  
 <span data-ttu-id="ade36-119">자세한 내용은 다음을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ade36-119">For more information, see .</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumerator () As IEnumerator(Of ComposablePartDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerator&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt;" Usage="filteredCatalog.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ade36-120">카탈로그를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-120">Returns an enumerator that iterates through the catalog.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-121">카탈로그를 반복하는 데 사용할 수 있는 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-121">An enumerator that can be used to iterate through the catalog.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition, class System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetExports (definition As ImportDefinition) As IEnumerable(Of Tuple(Of ComposablePartDefinition, ExportDefinition))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;Tuple&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^, System::ComponentModel::Composition::Primitives::ExportDefinition ^&gt; ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="override this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition * System.ComponentModel.Composition.Primitives.ExportDefinition&gt;" Usage="filteredCatalog.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">
          <span data-ttu-id="ade36-122">일치시킬 가져오기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-122">The import to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-123">이 카탈로그에서 지정된 가져오기와 일치하는 내보내기 파트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-123">Gets the exported parts from this catalog that match the specified import.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-124">일치하는 부분의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-124">A collection of matching parts.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IncludeDependencies">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ade36-125">이 카탈로그의 모든 파트 및 해당 종속성을 모두 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-125">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependencies.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IncludeDependencies">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependencies () As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependencies();" />
      <MemberSignature Language="F#" Value="member this.IncludeDependencies : unit -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ade36-126">이 카탈로그의 모든 파트 및 해당 종속성을 모두 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-126">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependencies.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-127">새 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-127">The new catalog.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDependencies">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies (Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,bool&gt; importFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies(class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; importFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependencies (importFilter As Func(Of ImportDefinition, Boolean)) As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependencies(Func&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^, bool&gt; ^ importFilter);" />
      <MemberSignature Language="F#" Value="member this.IncludeDependencies : Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependencies importFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importFilter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="importFilter">
          <span data-ttu-id="ade36-128">가져오기에 대한 필터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-128">The filter for imports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-129">이 카탈로그의 모든 부분과 지정된 필터와 일치하는 가져오기를 통해 도달할 수 있는 모든 종속 파일을 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-129">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all dependencies that can be reached through imports that match the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-130">새 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-130">The new catalog.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IncludeDependents">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ade36-131">이 카탈로그의 모든 파트 및 해당 종속 파일을 모두 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-131">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependents.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IncludeDependents">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependents () As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependents();" />
      <MemberSignature Language="F#" Value="member this.IncludeDependents : unit -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ade36-132">이 카탈로그의 모든 파트 및 해당 종속 파일을 모두 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-132">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependents.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-133">새 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-133">The new catalog.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDependents">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents (Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,bool&gt; importFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents(class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; importFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependents (importFilter As Func(Of ImportDefinition, Boolean)) As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependents(Func&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^, bool&gt; ^ importFilter);" />
      <MemberSignature Language="F#" Value="member this.IncludeDependents : Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependents importFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importFilter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="importFilter">
          <span data-ttu-id="ade36-134">가져오기에 대한 필터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-134">The filter for imports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-135">이 카탈로그의 모든 부분과 지정된 필터와 일치하는 가져오기를 통해 도달할 수 있는 모든 종속 파일을 포함하는 새 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-135">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all dependents that can be reached through imports that match the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ade36-136">새 카탈로그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-136">The new catalog.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChanged (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChanged(class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChanged (e As ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChanged(System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChanged : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit&#xA;override this.OnChanged : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit" Usage="filteredCatalog.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ade36-137">이벤트에 대한 데이터를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-137">Provides data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-138">
            <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-138">Raises the <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnChanging (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChanging(class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChanging (e As ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChanging(System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChanging : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit&#xA;override this.OnChanging : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit" Usage="filteredCatalog.OnChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="ade36-139">이벤트에 대한 데이터를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-139">Provides data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ade36-140">
            <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ade36-140">Raises the <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>