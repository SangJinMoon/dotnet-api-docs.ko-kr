<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPersistComponentSettings.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac536cdd14653e8d239fcffab82331de0392616795f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36cdd14653e8d239fcffab82331de0392616795f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Configuration.IPersistComponentSettings">
          <source>Defines standard functionality for controls or libraries that store and retrieve application settings.</source>
          <target state="translated">응용 프로그램 설정을 저장하고 검색하는 컨트롤이나 라이브러리의 표준 기능을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.IPersistComponentSettings">
          <source>Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, and then add special properties to this class.</source>
          <target state="translated">파생 되는 설정 래퍼 클래스를 만들어 응용 프로그램에 응용 프로그램 설정 지원을 추가할 수는 일반적으로 <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, 한 다음이 클래스에 특수 한 속성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.IPersistComponentSettings">
          <source>However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</source>
          <target state="translated">그러나이 방법은 충분히 캡슐화 하지 못합니다 컨트롤에 대 한 응용 프로그램 설정 세부 정보에서 해당 컨테이너 실드 되어 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.IPersistComponentSettings">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph> interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph> 인터페이스 컨트롤, 구성 요소, 또는 라이브러리 모듈에 응용 프로그램 설정 상태 변경 요청을 통신 하기 위한 표준 인터페이스와 응용 프로그램을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Configuration.IPersistComponentSettings">
          <source>Design-time tools also depend on this interface to properly manage controls and components.</source>
          <target state="translated">또한 디자인 타임 도구 컨트롤 및 구성 요소를 제대로 관리 하려면이 인터페이스에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
          <source>Reads the control's application settings into their corresponding properties and updates the control's state.</source>
          <target state="translated">컨트롤의 응용 프로그램 설정을 해당 속성으로 읽어 들이고 컨트롤의 상태를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
          <source>In general, the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> method performs two essential operations:</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> 메서드 두 가지 필수 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
          <source>It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> methods.</source>
          <target state="translated">호출 하 여 해당 응용 프로그램 설정 속성의 값을 일반적으로 새로 고치려면 컨트롤에 포함 된 각 응용 프로그램 설정 인스턴스 하면 자신의 <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
          <source>As required, it updates those general properties that depend on these reloaded settings properties.</source>
          <target state="translated">필요에 따라 속성을 이러한 메서드는 다시 로드 설정에 종속 되는 일반 속성을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
          <source>For example, if the settings class contained a <ph id="ph1">`location`</ph> settings property, <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> should ensure that the control's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property is updated to reflect this reloaded setting.</source>
          <target state="translated">예를 들어 설정 클래스에 포함 된 경우는 <ph id="ph1">`location`</ph> 설정 속성 <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> 컨트롤의 확인 해야 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 속성이이 다시 로드 된 설정을 반영 하도록 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
          <source>Resets the control's application settings properties to their default values.</source>
          <target state="translated">컨트롤의 응용 프로그램 설정 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A&gt;</ph> method typically calls the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> method on each instance of an application settings class it contains.</source>
          <target state="translated">구현에서 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A&gt;</ph> 일반적으로 메서드를 호출는 <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> 포함 된 응용 프로그램 설정 클래스의 각 인스턴스에서 메서드.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
          <source>Persists the control's application settings properties.</source>
          <target state="translated">컨트롤의 응용 프로그램 설정 속성을 유지합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> method writes the values of the control's application settings properties to the associated data store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> 메서드는 연결 된 데이터 저장소를 컨트롤의 응용 프로그램 설정 속성의 값을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
          <source>The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <ph id="ph1">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.</source>
          <target state="translated">메서드를 사용 하 여 데이터 저장소와 serialization 기술을 통해 각 설정 클래스와 관련 된 설정 공급자에 의해 결정 됩니다는 <ph id="ph1">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
          <source>You can override the choice of the settings provider by using the <ph id="ph1">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> interface.</source>
          <target state="translated">다양 한 설정 공급자를 사용 하 여 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
          <source>If the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the control should call <ph id="ph3">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> in its own <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method so that the control's configuration data is stored automatically before the application ends.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>, 컨트롤 호출 해야 <ph id="ph3">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> 자체에 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> 메서드는 응용 프로그램 종료 되기 전에 컨트롤의 구성 데이터를 자동으로 저장 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</source>
          <target state="translated">컨트롤이 응용 프로그램 설정 속성을 자동으로 유지할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control should automatically persist its state; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 상태를 자동으로 유지하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>If a control contains configuration data, it will typically persist this data in response to an explicit call to the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> method or sometimes implicitly when the control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method is invoked.</source>
          <target state="translated">컨트롤 구성 데이터를 포함 하는 경우 일반적으로 계속 유지 되며 명시적으로 호출에 대 한 응답에서이 데이터는 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> 메서드 또는 경우에 따라 암시적으로 때 컨트롤의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property determines whether a control automatically persists its configuration data when it is disposed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> 속성 컨트롤 삭제 될 때 자동으로 구성 데이터를 유지 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>The default value of <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> depends on the implementation of the control.</source>
          <target state="translated">기본값 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> 컨트롤의 구현에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property is.</source>
          <target state="translated">컨트롤에 대 한 설명서는 응용 프로그램 설정을 사용 하 여 여부, 유지 되는 데이터 및 기본 값에 관계를 나타냅니다는 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> 속성은 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SaveSettings">
          <source>The following code example shows the proper way for a control to check the value of the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property before it attempts to automatically persist its configuration data.</source>
          <target state="translated">다음 코드 예제에서는 값을 확인 하는 컨트롤에 대 한 적절 한 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> 자동으로 구성 데이터를 유지 하려고 시도 하기 전에 속성입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>Gets or sets the value of the application settings key for the current instance of the control.</source>
          <target state="translated">컨트롤의 현재 인스턴스에 대한 응용 프로그램 설정 키의 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the settings key for the current instance of the control.</source>
          <target state="translated">컨트롤의 현재 인스턴스에 대한 설정 키를 포함하는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>Use the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> 동일한 래퍼 클래스의 여러 인스턴스가 있을 경우 응용 프로그램 설정 속성의 그룹을 구분 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</source>
          <target state="translated">예를 들어 컨트롤에는 일반적으로 동일한 응용 프로그램에서 동일한 컨트롤의 여러 인스턴스를 배치 하는 다음 연결 된 래퍼 클래스를 포함 하는 경우 래퍼 클래스의 인스턴스가 여러 개에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</source>
          <target state="translated">설정 키가 구성 데이터 인스턴스 단위로;에서 서로 다른 경우에 필요 예를 들어 동적으로 위치로 지정 된 컨트롤의 위치입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>The following general rules apply to the use of <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph>:</source>
          <target state="translated">사용에는 다음과 같은 일반적인 규칙이 적용 <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>A control, like any class, may contain zero or more application settings classes, derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.</source>
          <target state="translated">모든 클래스와 비슷한 컨트롤에는 0 개 이상의 응용 프로그램 설정 클래스 포함 될 수 있습니다에서 파생 된 <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>Each settings class contains its own <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType&gt;</ph> property, which helps disambiguate multiple instances of that class.</source>
          <target state="translated">각 설정 클래스 자체 포함 <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType&gt;</ph> 속성에는 데 도움이 되는 클래스의 여러 인스턴스를 구분 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>A control should separate its per-instance data and its shared data into different settings classes.</source>
          <target state="translated">다른 설정 클래스로 인스턴스 당 데이터와 공유 데이터 컨트롤이 두십시오.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>For a control with any per-instance configuration data, the <ph id="ph1">`get`</ph> accessor of the <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> property should default to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> of the control.</source>
          <target state="translated">인스턴스별 구성 데이터를 가진 컨트롤에 대 한는 <ph id="ph1">`get`</ph> 의 접근자는 <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> 속성의 기본값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>In most cases the name of the control will be unique within an application.</source>
          <target state="translated">대부분의 경우에서 컨트롤의 이름을 응용 프로그램 내에서 고유 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>If the control contains only shared configuration data, <ph id="ph1">`get`</ph> should default to <ph id="ph2">`null`</ph>.</source>
          <target state="translated">컨트롤에 구성 데이터를 공유만 있으면 <ph id="ph1">`get`</ph> 의 기본값은 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>The <ph id="ph1">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</source>
          <target state="translated"><ph id="ph1">`set`</ph> -인스턴스 및 공유 구성 데이터를 포함 하는 설정 클래스를 구분 하려면이 속성에 대 한 접근자를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>For each settings class containing per-instance data, <ph id="ph1">`set`</ph> should just pass-through to the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType&gt;</ph> property of the settings class.</source>
          <target state="translated">인스턴스 데이터를 포함 하는 각 설정 클래스에 대 한 <ph id="ph1">`set`</ph> 을 단순히 통과 해야는 <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType&gt;</ph> 설정 클래스의 속성입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Configuration.IPersistComponentSettings.SettingsKey">
          <source>For settings classes containing shared data, <ph id="ph1">`set`</ph> should perform no action for that settings class.</source>
          <target state="translated">공유 데이터를 포함 하는 설정 클래스에 대 한 <ph id="ph1">`set`</ph> 해당 설정 클래스에 대 한 작업을 수행 해야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>