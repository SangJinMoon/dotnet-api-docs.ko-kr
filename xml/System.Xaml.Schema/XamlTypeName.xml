<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeName.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52d420d4d7b160647a411ba1d5a80ff33d17c9e54.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d420d4d7b160647a411ba1d5a80ff33d17c9e54</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Provides a means to specify a XAML type in terms of name and namespace.</source>
          <target state="translated">이름 및 네임스페이스로 XAML 형식을 지정하기 위한 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeName">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type information class in the XAML type system, whereas <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> is more of a data structure that provides different ways of specifying that type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> XAML 형식 시스템에서 유형 정보 클래스는 반면 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> 에 해당 형식을 지정 하는 다른 방법을 제공 하는 데이터 구조를 더 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeName">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> also provides static helper methods for generating a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> by resolving an existing type identifier in a XAML namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> 또한 생성 하기 위한 정적 도우미 메서드를 제공는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph> XAML 네임 스페이스에서 기존 형식 식별자를 확인 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source>An existing <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on an existing <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 기반으로 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>The XAML namespace that contains name.</source>
          <target state="translated">name이 들어 있는 XAML 네임스페이스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>The name of the type to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 만들 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on name and namespace strings.</source>
          <target state="translated">이름과 네임스페이스 문자열을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>The XAML namespace that contains <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept>이 들어 있는 XAML 네임스페이스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>The name of the type to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 만들 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>An array of type arguments, each of which must be a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">각각 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 나타내는 형식 인수의 배열입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> class, based on name and namespace strings as well as an array of type arguments.</source>
          <target state="translated">이름과 네임스페이스 문자열 및 형식 인수 배열을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
          <source>This is the signature to use if you are specifying a generic type and type arguments for that type.</source>
          <target state="translated">이 제네릭 형식 및 해당 형식에 대 한 형식 인수를 지정 하는 경우 사용할 서명입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>Gets the name used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 생성하는 데 사용된 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>The name of the type.</source>
          <target state="translated">형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Name">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Name%2A&gt;</ph> is <ph id="ph4">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 이 생성 하는 데 사용한 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, 값 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Name%2A&gt;</ph> 은 <ph id="ph4">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>Gets the XAML namespace identifier used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 생성하는 데 사용된 XAML 네임스페이스 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>The XAML namespace identifier.</source>
          <target state="translated">XAML 네임스페이스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.Namespace">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace%2A&gt;</ph> is <ph id="ph4">`xamlType.GetXamlNamespaces()[0]`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 이 생성 하는 데 사용한 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, 값 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace%2A&gt;</ph> 은 <ph id="ph4">`xamlType.GetXamlNamespaces()[0]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The type name to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 만들 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>를 구현하는 개체 또는 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">만든 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>String cannot be parsed.</source>
          <target state="translated">문자열을 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>A string that contains multiple types.</source>
          <target state="translated">여러 형식이 들어 있는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>를 구현하는 개체 또는 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">만든 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>The following is quasi-BNF for the nested type name or multiple type name parsing enabled by this method:</source>
          <target state="translated">다음은 중첩 된 형식 이름 또는 여러 개의 형식 이름을 구문 분석이 메서드에서 사용 하는 의사 BNF입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
          <source>String cannot be parsed.</source>
          <target state="translated">문자열을 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeName">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>의 값을 해당하는 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>의 값을 해당하는 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>The equivalent string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> .</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>의 해당하는 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>This signature is equivalent to calling <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</ph>, passing <ph id="ph2">`null`</ph> for <ph id="ph3">`prefixLookup`</ph>.</source>
          <target state="translated">이 서명을 하는 것 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</ph>전달 <ph id="ph2">`null`</ph> 에 대 한 <ph id="ph3">`prefixLookup`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeName.ToString">
          <source>s</source>
          <target state="translated">s</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">접두사 조회를 위한 서비스 참조입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>A prefixed usage string.</source>
          <target state="translated">접두사가 있는 사용 문자열입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.Schema.XamlTypeName.Name" /&gt;</ph>가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
          <source>Could not look up the prefix.</source>
          <target state="translated">접두사를 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A list of types.</source>
          <target state="translated">형식 목록입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">접두사 조회를 위한 서비스 참조입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>Converts the value of this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 여러 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source>A concatenated string of all type results.</source>
          <target state="translated">모든 형식 결과의 연결된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
          <source><ph id="ph1">&lt;paramref name="prefixLookup" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeNameList" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="prefixLookup" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="typeNameList" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>The type name to create a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 만들 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>를 구현하는 개체 또는 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>Out parameter that contains the created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> if the return value is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">반환 값이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이면 만든 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 포함하는 out 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parse was successful and <ph id="ph2">&lt;paramref name="result" /&gt;</ph> contains a useful value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">구문 분석 작업에 성공하고 <ph id="ph2">&lt;paramref name="result" /&gt;</ph>에 유용한 값이 포함되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
          <source><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>A string that contains multiple types.</source>
          <target state="translated">여러 형식이 들어 있는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>An object or service provider that implements <ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlNamespaceResolver" /&gt;</ph>를 구현하는 개체 또는 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>Out parameter that contains the created <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> if the return value is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">반환 값이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이면 만든 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 포함하는 out 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph> 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parse was successful and <ph id="ph2">&lt;paramref name="result" /&gt;</ph> contains a useful value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">구문 분석 작업에 성공하고 <ph id="ph2">&lt;paramref name="result" /&gt;</ph>에 유용한 값이 포함되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
          <source><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> or <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeNameList" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="namespaceResolver" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>Gets the type arguments used to construct this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeName" /&gt;</ph>을 생성하는 데 사용되는 형식 인수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>The type arguments, if any.</source>
          <target state="translated">형식 인수입니다(있을 경우).</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>May be null.</source>
          <target state="translated">null일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> was used to construct this <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, the value of <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.TypeArguments%2A&gt;</ph> is formed from <ph id="ph4">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 이 생성 하는 데 사용한 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeName&gt;</ph>, 값 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeName.TypeArguments%2A&gt;</ph> 형식에서 파생 <ph id="ph4">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>