<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeInvoker.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5504f5574033cb4de7a3c6a42e6208306d4dd86e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">504f5574033cb4de7a3c6a42e6208306d4dd86e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</source>
          <target state="translated">리플렉션 및 생성자 외의 다른 기술을 통해 XAML 형식의 인스턴스를 생성할 수 있는 확장 지점을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">목적은 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> extensible XAML 형식 시스템, 스키마 및 CLR 특성을 통해 리플렉션 정보 등의 CLR 기능에 완벽 하 게 의존 하지 않는 런타임에 작업을 사용 하도록 설정 하는 것 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>등입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">서브 클래스 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 같은 XAML 스키마 클래스의 다른 생성자에 대 한 입력된 매개 변수로 사용 됩니다 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">서브 클래스를 만들 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 전달는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 를 통해 기본 생성자입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">정의한는 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 생성자에 대 한도 제공 해야에 대 한 재정의 이상 중 일부는 <ph id="ph2">`Lookup`</ph> 방식의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 기본 구현이 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">기본 구현에서는 XAML 스키마 형식의 기본 구현에 비슷한 모델을 따르는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: 인스턴스화, 값 및 CLR 특성을 사용 하는 등, 조회에 대 한 CLR 형식 시스템을 사용 하는 <ph id="ph3">&lt;xref:System.Type&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>등입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides methods for basic instantiation (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) and methods that are relevant for types where the <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection, dictionary or array (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 기본 인스턴스화에 대 한 메서드를 제공 (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) 및 형식에 대 한 관련 되는 메서드와 위치는 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 컬렉션, 사전 또는 배열 나타냅니다 (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">기본 구현에서는 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">에 대 한 값을 제공 하려면이 생성자는 내부적으로 호출 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> as base.</source>
          <target state="translated">에 대 한는 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 하위 클래스 중 하나를 사용 하는 것으로 예상는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> 생성에 대 한 서명 하거나 호출 하는 재정의 제공 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> 기준으로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is immutable.</source>
          <target state="translated">제공 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 기본은 구현 패턴 where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 는 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> value for the specific XAML type relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>와 관련된 특정 XAML 형식에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">제공된 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>을 기반으로 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">이 생성자를 기반으로 내부적으로 호출 됩니다는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 여기서는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 생성에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">`type`</ph> provided here is relevant to all other method calls for <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`type`</ph> 에 대 한 다른 모든 메서드 호출 여기에 관련이 제공 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>를 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>으로 지정된 형식의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The item to add.</source>
          <target state="translated">추가할 항목입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Adds the provided item to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">제공된 항목을 이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>와 관련된 형식의 인스턴스에 추가합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a collection.</source>
          <target state="translated">에이 메서드를 호출 해야는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 컬렉션을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">알 수 없는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 기준으로 하는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 이 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> 또는 <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection.</source>
          <target state="translated">관련 형식이 컬렉션이 아닌 경우 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 이 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대한 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>을 반환하는 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">기본 구현 내부 도우미에 대 한 호출에 포함 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 도우미는 항상 사례에 대 한 throw 여기서는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph5">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">내부적으로 기본 구현 호출 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, 결과 경우 throw <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">기본 구현을 사용 하지 않는 반드시 자체 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is attempted.</source>
          <target state="translated">먼저, 캐스팅 <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 를 <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">성공 하면이에 대 한 호출, <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> 이루어집니다 메서드가 반환 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> 호출할 내부 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드를 호출에서 가져온 대로 <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 이 <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서 예외가 발생 하지 이면이 수준에서 <ph id="ph1">&lt;paramref name="item" /&gt;</ph> 은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">여전히 수 있는 내부 <ph id="ph1">&lt;see langword="Add" /&gt;</ph> 메서드로 호출할 때 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">다른 런타임 예외는 가능한 경우 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> 유효한 결과 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>를 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>으로 지정된 형식의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Dictionary key for the item to add.</source>
          <target state="translated">추가할 항목에 대한 사전 키입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The item value to add.</source>
          <target state="translated">추가할 항목 값입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Adds the provided key and item value to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">제공된 키 및 항목 값을 이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>와 관련된 형식의 인스턴스에 추가합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a dictionary.</source>
          <target state="translated">에이 메서드를 호출 해야는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 사전을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">알 수 없는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 기준으로 하는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 이 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> 또는 <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a dictionary.</source>
          <target state="translated">관련 형식이 사전이 아닌 경우 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 이 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대한 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>을 반환하는 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">기본 구현 내부 도우미에 대 한 호출에 포함 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 도우미는 항상 사례에 대 한 throw 여기서는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph5">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">내부적으로 기본 구현 호출 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, 결과 경우 throw <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">기본 구현을 사용 하지 않는 반드시 자체 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is attempted.</source>
          <target state="translated">먼저, 캐스팅 <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 를 <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">성공 하면이에 대 한 호출, <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> 이루어집니다 메서드가 반환 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> 호출할 내부 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드를 호출에서 가져온 대로 <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> 이 <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> or <ph id="ph2">&lt;paramref name="key" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서 예외가 발생 하지 이면이 수준에서 <ph id="ph1">&lt;paramref name="item" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="key" /&gt;</ph> 는 <ph id="ph3">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">여전히 수 있는 내부 <ph id="ph1">&lt;see langword="Add" /&gt;</ph> 메서드로 호출할 때 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">다른 런타임 예외는 가능한 경우 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> 유효한 결과 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>An array of objects that supply the <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> for the instance.</source>
          <target state="translated">인스턴스에 대해 <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph>를 제공하는 개체 배열입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for types that do not require or use <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>를 필요로 하지 않거나 사용하지 않는 형식의 경우 <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Creates an object instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대해 생성자가 시작한 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>을 기반으로 개체 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The created instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대해 생성자가 시작한 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>을 기반으로 만들어진 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Could not resolve a constructor.</source>
          <target state="translated">생성자를 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">기본 구현 내부 도우미에 대 한 호출에 포함 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 도우미는 항상 사례에 대 한 throw 여기서는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph5">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the item type that is used by the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드가 사용하는 항목 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Returns the relevant <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method for a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is relevant to a collection or dictionary.</source>
          <target state="translated">컬렉션 또는 사전과 관련된 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 관련 <ph id="ph1">&lt;see langword="Add" /&gt;</ph> 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> information for the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, or null.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드에 대한 CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 정보이거나 null입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>This method should return <ph id="ph1">`null`</ph> for cases where the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is not a writeable collection or dictionary.</source>
          <target state="translated">이 메서드에서 반환 해야 <ph id="ph1">`null`</ph> 경우 여기서는 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 이 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 쓰기 가능한 컬렉션 또는 사전 아닙니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Specifically, should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">특히 반환 해야 <ph id="ph1">`null`</ph> 경우 여기서 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> 반환 <ph id="ph3">`None`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">완전히 신뢰할 수 있는 XAML 형식 시스템을 액세스 하지 않는 경우이 메서드는 보고서 false로 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 호출자에 게 정보입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The base implementation returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 사례에 대 한 여기서는 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph6">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">또한 반환 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 경우 <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> 은 <ph id="ph3">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>XAML collections potentially have more than one <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method, because a XAML collection can potentially support more than one content type (see <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, or see <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> for information about one implementation of this concept in WPF).</source>
          <target state="translated">XAML 컬렉션 잠재적으로 두 개 이상을 가질 <ph id="ph1">&lt;see langword="Add" /&gt;</ph> 메서드를 XAML 컬렉션에 둘 이상의 내용 유형을 지원 잠재적으로 하기 때문에 (참조 <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, 참조 또는 <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> 이 개념 WPF에의 한 구현에 대 한 정보에 대 한).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</source>
          <target state="translated">기본 구현은 내부 논리를 사용 하 여 서명 및 제공 된 형식에 따라 가장 일치 하는 반환 <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Returns an object representing a method that can enumerate over items.</source>
          <target state="translated">항목을 열거할 수 있는 메서드를 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for an enumerator method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">열거자 메서드에 대한 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>이거나 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">반환 해야 <ph id="ph1">`null`</ph> 경우 여기서 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> 반환 <ph id="ph3">`None`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">완전히 신뢰할 수 있는 XAML 형식 시스템을 액세스 하지 않는 경우이 메서드는 보고서 false로 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 호출자에 게 정보입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>The base implementation calls an internal helper method.</source>
          <target state="translated">기본 구현 내부 도우미 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>That helper returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 도우미 반환 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 사례에 대 한 여기서는 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph6">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> returns <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</source>
          <target state="translated">또한 반환 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 사례에 대 한 여기서 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> 반환 <ph id="ph3">&lt;see langword="None" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>를 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>으로 지정된 형식의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object representing the set of items.</source>
          <target state="translated">항목 집합을 나타내는 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 개체이거나 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">알 수 없는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 기준으로 하는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대해 이 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt> 또는 <ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection or dictionary.</source>
          <target state="translated">관련 형식이 컬렉션 또는 사전이 아닌 경우 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 이 메서드를 호출했습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">기본 구현 내부 도우미에 대 한 호출에 포함 <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 도우미는 항상 사례에 대 한 throw 여기서는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 알 수에 따라 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>는 경우는 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> 의 <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 은 <ph id="ph5">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementation.</source>
          <target state="translated">기본 구현을 사용 하지 않는 반드시 자체 <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> is attempted.</source>
          <target state="translated">먼저, 캐스팅 <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> 를 <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> is made and the method returns that return value.</source>
          <target state="translated">성공 하면이에 대 한 호출, <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> 이루어집니다 값을 반환 하는 메서드에 반환 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> 호출할 내부 <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> 메서드를 호출에서 가져온 대로 <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> 이 <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into an implemented <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>가 구현된 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>을 호출할 때 사용할 처리기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">이 경우를 처리하는 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">이벤트 처리기는 기반 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 의 제약을 받는 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">호출 반환 되는 값은 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> 의 동작은 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 하는 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">반환 값은 <ph id="ph1">`null`</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 알 수를 기반으로 하는 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into a CLR-implemented <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>가 CLR 구현된 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>를 호출할 때 사용할 처리기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">이 경우를 처리하는 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">이벤트 처리기는 기반 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 의 제약을 받는 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">호출 반환 되는 값은 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> 의 동작은 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 하는 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">반환 값은 <ph id="ph1">`null`</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 알 수를 기반으로 하는 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">알 수 없으며 완전히 구현되지 않은 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>를 나타내는 정적 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">알 수 없으며 완전히 구현되지 않은 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>를 나타내는 정적 값입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">이 값을 제공 하는 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> System.Xaml의 매개 변수 정의 API 호출된 된 코드가 예외를 throw 하면 일반적으로 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>