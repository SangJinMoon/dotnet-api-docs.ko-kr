<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd266704ee3fe75b84f3b0e3aa578f64c1e8009d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d0066-101">리플렉션 및 생성자 외의 다른 기술을 통해 XAML 형식의 인스턴스를 생성할 수 있는 확장 지점을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d0066-101">Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-102">목적은 <xref:System.Xaml.Schema.XamlTypeInvoker> extensible XAML 형식 시스템, 스키마 및 CLR 특성을 통해 리플렉션 정보 등의 CLR 기능에 완벽 하 게 의존 하지 않는 런타임에 작업을 사용 하도록 설정 하는 것 <xref:System.Type> 및 <xref:System.Reflection.MemberInfo>등입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-102">The purpose of <xref:System.Xaml.Schema.XamlTypeInvoker> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span> <span data-ttu-id="d0066-103">서브 클래스 <xref:System.Xaml.Schema.XamlTypeInvoker> 같은 XAML 스키마 클래스의 다른 생성자에 대 한 입력된 매개 변수로 사용 됩니다 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-103">Subclasses of <xref:System.Xaml.Schema.XamlTypeInvoker> are used as input parameters for the alternate constructors of XAML schema classes such as <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="d0066-104">서브 클래스를 만들 <xref:System.Xaml.XamlType> 전달는 <xref:System.Xaml.Schema.XamlTypeInvoker> 를 통해 기본 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-104">You subclass <xref:System.Xaml.XamlType> and pass the <xref:System.Xaml.Schema.XamlTypeInvoker> through to the base constructor.</span></span> <span data-ttu-id="d0066-105">정의한는 <xref:System.Xaml.Schema.XamlTypeInvoker> 생성자에 대 한도 제공 해야에 대 한 재정의 이상 중 일부는 `Lookup` 방식의 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-105">Along with defining a <xref:System.Xaml.Schema.XamlTypeInvoker> for the constructor, you must also provide overrides for at least some of the `Lookup` methods of <xref:System.Xaml.XamlType>.</span></span>  
  
 <span data-ttu-id="d0066-106"><xref:System.Xaml.Schema.XamlTypeInvoker> 기본 구현이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-106"><xref:System.Xaml.Schema.XamlTypeInvoker> has a default implementation.</span></span> <span data-ttu-id="d0066-107">기본 구현에서는 XAML 스키마 형식의 기본 구현에 비슷한 모델을 따르는 <xref:System.Xaml.XamlType> 및 <xref:System.Xaml.XamlMember>: 인스턴스화, 값 및 CLR 특성을 사용 하는 등, 조회에 대 한 CLR 형식 시스템을 사용 하는 <xref:System.Type> 및 <xref:System.Reflection.MemberInfo>등입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-107">The default implementation follows a similar model to the default implementation of XAML schema types <xref:System.Xaml.XamlType> and <xref:System.Xaml.XamlMember>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span>  
  
 <span data-ttu-id="d0066-108"><xref:System.Xaml.Schema.XamlTypeInvoker> 기본 인스턴스화에 대 한 메서드를 제공 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 및 형식에 대 한 관련 되는 메서드와 위치는 <xref:System.Xaml.XamlType> 컬렉션, 사전 또는 배열 나타냅니다 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span><span class="sxs-lookup"><span data-stu-id="d0066-108"><xref:System.Xaml.Schema.XamlTypeInvoker> provides methods for basic instantiation (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) and methods that are relevant for types where the <xref:System.Xaml.XamlType> represents a collection, dictionary or array (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d0066-109">
            <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-109">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d0066-110">
            <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-110">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-111">기본 구현에서는 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-111">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="d0066-112">에 대 한 값을 제공 하려면이 생성자는 내부적으로 호출 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-112">This constructor is invoked internally to provide a value for <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</span></span> <span data-ttu-id="d0066-113">에 대 한는 <xref:System.Xaml.Schema.XamlTypeInvoker> 하위 클래스 중 하나를 사용 하는 것으로 예상는 <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 생성에 대 한 서명 하거나 호출 하는 재정의 제공 <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-113">For a <xref:System.Xaml.Schema.XamlTypeInvoker> subclass, it is expected that you either use the <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> signature for construction or provide an override that calls <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> as base.</span></span> <span data-ttu-id="d0066-114">제공 하는 <xref:System.Xaml.XamlType> 기본은 구현 패턴 where <xref:System.Xaml.Schema.XamlTypeInvoker> 는 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-114">Providing the <xref:System.Xaml.XamlType> implements a default pattern where <xref:System.Xaml.Schema.XamlTypeInvoker> is immutable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d0066-115">이 <see cref="T:System.Xaml.XamlType" />와 관련된 특정 XAML 형식에 대한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-115">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-116">제공된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-116">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-117">이 생성자를 기반으로 내부적으로 호출 됩니다는 <xref:System.Xaml.XamlType> 여기서는 <xref:System.Xaml.Schema.XamlTypeInvoker> 생성에 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-117">This constructor is called internally based on the <xref:System.Xaml.XamlType> where the <xref:System.Xaml.Schema.XamlTypeInvoker> is used for construction.</span></span> <span data-ttu-id="d0066-118">`type` 에 대 한 다른 모든 메서드 호출 여기에 관련이 제공 <xref:System.Xaml.Schema.XamlTypeInvoker>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-118">The `type` provided here is relevant to all other method calls for <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0066-119">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-119">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d0066-120">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-120">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="d0066-121">추가할 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-121">The item to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-122">제공된 항목을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-122">Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-123">에이 메서드를 호출 해야는 <xref:System.Xaml.XamlType> 컬렉션을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-123">You should only call this method on a <xref:System.Xaml.XamlType> that represents a collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d0066-124">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-124">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="d0066-125">**-또는-** 관련 형식이 컬렉션이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-125">**-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0066-126">
            <paramref name="instance" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-126">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <span data-ttu-id="d0066-127">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-127">
              <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-128">
            <para>기본 구현 내부 도우미에 대 한 호출에 포함 <c>ThrowIfUnknown</c>합니다. 이 도우미는 항상 사례에 대 한 throw 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다.  내부적으로 기본 구현 호출 <see cref="P:System.Xaml.XamlType.IsCollection" />, 결과 경우 throw <see langword="false" />합니다.  기본 구현을 사용 하지 않는 반드시 자체 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 구현 합니다. 먼저, 캐스팅 <paramref name="instance" /> 를 <see cref="T:System.Collections.IList" /> 시도 됩니다. 성공 하면이에 대 한 호출, <see cref="M:System.Collections.IList.Add(System.Object)" /> 이루어집니다 메서드가 반환 합니다. 기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 호출할 내부 <see langword="Add" /> 메서드를 호출에서 가져온 대로 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 이 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />합니다.  기본 구현에서 예외가 발생 하지 이면이 수준에서 <paramref name="item" /> 은 <see langword="null" />합니다. 여전히 수 있는 내부 <see langword="Add" /> 메서드로 호출할 때 예외가 발생 합니다. 다른 런타임 예외는 가능한 경우 <see cref="P:System.Xaml.XamlType.ItemType" /> 유효한 결과 반환 하지 않습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-128">
              <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsCollection" />, and throws if the result is <see langword="false" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IList" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IList.Add(System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  In the base implementation no exception is raised at this level if <paramref name="item" /> is <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d0066-129">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-129">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="d0066-130">추가할 항목에 대한 사전 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-130">Dictionary key for the item to add.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="d0066-131">추가할 항목 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-131">The item value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-132">제공된 키 및 항목 값을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-132">Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-133">에이 메서드를 호출 해야는 <xref:System.Xaml.XamlType> 사전을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-133">You should only call this method on a <xref:System.Xaml.XamlType> that represents a dictionary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d0066-134">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-134">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="d0066-135">**-또는-** 관련 형식이 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-135">**-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0066-136">
            <paramref name="instance" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-136">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <span data-ttu-id="d0066-137">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-137">
              <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-138">
            <para>기본 구현 내부 도우미에 대 한 호출에 포함 <c>ThrowIfUnknown</c>합니다. 이 도우미는 항상 사례에 대 한 throw 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다.  내부적으로 기본 구현 호출 <see cref="P:System.Xaml.XamlType.IsDictionary" />, 결과 경우 throw <see langword="false" />합니다.  기본 구현을 사용 하지 않는 반드시 자체 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 구현 합니다. 먼저, 캐스팅 <paramref name="instance" /> 를 <see cref="T:System.Collections.IDictionary" /> 시도 됩니다. 성공 하면이에 대 한 호출, <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> 이루어집니다 메서드가 반환 합니다. 기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 호출할 내부 <see langword="Add" /> 메서드를 호출에서 가져온 대로 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 이 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />합니다.  기본 구현에서 예외가 발생 하지 이면이 수준에서 <paramref name="item" /> 또는 <paramref name="key" /> 는 <see langword="null" />합니다. 여전히 수 있는 내부 <see langword="Add" /> 메서드로 호출할 때 예외가 발생 합니다. 다른 런타임 예외는 가능한 경우 <see cref="P:System.Xaml.XamlType.ItemType" /> 유효한 결과 반환 하지 않습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-138">
              <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsDictionary" />, and throws if the result is <see langword="false" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IDictionary" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  In the base implementation no exception is raised at this level if <paramref name="item" /> or <paramref name="key" /> are <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">
          <span data-ttu-id="d0066-139">인스턴스에 대해 <see langword="x:ConstructorArgs" />를 제공하는 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-139">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance.</span>
          </span>
          <span data-ttu-id="d0066-140">
            <see langword="null" />를 필요로 하지 않거나 사용하지 않는 형식의 경우 <see langword="x:ConstructorArgs" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-140">May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-141">이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 개체 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-141">Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0066-142">이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 만들어진 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-142">The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="d0066-143">생성자를 확인할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-143">Could not resolve a constructor.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-144">
            <para>기본 구현 내부 도우미에 대 한 호출에 포함 <c>ThrowIfUnknown</c>합니다. 이 도우미는 항상 사례에 대 한 throw 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-144">
              <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <span data-ttu-id="d0066-145">
            <see langword="Add" /> 메서드가 사용하는 항목 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-145">
              <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-146">컬렉션 또는 사전과 관련된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 관련 <see langword="Add" /> 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-146">Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0066-147">
            <see langword="Add" /> 메서드에 대한 CLR <see cref="T:System.Reflection.MethodInfo" /> 정보이거나 null입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-147">CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-148">이 메서드에서 반환 해야 `null` 경우 여기서는 <xref:System.Xaml.XamlType> 이 <xref:System.Xaml.Schema.XamlTypeInvoker> 쓰기 가능한 컬렉션 또는 사전 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-148">This method should return `null` for cases where the <xref:System.Xaml.XamlType> for this <xref:System.Xaml.Schema.XamlTypeInvoker> is not a writeable collection or dictionary.</span></span> <span data-ttu-id="d0066-149">특히 반환 해야 `null` 경우 여기서 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> 반환 `None`합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-149">Specifically, should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d0066-150">완전히 신뢰할 수 있는 XAML 형식 시스템을 액세스 하지 않는 경우이 메서드는 보고서 false로 <xref:System.Reflection.MethodInfo> 호출자에 게 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-150">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0066-151">
            <paramref name="contentType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-151">
              <paramref name="contentType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-152">
            <para>기본 구현은 반환 <see langword="null" /> 사례에 대 한 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다. 또한 반환 <see langword="null" /> 경우 <see cref="P:System.Xaml.XamlType.ItemType" /> 은 <see langword="null" />합니다.  XAML 컬렉션 잠재적으로 두 개 이상을 가질 <see langword="Add" /> 메서드를 XAML 컬렉션에 둘 이상의 내용 유형을 지원 잠재적으로 하기 때문에 (참조 <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, 참조 또는 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 이 개념 WPF에의 한 구현에 대 한 정보에 대 한). 기본 구현은 내부 논리를 사용 하 여 서명 및 제공 된 형식에 따라 가장 일치 하는 반환 <paramref name="contentType" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-152">
              <para>The base implementation returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> if <see cref="P:System.Xaml.XamlType.ItemType" /> is <see langword="null" />.  XAML collections potentially have more than one <see langword="Add" /> method, because a XAML collection can potentially support more than one content type (see <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, or see <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> for information about one implementation of this concept in WPF). The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <paramref name="contentType" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d0066-153">항목을 열거할 수 있는 메서드를 나타내는 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-153">Returns an object representing a method that can enumerate over items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0066-154">열거자 메서드에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-154">
              <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-155">반환 해야 `null` 경우 여기서 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> 반환 `None`합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-155">Should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d0066-156">완전히 신뢰할 수 있는 XAML 형식 시스템을 액세스 하지 않는 경우이 메서드는 보고서 false로 <xref:System.Reflection.MethodInfo> 호출자에 게 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-156">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-157">
            <para>기본 구현 내부 도우미 메서드를 호출합니다. 해당 도우미 반환 <see langword="null" /> 사례에 대 한 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다. 또한 반환 <see langword="null" /> 사례에 대 한 여기서 <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> 반환 <see langword="None" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-157">
              <para>The base implementation calls an internal helper method. That helper returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> for cases where <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> returns <see langword="None" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d0066-158">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-158">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d0066-159">항목 집합을 나타내는 <see cref="T:System.Collections.IEnumerator" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-159">Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d0066-160">
            <see cref="T:System.Collections.IEnumerator" /> 개체이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-160">An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d0066-161">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-161">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span>
          </span>
          <span data-ttu-id="d0066-162">**-또는- **관련 형식이 컬렉션 또는 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 이 메서드를 호출했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-162">**-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d0066-163">
            <paramref name="instance" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-163">
              <paramref name="instance" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d0066-164">
            <para>기본 구현 내부 도우미에 대 한 호출에 포함 <c>ThrowIfUnknown</c>합니다. 이 도우미는 항상 사례에 대 한 throw 여기서는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 알 수에 따라 <see cref="T:System.Xaml.XamlType" />는 경우는 <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 의 <see cref="T:System.Xaml.XamlType" /> 은 <see langword="null" />합니다.  기본 구현을 사용 하지 않는 반드시 자체 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> 구현 합니다. 먼저, 캐스팅 <paramref name="instance" /> 를 <see cref="T:System.Collections.IEnumerable" /> 시도 됩니다. 성공 하면이에 대 한 호출, <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 이루어집니다 값을 반환 하는 메서드에 반환 합니다. 기본 구현에서는 CLR을 사용 하는 그렇지 않은 경우 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 호출할 내부 <see langword="GetEnumerator" /> 메서드를 호출에서 가져온 대로 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> 이 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-164">
              <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IEnumerable" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> is made and the method returns that return value. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="GetEnumerator" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d0066-165">
            <see cref="T:System.Xaml.XamlObjectWriter" />가 구현된 <see cref="T:System.Windows.Markup.MarkupExtension" />을 호출할 때 사용할 처리기를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-165">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d0066-166">이 경우를 처리하는 처리기 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-166">A handler implementation that handles this case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-167">이벤트 처리기는 기반 <xref:System.EventHandler%601> 의 제약을 받는 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-167">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="d0066-168">호출 반환 되는 값은 <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> 의 동작은 <xref:System.Xaml.XamlType> 하는 <xref:System.Xaml.Schema.XamlTypeInvoker> 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-168">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="d0066-169">반환 값은 `null` 에 대 한는 <xref:System.Xaml.Schema.XamlTypeInvoker> 알 수를 기반으로 하는 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-169">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d0066-170">
            <see cref="T:System.Xaml.XamlObjectWriter" />가 CLR 구현된 <see cref="T:System.ComponentModel.TypeConverter" />를 호출할 때 사용할 처리기를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-170">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d0066-171">이 경우를 처리하는 처리기 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-171">A handler implementation that handles this case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-172">이벤트 처리기는 기반 <xref:System.EventHandler%601> 의 제약을 받는 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-172">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="d0066-173">호출 반환 되는 값은 <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> 의 동작은 <xref:System.Xaml.XamlType> 하는 <xref:System.Xaml.Schema.XamlTypeInvoker> 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-173">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="d0066-174">반환 값은 `null` 에 대 한는 <xref:System.Xaml.Schema.XamlTypeInvoker> 알 수를 기반으로 하는 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-174">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d0066-175">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-175">Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d0066-176">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d0066-176">A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0066-177">이 값을 제공 하는 <xref:System.Xaml.Schema.XamlTypeInvoker> System.Xaml의 매개 변수 정의 API 호출된 된 코드가 예외를 throw 하면 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="d0066-177">Supplying this value for a <xref:System.Xaml.Schema.XamlTypeInvoker> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>