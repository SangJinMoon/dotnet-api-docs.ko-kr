<Type Name="IEnumeratorContract&lt;T&gt;" FullName="System.AddIn.Contract.IEnumeratorContract&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03a75f2a7180daea04a3cd94c66ec02688f2b013" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37705711" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumeratorContract&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumeratorContract`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.IEnumeratorContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumeratorContract(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumeratorContract : IDisposable" />
  <TypeSignature Language="F#" Value="type IEnumeratorContract&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="ee663-101">열거되는 개체의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ee663-101">The type of objects being enumerated.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="ee663-102">
        <see cref="T:System.AddIn.Contract.IListContract`1" /> 컬렉션의 요소를 열거합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ee663-102">Enumerates the elements in an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee663-103">열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 컬렉션을 수정 하는 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-103">Enumerators can be used to read the data in the collection, but they cannot be used to modify the collection.</span></span>  
  
 <span data-ttu-id="ee663-104">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-104">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="ee663-105">이 위치에서의 반환 값 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-105">At this position, the return value of <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> is undefined.</span></span> <span data-ttu-id="ee663-106">따라서 호출 해야 합니다 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 하 여 열거자를 호출 하기 전에 컬렉션의 첫 번째 요소로 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-106">Therefore, you must call <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> to advance the enumerator to the first element of the collection before calling <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.</span></span>  
  
 <span data-ttu-id="ee663-107"><xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>는 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-107"><xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> returns the same object until <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> is called.</span></span> <span data-ttu-id="ee663-108"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 값을 설정 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> 다음 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-108"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> sets the return value of <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> to the next element.</span></span>  
  
 <span data-ttu-id="ee663-109">경우 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-109">If <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ee663-110">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-110">When the enumerator is at this position, subsequent calls to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="ee663-111">마지막으로 호출 하는 경우 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 `false`, 반환 값 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-111">If the last call to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> returned `false`, the return value of <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> is undefined.</span></span>  
  
 <span data-ttu-id="ee663-112">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-112">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ee663-113">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-113">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public T GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.GetCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrent () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T GetCurrent();" />
      <MemberSignature Language="F#" Value="abstract member GetCurrent : unit -&gt; 'T" Usage="iEnumeratorContract.GetCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ee663-114">컬렉션에서 열거자의 현재 위치에 있는 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-114">Returns the object in the collection at the current position of the enumerator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ee663-115">컬렉션에서 열거자의 현재 위치에 있는 <see cref="T:System.AddIn.Contract.IContract" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-115">The <see cref="T:System.AddIn.Contract.IContract" /> in the collection at the current position of the enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee663-116">반환 값 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-116">The return value of <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="ee663-117">열거자가 만들어진 후에 바로 또는 후 열거자 컬렉션의 첫 번째 요소 앞에 배치 되 <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-117">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created or after <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> is called.</span></span> <span data-ttu-id="ee663-118"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 호출 하 여 열거자를 호출 하기 전에 컬렉션의 첫 번째 요소 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-118"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before calling <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.</span></span>  
  
-   <span data-ttu-id="ee663-119">마지막으로 호출한 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-119">The last call to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
-   <span data-ttu-id="ee663-120">요소의 추가, 수정 또는 삭제 하는 등 컬렉션에서 변경 되어 열거자가 무효화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-120">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>  
  
 <span data-ttu-id="ee663-121"><xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>는 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-121"><xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> returns the same object until <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> is called.</span></span> <span data-ttu-id="ee663-122"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 값을 설정 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> 다음 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-122"><xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> sets the return value of <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool" Usage="iEnumeratorContract.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ee663-123">열거자를 컬렉션의 다음 요소로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-123">Advances the enumerator to the next element of the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ee663-124">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-124">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee663-125">열거자를 만든 후 또는 이후에 <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> 메서드가 호출 되 면 열거자가 컬렉션의 첫 번째 요소 앞에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-125">After an enumerator is created or after the <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> method is called, an enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="ee663-126">첫 번째 호출은 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 메서드는 컬렉션의 첫 번째 요소로 열거자를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-126">The first call to the <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> method moves the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="ee663-127">경우 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-127">If <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ee663-128">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 반환할 수도 `false` 때까지 <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-128">When the enumerator is at this position, subsequent calls to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> also return `false` until <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="ee663-129">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-129">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ee663-130">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 또는 <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-130">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> or <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ee663-131">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-131">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iEnumeratorContract.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ee663-132">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-132">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee663-133">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-133">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ee663-134">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> 또는 <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee663-134">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> or <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ee663-135">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ee663-135">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>