<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ns-System.Text.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a83ea4b-dd12-480b-bfc8-267272ef186434cddae6e8018aa3245a0db0838a6b65070528ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34cddae6e8018aa3245a0db0838a6b65070528ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;see cref="N:System.Text" /&gt;</ph> namespace contains classes that represent ASCII and Unicode character encodings; abstract base classes for converting blocks of characters to and from blocks of bytes; and a helper class that manipulates and formats <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> objects without creating intermediate instances of <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="N:System.Text" /&gt;</ph> 네임스페이스에는 ASCII 및 유니코드 문자 인코딩을 나타내는 클래스, 문자와 바이트 블록 간을 변환하기 위한 추상 기본 클래스, <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>의 중간 인스턴스를 만들지 않고 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 개체를 조정하고 서식을 지정하는 도우미 클래스가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoding classes are primarily intended to convert between different encodings or code pages and a Unicode encoding.</source>
          <target state="translated">인코딩 클래스는 인코딩이 서로 다른 코드 페이지 및 유니코드 인코딩 간 변환 하는 데 주로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph> (UTF-16) encoding is used internally by the .NET Framework, and <ph id="ph2">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> encoding is often used for storing character data to ensure portability across machines and cultures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph> .NET Framework에서 내부적으로 사용 됩니다 (utf-16) 인코딩 및 <ph id="ph2">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> 인코딩는 대개 문자 데이터 저장에 대 한 컴퓨터와 문화권에서 이동성을 보장 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The classes derived from <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> enable you to choose a fallback strategy, which determines how characters that cannot be encoded into a sequence of bytes, or bytes that cannot be decoded into characters, are handled.</source>
          <target state="translated">파생 된 클래스 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> , 바이트의 시퀀스를 인코딩할 수 없는 문자 또는 문자를 디코딩할 수 없는 바이트의 처리 방법을 결정 하는 대체 (fallback) 전략을 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can choose one of the following:</source>
          <target state="translated">다음 중 하나를 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exception fallback.</source>
          <target state="translated">예외 대체 (fallback)입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can choose to throw exceptions on data errors either by using a <ph id="ph1">`throwonerror`</ph> flag that is available in some class constructors or by using the <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> classes.</source>
          <target state="translated">사용 하 여 데이터 오류 발생 시 예외를 throw 하도록 선택할 수 있습니다는 <ph id="ph1">`throwonerror`</ph> 를 사용 하 여 일부 클래스 생성자에서 사용할 수 있는 플래그는 <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are concerned about the integrity of the data stream, throwing on an exception is recommended.</source>
          <target state="translated">데이터 스트림 무결성에 대 한 염려 하는 경우 예외를 throw 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Replacement fallback.</source>
          <target state="translated">교체 대체 (fallback)입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> classes to silently change a character to "?" or to the Unicode replacement character (U+FFFD).</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> 문자를 자동으로 변경 하는 클래스 "?" 또는 유니코드 replacement character (U + FFFD).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit fallback.</source>
          <target state="translated">최적된 대체 (fallback)입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This option maps a character in one encoding to a character in another encoding.</source>
          <target state="translated">이 옵션의 다른 인코딩으로 문자 인코딩을의 문자를 매핑합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best fit fallback is often not recommended because it can cause data loss and confusion, and is slower than simple "?" character replacements.</source>
          <target state="translated">자동 맞춤된 대체 수 있기 때문에 데이터 손실이 나 혼동 하지 않는 것이 좋습니다 및 간단한 보다 느린 "?" 문자 대체 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, for ANSI code pages the best-fit behavior is the default.</source>
          <target state="translated">그러나 ANSI 코드 페이지에는 가장 적합된 한 동작이 기본값입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class is designed for operations that perform extensive manipulations on a single string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> 클래스는 단일 문자열에 광범위 한 조작을 수행 하는 작업을 위해 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <ph id="ph1">&lt;xref:System.String&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> class is mutable and provides better performance when concatenating or deleting strings.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> 클래스는 변경할 수를 연결 하거나 문자열을 삭제할 때 더 나은 성능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph>, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> .</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Text?displayProperty=nameWithType&gt;</ph>, 참조 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>