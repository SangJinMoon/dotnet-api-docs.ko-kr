<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MultipartContent.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50d1bfb4e5775f2b08068e63abd3e2bb1a8cf3ae7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d1bfb4e5775f2b08068e63abd3e2bb1a8cf3ae7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Http.MultipartContent">
          <source>Provides a collection of <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> objects that get serialized using the multipart/* content type specification.</source>
          <target state="translated">multipart/* 콘텐츠 형식 지정을 사용하여 serialize된 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 개체의 컬렉션을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Net.Http.MultipartContent">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String)">
          <source>The subtype of the multipart content.</source>
          <target state="translated">다중 파트 콘텐츠의 하위 형식입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="subtype" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph> or contains only white space characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subtype" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이거나 공백 문자만 있는 경우</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The subtype of the multipart content.</source>
          <target state="translated">다중 파트 콘텐츠의 하위 형식입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The boundary string for the multipart content.</source>
          <target state="translated">다중 파트 콘텐츠의 경계 문자열입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="subtype" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subtype" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이거나 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="boundary" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph> or contains only white space characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="boundary" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이거나 공백 문자만 있는 경우</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="boundary" /&gt;</ph> ends with a space character.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="boundary" /&gt;</ph>가 공백 문자로 끝나는 경우</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
          <source>The length of the <ph id="ph1">&lt;paramref name="boundary" /&gt;</ph> was greater than 70.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="boundary" /&gt;</ph>의 길이가 70보다 큽니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
          <source>The HTTP content to add to the collection.</source>
          <target state="translated">컬렉션에 추가할 HTTP 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
          <source>Add multipart HTTP content to a collection of <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> objects that get serialized using the multipart/* content type specification.</source>
          <target state="translated">multipart/* 콘텐츠 형식 지정을 사용하여 serialize된 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 개체의 컬렉션에 multipart HTTP 콘텐츠를 추가합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
          <source>The <ph id="ph1">&lt;paramref name="content" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="content" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이었습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to releases only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Http.MultipartContent" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 삭제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.When the <ph id="ph5">`disposing`</ph> parameter is <ph id="ph6">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph7">&lt;xref:System.Net.Http.MultipartContent&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다. 경우는 <ph id="ph5">`disposing`</ph> 매개 변수는 <ph id="ph6">`true`</ph>,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <ph id="ph7">&lt;xref:System.Net.Http.MultipartContent&gt;</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>Returns an enumerator that iterates through the collection of <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> objects that get serialized using the multipart/* content type specification..</source>
          <target state="translated">multipart/* 콘텐츠 형식 사양을 사용하여 serialize되는 <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> 개체의 컬렉션을 반복하는 열거형을 반환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>An object that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>The foreach statement of the C# language (For Each in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">C# 언어 (각각에 대해 Visual basic에서)의 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>Therefore, using foreach is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">따라서 foreach를 사용 하는 것 보다 열거자를 직접 조작 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The target stream.</source>
          <target state="translated">대상 스트림입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">전송에 대한 정보(예: 채널 바인딩 토큰)입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This parameter may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Serialize the multipart HTTP content to a stream as an asynchronous operation.</source>
          <target state="translated">다중 파트 HTTP 콘텐츠를 비동기 작업으로 스트림으로 serialize합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been serialized to the target stream.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> 대상 스트림으로 serialize 된 모든 콘텐츠 개체 완성 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.System#Collections#IEnumerable#GetEnumerator">
          <source>The explicit implementation of the <ph id="ph1">&lt;see cref="M:System.Net.Http.MultipartContent.GetEnumerator" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Http.MultipartContent.GetEnumerator" /&gt;</ph> 메서드의 명시적 구현입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.System#Collections#IEnumerable#GetEnumerator">
          <source>An object that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션을 반복하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>The length in bytes of the HHTP content.</source>
          <target state="translated">HTTP 콘텐츠의 길이(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>Determines whether the HTTP multipart content has a valid length in bytes.</source>
          <target state="translated">HTTP 다중 파트 콘텐츠 길이(바이트)가 올바른지 여부를 결정합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is a valid length; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="length" /&gt;</ph>의 길이가 올바르면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.MultipartContent.TryComputeLength%2A&gt;</ph> method gives HTTP multipart content the ability to calculate the content length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.MultipartContent.TryComputeLength%2A&gt;</ph> 메서드를 통해 HTTP 다중 파트 콘텐츠 콘텐츠 길이 계산할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>This is useful for content types which are able to easily calculate the content length.</source>
          <target state="translated">쉽게 콘텐츠 길이 계산할 수 있는 콘텐츠 형식에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">콘텐츠 길이 수 없거나 비용이 많이 드는 (해야 직렬화는 비용이 많이 들 수 하거나 많은 양의 메모리를 할당할 수 있는 전체 콘텐츠를 버퍼링 하는 시스템) 컴퓨팅,이 메서드가 반환할 수 있습니다 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
          <source>If this method returns <ph id="ph1">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.</source>
          <target state="translated">이 메서드가 반환 하는 경우 <ph id="ph1">`false`</ph>,이 청크 분할된 전송 필요 없거나 서버에 전송 되기 전에 콘텐츠 버퍼링 해야 되 의미 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>