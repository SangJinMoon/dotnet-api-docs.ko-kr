<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResXResourceWriter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a84107e4c6430c9ab492ef5abd191f9b1a9719aa.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a84107e4c6430c9ab492ef5abd191f9b1a9719aa</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResXResourceWriter">
          <source>Writes resources in an XML resource (.resx) file or an output stream.</source>
          <target state="translated">XML 리소스(.resx) 파일 또는 출력 스트림에 리소스를 씁니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> writes resources in XML format.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> XML 형식으로 리소스를 씁니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>To write a binary resource file, use <ph id="ph1">&lt;xref:System.Resources.ResourceWriter&gt;</ph>.</source>
          <target state="translated">이진 리소스 파일을 작성 하기 위해 사용할 <ph id="ph1">&lt;xref:System.Resources.ResourceWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>Resources are specified as name/value pairs using the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A&gt;</ph> method.</source>
          <target state="translated">사용 하 여 이름/값 쌍으로 지정 된 리소스는 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>Resource names are case-sensitive when used for lookups; but to more easily support authoring tools and help eliminate bugs, <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> does not allow a.resx file to have names that vary only by case.</source>
          <target state="translated">리소스 이름은 대 소문자 조회; 사용 될 때 더 쉽게 작성 도구를 지원 하 고 버그를 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> 대/소문자만 다른 이름이.resx 파일을 허용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>To create a.resx file, create a <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> with a unique file name, call <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A&gt;</ph> at least once, call <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> to write the resources file to disk, and then call <ph id="ph4">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> to close the file.</source>
          <target state="translated">.Resx 파일을 만들려면 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> 호출 고유한 파일 이름을 포함 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A&gt;</ph> 을 한 번 이상 호출 <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 를 디스크에 리소스 파일을 작성 한 다음 호출 <ph id="ph4">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> 파일을 닫습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>Calling <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> will implicitly <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> the file if required.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> 암시적으로 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 필요한 경우에 파일입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>The resources are not necessarily written in the same order they were added.</source>
          <target state="translated">리소스 추가 된 동일한 순서로 반드시 기록 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>For more information on the format of a.resx file, see <bpt id="p1">[</bpt>Working with .resx Files Programmatically<ept id="p1">](~/docs/framework/resources/working-with-resx-files-programmatically.md)</ept>.</source>
          <target state="translated">.Resx 파일의 형식에 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>.resx 프로그래밍 방식으로 파일을 작업할<ept id="p1">](~/docs/framework/resources/working-with-resx-files-programmatically.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
          <target state="translated">이 클래스는 모든 멤버에 적용 되는 클래스 수준에 상속 요청과 링크 요청을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우에 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>The following example creates a .resx file named <ph id="ph1">`CarResources.resx`</ph> that stores six strings, an icon, and two application-defined objects (two <ph id="ph2">`Automobile`</ph> objects).</source>
          <target state="translated">다음 예에서는 라는.resx 파일을 만듭니다 <ph id="ph1">`CarResources.resx`</ph> 문자열 6 개, 아이콘 및 두 개의 응용 프로그램 정의 개체를 저장 하는 (두 개의 <ph id="ph2">`Automobile`</ph> 개체).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>Note that the <ph id="ph1">`Automobile`</ph> class, which is defined and instantiated in the example, is tagged with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">이 예제에서 정의되고 인스턴스화된 <ph id="ph1">`Automobile`</ph> 클래스는 <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> 특성으로 태그가 지정됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResXResourceWriter">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Resources.ResXResourceWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>The output stream.</source>
          <target state="translated">출력 스트림입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes the resources to the specified stream object.</source>
          <target state="translated">지정된 스트림 개체에 리소스를 쓰는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> method closes the stream you specify as a parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> 메서드 매개 변수로 지정 된 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>To write the resource to the stream without closing the stream, you must use the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method.</source>
          <target state="translated">사용 해야 리소스 스트림에 스트림을 닫지 않고를 작성 하려면는 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> object to send the output to.</source>
          <target state="translated">출력을 보낼 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes to the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 개체에 쓰는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>The output file name.</source>
          <target state="translated">출력 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes the resources to the specified file.</source>
          <target state="translated">지정된 파일에 리소스를 쓰는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>This constructor creates <ph id="ph1">`filename`</ph> if it does not exist and overwrites it if it does.</source>
          <target state="translated">이 생성자는 만듭니다 <ph id="ph1">`filename`</ph> 존재 하지 않는 경우 이미 있으면 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>If <ph id="ph1">`filename`</ph> includes a directory path, the full path must exist or the constructor throws a <ph id="ph2">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> exception.</source>
          <target state="translated">경우 <ph id="ph1">`filename`</ph> 디렉터리 경로가 포함 되는 전체 경로가 존재 해야 합니다 또는 생성자를 throw 한 <ph id="ph2">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>The directory specified in <ph id="ph1">&lt;paramref name="filename" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="filename" /&gt;</ph>에 지정된 디렉터리가 없습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String)">
          <source>This member cannot be inherited by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})">
          <source>The stream to send the output to.</source>
          <target state="translated">출력을 보낼 스트림입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})">
          <source>The delegate that is used to target earlier versions of the .NET Framework.</source>
          <target state="translated">이전 버전의 .NET Framework를 대상으로 지정하는 데 사용되는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes the resources to a specified stream object and sets a converter delegate.</source>
          <target state="translated">지정된 스트림 개체에 리소스를 기록하고 변환기 대리자를 설정하는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})">
          <source>This delegate enables resource assemblies to be written that target versions of the .NET Framework before the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> by using qualified assembly names.</source>
          <target state="translated">이 대리자를 사용하면 정규화된 어셈블리 이름을 사용하여 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 이전의 .NET Framework 대상 버전이 리소스 어셈블리에 기록되도록 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})">
          <source>Visual Studio and MSBuild use this constructor when you create resources for an application that target versions of the .NET Framework before the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">Visual Studio 및 MSBuild 하기 전에.NET Framework의 버전을 대상으로 하는 응용 프로그램에 대 한 리소스를 만들 때이 생성자를 사용는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter,System.Func{System.Type,System.String})">
          <source>The object to send output to.</source>
          <target state="translated">출력을 보낼 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter,System.Func{System.Type,System.String})">
          <source>The delegate that is used to target earlier versions of the .NET Framework.</source>
          <target state="translated">이전 버전의 .NET Framework를 대상으로 지정하는 데 사용되는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter,System.Func{System.Type,System.String})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes the resources to a specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> object and sets a delegate that enables resource assemblies to be written that target versions of the .NET Framework before the <ph id="ph3">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> by using qualified assembly names.</source>
          <target state="translated">리소스를 지정된 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 개체에 기록하고 정규화된 어셈블리 이름을 사용하여 <ph id="ph3">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 이전의 .NET Framework 대상 버전이 리소스 어셈블리에 기록되도록 대리자를 설정하는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter,System.Func{System.Type,System.String})">
          <source>Visual Studio and MSBuild use this constructor when you create resources for an application that target versions of the .NET Framework before the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">Visual Studio 및 MSBuild 하기 전에.NET Framework의 버전을 대상으로 하는 응용 프로그램에 대 한 리소스를 만들 때이 생성자를 사용는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})">
          <source>The file to send output to.</source>
          <target state="translated">출력을 보낼 파일입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})">
          <source>The delegate that is used to target earlier versions of the .NET Framework.</source>
          <target state="translated">이전 버전의 .NET Framework를 대상으로 지정하는 데 사용되는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> class that writes the resources to a specified file and sets a delegate that enables resource assemblies to be written that target versions of the .NET Framework before the <ph id="ph2">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> by using qualified assembly names.</source>
          <target state="translated">리소스를 지정된 파일에 기록하고 정규화된 어셈블리 이름을 사용하여 <ph id="ph2">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 이전의 .NET Framework 대상 버전이 리소스 어셈블리에 기록되도록 대리자를 설정하는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})">
          <source>Visual Studio and MSBuild use this constructor when you create resources for an application that target versions of the .NET Framework before the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">Visual Studio 및 MSBuild 하기 전에.NET Framework의 버전을 대상으로 하는 응용 프로그램에 대 한 리소스를 만들 때이 생성자를 사용는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})">
          <source>The directory specified in <ph id="ph1">&lt;paramref name="filename" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="filename" /&gt;</ph>에 지정된 디렉터리가 없습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source>The name of the alias.</source>
          <target state="translated">별칭 이름입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source>The name of the assembly represented by <bpt id="p1">&lt;c&gt;</bpt>aliasName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>aliasName<ept id="p1">&lt;/c&gt;</ept>이 나타내는 어셈블리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source>Adds the specified alias to a list of aliases.</source>
          <target state="translated">지정된 별칭을 별칭 목록에 추가합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source>Resources whose values are from an aliased assembly are automatically added to the list of aliases.</source>
          <target state="translated">별칭이 지정 된 어셈블리에서는 값을 포함 하는 리소스 별칭의 목록에 자동으로 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source>The resource is not written until <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> is called.</source>
          <target state="translated">리소스 기록 됩니다 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="T:System.Resources.ResXResourceWriter">
          <source>Adds design-time properties to the list of resources to write.</source>
          <target state="translated">작성할 리소스 목록에 디자인 타임 속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])">
          <source>The name of a property.</source>
          <target state="translated">속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])">
          <source>A byte array containing the value of the property to add.</source>
          <target state="translated">추가할 속성 값이 포함된 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])">
          <source>Adds a design-time property whose value is specifed as a byte array to the list of resources to write.</source>
          <target state="translated">작성할 리소스 목록에 바이트 배열로 지정된 값을 갖는 디자인 타임 속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])">
          <source>The resource specified by the <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter has already been added.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수로 지정된 리소스가 이미 추가된 경우</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)">
          <source>The name of a property.</source>
          <target state="translated">속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)">
          <source>An object that is the value of the property to add.</source>
          <target state="translated">추가할 속성 값을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)">
          <source>Adds a design-time property whose value is specified as an object to the list of resources to write.</source>
          <target state="translated">작성할 리소스 목록에 개체로 지정된 값을 갖는 디자인 타임 속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)">
          <source>The resource specified by the <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter has already been added.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수로 지정된 리소스가 이미 추가된 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)">
          <source>The name of a property.</source>
          <target state="translated">속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)">
          <source>A string that is the value of the property to add.</source>
          <target state="translated">추가할 속성 값을 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)">
          <source>Adds a design-time property whose value is specified as a string to the list of resources to write.</source>
          <target state="translated">작성할 리소스 목록에 문자열로 지정된 값을 갖는 디자인 타임 속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)">
          <source>The resource specified by the <ph id="ph1">&lt;paramref name="name" /&gt;</ph> property has already been added.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 속성으로 지정된 리소스가 이미 추가된 경우</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="T:System.Resources.ResXResourceWriter">
          <source>Adds a resource to the list of resources to write.</source>
          <target state="translated">기록할 리소스 목록에 리소스를 추가합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.Resources.ResXDataNode)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Resources.ResXDataNode" /&gt;</ph> object that contains a resource name/value pair.</source>
          <target state="translated">리소스 이름/값 쌍이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Resources.ResXDataNode" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.Resources.ResXDataNode)">
          <source>Adds a named resource specified in a <ph id="ph1">&lt;see cref="T:System.Resources.ResXDataNode" /&gt;</ph> object to the list of resources to write.</source>
          <target state="translated">작성할 리소스 목록에 <ph id="ph1">&lt;see cref="T:System.Resources.ResXDataNode" /&gt;</ph> 개체에 지정된 명명된 리소스를 추가합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
          <source>The name of the resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
          <source>The value of the resource to add as an 8-bit unsigned integer array.</source>
          <target state="translated">부호 없는 8비트 정수 배열로 추가될 리소스의 값입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
          <source>Adds a named resource specified as a byte array to the list of resources to write.</source>
          <target state="translated">기록할 리소스 목록에 바이트 배열로 지정된 명명된 리소스를 추가합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
          <source>The resource is not written until <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> is called.</source>
          <target state="translated">리소스 기록 됩니다 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])">
          <source>The resource is serialized and stored in a binary format.</source>
          <target state="translated">리소스는 직렬화 하 고 이진 형식으로 저장 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>The name of the resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>The value of the resource.</source>
          <target state="translated">리소스의 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>Adds a named resource specified as an object to the list of resources to write.</source>
          <target state="translated">기록할 리소스 목록에 개체로 지정된 명명된 리소스를 추가합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>The resource is not written until <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> is called.</source>
          <target state="translated">리소스 기록 됩니다 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>The resource that was added must be serializable.</source>
          <target state="translated">추가 리소스는 serializable 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>If the resource being added is a string, it is written as a string; otherwise, the resource is serialized and stored in a binary format.</source>
          <target state="translated">문자열로; 쓰여집니다 추가 되는 리소스가 문자열인 경우 그렇지 않으면 리소스는 serialize 되 고 이진 형식으로 저장 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>The following example creates a .resx file named <ph id="ph1">`CarResources.resx`</ph> that stores six strings, an icon, and two application-defined objects (two <ph id="ph2">`Automobile`</ph> objects).</source>
          <target state="translated">다음 예에서는 라는.resx 파일을 만듭니다 <ph id="ph1">`CarResources.resx`</ph> 문자열 6 개, 아이콘 및 두 개의 응용 프로그램 정의 개체를 저장 하는 (두 개의 <ph id="ph2">`Automobile`</ph> 개체).</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>To store the icon and the <ph id="ph1">`Automobile`</ph> objects, it calls the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">아이콘을 저장 하 고 <ph id="ph1">`Automobile`</ph> 개체를 호출 하는 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.Object%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)">
          <source>Note that the <ph id="ph1">`Automobile`</ph> class, which is defined and instantiated in the example, is tagged with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">이 예제에서 정의되고 인스턴스화된 <ph id="ph1">`Automobile`</ph> 클래스는 <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> 특성으로 태그가 지정됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>The name of the resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>The value of the resource.</source>
          <target state="translated">리소스의 값입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>Adds a string resource to the resources.</source>
          <target state="translated">리소스에 문자열 리소스를 추가합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>The resource is not written until <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> is called.</source>
          <target state="translated">리소스 기록 됩니다 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>The following example creates a .resx file named <ph id="ph1">`CarResources.resx`</ph> that stores six strings, an icon, and two application-defined objects (two <ph id="ph2">`Automobile`</ph> objects).</source>
          <target state="translated">다음 예에서는 라는.resx 파일을 만듭니다 <ph id="ph1">`CarResources.resx`</ph> 문자열 6 개, 아이콘 및 두 개의 응용 프로그램 정의 개체를 저장 하는 (두 개의 <ph id="ph2">`Automobile`</ph> 개체).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>To store the strings, it calls the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">문자열을 저장 하려면 호출는 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.String%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)">
          <source>Note that the <ph id="ph1">`Automobile`</ph> class, which is defined and instantiated in the example, is tagged with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">이 예제에서 정의되고 인스턴스화된 <ph id="ph1">`Automobile`</ph> 클래스는 <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> 특성으로 태그가 지정됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Resources.ResXResourceWriter.BasePath">
          <source>Gets or sets the base path for the relative file path specified in a <ph id="ph1">&lt;see cref="T:System.Resources.ResXFileRef" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResXFileRef" /&gt;</ph> 개체에 지정된 상대 파일 경로의 기본 경로를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResXResourceWriter.BasePath">
          <source>A path that, if prepended to the relative file path specified in a <ph id="ph1">&lt;see cref="T:System.Resources.ResXFileRef" /&gt;</ph> object, yields an absolute path to an XML resource file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResXFileRef" /&gt;</ph> 개체에 지정된 상대 파일 경로 앞에 추가될 경우 XML 리소스 파일의 절대 경로를 생성하는 경로입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.BinSerializedObjectMimeType">
          <source>Specifies the default content type for a binary object.</source>
          <target state="translated">이진 개체의 기본 콘텐츠 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.BinSerializedObjectMimeType">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ByteArraySerializedObjectMimeType">
          <source>Specifies the default content type for a byte array object.</source>
          <target state="translated">바이트 배열 개체의 기본 콘텐츠 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ByteArraySerializedObjectMimeType">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Close">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Close">
          <source>Calling this method is the equivalent of calling <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 호출의 호출에 해당 하는 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.DefaultSerializedObjectMimeType">
          <source>Specifies the default content type for an object.</source>
          <target state="translated">개체의 기본 콘텐츠 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.DefaultSerializedObjectMimeType">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="T:System.Resources.ResXResourceWriter">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method, if necessary, before releasing managed and unmanaged system resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> 메서드 호출에서 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드를 관리 하 고 관리 되지 않는 시스템 리소스를 해제 하기 전에 필요한 경우.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> allows the system resources used by the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> 하면에서 사용 하는 시스템 리소스는 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> 다른 용도에 다시 할당 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResXResourceWriter" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method, if necessary, before releasing managed and unmanaged system resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> 메서드 호출에서 <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드를 관리 하 고 관리 되지 않는 시스템 리소스를 해제 하기 전에 필요한 경우.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Dispose%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>를 재정의할 때 이전 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see  and .</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>를 참조 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Finalize">
          <source>This member overrides the <ph id="ph1">&lt;see cref="M:System.Object.Finalize" /&gt;</ph> method.</source>
          <target state="translated">이 멤버는 <ph id="ph1">&lt;see cref="M:System.Object.Finalize" /&gt;</ph> 메서드를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>Writes all resources added by the <ph id="ph1">&lt;see cref="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])" /&gt;</ph> method to the output file or stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])" /&gt;</ph> 메서드에 의해 추가된 모든 리소스를 출력 파일 또는 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method writes the resources to the output file or stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드 출력 파일이 나 스트림에에 리소스를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>If you want to write the resources as well as close the output file or stream, call the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> method.</source>
          <target state="translated">출력 파일이 나 스트림에 가까운 하는 리소스를 작성 하려는 경우에 호출 된 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method can be called only once.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드를 한 번만 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>After calling the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> method, all <ph id="ph2">&lt;xref:System.Resources.IResourceWriter&gt;</ph> methods other than <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> will throw an exception.</source>
          <target state="translated">호출한 후의 <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Generate%2A&gt;</ph> 메서드를 모든 <ph id="ph2">&lt;xref:System.Resources.IResourceWriter&gt;</ph> 이외의 <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter.Close%2A&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Resources.ResXResourceWriter.Generate">
          <source>The resource has already been saved.</source>
          <target state="translated">리소스가 이미 저장된 경우</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ResMimeType">
          <source>Specifies the content type of an XML resource.</source>
          <target state="translated">XML 리소스의 콘텐츠 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ResMimeType">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ResourceSchema">
          <source>Specifies the schema to use in writing the XML file.</source>
          <target state="translated">XML 파일을 쓰는 데 사용할 스키마를 지정합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.ResourceSchema">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResXResourceWriter.ResourceSchema">
          <source>The schema provides details on how to encode the resources based on the type of resource being written.</source>
          <target state="translated">스키마를 기록 하는 리소스의 종류에 따라 리소스를 인코딩하는 방법에 자세히 설명 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.SoapSerializedObjectMimeType">
          <source>Specifies the content type for a SOAP object.</source>
          <target state="translated">SOAP 개체의 콘텐츠 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.SoapSerializedObjectMimeType">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.Version">
          <source>Specifies the version of the schema that the XML output conforms to.</source>
          <target state="translated">XML 출력과 일치하는 스키마의 버전을 지정합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="F:System.Resources.ResXResourceWriter.Version">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>