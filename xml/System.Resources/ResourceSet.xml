<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceSet.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c004c2cbe90a3788b82697a631822576eef92f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c004c2cbe90a3788b82697a631822576eef92f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</source>
          <target state="translated">다른 모든 문화권을 무시하고 하나의 특정 문화권에 대해 지역화된 모든 리소스를 대체 규칙과 함께 저장합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept>: 신뢰할 수 없는 데이터를 사용하여 이 클래스에서 메서드를 호출하는 것은 보안상 위험합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터만 사용하여 클래스의 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>신뢰할 수 없는 데이터 보안 위험<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class enumerates over an <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph>, loading every name and value, and storing them in a <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> 클래스에 대해 열거는 <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph>, 모든 이름 및 값을 로드 하 고에 저장 하 여 한 <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>A custom <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph> can be used.</source>
          <target state="translated">사용자 지정 <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph> 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> object that represents the resources of a specific culture by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">인스턴스화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> 호출 하 여 특정 문화권의 리소스를 나타내는 개체는 <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceSet">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> that use their own resource reader and writer should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>, to provide the appropriate functionality for interpreting the resource set.</source>
          <target state="translated">파생 클래스의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 자신의 리소스 판독기를 사용 하 고 기록기를 재정의 해야 <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, 및 <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>, 리소스 집합을 해석 하기 위한 적절 한 기능을 제공 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class with default properties.</source>
          <target state="translated">기본 속성을 사용하여 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> of resources to be read.</source>
          <target state="translated">읽을 리소스의 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The stream should refer to an existing resources file.</source>
          <target state="translated">스트림은 기존 리소스 파일을 참조해야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the system default <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> that reads resources from the given stream.</source>
          <target state="translated">지정된 스트림에서 리소스를 읽는 시스템 기본 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>을(를) 사용하여 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is not readable.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>을 읽을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">serialization 서비스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> 보안 동작: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>The reader that will be used.</source>
          <target state="translated">사용할 reader입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the specified resource reader.</source>
          <target state="translated">지정된 리소스 판독기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>You can use this constructor to support custom resource formats using a user-provided <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>.</source>
          <target state="translated">이 생성자를 사용 하는 사용자 제공을 사용 하 여 사용자 지정 리소스 형식을 지 원하는 <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
          <source>The <ph id="ph1">&lt;paramref name="reader" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>Resource file to read.</source>
          <target state="translated">읽을 리소스 파일입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class using the system default <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> that opens and reads resources from the given file.</source>
          <target state="translated">지정된 파일에서 리소스를 열고 읽는 시스템 기본 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>을(를) 사용하여 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>The following code example defines a new instance of the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class for a specific file, iterates through the resources used by that file, and displays their contents to the console.</source>
          <target state="translated">새 인스턴스를 정의 하는 다음 코드 예제는 <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> 특정 파일에 대 한 클래스는 해당 파일을 사용 하는 리소스를 반복 하 고 해당 내용을 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Close">
          <source>Closes and releases any resources used by this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에서 사용하는 모든 리소스를 닫고 해제합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>All calls to methods on the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> after a call to this method might fail.</source>
          <target state="translated">모든 호출에 대 한 메서드는 <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> 후이 메서드를 호출 실패할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> 안전 하 게 번 호출할 수 있습니다 여러 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph3">`true`</ph>).</source>
          <target state="translated">현재 구현이 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Close">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> method to release all resources used by the calling <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> instance.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Close%2A&gt;</ph> 메서드 호출에서 사용 하는 모든 리소스를 해제 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Releases resources used by the current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> instance.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 인스턴스에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose">
          <source>Disposes of the resources (other than memory) used by the current instance of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 인스턴스에서 사용하는 리소스(메모리 제외)를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> 사용을 마치면 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> 메서드를 사용하면 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>를 사용할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> so the memory it was occupying can be reclaimed by garbage collection.</source>
          <target state="translated">호출한 후 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph>에 대 한 모든 참조를 해제 해야는 <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> 차지 했던 메모리를 가비지 수집에 의해 회수 될 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>The current method is the implementation of <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">현재 메서드는의 구현 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose">
          <source>This implementation calls <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph2">`true`</ph>).</source>
          <target state="translated">이 구현에서는 호출 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;</ph> (<ph id="ph2">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>Indicates whether the objects contained in the current instance should be explicitly closed.</source>
          <target state="translated">현재 인스턴스에 포함된 개체를 명시적으로 닫아야 하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.</source>
          <target state="translated">요청한 경우 관리되는 내부 개체를 닫고 현재 인스턴스와 관련된 리소스(메모리 제외)를 해제합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>If the <ph id="ph1">`dispose`</ph> parameter is <ph id="ph2">`true`</ph>, the current method frees all the resources associated with it as well as with all objects associated with it.</source>
          <target state="translated">경우는 <ph id="ph1">`dispose`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 현재 메서드 뿐 아니라 관련 된 모든 개체와 연결 된 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
          <source>If <ph id="ph1">`dispose`</ph> is <ph id="ph2">`false`</ph>, the current method frees only the resources allocated to it, and ignores any objects associated with it.</source>
          <target state="translated">경우 <ph id="ph1">`dispose`</ph> 은 <ph id="ph2">`false`</ph>, 현재 메서드가, 할당 된 리소스를 해제 하 고 연결 된 모든 개체를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Returns the preferred resource reader class for this kind of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이러한 종류의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에 대한 기본 설정 리소스 판독기를 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the preferred resource reader for this kind of <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이러한 종류의 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에 대한 기본 설정 리소스 판독기의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을(를) 반환합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetDefaultReader">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> using their own resource reader should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>.</source>
          <target state="translated">파생 클래스의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 자신의 리소스 판독기를 사용 하 여 재정의 해야 <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, 및 <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Returns the preferred resource writer class for this kind of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이러한 종류의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에 대한 기본 설정 리소스 작성기 클래스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the preferred resource writer for this kind of <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이러한 종류의 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에 대한 기본 설정 리소스 writer의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을(를) 반환합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetDefaultWriter">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> using their own resource reader should override <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>.</source>
          <target state="translated">파생 클래스의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 자신의 리소스 판독기를 사용 하 여 재정의 해야 <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>, 및 <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> that can iterate through the <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> 전체에 걸쳐 반복할 수 있는 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>을(를) 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>에 대한 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Enumerators only allow reading the data in the collection.</source>
          <target state="translated">열거자는 컬렉션의 데이터 읽기를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Enumerators cannot be used to modify the underlying collection.</source>
          <target state="translated">내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>At this position, calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">이 위치에서, 호출 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>의 값을 읽기 전에 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">컬렉션의 끝이 전달된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치되고 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출하면 <ph id="ph2">`false`</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, calling <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>호출, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>를 컬렉션의 첫째 요소에 다시 설정하려면 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>을 호출한 뒤 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">컬렉션 변경 되 면, 추가 하는 등 요소, 수정 또는 삭제 열거자는 무효화 하 고을 다음에 호출할 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throw는 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> will return the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 사이에 컬렉션이 수정되면 열거자가 이미 무효로 되었어도 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>는 컬렉션이 설정된 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>You can use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType&gt;</ph> property to access the value stored in the current element.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType&gt;</ph> 현재 요소에 저장 된 값에 액세스 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property to access the key of the current element.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 요소의 키에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property to access the value of the current element.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 현재 요소의 값에 액세스 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph><ph id="ph2">`rs`</ph> for the file <ph id="ph3">`items.resources`</ph>.</source>
          <target state="translated">다음 예제에서는 만드는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> <ph id="ph2">`rs`</ph> 파일 <ph id="ph3">`items.resources`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>Next, the <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetEnumerator%2A&gt;</ph> method is used to create an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> for <ph id="ph3">`rs`</ph>.</source>
          <target state="translated">다음으로 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetEnumerator%2A&gt;</ph> 메서드 만드는 데 사용 되는 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 에 대 한 <ph id="ph3">`rs`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> iterates through <ph id="ph2">`rs`</ph> and displays the contents to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 반복 <ph id="ph2">`rs`</ph> 내용을 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetEnumerator">
          <source>The resource set has been closed or disposed.</source>
          <target state="translated">리소스 집합이 닫혔거나 삭제된 경우</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Returns a resource object with the specified name.</source>
          <target state="translated">지정된 이름의 리소스 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>Case-sensitive name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름(대/소문자 구분)입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>Searches for a resource object with the specified name.</source>
          <target state="translated">지정된 이름의 리소스 개체를 검색합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The requested resource.</source>
          <target state="translated">요청된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The name of the resource object is case sensitive.</source>
          <target state="translated">리소스 개체의 이름은 대/소문자 구분입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>For a case-insensitive search, use <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;</ph>.</source>
          <target state="translated">대/소문자 구분 검색을 위해 사용 하 여 <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체가 닫혔거나 삭제된 경우</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Indicates whether the case of the specified name should be ignored.</source>
          <target state="translated">지정된 이름의 대/소문자를 구분하지 않을 것인지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">요청한 경우 지정된 이름의 리소스 개체를 대/소문자를 구분하지 않고 검색합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The requested resource.</source>
          <target state="translated">요청된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">`ignoreCase`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 이름 "Resource"를 사용 하 여 리소스 이름 "resource"를 사용 하 여 리소스와 같습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Note, however, that this method always performs case-insensitive string comparisons using <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">단,이 메서드를 사용 하 여 대/소문자 구분 문자열 비교를 항상 수행 하 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 "TR-TR" (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>Using the <ph id="ph1">`GetObject`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">사용 하는 <ph id="ph1">`GetObject`</ph> 메서드 <ph id="ph2">`ignoreCase`</ph> 로 설정 <ph id="ph3">`true`</ph>,이 비교가 성공 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체가 닫혔거나 삭제된 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceSet">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with a specified name.</source>
          <target state="translated">지정된 이름의 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 리소스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>Searches for a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with the specified name.</source>
          <target state="translated">지정된 이름의 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 리소스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The value of a resource, if the value is a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">값이 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>인 경우 리소스의 값입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The resource specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>에 의해 지정된 리소스가 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>가 아닌 경우</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체가 닫혔거나 삭제된 경우</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Indicates whether the case of the case of the specified name should be ignored.</source>
          <target state="translated">지정된 이름의 대/소문자를 구분하지 않을 것인지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Searches for a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> resource with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">요청한 경우 지정된 이름의 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 리소스를 대/소문자를 구분하지 않고 검색합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The value of a resource, if the value is a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">값이 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>인 경우 리소스의 값입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">`ignoreCase`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 이름 "Resource"를 사용 하 여 리소스 이름 "resource"를 사용 하 여 리소스와 같습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Note, however, that this method always performs case-insensitive string comparisons using <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">단,이 메서드를 사용 하 여 대/소문자 구분 문자열 비교를 항상 수행 하 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 "TR-TR" (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>Using the <ph id="ph1">`GetString`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">사용 하는 <ph id="ph1">`GetString`</ph> 메서드 <ph id="ph2">`ignoreCase`</ph> 로 설정 <ph id="ph3">`true`</ph>,이 비교가 성공 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The resource specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>에 의해 지정된 리소스가 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>가 아닌 경우</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체가 닫혔거나 삭제된 경우</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceSet.Reader">
          <source>Indicates the <ph id="ph1">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph> used to read the resources.</source>
          <target state="translated">리소스를 읽는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph>을(를) 나타냅니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>Reads all the resources and stores them in a <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> indicated in the <ph id="ph2">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph> property.</source>
          <target state="translated">모든 리소스를 읽은 다음 <ph id="ph2">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph> 속성에 표시된 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>에 저장합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> should explicitly call <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.ReadResources" /&gt;</ph> to load all the resources from the <ph id="ph3">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph> into <ph id="ph4">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph>, generally either in the constructor or lazily on the first call to either <ph id="ph5">&lt;see cref="M:System.Resources.ResourceSet.GetString(System.String)" /&gt;</ph> or <ph id="ph6">&lt;see cref="M:System.Resources.ResourceSet.GetObject(System.String)" /&gt;</ph>.</source>
          <target state="translated">파생 클래스의 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 명시적으로 호출 해야 <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.ReadResources" /&gt;</ph> 에서 모든 리소스를 로드 하는 <ph id="ph3">&lt;see cref="T:System.Resources.IResourceReader" /&gt;</ph> 에 <ph id="ph4">&lt;see cref="F:System.Resources.ResourceSet.Table" /&gt;</ph>, 일반적으로 첫 번째 지연 하거나 생성자에서 호출 중 하나로 <ph id="ph5">&lt;see cref="M:System.Resources.ResourceSet.GetString(System.String)" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="M:System.Resources.ResourceSet.GetObject(System.String)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>However, if your resource set and IResourceReader already have information about each other and have a more efficient way to load just a few select resources, this step can be skipped.</source>
          <target state="translated">그러나 리소스 집합과 IResourceReader 이미 서로 대 한 정보를 있고 있을 경우 리소스를 선택 하는 몇 개의 로드를 보다 효율적으로,이 단계를 건너뛸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceSet.ReadResources">
          <source>To minimize working set, write your resource set in such a way that it queries your IResourceReader for only the resource values requested by your application.</source>
          <target state="translated">작업 집합을 최소화 하려면 리소스 IResourceReader만 응용 프로그램에서 요청한 리소스 값에 쿼리 하는 방식으로 집합을 기록 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object to avoid a race condition with <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>과(와)의 경쟁 조건이 발생하지 않도록 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>This member is not intended to be used directly from your code.</source>
          <target state="translated">이 멤버는 사용자 코드에서 직접 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> 개체에 대한 열거자입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceSet.Table">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> in which the resources are stored.</source>
          <target state="translated">리소스가 저장되는 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>