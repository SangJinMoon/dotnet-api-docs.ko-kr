<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="682738b4136d074223cbe025a9380b3cca9bc1d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480257" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="86172-101">순차 리소스 이름/값 쌍을 읽어 이진 리소스 파일(.resources)의 리소스를 열거합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86172-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span>
      </span>
      <span data-ttu-id="86172-102">**보안 정보**: 신뢰할 수 없는 데이터를 사용하여 이 클래스에서 메서드를 호출하는 것은 보안상 위험합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86172-102">**Security Note**: Calling methods in this class with untrusted data is a security risk.</span>
      </span>
      <span data-ttu-id="86172-103">신뢰할 수 있는 데이터만 사용하여 클래스의 메서드를 호출합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86172-103">Call the methods in the class only with trusted data.</span>
      </span>
      <span data-ttu-id="86172-104">자세한 내용은 [신뢰할 수 없는 데이터 보안 위험](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)을 참조하세요.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86172-104">For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-105"><xref:System.Resources.ResourceReader> 클래스의 표준 구현을 제공는 <xref:System.Resources.IResourceReader> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-105">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="86172-106">A <xref:System.Resources.ResourceReader> 인스턴스는 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86172-106">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="86172-107">.Resources 파일에 리소스를 열거 하 고 해당 이름/값 쌍을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-107">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="86172-108">다른는 <xref:System.Resources.ResourceManager> 어셈블리에 포함 된.resources 파일에서 지정 된 명명 된 리소스를 검색 하는 데 사용 되는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-108">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="86172-109"><xref:System.Resources.ResourceManager> 클래스는 반면에 이름이 사전에 알고 있는 리소스를 검색 하는 데 사용 된 <xref:System.Resources.ResourceReader> 클래스는 해당 번호 또는 정확한 이름을 알 수 없는 컴파일 타임에 리소스를 검색 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-109">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="86172-110">예를 들어 응용 프로그램 섹션 및 위치는 섹션 또는 섹션의 항목 알 수 없는 사전에 섹션의 항목으로 구성 되는 구성 정보를 저장 하려면 리소스 파일을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-110">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="86172-111">리소스 일반적으로 다음 이름을 지정할 수 있습니다 (같은 `Section1`, `Section1Item1`, `Section1Item2`등) 사용 하 여 검색 한 <xref:System.Resources.ResourceReader> 개체.</span><span class="sxs-lookup"><span data-stu-id="86172-111">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86172-112">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-112">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="86172-113">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-113">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="86172-114">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-114">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="86172-115">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-115">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="86172-116">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-116">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="86172-117">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Resources.ResourceReader> 다음 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="86172-117">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="86172-118">ResourceReader 개체 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="86172-118">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="86172-119">ResourceReader 개체의 리소스 열거</span><span class="sxs-lookup"><span data-stu-id="86172-119">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="86172-120">IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-120">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="86172-121">GetResourceData와 이름으로 리소스를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-121">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="86172-122">ResourceReader 개체 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="86172-122">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="86172-123">.Resources 파일은 텍스트 파일이 나 XML.resx 파일에서 컴파일된 이진 파일 [Resgen.exe (리소스 파일 생성기)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-123">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="86172-124">A <xref:System.Resources.ResourceReader> 개체는 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일에 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-124">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="86172-125">인스턴스화하는 <xref:System.Resources.ResourceReader> 독립 실행형.resources 파일에서 읽기에 사용 하는 개체는 <xref:System.Resources.ResourceReader> 클래스 생성자는 입력된 된 스트림을 또는.resources 파일 이름을 포함 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-125">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="86172-126">다음 예제에서는 두 가지 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="86172-126">The following example illustrates both approaches.</span></span> <span data-ttu-id="86172-127">첫 번째 인스턴스화하는 <xref:System.Resources.ResourceReader> 라는 이름의.resources 파일을 나타내는 개체 `Resources1.resources` 파일 이름을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-127">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="86172-128">두 번째 인스턴스화하는 <xref:System.Resources.ResourceReader> 라는 이름의.resources 파일을 나타내는 개체 `Resources2.resources` 는 파일에서 만든 스트림을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-128">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="86172-129">만들려면는 <xref:System.Resources.ResourceReader> 포함 된.resources 파일을 나타내는 개체를 인스턴스화하는 <xref:System.Reflection.Assembly> .resources 파일이 포함 된 어셈블리에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-129">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="86172-130">해당 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.IO.Stream> 에 전달 될 수 있는 개체는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-130">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="86172-131">다음 예제는 <xref:System.Resources.ResourceReader> 포함 된.resources 파일을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-131">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="86172-132">ResourceReader 개체의 리소스 열거</span><span class="sxs-lookup"><span data-stu-id="86172-132">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="86172-133">호출.resources 파일의 리소스를 열거 하는 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 반환 하는 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-133">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="86172-134">호출 하는 `IDictionaryEnumerator.MoveNext` 메서드를 한 리소스에서 다음으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-134">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="86172-135">메서드가 반환 `false` .resources 파일에 있는 모든 리소스 열거 될 때입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-135">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86172-136">하지만 <xref:System.Resources.ResourceReader> 클래스가 구현 하는 <xref:System.Collections.IEnumerable> 인터페이스 및 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 메서드를는 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 방법은 제공 하지 않습니다는 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-136">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="86172-137">대신,는 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.Collections.IDictionaryEnumerator> 각 리소스의 이름/값 쌍에 대 한 액세스를 제공 하는 인터페이스 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-137">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="86172-138">두 가지 방법으로 컬렉션의 개별 리소스를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-138">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="86172-139">각 리소스에서 반복할 수는 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 수집 및 사용 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 리소스 이름 및 값을 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-139">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="86172-140">동일한 형식의 모든 리소스는 하거나 각 리소스의 데이터 형식을 알고 있는 경우이 방법을 권장 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-140">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="86172-141">반복 하는 경우 각 리소스의 이름을 검색할 수 있습니다는 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 컬렉션과 호출은 <xref:System.Resources.ResourceReader.GetResourceData%2A> 리소스의 데이터를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-141">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="86172-142">각 리소스의 데이터 형식을 알 수 없는 경우 또는 이전 접근 방식에서 예외를 throw 하는 경우이 접근 방법이 권장 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-142">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="86172-143">IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-143">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="86172-144">.Resources 파일의 리소스를 열거 하는 첫 번째 방법은 직접 각 리소스의 이름/값 쌍을 검색 하는 작업이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-144">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="86172-145">호출한 후의 `IDictionaryEnumerator.MoveNext` 에서 리소스를 검색할 수는 컬렉션의 각 리소스를 이동 하는 메서드 이름을 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성 및 리소스 데이터를는 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-145">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="86172-146">다음 예제에서는 사용 하 여 이름 및.resources 파일에 각 리소스의 값을 검색 하는 방법을 보여 줍니다.는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 및 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-146">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="86172-147">이 예제를 실행 하려면 문자열 리소스를 정의 하는 ApplicationResources.txt 라는 텍스트 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="86172-147">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="86172-148">다음 명령을 사용 하 여 ApplicationResources.resources 이라는 이진 파일에 다음 텍스트 리소스 파일을 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-148">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="86172-149">**resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="86172-149">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="86172-150">다음 예제에서는 다음 사용 하 여는 <xref:System.Resources.ResourceReader> 클래스 독립 실행형 이진.resources 파일에 각 리소스를 열거 하 고 해당 키 이름 및 해당 값을 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-150">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="86172-151">리소스 데이터를 검색 하려고는 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성 다음과 같은 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-151">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="86172-152">A <xref:System.FormatException> 데이터 형식에 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="86172-152">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="86172-153">A <xref:System.IO.FileNotFoundException> 데이터 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="86172-153">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="86172-154">A <xref:System.TypeLoadException> 데이터 속해 있는 형식을 수 없는 경우를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-154">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="86172-155">.Resources 파일 수정 된 경우 수동으로 형식이 정의 된 어셈블리 응용 프로그램과 함께 포함 되어 있지 않습니다 더 또는 실수로 삭제 하는 경우 또는 어셈블리가 이전에 실행 하는 이전 버전 있는 경우 이러한 예외가 throw 되는 일반적으로, 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-155">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="86172-156">이러한 예외 중 하나를 throw 했으면 각 리소스를 열거 하 고 호출 하 여 리소스를 검색할 수 있습니다는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드에 다음 섹션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-156">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="86172-157">이 방법은 제공 하는 입력 데이터에 대 한 일부 정보는는 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성을 반환 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-157">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="86172-158">이름으로 GetResourceData 리소스 검색</span><span class="sxs-lookup"><span data-stu-id="86172-158">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="86172-159">.Resources 파일에 리소스를 열거 하는 두 번째 방법은 작업도 호출 하 여 파일의 리소스를 통해 탐색는 `IDictionaryEnumerator.MoveNext` 메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-159">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="86172-160">각 리소스에서 리소스의 이름을 검색는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성에 전달 되는 <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> 리소스의 데이터를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-160">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="86172-161">이 값이에서 바이트 배열로 반환는 `resourceData` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-161">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="86172-162">이 방법은 리소스 이름 및 값을 검색할 때 보다 더 까다롭습니다는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 및 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성, 리소스 값을 형성 하는 실제 바이트를 반환 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-162">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="86172-163">그러나 리소스를 검색 하려고 예외를 throw 하는 경우는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드 통해 리소스의 데이터 형식에 대 한 정보를 제공 하 여 예외의 원인을 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-163">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="86172-164">리소스의 데이터 형식을 나타내는 문자열에 대 한 자세한 내용은 참조 <xref:System.Resources.ResourceReader.GetResourceData%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-164">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="86172-165">다음 예제에서는이 방법을 사용 하 여 리소스를 검색 하 고 throw 된 예외를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="86172-165">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="86172-166">4 개의 문자열, 한 부울, 정수 하나, 하나의 비트맵 및 하나의 사용자 지정을 포함 하는 이진.resources 파일을 프로그래밍 방식으로 만들고 `DateTimeTZI` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-166">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="86172-167">이 예제를 실행 하려면 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-167">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="86172-168">포함 된 Library.dll 이라는 어셈블리를 만들기는 `DateTimeTZI` 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-168">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="86172-169">다음은 어셈블리에 대 한 소스 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-169">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="86172-170">다음 명령을 사용 하 여 C# 소스 코드를 컴파일하십시오.</span><span class="sxs-lookup"><span data-stu-id="86172-170">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="86172-171">또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-171">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="86172-172">컴파일하고 ContactResources.resources 라는 이름의.resources 파일을 만드는 다음 소스 코드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-172">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="86172-173">소스 코드 파일 CreateResources.cs 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-173">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="86172-174">다음 명령을 사용 하 여 C#에서 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-174">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="86172-175">또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-175">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="86172-176">컴파일하고 ContactResources.resources 파일에 리소스를 열거 하는 다음 코드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-176">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="86172-177">소스 코드를 수정한 후 (예를 들어 하 여 의도적으로 <xref:System.FormatException> 의 끝에는 `try` 블록) 하거나 런타임에 사용할 수 있도록 Library.dll 어셈블리의 이름을 바꾸는 등 보려면이 예제를 실행할 수 있습니다 어떻게에 대 한 호출이 <xref:System.Resources.ResourceReader.GetResourceData%2A> 검색 하거나 일부 리소스 정보를 다시 만들 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-177">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86172-178">
            <see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="86172-179">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-179">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="86172-180">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</span><span class="sxs-lookup"><span data-stu-id="86172-180">Use this object only with trusted data.</span></span> <span data-ttu-id="86172-181">자세한 내용은 참조 [데이터 유효성 검사](https://www.owasp.org/index.php/Data_Validation)합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-181">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="86172-182">리소스 읽기에 사용되는 입력 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-182">The input stream for reading resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86172-183">지정된 스트림에 대한 <see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-183">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-184"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader> 어셈블리에 포함 된 리소스는 독립 실행형.resources 파일 또는.resources 파일을 검색 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-184">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="86172-185">인스턴스화하는 독립 실행형.resources 파일에서 읽을 수는 <xref:System.IO.Stream> 개체를 전달 하는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-185">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="86172-186">포함 된.resources 파일에서 읽기를 호출 하는 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> .resources 파일과 패스는 반환 된의 대/소문자 구분 이름 사용 하 여 메서드 <xref:System.IO.Stream> 개체를 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-186">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86172-187">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-187">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="86172-188">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</span><span class="sxs-lookup"><span data-stu-id="86172-188">Use this object only with trusted data.</span></span> <span data-ttu-id="86172-189">자세한 내용은 참조 [데이터 유효성 검사](https://www.owasp.org/index.php/Data_Validation)합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-189">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86172-190">명명 된.txt 파일을 사용 하 여이 섹션의 예제 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-190">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="86172-191">다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-191">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="86172-192">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="86172-192">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="86172-193">다음 예제에서는 리소스 파일은 응용 프로그램의 실행 코드를 포함 하는 어셈블리에 포함 하는 것으로 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-193">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="86172-194">라는 리소스 파일을 검색 `PatientForm.resources` 현재 실행 중인 어셈블리의 이름 및 해당 리소스의 각 값이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-194">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="86172-195">C# 예제에서는 이름이 `Example.cs`, 다음 명령을 사용 하 여 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-195">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="86172-196">**csc Example.cs /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="86172-196">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="86172-197">Visual Basic 예제에서는 이름이 `Example.vb`, 다음 명령을 사용 하 여 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-197">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="86172-198">**vbc example.vb 라고 가정 /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="86172-198">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86172-199">
            <paramref name="stream" /> 매개 변수를 읽을 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-199">The <paramref name="stream" /> parameter is not readable.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86172-200">
            <paramref name="stream" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-200">The <paramref name="stream" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="86172-201">
            <paramref name="stream" />에 액세스하는 동안 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-201">An I/O error has occurred while accessing <paramref name="stream" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="86172-202">serialization 서비스를 제공 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-202">for providing serialization services.</span>
          </span>
          <span data-ttu-id="86172-203">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-203">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="86172-204">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-204">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="86172-205">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-205">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="86172-206">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-206">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="86172-207">읽을 리소스 파일의 경로와 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-207">The path and name of the resource file to read.</span>
          </span>
          <span data-ttu-id="86172-208">
            <c>파일 이름</c>은 대/소문자를 구분하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-208">
              <c>filename</c> is not case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86172-209">지정된 명명 리소스 파일에 대한 <see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-209">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-210"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29> 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader> 독립 실행형.resources 파일에서 리소스를 검색 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-210">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="86172-211">포함 된.resources 파일에서 리소스를 검색 하려면 사용 된 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-211">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86172-212">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-212">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="86172-213">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</span><span class="sxs-lookup"><span data-stu-id="86172-213">Use this object only with trusted data.</span></span> <span data-ttu-id="86172-214">자세한 내용은 참조 [데이터 유효성 검사](https://www.owasp.org/index.php/Data_Validation)합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-214">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86172-215">명명 된.txt 파일을 사용 하 여이 섹션의 예제 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-215">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="86172-216">다음 명령을 실행 하 여이.txt 파일을.resources 파일로 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-216">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="86172-217">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="86172-217">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="86172-218">다음 예제에서는 열거에 있는 리소스 `PatientForm.resources` 이름 및 각 값이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-218">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86172-219">
            <paramref name="fileName" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-219">The <paramref name="fileName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="86172-220">파일을 찾을 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-220">The file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="86172-221">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-221">An I/O error has occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="86172-222">리소스 파일에 잘못된 형식이 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-222">The resource file has an invalid format.</span>
          </span>
          <span data-ttu-id="86172-223">예를 들어 파일 길이가 0일 수 있는 경우가 해당됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-223">For example, the length of the file may be zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="86172-224">이 <see cref="T:System.Resources.ResourceReader" /> 개체에 연결된 모든 운영 체제 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-224">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-225"><xref:System.Resources.ResourceReader.Close%2A> 안전 하 게 번 호출할 수 있습니다 여러 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-225"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86172-226">다음 예제에서는 파일 리소스를 통해 이동 하 고 발견 되는 모든 키/값 쌍을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-226">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="86172-227">코드를 사용 하 여는 <xref:System.Resources.ResourceReader.Close%2A> 종료 하는 메서드는 <xref:System.Resources.ResourceReader> 고 팩에서 사용 하는 모든 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-227">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="86172-228">
            <see cref="T:System.Resources.ResourceReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-228">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-229">이 인스턴스를 사용 하 여 작업을 마쳤으면 <xref:System.Resources.ResourceReader>, 호출 <xref:System.Resources.ResourceReader.Dispose%2A> 이 인스턴스에서 사용 하는 모든 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-229">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="86172-230">이에 대 한 추가 참조를 제거 해야 <xref:System.Resources.ResourceReader> 인스턴스 가비지 수집기가 종료에 대 한 활성 상태로 유지 하지 않고 인스턴스의 메모리를 회수할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-230">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="86172-231"><xref:System.Resources.ResourceReader.Dispose%2A> 관리 및 관리 되지 않는 리소스를 해제 하는 코드를 포함 하는 전용 dispose (boolean) 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-231"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="86172-232">자세한 내용은 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-232">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="86172-233">이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-233">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86172-234">이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-234">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-235">호출 하 여 리소스를 열거할 일반적으로 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 메서드와 반복적으로 호출 된 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드는 반환 된 <xref:System.Collections.IDictionaryEnumerator> 메서드가 반환 될 때까지 개체 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-235">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="86172-236">리소스 이름은 사용할 수는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성;에서 해당 값은 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-236">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="86172-237">이 예제에서는 이러한 방식으로 리소스를 열거 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="86172-237">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="86172-238">구현은 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성으로는 <xref:System.Resources.ResourceReader> 클래스는 다음과 같은 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-238">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="86172-239">데이터가 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-239">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="86172-240">데이터 형식에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="86172-240">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="86172-241">데이터가 속해 있는 유형을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-241">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="86172-242">호출 하 여 예외를 처리할 수는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 데이터 형식 및 명명된 된 리소스에 할당 된 바이트 배열에 대 한 정보를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-242">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="86172-243">자세한 내용은의 "검색 리소스에서 이름으로 GetResourceData" 섹션을 참조 하십시오.는 <xref:System.Resources.ResourceReader> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-243">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="86172-244"><xref:System.Resources.ResourceReader> 클래스 열거자를 반환 하는 두 개의 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-244">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="86172-245"><xref:System.Resources.ResourceReader.GetEnumerator%2A> 메서드가 반환 되는 <xref:System.Collections.IDictionaryEnumerator> 인터페이스 개체 및 리소스 열거 될 때 호출할 권장 되는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-245">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86172-246">명명 된.txt 파일을 사용 하 여이 섹션의 예제 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-246">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="86172-247">다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-247">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="86172-248">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="86172-248">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="86172-249">다음 예제에서는 열거에 있는 리소스 `PatientForm.resources` 이름 및 각 값이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-249">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="86172-250">판독기가 닫혔거나 삭제되었으므로 액세스할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-250">The reader has been closed or disposed, and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="86172-251">리소스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-251">The name of a resource.</span>
          </span>
        </param>
        <param name="resourceType">
          <span data-ttu-id="86172-252">이 메서드는 반환될 때 검색된 리소스의 형식 이름을 나타내는 문자열을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-252">When this method returns, contains a string that represents the type name of the retrieved resource.</span>
          </span>
          <span data-ttu-id="86172-253">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-253">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="resourceData">
          <span data-ttu-id="86172-254">이 메서드가 반환될 때 검색된 형식의 이진 표현인 바이트 배열이 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-254">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span>
          </span>
          <span data-ttu-id="86172-255">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-255">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86172-256">열린 리소스 파일이나 스트림에서 명명된 리소스의 데이터와 형식 이름을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-256">Retrieves the type name and data of a named resource from an open resource file or stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-257"><xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드는 바이트 배열 형식의 명명된 된 리소스의 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-257">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="86172-258">일반적으로 때 사용 되는 <xref:System.Collections.IDictionaryEnumerator.Value%2A> 속성 리소스의 값을 검색 하려고 할 때 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-258">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="86172-259">`resourceType` 리소스의 데이터 형식을 나타내는 문자열이입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-259">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="86172-260">다음 값 중 하나일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-260">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="86172-261">문자열 표현을 `ResourceTypeCode` 리소스의 데이터 형식을 나타내는 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-261">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="86172-262">`ResourceTypeCode` 하려면에서 사용 되는 전용 열거형 19 일반적인 데이터 형식 중 하나를 저장 하는 특수 이진 형식을 사용 함을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-262">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="86172-263">여기에.NET Framework 기본 데이터 형식 (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>),으로 <xref:System.String>, <xref:System.DateTime>, 및 <xref:System.TimeSpan>, 또한는 `ResourceTypeCode` 열거형에는 다음 표에 표시 된 값에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-263">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="86172-264">ResourceTypeCode value</span><span class="sxs-lookup"><span data-stu-id="86172-264">ResourceTypeCode value</span></span>|<span data-ttu-id="86172-265">설명</span><span class="sxs-lookup"><span data-stu-id="86172-265">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="86172-266">데이터는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-266">The data is a byte array.</span></span> <span data-ttu-id="86172-267">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-267">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="86172-268">데이터는 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="86172-268">The data is a null reference.</span></span> <span data-ttu-id="86172-269">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> 메서드 값이 개체와 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-269">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="86172-270">데이터는 스트림을에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86172-270">The data is stored in a stream.</span></span> <span data-ttu-id="86172-271">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> 또는 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-271">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="86172-272">있다고 가정할 경우 `resourceData` 않았습니다 손상 되어 일반적으로 변환할 수 있습니다는 바이트 배열에서 원래 값으로 다시 호출 하 여 한 <xref:System.BitConverter> 또는 <xref:System.IO.BinaryReader> 메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-272">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="86172-273">Serialize 된 데이터에 할당 된 형식의 정규화 된 이름을 포함 하는 문자열은 `resourceData` 인수 (예를 들어 `System.String`).</span><span class="sxs-lookup"><span data-stu-id="86172-273">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="86172-274">또한.NET Framework 클래스 라이브러리에 포함 되지 않은 형식에서 문자열은 이름, 버전, 문화권 및 유형을 포함 하는 어셈블리의 공개 키 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-274">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="86172-275">Serialize 된 데이터의 인스턴스를 나타낸다는 것 다음 문자열을 의미 하는 예를 들어는 `Person` 에 입력는 `Extensions` 가 없는 공개 키와 지정 된 문화권이 유틸리티 라는 어셈블리의 버전 1.0에서에서 발견 되는 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-275">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="86172-276">있다고 가정할 경우 `resourceData` 손상 되지 않은 소스 형식이 사용할 수 및 `resourceData` 바이트 배열에 변환 하 여 원래 값으로 다시 바이트 배열에서 변환할 수는 <xref:System.IO.Stream> 개체 하 고는 에스트림을전달<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-276">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="86172-277">데이터 형식을 설명 하는 데 사용 하는 문자열은 <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="86172-277">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86172-278">
            <paramref name="resourceName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-278">
              <paramref name="resourceName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86172-279">
            <paramref name="resourceName" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-279">
              <paramref name="resourceName" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="86172-280">
            <paramref name="resourceName" />의 값이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-280">
              <paramref name="resourceName" /> has an invalid type.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="86172-281">검색된 리소스 데이터가 손상되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-281">The retrieved resource data is corrupt.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="86172-282">현재 <see cref="T:System.Resources.ResourceReader" /> 개체가 초기화되어 있지 않습니다. 이 개체가 닫혀 있는 것 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-282">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="86172-283">이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-283">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86172-284">이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-284">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86172-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 명시적 인터페이스 구현 이며</span><span class="sxs-lookup"><span data-stu-id="86172-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="86172-286"><xref:System.Resources.ResourceReader> 인스턴스가 <xref:System.Collections.IEnumerable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86172-286">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="86172-287">.Resources 파일의 리소스를 열거 하는 권장된 방법은 호출 하는 것은 <xref:System.Collections.IEnumerator.MoveNext%2A> 의 메서드는 <xref:System.Collections.IDictionaryEnumerator> 에서 반환 된 개체는 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="86172-287">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="86172-288">판독기가 이미 닫혀 있고 액세스할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86172-288">The reader has already been closed and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>