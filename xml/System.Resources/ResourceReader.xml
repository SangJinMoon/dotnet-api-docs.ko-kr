<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceReader.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5682738b4136d074223cbe025a9380b3cca9bc1d0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">682738b4136d074223cbe025a9380b3cca9bc1d0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</source>
          <target state="translated">순차 리소스 이름/값 쌍을 읽어 이진 리소스 파일(.resources)의 리소스를 열거합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept>: 신뢰할 수 없는 데이터를 사용하여 이 클래스에서 메서드를 호출하는 것은 보안상 위험합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터만 사용하여 클래스의 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>신뢰할 수 없는 데이터 보안 위험<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class provides a standard implementation of the <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스의 표준 구현을 제공는 <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 인스턴스는 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</source>
          <target state="translated">.Resources 파일에 리소스를 열거 하 고 해당 이름/값 쌍을 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</source>
          <target state="translated">다른는 <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> 어셈블리에 포함 된.resources 파일에서 지정 된 명명 된 리소스를 검색 하는 데 사용 되는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is used to retrieve resources whose names are known in advance, whereas the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class is useful for retrieving resources whose number or precise names are not known at compile time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> 클래스는 반면에 이름이 사전에 알고 있는 리소스를 검색 하는 데 사용 된 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스는 해당 번호 또는 정확한 이름을 알 수 없는 컴파일 타임에 리소스를 검색 하는 데 유용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</source>
          <target state="translated">예를 들어 응용 프로그램 섹션 및 위치는 섹션 또는 섹션의 항목 알 수 없는 사전에 섹션의 항목으로 구성 되는 구성 정보를 저장 하려면 리소스 파일을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Resources can then be named generically (such as <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, and so on) and retrieved by using a <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> object.</source>
          <target state="translated">리소스 일반적으로 다음 이름을 지정할 수 있습니다 (같은 <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>등) 사용 하 여 검색 한 <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> 개체.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, see the following sections:</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 다음 섹션을 참조 하세요.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceReader object<ept id="p1">](#instantiate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ResourceReader 개체 인스턴스화<ept id="p1">](#instantiate)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Enumerating a ResourceReader object's resources<ept id="p1">](#enumerate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ResourceReader 개체의 리소스 열거<ept id="p1">](#enumerate)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by using IDictionaryEnumerator properties<ept id="p1">](#idictionaryenumerator)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.<ept id="p1">](#idictionaryenumerator)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by name with GetResourceData<ept id="p1">](#getresourcedata)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>GetResourceData와 이름으로 리소스를 검색합니다.<ept id="p1">](#getresourcedata)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instantiating a ResourceReader Object</source>
          <target state="translated">ResourceReader 개체 인스턴스화</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
          <target state="translated">.Resources 파일은 텍스트 파일이 나 XML.resx 파일에서 컴파일된 이진 파일 <bpt id="p1">[</bpt>Resgen.exe (리소스 파일 생성기)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 개체는 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일에 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that reads from a standalone .resources file, use the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class constructor with either an input stream or a string that contains the .resources file name.</source>
          <target state="translated">인스턴스화하는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 독립 실행형.resources 파일에서 읽기에 사용 하는 개체는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스 생성자는 입력된 된 스트림을 또는.resources 파일 이름을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates both approaches.</source>
          <target state="translated">다음 예제에서는 두 가지 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources1.resources`</ph> by using its file name.</source>
          <target state="translated">첫 번째 인스턴스화하는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 라는 이름의.resources 파일을 나타내는 개체 <ph id="ph2">`Resources1.resources`</ph> 파일 이름을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources2.resources`</ph> by using a stream created from the file.</source>
          <target state="translated">두 번째 인스턴스화하는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 라는 이름의.resources 파일을 나타내는 개체 <ph id="ph2">`Resources2.resources`</ph> 는 파일에서 만든 스트림을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To create a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file, instantiate an <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> object from the assembly in which the .resources file is embedded.</source>
          <target state="translated">만들려면는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 포함 된.resources 파일을 나타내는 개체를 인스턴스화하는 <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> .resources 파일이 포함 된 어셈블리에서 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Its <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object that can be passed to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> 메서드가 반환 되는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 에 전달 될 수 있는 개체는 <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 포함 된.resources 파일을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Enumerating a ResourceReader Object's Resources</source>
          <target state="translated">ResourceReader 개체의 리소스 열거</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To enumerate the resources in a .resources file, you call the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">호출.resources 파일의 리소스를 열거 하는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> 반환 하는 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move from one resource to the next.</source>
          <target state="translated">호출 하는 <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> 메서드를 한 리소스에서 다음으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The method returns <ph id="ph1">`false`</ph> when all the resources in the .resources file have been enumerated.</source>
          <target state="translated">메서드가 반환 <ph id="ph1">`false`</ph> .resources 파일에 있는 모든 리소스 열거 될 때입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and the <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, the <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method does not provide the <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스가 구현 하는 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> 인터페이스 및 <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드를는 <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 방법은 제공 하지 않습니다는 <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method  returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object that provides access to each resource's name/value pair.</source>
          <target state="translated">대신,는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드가 반환 되는 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 각 리소스의 이름/값 쌍에 대 한 액세스를 제공 하는 인터페이스 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the individual resources in the collection in two ways:</source>
          <target state="translated">두 가지 방법으로 컬렉션의 개별 리소스를 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can iterate each resource in the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and use <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> properties to retrieve the resource name and value.</source>
          <target state="translated">각 리소스에서 반복할 수는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> 수집 및 사용 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> 리소스 이름 및 값을 검색할 속성입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</source>
          <target state="translated">동일한 형식의 모든 리소스는 하거나 각 리소스의 데이터 형식을 알고 있는 경우이 방법을 권장 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the name of each resource when you iterate the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and call the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">반복 하는 경우 각 리소스의 이름을 검색할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> 컬렉션과 호출은 <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 리소스의 데이터를 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</source>
          <target state="translated">각 리소스의 데이터 형식을 알 수 없는 경우 또는 이전 접근 방식에서 예외를 throw 하는 경우이 접근 방법이 권장 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Using IDictionaryEnumerator Properties</source>
          <target state="translated">IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</source>
          <target state="translated">.Resources 파일의 리소스를 열거 하는 첫 번째 방법은 직접 각 리소스의 이름/값 쌍을 검색 하는 작업이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After you call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move to each resource in the collection, you can retrieve the resource name from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property and the resource data from the <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">호출한 후의 <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> 에서 리소스를 검색할 수는 컬렉션의 각 리소스를 이동 하는 메서드 이름을 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 속성 및 리소스 데이터를는 <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example shows how to retrieve the name and value of each resource in a .resources file by using the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">다음 예제에서는 사용 하 여 이름 및.resources 파일에 각 리소스의 값을 검색 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, create the following text file named ApplicationResources.txt to define string resources.</source>
          <target state="translated">이 예제를 실행 하려면 문자열 리소스를 정의 하는 ApplicationResources.txt 라는 텍스트 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</source>
          <target state="translated">다음 명령을 사용 하 여 ApplicationResources.resources 이라는 이진 파일에 다음 텍스트 리소스 파일을 변환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</source>
          <target state="translated">다음 예제에서는 다음 사용 하 여는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스 독립 실행형 이진.resources 파일에 각 리소스를 열거 하 고 해당 키 이름 및 해당 값을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The attempt to retrieve resource data from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property can throw the following exceptions:</source>
          <target state="translated">리소스 데이터를 검색 하려고는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성 다음과 같은 예외를 throw 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> if the data is not in the expected format.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> 데이터 형식에 없는 경우.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if the assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> 데이터 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> if the type to which the data belongs cannot be cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> 데이터 속해 있는 형식을 수 없는 경우를 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</source>
          <target state="translated">.Resources 파일 수정 된 경우 수동으로 형식이 정의 된 어셈블리 응용 프로그램과 함께 포함 되어 있지 않습니다 더 또는 실수로 삭제 하는 경우 또는 어셈블리가 이전에 실행 하는 이전 버전 있는 경우 이러한 예외가 throw 되는 일반적으로, 형식입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method, as the following section shows.</source>
          <target state="translated">이러한 예외 중 하나를 throw 했으면 각 리소스를 열거 하 고 호출 하 여 리소스를 검색할 수 있습니다는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 메서드에 다음 섹션으로 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach provides you with some information about the data type that the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property attempted to return.</source>
          <target state="translated">이 방법은 제공 하는 입력 데이터에 대 한 일부 정보는는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성을 반환 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Name with GetResourceData</source>
          <target state="translated">이름으로 GetResourceData 리소스 검색</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method.</source>
          <target state="translated">.Resources 파일에 리소스를 열거 하는 두 번째 방법은 작업도 호출 하 여 파일의 리소스를 통해 탐색는 <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For each resource, you retrieve the resource's name from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property, which is then passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">각 리소스에서 리소스의 이름을 검색는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 속성에 전달 되는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> 리소스의 데이터를 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This is returned as a byte array in the <ph id="ph1">`resourceData`</ph> argument.</source>
          <target state="translated">이 값이에서 바이트 배열로 반환는 <ph id="ph1">`resourceData`</ph> 인수입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach is more awkward than retrieving the resource name and value from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties, because it returns the actual bytes that form the resource value.</source>
          <target state="translated">이 방법은 리소스 이름 및 값을 검색할 때 보다 더 까다롭습니다는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성, 리소스 값을 형성 하는 실제 바이트를 반환 하기 때문에 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>However, if the attempt to retrieve the resource throws an exception, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method can help identify the source of the exception by supplying information about the resource's data type.</source>
          <target state="translated">그러나 리소스를 검색 하려고 예외를 throw 하는 경우는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 메서드 통해 리소스의 데이터 형식에 대 한 정보를 제공 하 여 예외의 원인을 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about the string that indicates the resource's data type, see <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</source>
          <target state="translated">리소스의 데이터 형식을 나타내는 문자열에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</source>
          <target state="translated">다음 예제에서는이 방법을 사용 하 여 리소스를 검색 하 고 throw 된 예외를 처리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <ph id="ph1">`DateTimeTZI`</ph> object.</source>
          <target state="translated">4 개의 문자열, 한 부울, 정수 하나, 하나의 비트맵 및 하나의 사용자 지정을 포함 하는 이진.resources 파일을 프로그래밍 방식으로 만들고 <ph id="ph1">`DateTimeTZI`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, do the following:</source>
          <target state="translated">이 예제를 실행 하려면 다음을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Create an assembly named Library.dll that contains the <ph id="ph1">`DateTimeTZI`</ph> structure.</source>
          <target state="translated">포함 된 Library.dll 이라는 어셈블리를 만들기는 <ph id="ph1">`DateTimeTZI`</ph> 구조입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following is the source code for the assembly.</source>
          <target state="translated">다음은 어셈블리에 대 한 소스 코드입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile the source code in C# by using the following command:</source>
          <target state="translated">다음 명령을 사용 하 여 C# 소스 코드를 컴파일하십시오.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</source>
          <target state="translated">컴파일하고 ContactResources.resources 라는 이름의.resources 파일을 만드는 다음 소스 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The source code file is named CreateResources.cs.</source>
          <target state="translated">소스 코드 파일 CreateResources.cs 라고 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can compile it in C# by using the following command:</source>
          <target state="translated">다음 명령을 사용 하 여 C#에서 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and run the following code to enumerate the resources in the ContactResources.resources file.</source>
          <target state="translated">컴파일하고 ContactResources.resources 파일에 리소스를 열거 하는 다음 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After modifying the source code (for example, by deliberately throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> at the end of the <ph id="ph2">`try`</ph> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> enable you to retrieve or recreate some resource information.</source>
          <target state="translated">소스 코드를 수정한 후 (예를 들어 하 여 의도적으로 <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> 의 끝에는 <ph id="ph2">`try`</ph> 블록) 하거나 런타임에 사용할 수 있도록 Library.dll 어셈블리의 이름을 바꾸는 등 보려면이 예제를 실행할 수 있습니다 어떻게에 대 한 호출이 <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 검색 하거나 일부 리소스 정보를 다시 만들 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Use this object only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The input stream for reading resources.</source>
          <target state="translated">리소스 읽기에 사용되는 입력 스트림입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified stream.</source>
          <target state="translated">지정된 스트림에 대한 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> 생성자를 인스턴스화하는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 어셈블리에 포함 된 리소스는 독립 실행형.resources 파일 또는.resources 파일을 검색 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from a standalone .resources file, instantiate a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and pass it to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">인스턴스화하는 독립 실행형.resources 파일에서 읽을 수는 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 개체를 전달 하는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from an embedded .resources file, call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method with the case-sensitive name of the .resources file, and pass the returned <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">포함 된.resources 파일에서 읽기를 호출 하는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> .resources 파일과 패스는 반환 된의 대/소문자 구분 이름 사용 하 여 메서드 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 개체를 <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">명명 된.txt 파일을 사용 하 여이 섹션의 예제 <ph id="ph1">`PatientForm.txt`</ph> 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</source>
          <target state="translated">다음 예제에서는 리소스 파일은 응용 프로그램의 실행 코드를 포함 하는 어셈블리에 포함 하는 것으로 가정 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>It retrieves a resource file named <ph id="ph1">`PatientForm.resources`</ph> from the currently executing assemblies and displays the name and value of each of its resources.</source>
          <target state="translated">라는 리소스 파일을 검색 <ph id="ph1">`PatientForm.resources`</ph> 현재 실행 중인 어셈블리의 이름 및 해당 리소스의 각 값이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the C# example is named <ph id="ph1">`Example.cs`</ph>, you can compile it by using the following command:</source>
          <target state="translated">C# 예제에서는 이름이 <ph id="ph1">`Example.cs`</ph>, 다음 명령을 사용 하 여 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the Visual Basic example is named <ph id="ph1">`Example.vb`</ph>, you can compile it by using the following command:</source>
          <target state="translated">Visual Basic 예제에서는 이름이 <ph id="ph1">`Example.vb`</ph>, 다음 명령을 사용 하 여 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>vbc example.vb 라고 가정 /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is not readable.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 매개 변수를 읽을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>An I/O error has occurred while accessing <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>에 액세스하는 동안 I/O 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">serialization 서비스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">보안 동작: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The path and name of the resource file to read.</source>
          <target state="translated">읽을 리소스 파일의 경로와 이름입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> is not case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>파일 이름<ept id="p1">&lt;/c&gt;</ept>은 대/소문자를 구분하지 않습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified named resource file.</source>
          <target state="translated">지정된 명명 리소스 파일에 대한 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources from a standalone .resources file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> 생성자를 인스턴스화하는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 독립 실행형.resources 파일에서 리소스를 검색 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>To retrieve resources from an embedded .resources file, use the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">포함 된.resources 파일에서 리소스를 검색 하려면 사용 된 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 개체의 인스턴스를 사용 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 개체를 사용 하십시오.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">명명 된.txt 파일을 사용 하 여이 섹션의 예제 <ph id="ph1">`PatientForm.txt`</ph> 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>You can compile this .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">다음 명령을 실행 하 여이.txt 파일을.resources 파일로 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">다음 예제에서는 열거에 있는 리소스 <ph id="ph1">`PatientForm.resources`</ph> 이름 및 각 값이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The file cannot be found.</source>
          <target state="translated">파일을 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The resource file has an invalid format.</source>
          <target state="translated">리소스 파일에 잘못된 형식이 있는 경우</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For example, the length of the file may be zero.</source>
          <target state="translated">예를 들어 파일 길이가 0일 수 있는 경우가 해당됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Close">
          <source>Releases all operating system resources associated with this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체에 연결된 모든 운영 체제 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> 안전 하 게 번 호출할 수 있습니다 여러 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The following example moves through a file's resources and displays all the key/value pairs it finds.</source>
          <target state="translated">다음 예제에서는 파일 리소스를 통해 이동 하 고 발견 되는 모든 키/값 쌍을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The code then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> method to shut down the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> and to release all resources used by it.</source>
          <target state="translated">코드를 사용 하 여는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> 종료 하는 메서드는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 고 팩에서 사용 하는 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>When you are finished using this instance of <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, call <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> to release all resources used by this instance.</source>
          <target state="translated">이 인스턴스를 사용 하 여 작업을 마쳤으면 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, 호출 <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> 이 인스턴스에서 사용 하는 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>You should eliminate further references to this <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</source>
          <target state="translated">이에 대 한 추가 참조를 제거 해야 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 인스턴스 가비지 수집기가 종료에 대 한 활성 상태로 유지 하지 않고 인스턴스의 메모리를 회수할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> 관리 및 관리 되지 않는 리소스를 해제 하는 코드를 포함 하는 전용 dispose (boolean) 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체에 대한 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체에 대한 열거자입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Typically, you enumerate resources by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method and then repeatedly calling the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">호출 하 여 리소스를 열거할 일반적으로 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> 메서드와 반복적으로 호출 된 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 메서드는 반환 된 <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 메서드가 반환 될 때까지 개체 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The resource name is available from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property; its value from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">리소스 이름은 사용할 수는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> 속성;에서 해당 값은 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example illustrates how to enumerate resources in this way.</source>
          <target state="translated">이 예제에서는 이러한 방식으로 리소스를 열거 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property by the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class can throw the following exceptions:</source>
          <target state="translated">구현은 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> 속성으로는 <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스는 다음과 같은 예외를 throw 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">데이터가 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The data is not in the expected format.</source>
          <target state="translated">데이터 형식에 없는 경우</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The type to which the data belongs cannot be found.</source>
          <target state="translated">데이터가 속해 있는 유형을 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can handle the exception by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve information about the data type and the byte array assigned to the named resource.</source>
          <target state="translated">호출 하 여 예외를 처리할 수는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 데이터 형식 및 명명된 된 리소스에 할당 된 바이트 배열에 대 한 정보를 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class topic.</source>
          <target state="translated">자세한 내용은의 "검색 리소스에서 이름으로 GetResourceData" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class includes two methods that return enumerators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 클래스 열거자를 반환 하는 두 개의 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object and is the recommended method to call when enumerating resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 인터페이스 개체 및 리소스 열거 될 때 호출할 권장 되는 방법입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">명명 된.txt 파일을 사용 하 여이 섹션의 예제 <ph id="ph1">`PatientForm.txt`</ph> 응용 프로그램에서 사용 하는 리소스를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">다음 예제에서는 열거에 있는 리소스 <ph id="ph1">`PatientForm.resources`</ph> 이름 및 각 값이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The reader has been closed or disposed, and cannot be accessed.</source>
          <target state="translated">판독기가 닫혔거나 삭제되었으므로 액세스할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The name of a resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a string that represents the type name of the retrieved resource.</source>
          <target state="translated">이 메서드는 반환될 때 검색된 리소스의 형식 이름을 나타내는 문자열을 포함합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a byte array that is the binary representation of the retrieved type.</source>
          <target state="translated">이 메서드가 반환될 때 검색된 형식의 이진 표현인 바이트 배열이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Retrieves the type name and data of a named resource from an open resource file or stream.</source>
          <target state="translated">열린 리소스 파일이나 스트림에서 명명된 리소스의 데이터와 형식 이름을 검색합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method retrieves the value of a named resource as a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> 메서드는 바이트 배열 형식의 명명된 된 리소스의 값을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It is typically used when the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> property throws an exception when it tries to retrieve the value of a resource.</source>
          <target state="translated">일반적으로 때 사용 되는 <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> 속성 리소스의 값을 검색 하려고 할 때 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`resourceType`</ph> is a string that represents the data type of the resource.</source>
          <target state="translated"><ph id="ph1">`resourceType`</ph> 리소스의 데이터 형식을 나타내는 문자열이입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It can be any of the following values:</source>
          <target state="translated">다음 값 중 하나일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string representation of a <ph id="ph1">`ResourceTypeCode`</ph> enumeration member that indicates the data type of the resource.</source>
          <target state="translated">문자열 표현을 <ph id="ph1">`ResourceTypeCode`</ph> 리소스의 데이터 형식을 나타내는 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`ResourceTypeCode`</ph> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</source>
          <target state="translated"><ph id="ph1">`ResourceTypeCode`</ph> 하려면에서 사용 되는 전용 열거형 19 일반적인 데이터 형식 중 하나를 저장 하는 특수 이진 형식을 사용 함을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>These include the .NET Framework primitive data types (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), as well as <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, and <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, In addition, the <ph id="ph17">`ResourceTypeCode`</ph> enumeration includes the values shown in the following table.</source>
          <target state="translated">여기에.NET Framework 기본 데이터 형식 (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>),으로 <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, 및 <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, 또한는 <ph id="ph17">`ResourceTypeCode`</ph> 열거형에는 다음 표에 표시 된 값에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>ResourceTypeCode value</source>
          <target state="translated">ResourceTypeCode value</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a byte array.</source>
          <target state="translated">데이터는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a null reference.</source>
          <target state="translated">데이터는 null 참조입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method with an object whose value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> 메서드 값이 개체와 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is stored in a stream.</source>
          <target state="translated">데이터는 스트림을에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 데이터에 대 한 호출을 수행한 결과 형식 일반적으로 <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> method.</source>
          <target state="translated">있다고 가정할 경우 <ph id="ph1">`resourceData`</ph> 않았습니다 손상 되어 일반적으로 변환할 수 있습니다는 바이트 배열에서 원래 값으로 다시 호출 하 여 한 <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>A string that contains the fully qualified name of the type whose serialized data is assigned to the <ph id="ph1">`resourceData`</ph> argument (for example, <ph id="ph2">`System.String`</ph>).</source>
          <target state="translated">Serialize 된 데이터에 할당 된 형식의 정규화 된 이름을 포함 하는 문자열은 <ph id="ph1">`resourceData`</ph> 인수 (예를 들어 <ph id="ph2">`System.String`</ph>).</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</source>
          <target state="translated">또한.NET Framework 클래스 라이브러리에 포함 되지 않은 형식에서 문자열은 이름, 버전, 문화권 및 유형을 포함 하는 어셈블리의 공개 키 포함 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>For example, the following string indicates that the serialized data represents an instance of the <ph id="ph1">`Person`</ph> type in the <ph id="ph2">`Extensions`</ph> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</source>
          <target state="translated">Serialize 된 데이터의 인스턴스를 나타낸다는 것 다음 문자열을 의미 하는 예를 들어는 <ph id="ph1">`Person`</ph> 에 입력는 <ph id="ph2">`Extensions`</ph> 가 없는 공개 키와 지정 된 문화권이 유틸리티 라는 어셈블리의 버전 1.0에서에서 발견 되는 네임 스페이스에 있습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted and that the source type is available, <ph id="ph2">`resourceData`</ph> can be converted from a byte array back to its original value by converting the byte array to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object and passing the stream to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">있다고 가정할 경우 <ph id="ph1">`resourceData`</ph> 손상 되지 않은 소스 형식이 사용할 수 및 <ph id="ph2">`resourceData`</ph> 바이트 배열에 변환 하 여 원래 값으로 다시 바이트 배열에서 변환할 수는 <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> 개체 하 고는 에스트림을전달<ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph>메서드.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string used to describe the data type in the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">데이터 형식을 설명 하는 데 사용 하는 문자열은 <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph>가 없는 경우</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> has an invalid type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph>의 값이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The retrieved resource data is corrupt.</source>
          <target state="translated">검색된 리소스 데이터가 손상되었습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object is not initialized, probably because it is closed.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체가 초기화되어 있지 않습니다. 이 개체가 닫혀 있는 것 같습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체에 대한 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> 개체에 대한 열거자입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 명시적 인터페이스 구현 이며</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The recommended approach to enumerating the resources in a .resources file is to call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">.Resources 파일의 리소스를 열거 하는 권장된 방법은 호출 하는 것은 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> 에서 반환 된 개체는 <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The reader has already been closed and cannot be accessed.</source>
          <target state="translated">판독기가 이미 닫혀 있고 액세스할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>