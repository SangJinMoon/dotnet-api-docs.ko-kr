<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InstanceStore.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56596a79c48ca9827c47f213b39d9aec72e827a2f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6596a79c48ca9827c47f213b39d9aec72e827a2f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>Represents an instance store.</source>
          <target state="translated">인스턴스 저장소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>A persistence provider provides access to an instance store through a concrete implementation of the <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> class.</source>
          <target state="translated">지속성 공급자는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> 클래스의 구체적 구현을 통해 인스턴스 저장소에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing.</source>
          <target state="translated">지속성 공급자는 명령 실행이 종료된 후에도 TryCommand에 전달된 핸들에서 InstanceHandle.Free를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.</source>
          <target state="translated">그러나 지속성 공급자는 InstanceHandle 또는 InstanceOwner 개체에 대한 강한 참조를 보유할 수 없습니다. 이 경우 InstanceStore의 가비지 수집이 차단될 수 있기 때문입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>Workflow definitions for persisted workflows cannot be changed.</source>
          <target state="translated">지속형된 워크플로에 대 한 워크플로 정의 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.</source>
          <target state="translated">워크플로 정의 유지 된 후 변경 되 면 워크플로 런타임은 워크플로가 다시 로드할 때 작동이 중단 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.#ctor">
          <source>Initializes an instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceStore" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceStore" /&gt;</ph> 클래스의 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The command to be executed.</source>
          <target state="translated">실행할 명령입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout value for the command execution.</source>
          <target state="translated">명령 실행에 대한 시간 제한 값입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</source>
          <target state="translated">비동기 작업의 완료에 대한 알림을 수신하는 비동기 콜백 대리자입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state information.</source>
          <target state="translated">상태 정보입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Asynchronously executes persistence commands such as <ph id="ph1">&lt;see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /&gt;</ph>와 같은 지속성 명령을 비동기적으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the asynchronous operation.</source>
          <target state="translated">비동기 작업의 상태입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A host calls the <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A&gt;</ph> method to execute a persistence command against an instance handle asynchronously.</source>
          <target state="translated">호스트는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A&gt;</ph> 메서드를 호출하여 인스턴스 핸들에 대해 비동기적으로 지속성 명령을 실행합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The host obtains the instance handle by invoking the <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> method.</source>
          <target state="translated">호스트는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> 메서드를 호출하여 인스턴스 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</source>
          <target state="translated">인스턴스 핸들은 인스턴스, 인스턴스 소유자 또는 인스턴스 잠금과 같은 명령 주체 및 컨텍스트를 나타내는 엔터티에 바인딩될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Only one command may be issued against an instance handle at a time.</source>
          <target state="translated">하나의 인스턴스 핸들에 대해 한 번에 하나의 명령만 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The instance context.</source>
          <target state="translated">인스턴스 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The persistence command to be executed.</source>
          <target state="translated">실행할 지속성 명령입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout value for the command execution.</source>
          <target state="translated">명령 실행에 대한 시간 제한 값입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</source>
          <target state="translated">비동기 작업의 완료에 대한 알림을 수신하는 비동기 콜백 대리자입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state information.</source>
          <target state="translated">상태 정보입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A persistence provider implements this method, which determines whether a particular persistence command can be executed.</source>
          <target state="translated">지속성 공급자는 특정 지속성 명령이 실행될 수 있는지 여부를 확인하는 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the command can be executed, executes the command asynchronously.</source>
          <target state="translated">명령을 실행할 수 있으면 비동기적으로 명령을 실행합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the asynchronous operation.</source>
          <target state="translated">비동기 작업의 상태입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.</source>
          <target state="translated">명령을 실행할 수 있으면 지속성 공급자는 InstancePersistenceContext에서 관련 메서드를 호출하여 명령 결과를 제공합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Even though this method is declared as <ph id="ph1">`virtual`</ph> rather than <ph id="ph2">`abstract`</ph>, there is no implementation.</source>
          <target state="translated">이 메서드는로 선언 되는 경우에 <ph id="ph1">`virtual`</ph> 대신 <ph id="ph2">`abstract`</ph>, 구현은 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method must be overridden in order to provide functionality.</source>
          <target state="translated">기능을 제공 하기 위해이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The period after which the operation times out.</source>
          <target state="translated">작업 시간이 초과되는 기간입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called after the asynchronous operation is complete.</source>
          <target state="translated">비동기 작업이 완료된 후 호출되는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object containing the state information associated with the asynchronous operation.</source>
          <target state="translated">비동기 작업과 관련된 상태 정보가 포함된 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.</source>
          <target state="translated">인스턴스 저장소에서 특정 인스턴스 핸들에 대해 발생한 이벤트를 수신하기 위하여 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object..</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>Creates an instance handle.</source>
          <target state="translated">인스턴스 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Runtime.DurableInstancing.InstanceStore">
          <source>If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.</source>
          <target state="translated">DefaultInstanceOwner가 설정되면 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle">
          <source>Creates an instance handle.</source>
          <target state="translated">인스턴스 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle">
          <source>The instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>An instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>Must not be Guid.Empty.</source>
          <target state="translated">Guid.Empty가 아니어야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>Creates an instance handle.</source>
          <target state="translated">인스턴스 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.</source>
          <target state="translated">DefaultInstanceOwner가 설정되면 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>The instance identifier passed as a parameter is automatically bound as the new handle’s instance.</source>
          <target state="translated">매개 변수로 전달된 인스턴스 식별자는 자동으로 새 핸들의 인스턴스로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)">
          <source>The instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The owner of an instance.</source>
          <target state="translated">인스턴스 소유자입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>Creates an instance handle.</source>
          <target state="translated">인스턴스 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.</source>
          <target state="translated">매개 변수로 전달된 인스턴스 소유자가 null이 아닌 경우 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)</source>
          <target state="translated">그렇지 않은 경우 DefaultInstanceOwner가 설정되더라도 인스턴스 소유자가 바인딩되지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>A null value indicates that the new handle should not be automatically bound to an instance owner.</source>
          <target state="translated">null 값은 새 핸들이 인스턴스 소유자로 자동으로 바인딩되지 않아야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>An InstanceOwner object  that represents the owner of an instance.</source>
          <target state="translated">인스턴스 소유자를 나타내는 InstanceOwner 개체입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.</source>
          <target state="translated">null을 이 매개 변수의 값으로 전달하여 새 핸들이 인스턴스 소유자로 자동으로 바인딩되지 않아야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>An instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>Must not be Guid.Empty.</source>
          <target state="translated">Guid.Empty가 아니어야 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>Creates an instance handle.</source>
          <target state="translated">인스턴스 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.</source>
          <target state="translated">매개 변수로 전달된 인스턴스 소유자가 null이 아닌 경우 값은 자동으로 새 핸들의 인스턴스 소유자로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.</source>
          <target state="translated">그렇지 않은 경우 DefaultInstanceOwner가 설정되더라도 인스턴스 소유자가 바인딩되지 않습니다. 매개 변수로 전달된 인스턴스 식별자는 자동으로 새 핸들의 인스턴스로 바인딩됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)">
          <source>The instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>Gets or sets the default instance owner.</source>
          <target state="translated">기본 인스턴스 소유자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>The default instance owner.</source>
          <target state="translated">기본 인스턴스 소유자입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>Some hosts infer the instance owner to use by reading this property.</source>
          <target state="translated">일부 호스트는 이 속성을 읽어 사용할 소유자를 유추합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>WorkflowApplication can use this property.</source>
          <target state="translated">WorkflowApplication에서 이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>WorkflowServiceHost does not use this property.</source>
          <target state="translated">WorkflowServiceHost에서는 이 속성을 사용하지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>The DefaultInstanceOwner propery must be set to null when it is no longer necessary.</source>
          <target state="translated">DefaultInstanceOwner 속성은 더 이상 필요하지 않을 경우 null로 설정되어야 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.</source>
          <target state="translated">DefaultInstanceOwner가 null이 아닌 경우 InstanceStore 개체가 가비지 수집되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>Even though this method is declared as <ph id="ph1">`virtual`</ph> rather than <ph id="ph2">`abstract`</ph>, there is no implementation.</source>
          <target state="translated">이 메서드는로 선언 되는 경우에 <ph id="ph1">`virtual`</ph> 대신 <ph id="ph2">`abstract`</ph>, 구현은 없습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner">
          <source>This method must be overridden in order to provide functionality.</source>
          <target state="translated">기능을 제공 하기 위해이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)">
          <source>The result of the operation.</source>
          <target state="translated">작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)">
          <source>Ends the asynchronous operation.</source>
          <target state="translated">비동기 작업을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)">
          <source>An InstanceView object  representing the known state of the instance after the successful completion of the command.</source>
          <target state="translated">명령이 성공적으로 완료된 후 인스턴스의 알려진 상태를 나타내는 InstanceView 개체입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)">
          <source>If BeginExecute was called under a transaction, this state may include uncommitted data.</source>
          <target state="translated">트랜잭션에서 BeginExecute가 호출되면 이 상태에는 커밋되지 않은 데이터가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)">
          <source>Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.</source>
          <target state="translated">트랜잭션이 성공적으로 커밋되면 InstanceView 개체의 데이터는 커밋된 것으로 간주될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>The result of the operation.</source>
          <target state="translated">작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>Ends an asynchronous operation.</source>
          <target state="translated">비동기 작업을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method.</source>
          <target state="translated">지속성 공급자 구현에서는 BeginTryCommand 메서드에 전달된 명령을 지원하지 않을 경우 false를 반환합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>Otherwise it should return true or throw an exception.</source>
          <target state="translated">그렇지 않은 경우 true를 반환하거나 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>Even though this method is declared as <ph id="ph1">`virtual`</ph> rather than <ph id="ph2">`abstract`</ph>, there is no implementation.</source>
          <target state="translated">이 메서드는로 선언 되는 경우에 <ph id="ph1">`virtual`</ph> 대신 <ph id="ph2">`abstract`</ph>, 구현은 없습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)">
          <source>This method must be overridden in order to provide functionality.</source>
          <target state="translated">기능을 제공 하기 위해이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)">
          <source>An IAsyncResult object that was handed over to the client by the Begin method.</source>
          <target state="translated">Begin 메서드에 의해 클라이언트에 전달된 IAsyncResult 개체입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)">
          <source>Ends the asynchronous operation initiated by the <ph id="ph1">&lt;see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 메서드에 의해 시작된 비동기 작업을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> objects..</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> 개체의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>An instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>The command to be executed.</source>
          <target state="translated">실행할 명령입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>The timeout value for the operation.</source>
          <target state="translated">작업의 시간 제한 값입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>Executes a persistence command synchronously.</source>
          <target state="translated">지속성 명령을 동기적으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>Examples of persistence commands are: <ph id="ph1">&lt;see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /&gt;</ph>.</source>
          <target state="translated">지속성 명령의 예로는 <ph id="ph1">&lt;see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /&gt;</ph>가 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>An InstanceView object representing the known state of the instance after the successful completion of the command.</source>
          <target state="translated">명령이 성공적으로 완료된 후 인스턴스의 알려진 상태를 나타내는 InstanceView 개체입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>If Execute was called under a transaction, this state may include uncommitted data.</source>
          <target state="translated">트랜잭션에서 Execute가 호출되면 이 상태에는 커밋되지 않은 데이터가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>Once the transaction is committed successfully, the data in the InstanceView object can be considered committed</source>
          <target state="translated">트랜잭션이 성공적으로 커밋되면 InstanceView 개체의 데이터는 커밋된 것으로 간주될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>A host calls the <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A&gt;</ph> method to execute a persistence command against an instance handle, which the host obtains by invoking the <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> method.</source>
          <target state="translated">호스트는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A&gt;</ph> 메서드를 호출하여 인스턴스 핸들에 대해 지속성 명령을 실행합니다. 이때 인스턴스 핸들은 호스트가 <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> 메서드를 호출하여 가져옵니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</source>
          <target state="translated">인스턴스 핸들은 인스턴스, 인스턴스 소유자 또는 인스턴스 잠금과 같은 명령 주체 및 컨텍스트를 나타내는 엔터티에 바인딩될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>Only one command may be issued against an instance handle at a time.</source>
          <target state="translated">하나의 인스턴스 핸들에 대해 한 번에 하나의 명령만 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>If this method is executed with a <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph>, it will create an <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> and bind it to the instance.</source>
          <target state="translated">으로이 메서드를 실행 한 <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph>, 만들어집니다는 <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> 인스턴스에 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed.</source>
          <target state="translated">다른 프로세스가 해당 워크플로;에 액세스할 수 됩니다. 프로세스가 종료 되 면 워크플로 복구 하거나 실행할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>If such a workflow is executed again, a <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> will be thrown.</source>
          <target state="translated">워크플로 다시 실행 되는 경우는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph> is not used, the instance store will create a temporary <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> that will be deleted at the end of the process.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph> 은 사용 하지 않을 경우 인스턴스 저장소 만들어집니다. 임시 <ph id="ph2">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> 하는 프로세스의 끝에 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the <bpt id="p1">**</bpt>HostLockRenewalPeriod<ept id="p1">**</ept> parameter has expired.</source>
          <target state="translated">그러나 프로세스 워크플로의 마지막 지 속성 지점 앞으로 끝나는 경우이 예외가 throw 됩니다, 시간에 지정 된 경우는 <bpt id="p1">**</bpt>HostLockRenewalPeriod<ept id="p1">**</ept> 매개 변수 만료 되었습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /&gt;</ph> object representing the owner of an instance.</source>
          <target state="translated">인스턴스의 소유자를 나타내는 <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>Gets all the signaled events bound to an <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /&gt;</ph> 개체에 바인딩된, 신호를 받은 모든 이벤트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> objects..</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> 개체 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners">
          <source>Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.</source>
          <target state="translated">유효한 인스턴스 핸들에 바인딩되거나 가비지 수집되지 않은 각 InstanceOwner 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners">
          <source>The owner of the instance.</source>
          <target state="translated">인스턴스 소유자입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners">
          <source>Returns an array of InstanceOwner objects.</source>
          <target state="translated">InstanceOwner 개체 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)">
          <source>The instance handle that was freed.</source>
          <target state="translated">해제된 인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)">
          <source>The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.</source>
          <target state="translated">OnNewInstanceHandle에서 반환된 지속성 공급자의 사용자 컨텍스트 정보이거나, OnNewInstanceHandle이 재정의되지 않는 경우 null입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)">
          <source>Invoked when an instance handle is freed.</source>
          <target state="translated">인스턴스 핸들이 해제될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)">
          <source>An instance handle.</source>
          <target state="translated">인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)">
          <source>Invoked when a new instance handle is created.</source>
          <target state="translated">새 인스턴스 핸들이 만들어질 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)">
          <source>An object.</source>
          <target state="translated">개체입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)">
          <source>This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.</source>
          <target state="translated">이 사용자 컨텍스트 개체는 핸들을 사용하여 명령이 실행될 때, 그리고 핸들이 해제될 때 지속성 공급자에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The persistence event that was signaled earlier and to be reset.</source>
          <target state="translated">이전에 신호를 받았으며 다시 설정될 지속성 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The instance owner associated with the persistence event.</source>
          <target state="translated">지속성 이벤트와 연결된 인스턴스 소유자입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.</source>
          <target state="translated">신호를 받은 이벤트를 다시 설정하고, 인스턴스 소유자가 유지 관리하는 신호를 받은 이벤트 목록에서 이벤트를 제거합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The persistence event to be signaled.</source>
          <target state="translated">신호를 받을 지속성 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>The instance owner.</source>
          <target state="translated">인스턴스 소유자입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>An instance store invokes this method to signal an event.</source>
          <target state="translated">인스턴스 저장소는 이 메서드를 호출하여 이벤트를 알립니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)">
          <source>A workflow host that subscribes for this persistence event receives it and takes an appropriate action.</source>
          <target state="translated">이 지속성 이벤트를 구독하는 워크플로 호스트에서 이 신호를 받아 적절한 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>The instance context.</source>
          <target state="translated">인스턴스 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>The command to be executed.</source>
          <target state="translated">실행할 명령입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>Timeout value for the operation.</source>
          <target state="translated">작업의 시간 제한 값입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.</source>
          <target state="translated">지속성 공급자는 특정 지속성 명령이 실행될 수 있는지 여부를 확인하는 이 메서드를 구현하고 명령을 실행할 수 있으면 이를 비동기적으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>A persistence provider implementation should return <ph id="ph1">&lt;see langword="false" /&gt;</ph> if it doesn’t support the command passed as a parameter; otherwise it should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> or throw an exception.</source>
          <target state="translated">지속성 공급자 구현에서는 매개 변수로 전달된 명령을 지원하지 않는 경우 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다. 그렇지 않은 경우 <ph id="ph2">&lt;see langword="true" /&gt;</ph>를 반환하거나 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)">
          <source>If the command can be executed, the persistence provider calls relevant methods on the <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstancePersistenceContext&gt;</ph> to provide the results of the command.</source>
          <target state="translated">명령을 실행할 수 있으면 지속성 공급자는 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstancePersistenceContext&gt;</ph>에서 관련 메서드를 호출하여 명령 결과를 제공합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)">
          <source>The instance handle that is bound to the event.</source>
          <target state="translated">이벤트에 바인딩된 인스턴스 핸들입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)">
          <source>The time span after which the waiting operation times out.</source>
          <target state="translated">대기 작업 시간이 초과되는 시간 범위입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)">
          <source>A workflow host typically invokes this method to wait for an event to be signaled.</source>
          <target state="translated">워크플로 호스트는 일반적으로 이 메서드를 호출하여 이벤트 신호를 대기합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /&gt;</ph> 개체의 목록</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>