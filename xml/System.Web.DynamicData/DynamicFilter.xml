<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36d6b3cc1b6dd848285c0438db3c4d0fe11db41b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539917" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>지정된 열을 사용하여 테이블 행을 필터링하는 UI를 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [선언 구문](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.DynamicData.DynamicFilter> 컨트롤은 페이지 태그에서 테이블 행을 필터링 하는 것에 대 한 UI 생성에 사용 됩니다. 동적 데이터 ~\DynamicData\Filters 폴더에 있는 기본 필터 템플릿을 사용 하 여 UI를 만듭니다. 이러한 템플릿은 외래 키, 부울 및 열거형 형식만 지원합니다.  
  
 다음 표에서 수행할 수 있는 작업 중 일부를 보여 줍니다.  
  
|시나리오|설명|  
|--------------|-----------------|  
|테이블 행 필터링에 사용할 열을 지정 합니다.|속성을 사용 하 여 <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> 테이블 행 필터링에 사용할 열을 지정할 수 있습니다.|  
|UI를 만드는 데 사용할 필터 서식 파일의 이름을 지정 합니다.|속성을 사용 하 여 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> UI를 만드는 데 사용할 필터 서식 파일의 이름을 지정 합니다.|  
|UI를 렌더링 하기 전에 사용자 지정 작업을 수행 합니다.|사용 된 <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> UI를 렌더링 하기 전에 사용자 지정 작업을 수행할 수 있습니다.|  
  
 다음과 같은 방법으로 사용할 필터 서식 파일을 지정할 수 있습니다.  
  
-   사용 하 여는 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 페이지 태그에서 속성입니다. 이 방법은 프레젠테이션 계층 사용자 지정 스키마 (데이터베이스)의 독립적인 및 단일 페이지에 적용 합니다.  
  
-   사용 하 여는 <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> 모델의 특성입니다. 이 방법은 데이터 계층 사용자 지정 (데이터베이스), 특정 스키마에 종속 되 고 전체 응용 프로그램에 적용 합니다.  
  
 두 가지 방법을 모두 사용 하는 경우 태그에 지정 되어 있는 필터 템플릿을 데이터 모델에 지정 된 서식 파일 보다 우선 합니다.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>컨텍스트 클래스  
 <xref:System.Web.DynamicData.DynamicFilter> 컨트롤 함께 사용 하도록 합니다.는 <xref:System.Web.UI.WebControls.QueryExtender> 제어 합니다. <xref:System.Web.DynamicData.DynamicFilter> 컨트롤은으로 참조 한 <xref:System.Web.DynamicData.DynamicFilterExpression> 내 인스턴스는 <xref:System.Web.UI.WebControls.QueryExtender> 페이지 태그에서 개체입니다.  
  
 다음 그림에서는 동적 데이터 테이블 행에서 외래 키 열 필터링을 구현 하기 위해 따라야 하는 단계를 보여 줍니다.  
  
 ![동적 데이터 쿼리 요소](~/add/media/dynamic-dataquery.png "동적 데이터 쿼리 요소")  
  
1.  <xref:System.Web.DynamicData.DynamicFilter> 제어가 전달 선택한 값에는 <xref:System.Web.UI.WebControls.QueryExtender> 제어 합니다.  
  
2.  <xref:System.Web.UI.WebControls.QueryExtender> 컨트롤 값을 사용 하 여 정보를 필터링 하는 쿼리를 만듭니다. 데이터 소스 제어에이 정보를 전달합니다.  
  
3.  필터링 쿼리 정보를 데이터 원본 공급자를 전달 하는 데이터 소스 제어 합니다.  
  
4.  데이터 원본 공급자 데이터베이스에는 쿼리를 전달합니다.  
  
5.  데이터베이스는 필터링 된 테이블 행을 반환합니다.  
  
6.  데이터 원본 공급자의 데이터 소스 제어에 다시이 데이터를 보냅니다.  
  
7.  데이터 소스 제어의 표시를 위해 데이터 바인딩된 컨트롤에 필터링 된 테이블 행을 전달합니다.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 이 위치에 사용할 수 있는 소스 코드를 Visual Studio 프로젝트는: [다운로드](http://go.microsoft.com/fwlink/?LinkId=168914)합니다.  
  
 다음 예에서는 ProductCategory 외래 키 열에서 제품 테이블 행을 필터링 하는 것에 대 한 UI를 만드는 기본 ForeignKey.ascx 필터 템플릿을 사용 합니다. 사용자가 ProductCategory 값을 선택 하면 값을 포함 하는 행만 표시 됩니다.  
  
 이 예제에는 다음이 필요합니다.  
  
-   Dynamic Data 웹 사이트 또는 Dynamic Data 웹 응용 프로그램. 그러면 만들 수 있습니다는 `AdventureWorksLTDataContext` 데이터 컨텍스트 데이터베이스와 테이블에 액세스에 대 한 클래스를 만들 수 있습니다. 자세한 내용은 `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`을 참조하세요.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.DynamicData.DynamicFilter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하지 않으면 일반적으로 <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> 생성자를 직접 합니다. 대신, 사용 하 여는 <xref:System.Web.DynamicData.DynamicFilter> 페이지가 로드 될 때 페이지 태그에서 클래스와 클래스 초기화 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필터링에 사용할 테이블 열을 가져오거나 설정합니다.</summary>
        <value>필터링에 사용할 테이블 열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 내부 전용입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블 행 필터링에 사용할 열의 이름을 가져오거나 설정합니다.</summary>
        <value>테이블 행 필터링에 사용할 열의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 태그에서 필터링 된 테이블 행의 열을 지정 하는 방법을 보여 줍니다.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 외래 키의 값을 선택할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> 외래 키 값을 선택할 때 및 새 값을 렌더링 하기 전에 이벤트가 발생 합니다. 그러면 사용자 지정 페이징 등의 사용자 지정 작업을 수행할 수 있는 이벤트 처리 메서드를 제공할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 필터 변경 이벤트를 처리 하는 방법을 보여 줍니다. 필터링된 된 행을 표시 하기 전에 처리기 페이지 인덱스를 다시 설정 합니다.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컨트롤의 현재 인스턴스와 연결된 필터 템플릿을 가져옵니다.</summary>
        <value>이 컨트롤의 현재 인스턴스와 연결된 필터 템플릿입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동적 데이터 지원 되는 열 형식에 대 한 테이블 행을 필터링 하기 위한 UI를 생성 합니다. ~\DynamicData\Filters 폴더에 있는 기본 필터 서식 파일을 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UI를 만드는 데 사용되는 필터 템플릿의 이름을 가져오거나 설정합니다.</summary>
        <value>필터 템플릿의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 속성을 사용 하면 테이블 행 필터링에 대 한 UI를 만드는 필터 템플릿을 지정할 수 있습니다. 다음과 같은 방법으로 사용할 필터 서식 파일을 지정할 수 있습니다.  
  
-   사용 하 여는 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 페이지 태그에서 속성입니다. 이 방법은 프레젠테이션 계층 사용자 지정 하는 스키마 (데이터베이스)와 별개 단일 페이지에 적용 합니다.  
  
-   사용 하 여는 <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> 모델의 특성입니다. 이 방법은 특정 스키마 (데이터베이스)에 종속 되 고 전체 응용 프로그램에 적용 되는 데이터 계층 사용자 지정을 설명 합니다.  
  
 두 가지 방법을 모두 사용 하는 경우 태그에 지정 된 필터 템플릿이 데이터 모델에 지정 된 서식 파일 보다 우선 합니다.  
  
   
  
## Examples  
 다음 예제에서는 필터링에 사용할 태그에서 필터 서식 파일을 지정 하는 방법을 보여 줍니다.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">서버 컨트롤 콘텐츠를 받는 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 서버 컨트롤 콘텐츠를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작성기에는 콘텐츠 페이지를 렌더링합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">데이터 소스 쿼리입니다.</param>
        <summary>현재 필터 값을 사용하여 수정된 쿼리를 가져옵니다.</summary>
        <returns>필터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.DynamicData.DynamicFilter> 인스턴스가 <xref:System.Web.DynamicData.IFilterExpressionProvider> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">데이터 원본입니다.</param>
        <summary>
          <see cref="T:System.Web.DynamicData.DynamicFilter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.DynamicData.DynamicFilter> 인스턴스가 <xref:System.Web.DynamicData.IFilterExpressionProvider> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>