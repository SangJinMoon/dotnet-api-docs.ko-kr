<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpandoObject.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5819b018355c643d951c9252212c100d95e7d4b18.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">819b018355c643d951c9252212c100d95e7d4b18</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.ExpandoObject">
          <source>Represents an object whose members can be dynamically added and removed at run time.</source>
          <target state="translated">런타임에 동적으로 추가 및 제거할 수 있는 멤버가 있는 개체를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class enables you to add and delete members of its instances at run time and also to set and get values of these members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 클래스를 사용 하면 추가 하 고 실행 시 해당 인스턴스 멤버를 삭제 하 고도 설정 하 고 이러한 멤버의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This class supports dynamic binding, which enables you to use standard syntax like <ph id="ph1">`sampleObject.sampleMember`</ph> instead of more complex syntax like <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>.</source>
          <target state="translated">이 클래스와 같은 표준 구문을 사용할 수 있는 동적 바인딩을 지원 <ph id="ph1">`sampleObject.sampleMember`</ph> 와 같은 보다 복잡 한 구문 대신 <ph id="ph2">`sampleObject.GetAttribute("sampleMember")`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the standard Dynamic Language Runtime (DLR) interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`ExpandoObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 표준 런타임 DLR (동적 언어) 인터페이스를 구현 하는 클래스 <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>의 인스턴스를 공유할 수 있습니다는 <ph id="ph3">`ExpandoObject`</ph> DLR 상호 운용성 모델을 지 원하는 언어 간 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For example, you can create an instance of the <ph id="ph1">`ExpandoObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">예를 들어의 인스턴스를 만들 수 있습니다는 <ph id="ph1">`ExpandoObject`</ph> C#에서 클래스 및 IronPython 함수에 전달 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> and <bpt id="p2">[</bpt>Introducing the ExpandoObject<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> on the C# Frequently Asked Questions Web site.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>동적 언어 런타임 개요<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> 및 <bpt id="p2">[</bpt>ExpandoObject 소개<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=169157)</ept> C# 자주 묻는 질문 웹사이트에서.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class is an implementation of the dynamic object concept that enables getting, setting, and invoking members.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 클래스는 가져오기, 설정, 및 호출 멤버 있는 동적 개체 개념 구현 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define types that have their own dynamic dispatch semantics, use the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">디스패치 의미를 사용 하 여 자신의 동적 변수가 있는 형식 정의 하려는 경우는 <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you want to define how dynamic objects participate in the interoperability protocol and manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">정의 하려는 경우 동적 개체의 상호 운용성 프로토콜에 참여 하 DLR 동적 디스패치 캐싱을 관리 하는 방법의 구현을 만듭니다는 <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Creating an Instance</source>
          <target state="translated">인스턴스 만들기</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In C#, to enable late binding for an instance of the <ph id="ph1">`ExpandoObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">C#에서의 인스턴스에 대 한 런타임 바인딩을 가능 하 고 <ph id="ph1">`ExpandoObject`</ph> 사용 해야 클래스는 <ph id="ph2">`dynamic`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>dynamic 형식 사용<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">Visual Basic에서 런타임에 바인딩하여 동적 작업은 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>초기 바인딩 및 런타임에 바인딩<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만드는 방법을 보여 줍니다.는 <ph id="ph1">`ExpandoObject`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Adding New Members</source>
          <target state="translated">새 멤버 추가</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can add properties, methods, and events to instances of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">속성, 메서드 및 이벤트의 인스턴스를 추가할 수 있습니다는 <ph id="ph1">`ExpandoObject`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a new property to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 인스턴스에 새 속성을 추가 하는 방법을 보여 줍니다.는 <ph id="ph1">`ExpandoObject`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The methods represent lambda expressions that are stored as delegates, which can be invoked when they are needed.</source>
          <target state="translated">메서드는 필요할 때 호출할 수 있는 대리자도 저장 되는 람다 식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add a method that increments a value of the dynamic property.</source>
          <target state="translated">다음 코드 예제에서는 동적 속성의 값이 증가 하는 메서드를 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to add an event to an instance of the <ph id="ph1">`ExpandoObject`</ph> class.</source>
          <target state="translated">이벤트의 인스턴스를 추가 하는 방법은 다음 코드 예제는 <ph id="ph1">`ExpandoObject`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Passing As a Parameter</source>
          <target state="translated">매개 변수로 전달</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>You can pass instances of the <ph id="ph1">`ExpandoObject`</ph> class as parameters.</source>
          <target state="translated">인스턴스를 전달할 수는 <ph id="ph1">`ExpandoObject`</ph> 매개 변수로 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Note that these instances are treated as dynamic objects in C# and late-bound objects in Visual Basic.</source>
          <target state="translated">Note 이러한 인스턴스 동적 개체 C# 및 Visual Basic에서 런타임에 바인딩된 개체도 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This means that you do not have IntelliSense for object members and you do not receive compiler errors when you call non-existent members.</source>
          <target state="translated">즉, 개체 멤버에 대 한 IntelliSense 없는 존재 하지 않는 멤버를 호출 하면 컴파일러 오류를 수신 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>If you call a member that does not exist, an exception occurs.</source>
          <target state="translated">존재 하지 않는 멤버를 호출 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how you can create and use a method to print the names and values of properties.</source>
          <target state="translated">다음 코드 예제에서는 만들 이름 및 속성의 값을 인쇄 하는 메서드를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Enumerating and Deleting Members</source>
          <target state="translated">멤버 열거 및 삭제</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 클래스는 <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables enumeration of members added to the instance of the <ph id="ph1">`ExpandoObject`</ph> class at run time.</source>
          <target state="translated">이 인스턴스에 추가 되는 멤버의 열거를 통해는 <ph id="ph1">`ExpandoObject`</ph> 런타임 시 클래스입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This can be useful if you do not know at compile time what members an instance might have.</source>
          <target state="translated">모르는 컴파일 타임에 어떤 멤버 인스턴스가 가질 수 있는 경우에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example shows how you can cast an instance of the <ph id="ph1">`ExpandoObject`</ph> class to the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface and enumerate the instance's members.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 캐스팅할 수는 방법을 보여 줍니다.는 <ph id="ph1">`ExpandoObject`</ph> 에 클래스는 <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> 인터페이스 및 인터페이스의 멤버를 열거 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>In languages that do not have syntax for deleting members (such as C# and Visual Basic), you can delete a member by implicitly casting an instance of the <ph id="ph1">`ExpandoObject`</ph> to the <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> interface and then deleting the member as a key/value pair.</source>
          <target state="translated">멤버 (예: C# 및 Visual Basic)를 삭제 하기 위한 구문을 갖지 않는 언어에서의 인스턴스를 암시적으로 캐스팅 하 여 멤버를 삭제할 수는 <ph id="ph1">`ExpandoObject`</ph> 에 <ph id="ph2">`IDictionary&lt;String, Object&gt;`</ph> 인터페이스 한 다음 키/값 쌍으로 된 멤버를 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This is shown in the following example.</source>
          <target state="translated">다음 예제에서 이를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>Receiving Notifications of Property Changes</source>
          <target state="translated">속성 변경의 알림을 받기</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The <ph id="ph1">`ExpandoObject`</ph> class implements the <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface and can raise a <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> event when a member is added, deleted, or modified.</source>
          <target state="translated"><ph id="ph1">`ExpandoObject`</ph> 클래스가 구현 하는 <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> 인터페이스를 발생 시킬 수는 <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> 멤버 추가, 삭제 또는 수정할 때 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>This enables <ph id="ph1">`ExpandoObject`</ph> class integration with Windows Presentation Foundation (WPF) data binding and other environments that require notification about changes in the object content.</source>
          <target state="translated">이 통해 <ph id="ph1">`ExpandoObject`</ph> 클래스 Windows Presentation Foundation (WPF) 데이터 바인딩 및 개체 콘텐츠의 변경 내용에 대 한 알림이 필요로 하는 다른 환경으로 통합 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.ExpandoObject">
          <source>The following code example demonstrates how to create an event handler for the <ph id="ph1">`PropertyChanged`</ph> event.</source>
          <target state="translated">다음 코드 예제에 대 한 이벤트 처리기를 만드는 방법을 보여 줍니다는 <ph id="ph1">`PropertyChanged`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.#ctor">
          <source>Initializes a new <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph> that does not have members.</source>
          <target state="translated">멤버가 없는 새 <ph id="ph1">&lt;see langword="ExpandoObject" /&gt;</ph>를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">컬렉션에서 반복하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</source>
          <target state="translated">동적 가상 메서드에 디스패치할 MetaObject를 나타내는 식입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The provided MetaObject will dispatch to the dynamic virtual methods.</source>
          <target state="translated">제공된 MetaObject가 동적 가상 메서드에 디스패치됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</source>
          <target state="translated">개체를 다른 MetaObject에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 형식의 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>