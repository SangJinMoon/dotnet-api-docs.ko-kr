<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ae5ac708ed9c03e90259aa11dc3fd96557d5c21" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36488970" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="52a10-101">런타임에 동적 동작을 지정하기 위한 기본 클래스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52a10-101">Provides a base class for specifying dynamic behavior at run time.</span>
      </span>
      <span data-ttu-id="52a10-102">이 클래스는 상속되어야 하며, 직접 인스턴스화할 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="52a10-102">This class must be inherited from; you cannot instantiate it directly.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-103">`DynamicObject` 클래스를 사용 하면 동적 개체에서 수행할 수 있는 작업 및 이러한 작업을 수행 하는 방법을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="52a10-104">예를 들어 get 또는 개체 속성을 설정, 메서드 호출 또는 더하기, 곱하기 등 표준 수치 연산을 수행 하려고 할 때 수행 되는 작업을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="52a10-105">이 클래스는 라이브러리에 대 한 보다 편리한 프로토콜을 만들려는 경우에 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="52a10-106">예를 들어, 라이브러리의 사용자가 같은 구문을 사용 해야 하는 경우 `Scriptobj.SetProperty("Count", 1)`, like 훨씬 간단한 구문을 사용 하는 기능을 제공할 수 있습니다 `scriptobj.Count = 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="52a10-107">인스턴스를 직접 만들 수는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="52a10-108">동적 동작을 구현 하려면에서 상속 하려는 `DynamicObject` 클래스 및 필요한 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="52a10-109">예를 들어 한 설정 및 속성을 가져오기에 대 한 작업이 필요한 경우 재정의할 수 있습니다만 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="52a10-110">C#에서는에서 파생 된 클래스의 인스턴스에 대해 동적 동작을 사용 하도록는 `DynamicObject` 사용 해야 클래스는 `dynamic` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="52a10-111">자세한 내용은 [dynamic 형식 사용](~/docs/csharp/programming-guide/types/using-type-dynamic.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="52a10-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="52a10-112">Visual Basic에서 런타임에 바인딩하여 동적 작업은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="52a10-113">자세한 내용은 참조 [초기 바인딩 및 런타임에 바인딩](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-113">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="52a10-114">다음 코드 예제에서 파생 된 클래스의 인스턴스를 만드는 방법을 보여 줍니다는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="52a10-115">파생 된 클래스에 직접 구성원을 추가할 수도 있습니다는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="52a10-116">클래스의 속성 정의 재정의 하는 경우는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드, 동적 언어 런타임 (DLR) 먼저를 사용 하 여 언어 바인더 클래스의 속성에 대 한 정적 정의 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="52a10-117">이러한 속성이 없으면 DLR 호출는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="52a10-118">`DynamicObject` DLR 인터페이스를 구현 하는 클래스 <xref:System.Dynamic.IDynamicMetaObjectProvider>의 인스턴스를 공유할 수 있습니다는 `DynamicObject` DLR 상호 운용성 모델을 지 원하는 언어 간 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="52a10-119">예를 들어의 인스턴스를 만들 수 있습니다는 `DynamicObject` C#에서 클래스 및 IronPython 함수에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="52a10-120">자세한 내용은 참조 [동적 언어 런타임 개요](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52a10-121">필요한 개체를 특정 작업을 정의 및 않습니다 하지 정적 멤버만, 사용 하 여 필요 하지 않은 있지만만 추가 하 고 런타임 시 멤버를 제거할 수 있는 간단한 시나리오가 있는 경우는 <xref:System.Dynamic.ExpandoObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="52a10-122">동적 개체를 상호 운용성 프로토콜에 참여 하거나 DLR 동적 디스패치 캐싱을 관리 해야 할 방법을 정의 해야 하는 좀 더 고급 시나리오를 사용 하도록 설정한 경우의 구현을 만듭니다는 <xref:System.Dynamic.IDynamicMetaObjectProvider> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-123">쓰기는 대신의 사전에 값에 액세스 하기 위한 대체 구문을 제공 해야 한다고 가정해 보십시오 `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` Visual basic에서)를 작성할 수 있습니다 `sampleDictionary.Text = "Sample text"`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="52a10-124">이 구문은 대/소문자 구분, 원하는 또한 있도록 `sampleDictionary.Text` 같습니다 `sampleDictionary.text`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="52a10-125">다음 코드 예제는 `DynamicDictionary` 에서 파생 된 클래스는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="52a10-126">`DynamicDictionary` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 유형 (`Dictionary(Of String, Object)` Visual Basic의) 키-값 쌍 및 재정의 저장 하는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 새 구문을 지 원하는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="52a10-127">또한 제공 된 `Count` 속성을 보여 주 수 동적 속성 사전에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="52a10-128">더 많은 예제를 참조 하십시오. [DynamicObject와 래퍼를 만드는](http://go.microsoft.com/fwlink/?LinkId=169008) C# 질문과 대답 블로그.</span><span class="sxs-lookup"><span data-stu-id="52a10-128">For more examples, see [Creating Wrappers with DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="52a10-129">파생 형식이 <see cref="T:System.Dynamic.DynamicObject" /> 형식의 새 인스턴스를 초기화할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-130">인스턴스를 직접 만들 수는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-131">상속할 필요가 동적 동작을 구현 하려면는 <xref:System.Dynamic.DynamicObject> 클래스 및 필요한 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="52a10-132">C#에서는에서 파생 된 클래스의 인스턴스에 대해 동적 동작을 사용 하도록는 <xref:System.Dynamic.DynamicObject> 사용 해야 클래스는 `dynamic` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="52a10-133">자세한 내용은 [dynamic 형식 사용](~/docs/csharp/programming-guide/types/using-type-dynamic.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="52a10-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="52a10-134">Visual Basic에서 런타임에 바인딩하여 동적 작업은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="52a10-135">자세한 내용은 참조 [초기 바인딩 및 런타임에 바인딩](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-135">For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-136">다음 코드 예제에서 파생 된 클래스의 인스턴스를 만드는 방법을 보여 줍니다는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="52a10-137">모든 동적 멤버 이름의 열거형을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-137">Returns the enumeration of all dynamic member names.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-138">동적 멤버 이름이 들어 있는 시퀀스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-138">A sequence that contains dynamic member names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-139">이 메서드는 디버깅 목적 으로만 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="52a10-140">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-141">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span>
          </span>
          <span data-ttu-id="52a10-142">개체를 다른 <see cref="T:System.Dynamic.DynamicMetaObject" /> 내에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span>
          </span>
          <span data-ttu-id="52a10-143">이 메서드는 언어 구현자에 대한 동적 언어 런타임 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-144">
            <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-145">이항 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-145">Provides information about the binary operation.</span>
          </span>
          <span data-ttu-id="52a10-146">
            <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="52a10-147">예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 <c>ExpressionType.Add</c>를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="52a10-148">이항 연산의 오른쪽 피연산자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-148">The right operand for the binary operation.</span>
          </span>
          <span data-ttu-id="52a10-149">예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>arg</c>는 <c>두 번째</c>를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>arg</c> is equal to <c>second</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-150">이항 연산의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-150">The result of the binary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-151">이항 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-151">Provides implementation for binary operations.</span>
          </span>
          <span data-ttu-id="52a10-152">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 더하기와 곱하기 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-153">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-153">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-154">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-155">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-155">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-156">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 동적 개체에 대 한 이진 연산을 수행 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-157">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-158">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-159">이 메서드는 더하기 나 빼기와 같은 이진 작업이 있을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="52a10-160">예를 들어 경우는 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 메서드는, 같은 문에 대해 자동으로 호출 `sum = first + second` 또는 `multiply = first*second`여기서 `first` 에서 파생 되는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="52a10-161">사용 하 여 이진 작업의 형식에 대 한 정보를 읽을 수는 `Operation` 속성은 `binder` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="52a10-162">C# 및 Visual Basic의 경우에 동적 개체가 사용 되는 경우는 `binder.Operation` 속성에서 다음 값 중 하나일 수 있습니다는 <xref:System.Linq.Expressions.ExpressionType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="52a10-163">그러나, IronPython, IronRuby 등 다른 언어로 다른 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="52a10-164">값</span><span class="sxs-lookup"><span data-stu-id="52a10-164">Value</span></span>|<span data-ttu-id="52a10-165">설명</span><span class="sxs-lookup"><span data-stu-id="52a10-165">Description</span></span>|<span data-ttu-id="52a10-166">C#</span><span class="sxs-lookup"><span data-stu-id="52a10-166">C#</span></span>|<span data-ttu-id="52a10-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="52a10-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="52a10-168">숫자 피연산자에 대 한 오버플로 검사 하지 않고 더하기 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="52a10-169">숫자 피연산자에 대 한 오버플로 검사 하지 않고 더하기 복합 할당 작업.</span><span class="sxs-lookup"><span data-stu-id="52a10-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="52a10-170">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="52a10-171">비트 `AND` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="52a10-172">비트 `AND` 복합 할당 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="52a10-173">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="52a10-174">산술 나누기 연산을 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="52a10-175">산술 나누기 복합 할당 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="52a10-176">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="52a10-177">비트 `XOR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="52a10-178">비트 `XOR` 복합 할당 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="52a10-179">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="52a10-180">"보다 큼" 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="52a10-181">"보다 크거나" 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="52a10-182">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="52a10-183">비트 왼쪽 시프트 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="52a10-184">비트 왼쪽 시프트 복합 할당 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="52a10-185">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="52a10-186">"보다 작음" 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="52a10-187">"보다 작거나 같음" 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="52a10-188">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="52a10-189">산술 나머지 연산을 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="52a10-190">산술 나머지 복합 할당 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="52a10-191">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="52a10-192">숫자 피연산자에 대 한 오버플로 검사 하지 않는 곱하기 작업.</span><span class="sxs-lookup"><span data-stu-id="52a10-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="52a10-193">숫자 피연산자에 대 한 오버플로 검사 하지 않는 곱하기 복합 할당 작업.</span><span class="sxs-lookup"><span data-stu-id="52a10-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="52a10-194">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="52a10-195">다름 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="52a10-196">비트 또는 논리 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="52a10-197">비트 또는 논리 `OR` 복합 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="52a10-198">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="52a10-199">숫자의 제곱을 구하는 동작 수학 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="52a10-200">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="52a10-201">비트 오른쪽 시프트 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="52a10-202">비트 오른쪽 시프트 복합 할당 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="52a10-203">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="52a10-204">숫자 피연산자에 대 한 오버플로 검사 하지 않는 빼기 작업.</span><span class="sxs-lookup"><span data-stu-id="52a10-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="52a10-205">숫자 피연산자에 대 한 오버플로 검사 하지 않는 빼기 복합 할당 작업.</span><span class="sxs-lookup"><span data-stu-id="52a10-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="52a10-206">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="52a10-207">구현 하려면 `OrElse` (`a || b`) 및 `AndAlso` (`a && b`) C# 동적 개체에 대 한 작업을 만들려는 경우 둘 다 구현는 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 메서드 및 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="52a10-208">`OrElse` 단항 연산 과정은 `IsTrue` 작업 및 이진 `Or` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="52a10-209">`Or` 경우에 작업이 수행의 결과 `IsTrue` 작업이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="52a10-210">`AndAlso` 단항 연산 과정은 `IsFalse` 작업 및 이진 `And` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="52a10-211">`And` 경우에 작업이 수행의 결과 `IsFalse` 작업이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-212">숫자의 텍스트 및 숫자 표현을 저장 하는 데이터 구조를 필요 하 고 더하기 및 빼기에 이러한 데이터에 대 한 같은 기본 수치 연산을 정의 하려는 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="52a10-213">다음 코드 예제는 `DynamicNumber` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-214">`DynamicNumber` 재정의 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 메서드 수학 연산을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="52a10-215">또한 재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 요소에 액세스할 수 있도록 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="52a10-216">이 예제에서는 더하기 및 빼기 작업 에서만 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="52a10-217">같은 문을 작성 하려는 경우 `resultNumber = firstNumber*secondNumber`, 런타임에 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-218">변환 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-218">Provides information about the conversion operation.</span>
          </span>
          <span data-ttu-id="52a10-219">
            <c>binder.Type</c> 속성은 개체가 변환되어야 하는 형식을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span>
          </span>
          <span data-ttu-id="52a10-220">예를 들어 C#에서 <c>(String)sampleObject</c>(Visual Basic에서 <c>CType(sampleObject, Type)</c>) 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Type</c>은 <see cref="T:System.String" /> 형식을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span>
          </span>
          <span data-ttu-id="52a10-221">
            <c>binder.Explicit</c> 속성은 발생하는 변환의 종류에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span>
          </span>
          <span data-ttu-id="52a10-222">명시적 변환의 경우 <see langword="true" />를 반환하고, 암시적 변환의 경우 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-223">형식 변환 연산의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-223">The result of the type conversion operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-224">형식 변환 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-224">Provides implementation for type conversion operations.</span>
          </span>
          <span data-ttu-id="52a10-225">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체를 한 형식에서 다른 형식으로 변환하는 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-226">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-226">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-227">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-228">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-228">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-229">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 동적 개체에 대 한 형식 변환을 수행 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-230">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-231">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-232">C#에서는이 메서드를 재정의 하는 경우 자동으로 호출 됩니다는 명시적 또는 암시적 변환을 있으면 아래 코드 예제에 표시 된 대로.</span><span class="sxs-lookup"><span data-stu-id="52a10-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="52a10-233">Visual Basic의 경우 명시적 변환은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="52a10-234">사용 하 여 호출이 메서드를 재정의 하는 경우는 <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> 또는 <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="52a10-235">문자열 및 정수에 변환 이러한 데이터 구조를 정의 하려면 및 숫자의 텍스트 및 숫자 표현을 저장 하는 데이터 구조 된다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="52a10-236">다음 코드 예제는 `DynamicNumber` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-237">`DynamicNumber` 재정의 <xref:System.Dynamic.DynamicObject.TryConvert%2A> 메서드 형식 변환을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="52a10-238">또한 재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 데이터 요소에 액세스할 수 있도록 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="52a10-239">이 예제에서는 문자열 및 정수에 변환만 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="52a10-240">개체를 다른 형식으로 변환 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-241">초기화 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-241">Provides information about the initialization operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="52a10-242">초기화하는 동안 개체에 전달되는 인수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-242">The arguments that are passed to the object during initialization.</span>
          </span>
          <span data-ttu-id="52a10-243">예를 들어 <c>새 SampleType(100)</c> 작업의 경우 여기서 <c>SampleType</c>은 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되는 형식입니다. <c>args[0]</c>는 100과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-244">초기화의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-244">The result of the initialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-245">동적 개체의 새 인스턴스를 초기화하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span>
          </span>
          <span data-ttu-id="52a10-246">이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-246">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-247">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-247">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-248">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-249">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-249">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-250">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 동적 개체의 새 인스턴스를 초기화 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="52a10-251">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-252">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-253">C# 및 Visual Basic 컴파일러는 첫 번째 클래스 형식을 지원 하지 않기 때문에이 메서드를 사용 하는 코드를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="52a10-254">이 메서드를 같은 구문을 사용 하 여 동적 개체의 초기화를 지 원하는 언어에 사용 `dynamic new`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-255">삭제에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-255">Provides information about the deletion.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="52a10-256">삭제할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-256">The indexes to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-257">인덱스별로 개체를 삭제하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-257">Provides the implementation for operations that delete an object by index.</span>
          </span>
          <span data-ttu-id="52a10-258">이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-258">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-259">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-259">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-260">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-261">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-261">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-262">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스는 지정 된 인덱스를 포함 하는 값을 삭제 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="52a10-263">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-264">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-265">C# 및 Visual Basic 컴파일러는 이런이 종류의 작업을 지원 하지 않으므로이 메서드를 사용 하는 코드를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="52a10-266">인덱스로 같은 개체를 삭제 하기 위한 구문을 지 원하는 언어에이 메서드를 사용 하는 `del sampleObject[1,2]` Python에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-267">삭제에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-267">Provides information about the deletion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-268">개체 멤버를 삭제하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-268">Provides the implementation for operations that delete an object member.</span>
          </span>
          <span data-ttu-id="52a10-269">이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-269">This method is not intended for use in C# or Visual Basic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-270">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-270">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-271">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-272">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-272">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-273">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 개체 멤버를 삭제 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="52a10-274">이 메서드가 재정의 되지 않은 언어의 런타임 바인더 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-275">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-276">C# 및 Visual Basic 컴파일러는 이런이 종류의 작업을 지원 하지 않으므로이 메서드를 사용 하는 코드를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="52a10-277">이 메서드를 같은 멤버를 삭제 하기 위한 구문을 지 원하는 언어에 사용 `del sampleObject.SampleMember` Python에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-278">연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-278">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="52a10-279">연산에 사용되는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-279">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="52a10-280">예를 들어 C#에서 <c>sampleObject[3]</c>(Visual Basic에서 <c>sampleObject(3)</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-281">인덱스 연산의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-281">The result of the index operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-282">인덱스별로 값을 가져오는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-282">Provides the implementation for operations that get a value by index.</span>
          </span>
          <span data-ttu-id="52a10-283">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 인덱싱 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-284">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-284">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-285">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-286">대부분의 경우 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-286">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-287">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 인덱스로 값을 가져올 수행 되는 방식을 동적 개체에 대해 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-288">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-289">대부분의 경우 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-290">같은 작업이 있을 때 자동으로 호출 됩니다이 메서드를 재정의 하는 경우 `sampleObject[3]` C# 또는 `sampleObject(3)` Visual Basic, where에서 `sampleObject` 에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-291">가정와 같은 이름을 사용 하거나 액세스할 속성 될 수 있는 개체를 만들 것인지 `Property0`, `Property1`등의 또는 인덱스 별로 있도록, 예를 들어 `sampleObject.Property0` 과 같습니다 `sampleObject[0]` C# 또는 `sampleObject(0)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="52a10-292">다음 코드 예제는 `SampleDynamicObject` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-293">`SampleDynamicObject` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 형식 (`Dictionary(Of String, Object)` Visual basic에서) 키-값 쌍을 저장 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="52a10-294">`SampleDynamicObject` 재정의 <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> 메서드 인덱스로 액세스할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="52a10-295">재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 메서드 속성 이름으로 액세스할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-296">동적 연산을 호출한 개체에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-296">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="52a10-297">
            <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="52a10-298">예를 들어 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="52a10-299">
            <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-300">가져오기 연산의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-300">The result of the get operation.</span>
          </span>
          <span data-ttu-id="52a10-301">예를 들어 속성에 대한 메서드가 호출되면 <c>결과</c>에 속성 값을 할당할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-301">For example, if the method is called for a property, you can assign the property value to <c>result</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-302">멤버 값을 가져오는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-302">Provides the implementation for operations that get member values.</span>
          </span>
          <span data-ttu-id="52a10-303">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 가져오기와 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-304">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-304">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-305">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-306">대부분의 경우 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-306">(In most cases, a run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-307">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 멤버 값을 가져오는 작업을 동적 개체에 대해 수행 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-308">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-309">대부분의 경우 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-310">이 메서드는 같은 문이 있으면 `Console.WriteLine(sampleObject.SampleProperty)`여기서 `sampleObject` 에서 파생 된 클래스의 인스턴스가 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="52a10-311">파생 된 클래스에 직접 구성원을 추가할 수도 있습니다는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="52a10-312">클래스의 속성 정의 재정의 하는 경우는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드, 동적 언어 런타임 (DLR) 먼저를 사용 하 여 언어 바인더 클래스의 속성에 대 한 정적 정의 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="52a10-313">이러한 속성이 없으면 DLR 호출는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-314">쓰기는 대신의 사전에 값에 액세스 하기 위한 대체 구문을 제공 해야 한다고 가정해 보십시오 `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` Visual basic에서)를 작성할 수 있습니다 `sampleDictionary.Text = "Sample text"`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="52a10-315">또한이 구문은 대/소문자를 구분 해야 있도록 `sampleDictionary.Text` 같습니다 `sampleDictionary.text`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="52a10-316">다음 코드 예제는 `DynamicDictionary` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-317">`DynamicDictionary` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 유형 (`Dictionary(Of String, Object)` Visual Basic의) 키-값 쌍 및 재정의 저장 하는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 새 구문을 지 원하는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="52a10-318">또한 제공 된 `Count` 속성을 보여 주 수 동적 속성 사전에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-319">호출 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-319">Provides information about the invoke operation.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="52a10-320">호출 연산을 수행하는 동안 개체에 전달되는 인수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-320">The arguments that are passed to the object during the invoke operation.</span>
          </span>
          <span data-ttu-id="52a10-321">예를 들어 <c>sampleObject(100)</c> 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-322">개체 호출의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-322">The result of the object invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-323">개체를 호출하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-323">Provides the implementation for operations that invoke an object.</span>
          </span>
          <span data-ttu-id="52a10-324">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체 또는 대리자 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-325">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-325">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-326">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-327">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-327">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-328">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 개체를 호출 하는 작업을 동적 개체에 대해 수행 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-329">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-330">대부분의 경우 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-331">같은 작업이 있을 때 자동으로 호출 됩니다이 메서드를 재정의 하는 경우 `sampleObject(100)`여기서 `sampleObject` 에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="52a10-332">C#에서 있지만 Visual Basic에는 없는 개체를 호출 하기 위한 작업은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="52a10-333">Visual Basic 컴파일러에서이 메서드를 사용 하는 코드를 생성 하지 및 Visual Basic 언어 구문과 비슷한 구문을 지원 하지 않습니다 `sampleObject(100)`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-334">숫자를 나타내는 텍스트 및 숫자를 저장 하는 데이터 구조 된다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="52a10-335">각 속성에 대 한 값을 개별적으로 지정 하 고 단일 문에서 모든 속성을 초기화할 수 있게 되기를 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="52a10-336">다음 코드 예제는 `DynamicNumber` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-337">`DynamicNumber` 재정의 <xref:System.Dynamic.DynamicObject.TryInvoke%2A> 메서드를 한 번에 모든 속성의 초기화를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="52a10-338">또한 재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 개별 개체 속성에 액세스할 수 있도록 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-339">동적 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-339">Provides information about the dynamic operation.</span>
          </span>
          <span data-ttu-id="52a10-340">
            <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span>
          </span>
          <span data-ttu-id="52a10-341">예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleMethod"를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span>
          </span>
          <span data-ttu-id="52a10-342">
            <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="52a10-343">호출 연산을 수행하는 동안 개체 멤버에 전달되는 인수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-343">The arguments that are passed to the object member during the invoke operation.</span>
          </span>
          <span data-ttu-id="52a10-344">예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-345">멤버 호출의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-345">The result of the member invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-346">멤버를 호출하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-346">Provides the implementation for operations that invoke a member.</span>
          </span>
          <span data-ttu-id="52a10-347">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 메서드 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-348">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-348">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-349">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-350">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-350">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-351">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 개체 멤버를 호출 하는 작업을 동적 개체에 대해 수행 해야 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-352">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-353">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-354">같은 작업을 수행 하는 경우 자동으로 호출 됩니다이 메서드를 재정의 하는 경우 `sampleObject.SampleMethod(100)`여기서 `sampleObject` 에서 파생 되는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="52a10-355">파생 된 클래스에 메서드를 추가할 수도 있습니다는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-356">예를 들어, 재정의 하는 경우는 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 메서드를 동적 디스패치 시스템이 지정된 된 메서드는 클래스에 존재 하는지 확인 하려면 먼저 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="52a10-357">사용 하는 메서드를 찾지 못하면 경우는 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="52a10-358">이 방법은 지원 하지 않습니다 `ref` 및 `out` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="52a10-359">모든 매개 변수에 `args` 배열 값으로 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-360">쓰기는 대신의 사전에 값에 액세스 하기 위한 대체 구문을 제공 해야 한다고 가정해 보십시오 `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` Visual basic에서)를 작성할 수 있습니다 `sampleDictionary.Text = "Sample text"`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="52a10-361">또한이 사전에서 모든 표준 사전 메서드를 호출할 수 있게 되기를 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="52a10-362">다음 코드 예제는 `DynamicDictionary` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-363">`DynamicDictionary` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 형식 (`Dictionary(Of String, Object)` Visual basic에서) 키-값 쌍을 저장 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="52a10-364">재정의 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 의 메서드를 지원 하기 위해 메서드에 <xref:System.Collections.Generic.Dictionary%602> 클래스 및 재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 새 구문을 지 원하는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="52a10-365">또한 제공는 `Print` 메서드를 모든 사전 키와 값을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-366">연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-366">Provides information about the operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="52a10-367">연산에 사용되는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-367">The indexes that are used in the operation.</span>
          </span>
          <span data-ttu-id="52a10-368">예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="52a10-369">지정된 인덱스를 가진 개체로 설정할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-369">The value to set to the object that has the specified index.</span>
          </span>
          <span data-ttu-id="52a10-370">예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>값</c>은 10과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>value</c> is equal to 10.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-371">인덱스별로 값을 설정하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-371">Provides the implementation for operations that set a value by index.</span>
          </span>
          <span data-ttu-id="52a10-372">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 지정된 인덱스별로 개체에 액세스하는 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-373">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-373">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-374">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-375">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-375">(In most cases, a language-specific run-time exception is thrown.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-376">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 동적 개체에 대 한 개체 인덱스로 액세스 하는 작업이 수행 되는 방식을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-377">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-378">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-379">같은 작업이 있을 때 자동으로 호출 됩니다이 메서드를 재정의 하는 경우 `sampleObject[3] = 10` C# 또는 `sampleObject(3) = 10` Visual Basic, where에서 `sampleObject` 에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-380">가정와 같은 이름을 사용 하거나 액세스할 속성 될 수 있는 개체를 만들 것인지 `Property0`, `Property1`등의 또는 인덱스 별로 있도록, 예를 들어 `sampleObject.Property0` 과 같습니다 `sampleObject[0]` C# 또는 `sampleObject(0)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="52a10-381">다음 코드 예제는 `SampleDynamicObject` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-382">`SampleDynamicObject` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 형식 (`Dictionary(Of String, Object)` Visual basic에서) 키-값 쌍을 저장 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="52a10-383">`SampleDynamicObject` 재정의 <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> 메서드 인덱스로 액세스할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="52a10-384">재정의 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 메서드 속성 이름으로 액세스할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-385">동적 연산을 호출한 개체에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-385">Provides information about the object that called the dynamic operation.</span>
          </span>
          <span data-ttu-id="52a10-386">
            <c>binder.Name</c> 속성은 값이 할당될 멤버의 이름을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span>
          </span>
          <span data-ttu-id="52a10-387">예를 들어 <c>sampleObject.SampleProperty = "Test"</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span>
          </span>
          <span data-ttu-id="52a10-388">
            <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="52a10-389">멤버에 설정할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-389">The value to set to the member.</span>
          </span>
          <span data-ttu-id="52a10-390">예를 들어 <c>sampleObject.SampleProperty = "Test"</c>의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>값</c>은 "Test"를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <c>value</c> is "Test".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-391">멤버 값을 설정하는 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-391">Provides the implementation for operations that set member values.</span>
          </span>
          <span data-ttu-id="52a10-392">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 설정과 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-393">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-393">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-394">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-395">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-395">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-396">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 멤버에 값을 설정 하는 작업 동적 개체에 대해 수행 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-397">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-398">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-399">이 메서드는 같은 문이 있으면 `sampleObject.SampleProperty = "Test"`여기서 `sampleObject` 에서 파생 된 클래스의 인스턴스가 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="52a10-400">파생 된 클래스에 직접 구성원을 추가할 수도 있습니다는 `DynamicObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="52a10-401">클래스의 속성 정의 재정의 하는 경우는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드, 동적 언어 런타임 (DLR) 먼저를 사용 하 여 언어 바인더 클래스의 속성에 대 한 정적 정의 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="52a10-402">이러한 속성이 없으면 DLR 호출는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-403">쓰기는 대신의 사전에 값에 액세스 하기 위한 대체 구문을 제공 해야 한다고 가정해 보십시오 `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` Visual basic에서)를 작성할 수 있습니다 `sampleDictionary.Text = "Sample text"`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="52a10-404">또한이 구문은 대/소문자를 구분 해야 있도록 `sampleDictionary.Text` 같습니다 `sampleDictionary.text`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="52a10-405">다음 코드 예제는 `DynamicDictionary` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-406">`DynamicDictionary` 의 개체를 포함 하는 클래스는 `Dictionary<string, object>` 유형 (`Dictionary(Of String, Object)` Visual Basic의) 키-값 쌍 및 재정의 저장 하는 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 새 구문을 지 원하는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="52a10-407">또한 제공 된 `Count` 속성을 보여 주 수 동적 속성 사전에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="52a10-408">단항 연산에 대한 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-408">Provides information about the unary operation.</span>
          </span>
          <span data-ttu-id="52a10-409">
            <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span>
          </span>
          <span data-ttu-id="52a10-410">예를 들어 <c>negativeNumber = -number</c> 문의 경우 여기서 <c>번호</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 "Negate"를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="52a10-411">단항 연산의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-411">The result of the unary operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="52a10-412">단항 연산에 대한 구현을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-412">Provides implementation for unary operations.</span>
          </span>
          <span data-ttu-id="52a10-413">
            <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 부정, 증가 또는 감소와 같은 연산의 동적 동작을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="52a10-414">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-414">
              <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="52a10-415">이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span>
          </span>
          <span data-ttu-id="52a10-416">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="52a10-416">(In most cases, a language-specific run-time exception is thrown.)</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a10-417">클래스에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스 동적 개체에 대 한 단항 연산을 수행 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="52a10-418">메서드를 재정의 하지 않은 언어의 런타임 바인더의 동작을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="52a10-419">대부분의 경우 언어별 런타임 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="52a10-420">이 메서드는 부정, 증분, 같은 단항 연산 했거나 감소 시킬 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="52a10-421">예를 들어 경우는 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 메서드는,이 메서드는 같은 문에 대해에 자동으로 호출 됩니다 `negativeNumber = -number`여기서 `number` 에서 파생 되는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="52a10-422">사용 하 여 단항 연산의 유형에 대 한 정보를 가져올 수 있습니다는 `Operation` 의 속성은 `binder` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="52a10-423">C# 및 Visual Basic의 경우에 동적 개체가 사용 되는 경우는 `binder.Operation` 속성에서 다음 값 중 하나일 수 있습니다는 <xref:System.Linq.Expressions.ExpressionType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="52a10-424">그러나, IronPython, IronRuby 등 다른 언어로 다른 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="52a10-425">값</span><span class="sxs-lookup"><span data-stu-id="52a10-425">Value</span></span>|<span data-ttu-id="52a10-426">설명</span><span class="sxs-lookup"><span data-stu-id="52a10-426">Description</span></span>|<span data-ttu-id="52a10-427">C#</span><span class="sxs-lookup"><span data-stu-id="52a10-427">C#</span></span>|<span data-ttu-id="52a10-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="52a10-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="52a10-429">단항 감소 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="52a10-430">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="52a10-431">단항 증가 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="52a10-432">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="52a10-433">산술 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="52a10-434">논리 부정입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="52a10-435">구성을 보완 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="52a10-436">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="52a10-437">False 조건 값입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="52a10-438">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="52a10-439">True 조건이 값입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="52a10-440">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="52a10-441">단항 더하기입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="52a10-442">구현 하려면 `OrElse` (`a || b`) 및 `AndAlso` (`a && b`) C# 동적 개체에 대 한 작업을 만들려는 경우 둘 다 구현는 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 메서드 및 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="52a10-443">`OrElse` 단항 연산 과정은 `IsTrue` 작업 및 이진 `Or` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="52a10-444">`Or` 경우에 작업이 수행의 결과 `IsTrue` 작업이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="52a10-445">`AndAlso` 단항 연산 과정은 `IsFalse` 작업 및 이진 `And` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="52a10-446">`And` 경우에 작업이 수행의 결과 `IsFalse` 작업이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a10-447">이러한 데이터에 대 한 산술 부정 연산을 정의 하려는 및 숫자의 텍스트 및 숫자 표현을 저장 하는 데이터 구조 된다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="52a10-448">다음 코드 예제는 `DynamicNumber` 에서 파생 된 클래스는 <xref:System.Dynamic.DynamicObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="52a10-449">`DynamicNumber` 재정의 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 메서드 산술 부정 연산을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="52a10-450">재정의 이기도 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 및 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 요소에 액세스할 수 있도록 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a10-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="52a10-451">이 예제에서는 산술 부정 연산은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="52a10-452">같은 문을 작성 하려는 경우 `negativeNumber = +number`, 런타임 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a10-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>