<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="027718ba7331018405b1f33c2a7cd8dbe961edfe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="33213-101">토큰을 만들고 코드, 예외 처리 및 지역 변수 시그니처 blob을 삽입하는 메서드 등의 동적 메서드에 대한 MSIL(Microsoft Intermediate Language)과 메타데이터를 생성할 수 있는 다른 방법을 지원합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="33213-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-102"><xref:System.Reflection.Emit.DynamicILInfo> 클래스를 사용 하면 개발자는을 사용 하는 대신 MSIL 생성기를 직접 작성할 <xref:System.Reflection.Emit.ILGenerator>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="33213-103">다른 형식의 인스턴스를 만들려면, 메서드, 및 등 호출에 MSIL을 생성 하면 이러한 엔터티에 대 한 토큰 포함 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="33213-104"><xref:System.Reflection.Emit.DynamicILInfo> 다양 한 오버 로드를 제공 하는 클래스는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 현재 범위에서 유효한 토큰을 반환 하는 메서드를 <xref:System.Reflection.Emit.DynamicILInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="33213-105">예를 들어의 오버 로드를 호출 하는 경우는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드를 가져올 수 있습니다는 <xref:System.RuntimeMethodHandle> 오버 로드 하 고에 전달 하는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 프로그램 MSIL에 포함할 수 있는 토큰을 얻는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="33213-106">만든 후 <xref:System.Byte> 사용할 수 있습니다 로컬 변수 서명에, 예외 및 코드 본문에 대 한 배열는 <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, 및 <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> 로 삽입 하는 메서드는 <xref:System.Reflection.Emit.DynamicMethod> 와 연결 된 프로그램 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="33213-107">사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 경험 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33213-108">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33213-109">사용 하지 마십시오 <xref:System.Reflection.Emit.DynamicILInfo> 대리자를 만드는 다른 동적 메서드에 대리자 생성자를 직접 호출 하 여 코드를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="33213-110">대신를 사용 하 여는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 대리자 메서드.</span><span class="sxs-lookup"><span data-stu-id="33213-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="33213-111">대리 생성자를 사용 하 여 만든 대리자에는 대상 동적 메서드에 대 한 참조가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="33213-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="33213-112">동적 메서드가 대리자 사용 되는 동안 가비지 수집에 의해 회수 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33213-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="33213-113">현재 인스턴스를 통해 본문이 생성되는 동적 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-113">Gets the dynamic method whose body is generated by the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="33213-114">현재 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 개체가 생성하는 코드의 대상인 동적 메서드를 나타내는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-115">A <xref:System.Reflection.Emit.DynamicILInfo> 개체는 항상 동적 메서드에 연결 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33213-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="33213-116">용도 <xref:System.Reflection.Emit.DynamicILInfo> 클래스는 사용 하지 않고 MSIL을 생성 하려는 개발자에 대 한 동적 메서드의 MSIL 스트림, 예외 처리 및 지역 변수 시그니처 삽입의 또 다른 방법은 제공 하는 <xref:System.Reflection.Emit.ILGenerator> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="33213-117">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드의 MSIL 스트림에 있는 문자열, 필드, 메서드, 형식 또는 시그니처를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature">
          <span data-ttu-id="33213-118">시그니처를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-118">An array that contains the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-119">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드의 시그니처를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-120">연결된 동적 메서드의 MSIL 스트림과 메타데이터에 포함할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-121">서명 blob에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="33213-122">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="33213-123">호출할 동적 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-123">The dynamic method to call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-124">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 메서드에서 호출할 동적 메서드를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-125">연결된 동적 메서드의 MSIL 스트림에 MSIL 명령의 대상으로 포함할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-126">이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 현재 연관 된 동적 메서드에서 동적 메서드를 호출할 수 있습니다 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="33213-127">연결 된 동적 메서드를 재귀적으로 호출 하려면 값을 전달는 <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="33213-128">액세스할 필드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-128">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-129">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 필드를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-130">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 필드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-131">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="33213-132">사용 하 여는 <xref:System.Type.GetField%2A?displayProperty=nameWithType> 가져올 메서드를는 <xref:System.Reflection.FieldInfo> 필드의 액세스 하려는 경우 다음 사용 하 여는 <xref:System.Reflection.FieldInfo.FieldHandle%2A> 가져올 속성의 <xref:System.RuntimeFieldHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="33213-133">액세스할 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-133">The method to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-134">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 메서드를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-135">현재 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 개체의 범위 내에 있고, <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 또는 <see cref="T:System.Reflection.Emit.DynamicILInfo" />과 같이 메서드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-136">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 메서드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="33213-137">사용 하 여는 <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Reflection.MethodInfo> 에 액세스 한 다음 사용 하려는 방법에 대 한는 <xref:System.Reflection.MethodBase.MethodHandle%2A> 가져올 속성의 <xref:System.RuntimeMethodHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33213-138">제네릭 형식에 속하는 메서드를 사용 하 여는 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> 메서드 오버 로드 하 고 지정 된 <xref:System.RuntimeTypeHandle> 제네릭 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="33213-139">사용할 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-139">The type to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-140">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 사용할 형식을 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-141">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 형식이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-142">이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 로컬 변수 유형을 정의 하 고 현재와 관련 된 동적 메서드에서 형식의 인스턴스를 만들려는 msil <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="33213-143">가져오려는 <xref:System.RuntimeTypeHandle> 형식을 나타내는 사용 하 여는 <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal">
          <span data-ttu-id="33213-144">사용할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-144">The string to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-145">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 사용할 문자열 리터럴을 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-146">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 문자열이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="field">
          <span data-ttu-id="33213-147">액세스할 필드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-147">The field to be accessed.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="33213-148">필드가 속한 제네릭 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-148">The generic type the field belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-149">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 연결된 동적 메서드에서 액세스할 필드를 나타내는 토큰을 가져옵니다. 해당 필드는 지정된 제네릭 형식에 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-150">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체의 범위 내에 있고, 필드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-151">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="33213-152">사용 하 여는 <xref:System.Type.GetField%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Reflection.FieldInfo> 에 액세스 한 다음 사용 하려는 필드에 대 한는 <xref:System.Reflection.FieldInfo.FieldHandle%2A> 가져올 속성의 <xref:System.RuntimeFieldHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="33213-153">메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-153">The method.</span>
          </span>
        </param>
        <param name="contextType">
          <span data-ttu-id="33213-154">메서드가 속한 제네릭 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-154">The generic type the method belongs to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-155">현재 <see cref="T:System.Reflection.Emit.DynamicILInfo" />의 범위 내에 있고, 제네릭 형식에 대한 메서드를 나타내는 토큰을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="33213-156">현재 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 개체의 범위 내에 있고, <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 또는 <see cref="T:System.Reflection.Emit.DynamicILInfo" />과 같이 메서드에 액세스하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-157">현재와 연결 된 동적 메서드에서 호출 될 메서드에 대 한 토큰을 얻어야 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="33213-158">사용 하 여는 <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Reflection.MethodInfo> 를 호출 하 고 다음 사용 하려는 방법에 대 한는 <xref:System.Reflection.MethodBase.MethodHandle%2A> 가져올 속성의 <xref:System.RuntimeMethodHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="33213-159">연결된 동적 메서드의 코드 본문을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-159">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="33213-160">MSIL 스트림이 들어 있는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-160">An array that contains the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="33213-161">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-161">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-162">연결된 동적 메서드의 코드 본문을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-162">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-163">유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33213-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="33213-164">두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="33213-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="33213-165">사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 경험 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33213-166">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">
          <span data-ttu-id="33213-167">MSIL 스트림이 포함된 바이트 배열에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-167">A pointer to a byte array containing the MSIL stream.</span>
          </span>
        </param>
        <param name="codeSize">
          <span data-ttu-id="33213-168">MSIL 스트림의 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-168">The number of bytes in the MSIL stream.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="33213-169">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-169">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-170">연결된 동적 메서드의 코드 본문을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-170">Sets the code body of the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-171">유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33213-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="33213-172">두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="33213-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="33213-173">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미"에 익숙한 사용자 고유의 메타 데이터와 MSIL를 생성 하려면 및 "파티션 III: CIL 명령 집합을 사용 합니다."</span><span class="sxs-lookup"><span data-stu-id="33213-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="33213-174">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="33213-175">
            <paramref name="code" />는 <see langword="null" />이고 <paramref name="codeSize" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-175">
              <paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33213-176">
            <paramref name="codeSize" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-176">
              <paramref name="codeSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="33213-177">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-177">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="33213-178">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-178">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="33213-179">연결된 동적 메서드의 예외 메타데이터를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-179">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="33213-180">예외 메타데이터가 들어 있는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-180">An array that contains the exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-181">연결된 동적 메서드의 예외 메타데이터를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-181">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-182">메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 `try`, `catch`, `finally`, 필터링 하 고 오류 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-182">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="33213-183">이 메타 데이터의 레이아웃에 정보를 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-183">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="33213-184">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions">
          <span data-ttu-id="33213-185">예외 메타데이터가 포함된 바이트 배열에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-185">A pointer to a byte array containing the exception metadata.</span>
          </span>
        </param>
        <param name="exceptionsSize">
          <span data-ttu-id="33213-186">예외 메타데이터의 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-186">The number of bytes of exception metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-187">연결된 동적 메서드의 예외 메타데이터를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-187">Sets the exception metadata for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-188">메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 `try`, `catch`, `finally`, 필터링 하 고 오류 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="33213-188">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="33213-189">이 메타 데이터의 레이아웃에 정보를 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="33213-189">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33213-190">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-190">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="33213-191">
            <paramref name="exceptions" />는 <see langword="null" />이고 <paramref name="exceptionSize" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-191">
              <paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33213-192">
            <paramref name="exceptionSize" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-192">
              <paramref name="exceptionSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="33213-193">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-193">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="33213-194">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-194">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="33213-195">연결된 동적 메서드의 지역 변수 레이아웃을 설명하는 지역 변수 시그니처를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-195">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="33213-196">연결된 <see cref="T:System.Reflection.Emit.DynamicMethod" />의 지역 변수 레이아웃이 들어 있는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-196">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-197">연결된 동적 메서드의 지역 변수 레이아웃을 설명하는 지역 변수 시그니처를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-197">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-198">로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-198">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="33213-199">로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 `static` (`Shared` Visual basic에서) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Reflection.Emit.SignatureHelper> 로컬 서명에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-199">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="33213-200">로컬 변수 서명에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-200">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="33213-201">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-201">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature">
          <span data-ttu-id="33213-202">연결된 <see cref="T:System.Reflection.Emit.DynamicMethod" />의 지역 변수 레이아웃이 들어 있는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-202">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </param>
        <param name="signatureSize">
          <span data-ttu-id="33213-203">시그니처의 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-203">The number of bytes in the signature.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="33213-204">연결된 동적 메서드의 지역 변수 레이아웃을 설명하는 지역 변수 시그니처를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-204">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33213-205">로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-205">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="33213-206">로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 `static` (`Shared` Visual basic에서) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Reflection.Emit.SignatureHelper> 로컬 서명에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-206">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="33213-207">로컬 변수 서명에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="33213-207">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="33213-208">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33213-208">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="33213-209">
            <paramref name="localSignature" />는 <see langword="null" />이고 <paramref name="signatureSize" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-209">
              <paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="33213-210">
            <paramref name="signatureSize" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-210">
              <paramref name="signatureSize" /> is less than 0.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="33213-211">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-211">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="33213-212">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="33213-212">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>