<Type Name="MethodBuilder" FullName="System.Reflection.Emit.MethodBuilder">
  <TypeSignature Language="C#" Value="public sealed class MethodBuilder : System.Reflection.MethodInfo, System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit MethodBuilder extends System.Reflection.MethodInfo implements class System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.MethodBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MethodBuilder&#xA;Inherits MethodInfo&#xA;Implements _MethodBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBuilder sealed : System::Reflection::MethodInfo, System::Runtime::InteropServices::_MethodBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f513e-101">동적 클래스에 메서드(또는 생성자)를 정의하고 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-101">Defines and represents a method (or constructor) on a dynamic class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-102"><xref:System.Reflection.Emit.MethodBuilder> 클래스는 완전 하 게 Microsoft MSIL (intermediate language), 이름, 특성, 서명 및 메서드 본문을 포함 하는 메서드를 설명 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-102">The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body.</span></span> <span data-ttu-id="f513e-103">와 함께에서 사용 되는 <xref:System.Reflection.Emit.TypeBuilder> 런타임으로 클래스를 생성 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-103">It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.</span></span>  
  
## <a name="global-methods-and-methods-as-type-members"></a><span data-ttu-id="f513e-104">전역 메서드 및 형식 멤버와 메서드</span><span class="sxs-lookup"><span data-stu-id="f513e-104">Global methods and methods as type members</span></span>  
 <span data-ttu-id="f513e-105">리플렉션을 사용 하 여 전역 메서드를 정의 하 고 형식 멤버와 메서드를 정의를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-105">You can use reflection emit to define global methods and to define methods as type members.</span></span> <span data-ttu-id="f513e-106">메서드를 정의 하는 Api 반환 <xref:System.Reflection.Emit.MethodBuilder> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-106">The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.</span></span>  
  
### <a name="global-methods"></a><span data-ttu-id="f513e-107">전역 메서드</span><span class="sxs-lookup"><span data-stu-id="f513e-107">Global methods</span></span>  
 <span data-ttu-id="f513e-108">전역 메서드를 사용 하 여 정의 된 <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> 반환 하는 **MethodBuilder** 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-108">A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> method, which returns a **MethodBuilder** object.</span></span>  
  
 <span data-ttu-id="f513e-109">전역 메서드는 정적 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-109">Global methods must be static.</span></span> <span data-ttu-id="f513e-110">동적 모듈에는 전역 메서드를 포함 하는 경우는 <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> 공용 언어 런타임에서 동적 모듈을 수정 하는 모든 전역 함수가 될 때까지 연기 하기 때문에 동적 모듈 또는 포함 하는 동적 어셈블리를 유지 하기 전에 메서드를 호출 해야 합니다 정의 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-110">If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.</span></span>  
  
 <span data-ttu-id="f513e-111">전역 기본 메서드를 사용 하 여 정의 된 <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-111">A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f513e-112">플랫폼 호출 (PInvoke) 추상 또는 가상 메서드를 선언 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-112">Platform invoke (PInvoke) methods must not be declared abstract or virtual.</span></span> <span data-ttu-id="f513e-113">런타임 설정은 <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> 플랫폼에 대 한 특성 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-113">The runtime sets the <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> attribute for a platform invoke method.</span></span>  
  
### <a name="methods-as-members-of-types"></a><span data-ttu-id="f513e-114">형식의 멤버와 메서드</span><span class="sxs-lookup"><span data-stu-id="f513e-114">Methods as members of types</span></span>  
 <span data-ttu-id="f513e-115">메서드를 사용 하 여 형식 멤버로 정의 된 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 반환 하는 <xref:System.Reflection.Emit.MethodBuilder> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-115">A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.</span></span>  
  
 <span data-ttu-id="f513e-116"><xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> 메서드를 사용 하는 매개 변수 또는 반환 값의 이름 및 매개 변수 특성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-116">The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value.</span></span> <span data-ttu-id="f513e-117"><xref:System.Reflection.Emit.ParameterBuilder> 이 메서드에서 반환 된 개체는 매개 변수 또는 반환 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-117">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value.</span></span> <span data-ttu-id="f513e-118"><xref:System.Reflection.Emit.ParameterBuilder> 마샬링을 설정 상수 값을 설정 하 고 사용자 지정 특성을 적용 하는 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-118">The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="f513e-119">특성</span><span class="sxs-lookup"><span data-stu-id="f513e-119">Attributes</span></span>  
 <span data-ttu-id="f513e-120">멤버는 <xref:System.Reflection.MethodAttributes> 열거형 동적 메서드의 정확한 문자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-120">Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:</span></span>  
  
-   <span data-ttu-id="f513e-121">정적 메서드를 사용 하 여 지정 된는 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-121">Static methods are specified using the <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="f513e-122">최종 메서드 (재정의할 수 없는 메서드)를 사용 하 여 지정 된는 <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-122">Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="f513e-123">가상 메서드를 사용 하 여 지정 된는 <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-123">Virtual methods are specified using the <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="f513e-124">추상 메서드를 사용 하 여 지정 된는 <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-124">Abstract methods are specified using the <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="f513e-125">몇 가지 특성에는 메서드 표시 유형을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-125">Several attributes determine method visibility.</span></span> <span data-ttu-id="f513e-126">에 대 한 설명을 참조는 <xref:System.Reflection.MethodAttributes> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-126">See the description of the <xref:System.Reflection.MethodAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="f513e-127">오버 로드 된 연산자를 구현 하는 메서드를 설정 해야 합니다는 <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-127">Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="f513e-128">종료자 설정 해야 합니다는 <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-128">Finalizers must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="f513e-129">알려진 문제</span><span class="sxs-lookup"><span data-stu-id="f513e-129">Known Issues</span></span>  
  
-   <span data-ttu-id="f513e-130">하지만 <xref:System.Reflection.Emit.MethodBuilder> 에서 파생 된 <xref:System.Reflection.MethodInfo>에 정의 된 추상 메서드 중 일부는 <xref:System.Reflection.MethodInfo> 클래스에서 구현 되는 것은 완벽 하 게 <xref:System.Reflection.Emit.MethodBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-130">Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>.</span></span> <span data-ttu-id="f513e-131">이러한 <xref:System.Reflection.Emit.MethodBuilder> 메서드에서 throw 된 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-131">These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="f513e-132">예를 들어는 <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> 메서드가 완전 하 게 구현 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-132">For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> method is not fully implemented.</span></span> <span data-ttu-id="f513e-133">사용 하 여 바깥쪽 형식을 검색 하 여 이러한 메서드에 반영할 수 있습니다는 <xref:System.Type.GetType%2A?displayProperty=nameWithType> 또는 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-133">You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> methods.</span></span>  
  
-   <span data-ttu-id="f513e-134">사용자 지정 한정자는.NET Framework 버전 2.0부터 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-134">Custom modifiers are supported starting with the .NET Framework version 2.0.</span></span> <span data-ttu-id="f513e-135">이전 버전에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-135">They are not supported in earlier versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-136">다음 예제에서는 <xref:System.Reflection.Emit.MethodBuilder> 클래스 동적 형식 내에서 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-136">The following example uses the <xref:System.Reflection.Emit.MethodBuilder> class to create a method within a dynamic type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="f513e-137">요청, 어설션 등과 같은 수행할 보안 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-137">The security action to be taken (Demand, Assert, and so on).</span></span></param>
        <param name="pset"><span data-ttu-id="f513e-138">작업이 적용되는 사용 권한 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-138">The set of permissions the action applies to.</span></span></param>
        <summary><span data-ttu-id="f513e-139">이 메서드에 선언적 보안을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-139">Adds declarative security to this method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> 보안 동작을 지정 하는 각 호출에 여러 번 호출할 수 있습니다 (같은 `Demand`, `Assert`, 및 `Deny`) 및 작업에 적용 되는 사용 권한 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-141">.NET Framework 버전 1.0, 1.1 및 2.0을 사용 하 여 메서드에 적용 되는 선언적 보안 특성에에서는 <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> 메서드 이전 XML 메타 데이터 형식으로 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-141">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format.</span></span> <span data-ttu-id="f513e-142">선언적 보안 특성을 내보내기를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="f513e-142">See Emitting Declarative Security Attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-143">다음 코드 예제에서는 컨텍스트를 사용 `AddDeclarativeSecurity` 게 무제한 권한을 메서드의 호출자를 요구 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-143">The code sample below illustrates the contextual use of `AddDeclarativeSecurity` to require the caller of a method to have unrestricted permissions.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f513e-144"><paramref name="action" />이 유효하지 않습니다(<see langword="RequestMinimum" />, <see langword="RequestOptional" /> 및 <see langword="RequestRefuse" />가 유효하지 않음).</span><span class="sxs-lookup"><span data-stu-id="f513e-144">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-145">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-145">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-146">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-146">-or-</span></span>  
  
 <span data-ttu-id="f513e-147">사용 권한 집합 <paramref name="pset" />에 이전에 <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />에 의해 추가된 작업이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-147">The permission set <paramref name="pset" /> contains an action that was added earlier by <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.</span></span>  
  
 <span data-ttu-id="f513e-148">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-148">-or-</span></span>  
  
 <span data-ttu-id="f513e-149">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-149">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f513e-150"><paramref name="pset" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-150"><paramref name="pset" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-151">이 메서드에 대한 특성을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-151">Retrieves the attributes for this method.</span></span></summary>
        <value><span data-ttu-id="f513e-152">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-152">Read-only.</span></span> <span data-ttu-id="f513e-153">이 메서드에 대해 <see langword="MethodAttributes" />를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-153">Retrieves the <see langword="MethodAttributes" /> for this method.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-154">메서드의 호출 규칙을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-154">Returns the calling convention of the method.</span></span></summary>
        <value><span data-ttu-id="f513e-155">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-155">Read-only.</span></span> <span data-ttu-id="f513e-156">메서드의 호출 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-156">The calling convention of the method.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-157">이 형식에 대해 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-157">Not supported for this type.</span></span></summary>
        <value><span data-ttu-id="f513e-158">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-158">Not supported.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-159">A <xref:System.Reflection.Emit.MethodBuilder> 항상 제네릭 메서드 정의 나타내며 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-159">A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.</span></span>  
  
 <span data-ttu-id="f513e-160">자세한 내용은 <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-160">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f513e-161">제네릭 형식에 대 한 자세한 내용은 참조 하십시오. <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-161">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-162">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-162">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="CreateMethodBody">
      <MemberSignature Language="C#" Value="public void CreateMethodBody (byte[] il, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateMethodBody(unsigned int8[] il, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateMethodBody (il As Byte(), count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateMethodBody(cli::array &lt;System::Byte&gt; ^ il, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="il"><span data-ttu-id="f513e-163">유효한 MSIL 명령이 들어 있는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-163">An array containing valid MSIL instructions.</span></span> <span data-ttu-id="f513e-164">이 매개 변수가 <see langword="null" />이면 메서드 본문이 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-164">If this parameter is <see langword="null" />, the method's body is cleared.</span></span></param>
        <param name="count"><span data-ttu-id="f513e-165">유효한 MSIL 배열의 바이트의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-165">The number of valid bytes in the MSIL array.</span></span> <span data-ttu-id="f513e-166">MSIL이 <see langword="null" />이면 이 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-166">This value is ignored if MSIL is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f513e-167">MSIL(Microsoft Intermediate Language) 명령의 제공된 바이트 배열을 사용하여 메서드의 본문을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-167">Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-168">이 메서드가 만드는에서 메서드 본문이 `il`opcode로 MSIL 명령이 들어 있는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-168">This method creates the method's body from `il`, an array containing MSIL instructions as opcodes.</span></span> <span data-ttu-id="f513e-169">유효한 MSIL의 바이트 수가 수에 따라 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-169">The number of bytes of valid MSIL is given by count.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-170">이 현재 완전히 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-170">This is currently not fully supported.</span></span> <span data-ttu-id="f513e-171">사용자 토큰 픽스업 및 예외 처리기의 위치를 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-171">The user cannot supply the location of token fix ups and exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-172">아래에 제공 된 예제에서는 두 정수를 추가 하는 간단한 방법을 opcode를 사용 하 여를 통해 생성 된 `CreateMethodBody`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-172">In the example provided below, a simple method that adds two integers is generated via opcode using `CreateMethodBody`.</span></span>  
  
 [!code-cpp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CPP/source.cpp#1)]
 [!code-csharp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CS/source.cs#1)]
 [!code-vb[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f513e-173"><paramref name="count" />이(가) 제공된 MSIL 명령 배열의 인덱스 범위 내에 있지 않으며 <paramref name="il" />이(가) <see langword="null" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-173">The <paramref name="count" /> is not within the range of indexes of the supplied MSIL instruction array and <paramref name="il" /> is not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-174">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-174">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-175">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-175">-or-</span></span>  
  
 <span data-ttu-id="f513e-176">이 메서드는 <see langword="null" />이 아닌 <paramref name="il" /> 인수를 사용하여 이 <see langword="MethodBuilder" />에서 이전에 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-176">This method was called previously on this <see langword="MethodBuilder" /> with an <paramref name="il" /> argument that was not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="f513e-177">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-177">-or-</span></span>  
  
 <span data-ttu-id="f513e-178">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-178">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-179">이 메서드를 선언하는 형식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-179">Returns the type that declares this method.</span></span></summary>
        <value><span data-ttu-id="f513e-180">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-180">Read-only.</span></span> <span data-ttu-id="f513e-181">이 메서드를 선언하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-181">The type that declares this method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-182">다음 코드에서는 사용 된 `Type` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-182">The following code illustrates the use of the `Type` property.</span></span>  
  
 [!code-cpp[MethodBuilderClass_TypeSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CPP/methodbuilderclass.cpp#1)]
 [!code-csharp[MethodBuilderClass_TypeSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CS/methodbuilderclass.cs#1)]
 [!code-vb[MethodBuilderClass_TypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilderClass_TypeSample/VB/methodbuilderclass.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="f513e-183">제네릭 형식 매개 변수의 이름을 나타내는 문자열의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-183">An array of strings that represent the names of the generic type parameters.</span></span></param>
        <summary><span data-ttu-id="f513e-184">현재 메서드에 대한 제네릭 형식 매개 변수의 개수를 설정하고 이러한 매개 변수의 이름을 지정하며 관련 제약 조건을 정의하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-184">Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define their constraints.</span></span></summary>
        <returns><span data-ttu-id="f513e-185">제네릭 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-185">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters of the generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-186">호출 된 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드를 사용 하면 현재 메서드가 제네릭입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-186">Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic.</span></span> <span data-ttu-id="f513e-187">이 변경을 실행 취소할 방법이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-187">There is no way to undo this change.</span></span> <span data-ttu-id="f513e-188">이 메서드를 두 번째로 호출 하면 프로그램 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-188">Calling this method a second time causes an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="f513e-189">제네릭 메서드의 형식 매개 변수를 사용 하 여 나중에 검색할 수는 <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-189">The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.</span></span>  
  
 <span data-ttu-id="f513e-190">일반적으로 형식 매개 변수 이름은 대문자로 된 단일 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-190">By convention, a type parameter name is a single uppercase letter.</span></span>  
  
 <span data-ttu-id="f513e-191">자세한 내용은 <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-191">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f513e-192">제네릭 형식에 대 한 자세한 내용은 참조 하십시오. <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-192">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-193">다음 코드 예제에서는 동적 형식을 만들 `DemoType`, 동적 제네릭 메서드를 포함 하 `DemoMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-193">The following code example creates a dynamic type, `DemoType`, which contains the dynamic generic method `DemoMethod`.</span></span> <span data-ttu-id="f513e-194">이 메서드는 두 제네릭 형식 매개 변수 중 하나는 매개 변수를 지정 하 고 반환 형식으로 다른 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-194">This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.</span></span>  
  
 <span data-ttu-id="f513e-195">코드를 실행하면 동적 어셈블리가 DemoGenericMethod1.dll로 저장되며 [Ildasm.exe(IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)를 사용하여 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-195">When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-196">이 코드 예제에서는 단순히 null 참조를 반환 하는 간단한 메서드 본문을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-196">This code example generates a simple method body that merely returns a null reference.</span></span> <span data-ttu-id="f513e-197">만들고 제네릭 형식을 사용 하는 보다 완전 한 기능된을 메서드 본문이 코드 예제를 참조 하십시오. [하는 방법: 리플렉션 내보내기를 사용 하 여 제네릭 메서드 정의](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-197">For a code example with a more fully developed method body that creates and uses generic types, see [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[GenericMethodBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#1)]
 [!code-csharp[GenericMethodBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#1)]
 [!code-vb[GenericMethodBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-198">제네릭 형식 매개 변수가 이 메서드에 대해 이미 정의되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-198">Generic type parameters have already been defined for this method.</span></span>  
  
 <span data-ttu-id="f513e-199">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-199">-or-</span></span>  
  
 <span data-ttu-id="f513e-200">메서드가 이미 완료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-200">The method has been completed already.</span></span>  
  
 <span data-ttu-id="f513e-201">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-201">-or-</span></span>  
  
 <span data-ttu-id="f513e-202">현재 메서드에 대해 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> 메서드가 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-202">The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> method has been called for the current method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f513e-203"><paramref name="names" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-203"><paramref name="names" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="f513e-204">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-204">-or-</span></span>  
  
 <span data-ttu-id="f513e-205"><paramref name="names" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-205">An element of <paramref name="names" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f513e-206"><paramref name="names" />가 빈 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-206"><paramref name="names" /> is an empty array.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.DefineMethod" />
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string strParamName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, strParamName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ strParamName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="strParamName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="f513e-207">매개 변수 목록에서 매개 변수의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-207">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="f513e-208">매개 변수 중 첫 번째 매개 변수의 경우 인덱스가 1부터 시작하며, 숫자 0은 메서드의 반환 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-208">Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.</span></span></param>
        <param name="attributes"><span data-ttu-id="f513e-209">매개 변수의 매개 변수 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-209">The parameter attributes of the parameter.</span></span></param>
        <param name="strParamName"><span data-ttu-id="f513e-210">매개 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-210">The name of the parameter.</span></span> <span data-ttu-id="f513e-211">이름이 null 문자열일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-211">The name can be the null string.</span></span></param>
        <summary><span data-ttu-id="f513e-212">이 메서드의 매개 변수 특성 및 이름 또는 이 메서드의 반환 값 특성 및 이름을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-212">Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method.</span></span> <span data-ttu-id="f513e-213">사용자 지정 특성을 적용하는 데 사용할 수 있는 ParameterBuilder를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-213">Returns a ParameterBuilder that can be used to apply custom attributes.</span></span></summary>
        <returns><span data-ttu-id="f513e-214">이 메서드의 매개 변수 또는 이 메서드의 반환 값을 나타내는 <see langword="ParameterBuilder" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-214">Returns a <see langword="ParameterBuilder" /> object that represents a parameter of this method or the return value of this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-215"><xref:System.Reflection.Emit.ParameterBuilder> 매개 변수에 대해 기본값을 설정 하거나 사용자 지정 특성을 적용 하려면이 메서드에서 반환 된 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-215">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.</span></span>  
  
 <span data-ttu-id="f513e-216">따라서 1, 매개 변수 번호 시작 `position` 는 첫 번째 매개 변수에 대 한 1입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-216">Parameter numbering begins with 1, so `position` is 1 for the first parameter.</span></span> <span data-ttu-id="f513e-217">경우 `position` 가 0 이면이 메서드는 반환 값에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-217">If `position` is zero, this method affects the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-218">.NET Framework 버전 1.0 및 1.1에서는 예외가 발생 하는 경우 `position` 가 0 이면 해당 버전에서 반환 값의 속성을 수정 하려면이 메서드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-218">In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f513e-219">메서드에 매개 변수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-219">The method has no parameters.</span></span>  
  
 <span data-ttu-id="f513e-220">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-220">-or-</span></span>  
  
 <span data-ttu-id="f513e-221"><paramref name="position" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-221"><paramref name="position" /> is less than zero.</span></span>  
  
 <span data-ttu-id="f513e-222">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-222">-or-</span></span>  
  
 <span data-ttu-id="f513e-223"><paramref name="position" />이 메서드의 매개 변수 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-223"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-224">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-224">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-225">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-225">-or-</span></span>  
  
 <span data-ttu-id="f513e-226">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-226">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f513e-227">이 <see langword="MethodBuilder" /> 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-227">The object to compare with this <see langword="MethodBuilder" /> instance.</span></span></param>
        <summary><span data-ttu-id="f513e-228">지정된 개체가 이 인스턴스와 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-228">Determines whether the given object is equal to this instance.</span></span></summary>
        <returns>
          <span data-ttu-id="f513e-229"><paramref name="obj" />가 <see langword="MethodBuilder" />의 인스턴스이고 이 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-229"><see langword="true" /> if <paramref name="obj" /> is an instance of <see langword="MethodBuilder" /> and is equal to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-230">일치 여부는 동일한 이름, 특성 및 서명 하 여 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-230">Equality is determined by having the same name, attributes, and signature.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-231">메서드의 기본 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-231">Return the base implementation for a method.</span></span></summary>
        <returns><span data-ttu-id="f513e-232">이 메서드의 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-232">The base implementation of this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-233">현재가 항상 반환 `MethodBuilder` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-233">This always returns the current `MethodBuilder` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f513e-234">이 메서드에 대해 정의된 사용자 지정 특성을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-234">Returns the custom attributes defined for this method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="f513e-235">이 멤버의 상속 체인을 검색하여 사용자 지정 특성을 찾을지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-235">Specifies whether to search this member's inheritance chain to find the custom attributes.</span></span></param>
        <summary><span data-ttu-id="f513e-236">이 메서드에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-236">Returns all the custom attributes defined for this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-237">이 메서드의 모든 사용자 지정 특성을 나타내는 개체 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-237">Returns an array of objects representing all the custom attributes of this method.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-238">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-238">This method is not currently supported.</span></span> <span data-ttu-id="f513e-239"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-239">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="f513e-240">사용자 지정 특성 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-240">The custom attribute type.</span></span></param>
        <param name="inherit"><span data-ttu-id="f513e-241">이 멤버의 상속 체인을 검색하여 사용자 지정 특성을 찾을지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-241">Specifies whether to search this member's inheritance chain to find the custom attributes.</span></span></param>
        <summary><span data-ttu-id="f513e-242">지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-242">Returns the custom attributes identified by the given type.</span></span></summary>
        <returns><span data-ttu-id="f513e-243"><paramref name="attributeType" /> 형식인 이 메서드의 특성을 나타내는 개체의 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-243">Returns an array of objects representing the attributes of this method that are of type <paramref name="attributeType" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-244">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-244">This method is not currently supported.</span></span> <span data-ttu-id="f513e-245"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-245">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-246">제네릭인 경우 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-246">Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that represent the type parameters of the method, if it is generic.</span></span></summary>
        <returns><span data-ttu-id="f513e-247">메서드가 제네릭인 경우 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열이거나, 제네릭이 아닌 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-247">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters, if the method is generic, or <see langword="null" /> if the method is not generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-248">도 제네릭 메서드의 형식 매개 변수에서 반환 되는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드를 정의 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-248">The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.</span></span>  
  
 <span data-ttu-id="f513e-249">자세한 내용은 <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-249">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f513e-250">제네릭 형식에 대 한 자세한 내용은 참조 하십시오. <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-250">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetGenericMethodDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericMethodDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetGenericMethodDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-251">이 메서드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-251">Returns this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-252"><see cref="T:System.Reflection.Emit.MethodBuilder" />의 현재 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-252">The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-253">A <xref:System.Reflection.Emit.MethodBuilder> 직접 생성 된 제네릭 메서드를 내보내는 데 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-253">A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly.</span></span> <span data-ttu-id="f513e-254">내보낸된 메서드는 제네릭 메서드 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-254">The emitted method is a generic method definition.</span></span>  
  
 <span data-ttu-id="f513e-255">자세한 내용은 <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-255">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f513e-256">제네릭 형식에 대 한 자세한 내용은 참조 하십시오. <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-256">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-257">현재 메서드는 제네릭이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-257">The current method is not generic.</span></span> <span data-ttu-id="f513e-258">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-258">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property returns <see langword="false" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-259">이 메서드의 해시 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-259">Gets the hash code for this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-260">이 메서드의 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-260">The hash code for this method.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f513e-261">이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-261">Returns an <see langword="ILGenerator" /> for this method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-262">64바이트의 기본 MSIL(Microsoft Intermediate Language) 스트림 크기를 사용하는 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-262">Returns an <see langword="ILGenerator" /> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="f513e-263">이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-263">Returns an <see langword="ILGenerator" /> object for this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-264">다음 코드 예제에서는 사용 하 여는 `GetILGenerator` 메서드를 작성 하 고 3D 공간에서 두 점의 내적을 계산 하는 동적 어셈블리를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-264">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-265">이 메서드는 해당 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 본문이 없어야 합니다(예: <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그 포함).</span><span class="sxs-lookup"><span data-stu-id="f513e-265">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span></span>  
  
 <span data-ttu-id="f513e-266">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-266">-or-</span></span>  
  
 <span data-ttu-id="f513e-267">이 메서드는 제네릭 메서드 정의가 아닌 제네릭 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-267">The method is a generic method, but not a generic method definition.</span></span> <span data-ttu-id="f513e-268">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-268">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (size As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="f513e-269">MSIL 스트림에 바이트의 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-269">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="f513e-270">지정된 MSIL(Microsoft Intermediate Language) 스트림 크기를 사용하여 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-270">Returns an <see langword="ILGenerator" /> for this method with the specified Microsoft intermediate language (MSIL) stream size.</span></span></summary>
        <returns><span data-ttu-id="f513e-271">이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-271">Returns an <see langword="ILGenerator" /> object for this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-272">다음 코드 예제에서는 사용 하 여는 `GetILGenerator` 메서드를 작성 하 고 3D 공간에서 두 점의 내적을 계산 하는 동적 어셈블리를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-272">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-273">이 메서드는 해당 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 본문이 없어야 합니다(예: <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그 포함).</span><span class="sxs-lookup"><span data-stu-id="f513e-273">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span></span>  
  
 <span data-ttu-id="f513e-274">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-274">-or-</span></span>  
  
 <span data-ttu-id="f513e-275">이 메서드는 제네릭 메서드 정의가 아닌 제네릭 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-275">The method is a generic method, but not a generic method definition.</span></span> <span data-ttu-id="f513e-276">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-276">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-277">메서드에 대한 구현 플래그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-277">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="f513e-278">메서드에 대한 구현 플래그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-278">Returns the implementation flags for the method.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Module GetModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Module GetModule() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetModule" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModule () As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Module ^ GetModule();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-279">이 메서드를 포함하는 모듈에 대한 참조를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-279">Returns a reference to the module that contains this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-280">이 메서드를 포함하는 모듈에 대한 참조를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-280">Returns a reference to the module that contains this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-281">아래 샘플 코드의 사용법을 보여 줍니다.는 `GetModule` 메서드를 동적으로 생성 된 모듈에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-281">The sample code below illustrates the usage of the `GetModule` method to retrieve information about a dynamically-generated module.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CPP/source3.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CS/source3.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-282">이 메서드의 매개 변수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-282">Returns the parameters of this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-283">메서드의 매개 변수를 나타내는 <see langword="ParameterInfo" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-283">An array of <see langword="ParameterInfo" /> objects that represent the parameters of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-284">다음 코드 예제에서는 `GetParameters` 동적으로 생성 된 메서드에 전달 된 매개 변수에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-284">The code sample below illustrates the use of `GetParameters` to discover information on the parameters passed to a dynamically-generated method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CPP/source4.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CS/source4.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/VB/source4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-285">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-285">This method is not currently supported.</span></span> <span data-ttu-id="f513e-286"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see langword="GetParameters" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-286">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see langword="GetParameters" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodToken GetToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Emit.MethodToken GetToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetToken" />
      <MemberSignature Language="VB.NET" Value="Public Function GetToken () As MethodToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodToken GetToken();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-287">이 메서드의 토큰을 나타내는 <see langword="MethodToken" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-287">Returns the <see langword="MethodToken" /> that represents the token for this method.</span></span></summary>
        <returns><span data-ttu-id="f513e-288">이 메서드의 <see langword="MethodToken" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-288">Returns the <see langword="MethodToken" /> of this method.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-289">이 메서드의 로컬 변수가 0으로 초기화되었는지 여부를 지정하는 부울 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-289">Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized.</span></span> <span data-ttu-id="f513e-290">이 속성의 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-290">The default value of this property is <see langword="true" />.</span></span></summary>
        <value>
          <span data-ttu-id="f513e-291">이 메서드의 로컬 변수가 0으로 초기화되면 <see langword="true" />이고, 초기화되지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-291"><see langword="true" /> if the local variables in this method should be zero initialized; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-292">이 속성은로 설정 하는 경우 `true`, 내보낸된 MSIL 지역 변수는 초기화를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-292">If this property is set to `true`, the emitted MSIL includes initialization of local variables.</span></span> <span data-ttu-id="f513e-293">로 설정 되어 있으면 `false`, 지역 변수는 초기화 되지 및 생성된 된 코드를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-293">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-294">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-294">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span> <span data-ttu-id="f513e-295">(가져오기 또는 설정)</span><span class="sxs-lookup"><span data-stu-id="f513e-295">(Get or set.)</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f513e-296">지정한 메서드를 호출할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-296">The object on which to invoke the specified method.</span></span> <span data-ttu-id="f513e-297">메서드가 정적이면 이 매개 변수가 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-297">If the method is static, this parameter is ignored.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="f513e-298">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-298">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <param name="binder"><span data-ttu-id="f513e-299">리플렉션을 사용하여 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 MemberInfo 개체 검색을 사용할 수 있도록 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-299">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection.</span></span> <span data-ttu-id="f513e-300">바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-300">If binder is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="f513e-301">자세한 내용은 <see cref="T:System.Reflection.Binder" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="f513e-301">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="f513e-302">인수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-302">An argument list.</span></span> <span data-ttu-id="f513e-303">호출되는 메서드의 매개 변수와 숫자, 순서, 형식이 동일한 인수의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-303">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="f513e-304">매개 변수가 없는 경우에는 <see langword="null" />이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-304">If there are no parameters this should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="f513e-305">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-305">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="f513e-306">이 인스턴스가 null이면 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-306">If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="f513e-307">예를 들면 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 변환하기 위해 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-307">(Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.)</span></span></param>
        <summary><span data-ttu-id="f513e-308">지정된 바인더의 제약 조건에 따라 지정한 매개 변수를 전달하여 지정된 개체에 있는 이 인스턴스에 의해 반영된 메서드를 동적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-308">Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</span></span></summary>
        <returns><span data-ttu-id="f513e-309">호출된 메서드의 반환 값을 포함하는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-309">Returns an object containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-310">메서드가 정적 이면는 `obj` 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-310">If the method is static, the `obj` parameter is ignored.</span></span> <span data-ttu-id="f513e-311">Static이 아닌 메서드에 대 한 `obj` 상속 하거나 메서드를 선언 하 고이 클래스와 동일한 형식 이어야 하는 클래스의 인스턴스여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-311">For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class.</span></span> <span data-ttu-id="f513e-312">메서드 매개 변수가 없는 경우, 값 `parameters` 해야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-312">If the method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="f513e-313">그렇지 않으면 개수, 형식 및 매개 변수 배열에 있는 요소의 순서는 개수, 형식 및이 인스턴스에 의해 반영 된 메서드에 대 한 매개 변수의 순서와 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-313">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-314">완전히 신뢰할 수 있는 코드에 대 한 액세스 제한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-314">Access restrictions are ignored for fully-trusted code.</span></span> <span data-ttu-id="f513e-315">즉, private 생성자, 메서드, 필드 및 속성에 액세스할 수 있습니다 및 코드를 완전히 신뢰할 수 있는 경우 리플렉션을 사용 하 여 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-315">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-316">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-316">This method is not currently supported.</span></span> <span data-ttu-id="f513e-317"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-317">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericMethod { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="f513e-318">사용자 지정 특성 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-318">The custom attribute type.</span></span></param>
        <param name="inherit"><span data-ttu-id="f513e-319">이 멤버의 상속 체인을 검색하여 사용자 지정 특성을 찾을지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-319">Specifies whether to search this member's inheritance chain to find the custom attributes.</span></span></param>
        <summary><span data-ttu-id="f513e-320">지정된 사용자 지정 특성 유형이 정의되었는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-320">Checks if the specified custom attribute type is defined.</span></span></summary>
        <returns>
          <span data-ttu-id="f513e-321">지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-321"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-322">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-322">This method is not currently supported.</span></span> <span data-ttu-id="f513e-323"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-323">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethod { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-324">메서드가 제네릭 메서드인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-324">Gets a value indicating whether the method is a generic method.</span></span></summary>
        <value>
          <span data-ttu-id="f513e-325">메서드가 제네릭인 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-325"><see langword="true" /> if the method is generic; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-326">메서드는 제네릭 형식 매개 변수가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="f513e-326">A method is generic if it has type parameters.</span></span> <span data-ttu-id="f513e-327">제네릭으로 만들 있습니다 메서드를 호출 하 여는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드 형식 매개 변수를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-327">You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters.</span></span> <span data-ttu-id="f513e-328">이 변경은 되돌릴 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-328">This change cannot be reversed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-329">다음 코드 예제에서는 메서드의 상태를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-329">The following code example displays the status of a method.</span></span> <span data-ttu-id="f513e-330">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-330">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-331">현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드의 정의를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-331">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method.</span></span></summary>
        <value>
          <span data-ttu-id="f513e-332">현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드 정의를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-332"><see langword="true" /> if the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-333">A <xref:System.Reflection.Emit.MethodBuilder> ; 제네릭 메서드 정의 만들 수만 사용할 수 생성 된 제네릭 메서드를 직접 만드는 데 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-333">A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly.</span></span> <span data-ttu-id="f513e-334">그러나의 서브 클래스 <xref:System.Reflection.Emit.MethodBuilder> 생성 된 제네릭 메서드를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-334">However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-335">다음 코드 예제에서는 메서드의 상태를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-335">The following code example displays the status of a method.</span></span> <span data-ttu-id="f513e-336">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-336">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-337">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-337">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></summary>
        <value><span data-ttu-id="f513e-338">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-338">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-339">동적 어셈블리의 메서드에서 보안에 중요 한 인지를 확인 하려면 형식을 호출 하 여 완성 <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, 호출의 <xref:System.Type.GetMethod%2A> 완료 된 유형과 get 메서드는 <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> 결과에서 속성 <xref:System.Reflection.MethodInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-339">To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-340">모든 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-340">In all cases.</span></span> <span data-ttu-id="f513e-341">동적 어셈블리에서는 이 속성이 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-341">This property is not supported in dynamic assemblies.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-342">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-342">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></summary>
        <value><span data-ttu-id="f513e-343">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-343">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-344">동적 어셈블리의 메서드에서 보안 안전에 중요 한 인지를 확인 하려면 형식을 호출 하 여 완성 <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, 호출의 <xref:System.Type.GetMethod%2A> 완료 된 유형과 get 메서드는 <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> 결과에서 속성 <xref:System.Reflection.MethodInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-344">To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-345">모든 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-345">In all cases.</span></span> <span data-ttu-id="f513e-346">동적 어셈블리에서는 이 속성이 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-346">This property is not supported in dynamic assemblies.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-347">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-347">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></summary>
        <value><span data-ttu-id="f513e-348">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-348">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-349">동적 어셈블리의 메서드에서 보안 투명 인지를 확인 하려면 형식을 호출 하 여 완성 <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, 호출의 <xref:System.Type.GetMethod%2A> 완료 된 유형과 get 메서드는 <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> 결과에서 속성 <xref:System.Reflection.MethodInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-349">To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-350">모든 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-350">In all cases.</span></span> <span data-ttu-id="f513e-351">동적 어셈블리에서는 이 속성이 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-351">This property is not supported in dynamic assemblies.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo MakeGenericMethod (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericMethod (ParamArray typeArguments As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ MakeGenericMethod(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="f513e-352">제네릭 메서드의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-352">An array of <see cref="T:System.Type" /> objects that represent the type arguments for the generic method.</span></span></param>
        <summary><span data-ttu-id="f513e-353">지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의에서 생성된 제네릭 메서드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-353">Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</span></span></summary>
        <returns><span data-ttu-id="f513e-354">지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의에서 생성된 제네릭 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-354">A <see cref="T:System.Reflection.MethodInfo" /> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-355">동적 코드를 표시 하는 때가 나타내는 제네릭 메서드 정의에서 생성 된 메서드를 호출 해야 할 수도 있습니다는 <xref:System.Reflection.Emit.MethodBuilder>바깥쪽 형식 완료 되기 전에, 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-355">When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed.</span></span> <span data-ttu-id="f513e-356">사용할 수 있습니다는 <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> 만드는 메서드를 한 <xref:System.Reflection.MethodInfo> 이러한 생성 된 메서드 및 사용에 대 한는 <xref:System.Reflection.MethodInfo> 내보낸된 호출에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-356">You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-357">다음 코드 예제에서는 불완전 한 형식에 있는 불완전 한 제네릭 메서드 정의에서 생성된 된 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-357">The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.</span></span>  
  
 <span data-ttu-id="f513e-358">이 예제에서는 단일 형식으로 임시 어셈블리와 모듈 만들고, 메서드 추가 `M`를 사용 하 여 형식 매개 변수 T를 추가 하 여 일반 메서드로 만듭니다는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-358">The example creates a transient assembly and module with a single type, adds a method `M`, and makes the method generic by adding a type parameter T using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="f513e-359">형식 매개 변수는 메서드의 매개 변수 형식 및 반환 형식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-359">The type parameter is used as the type of the method's parameter, and also as its return type.</span></span> <span data-ttu-id="f513e-360">바깥쪽 형식이 완료 되지 않은 채 제네릭 메서드 정의는 본문이 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-360">The generic method definition is not given a body, and the enclosing type is not completed.</span></span> <span data-ttu-id="f513e-361"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> 메서드 생성된 된 메서드를 만드는 데 다음 `M<String>` (`M(Of String)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f513e-361">The <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method is then used to make the constructed method `M<String>` (`M(Of String)` in Visual Basic).</span></span> <span data-ttu-id="f513e-362">때문에 코드 예제는 아무 것도 출력의 서브 클래스 <xref:System.Reflection.MethodInfo> 에서 반환 되는 <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> 메서드 매개 변수 리플렉션을 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-362">The example code has no output, because the subclass of <xref:System.Reflection.MethodInfo> returned by the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method does not allow reflection over its parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f513e-363">사용 하는 다른 코드 예제에 대 한 <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, 참조 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-363">For another code example that uses <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, see <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>.</span></span> <span data-ttu-id="f513e-364"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> 또한 광범위 하 게 제네릭 형식을 사용 하는 코드를 내보낼 때.</span><span class="sxs-lookup"><span data-stu-id="f513e-364"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> is also used extensively when emitting code that uses generic types.</span></span> <span data-ttu-id="f513e-365">참조 [하는 방법: 리플렉션 사용 하 여 제네릭 메서드 정의 내보내기](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-365">See [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cpp/source.cpp#1)]
 [!code-csharp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cs/source.cs#1)]
 [!code-vb[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-366">메서드에 대한 내부 핸들을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-366">Retrieves the internal handle for the method.</span></span> <span data-ttu-id="f513e-367">이 핸들을 사용하여 내부 메타데이터 핸들에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-367">Use this handle to access the underlying metadata handle.</span></span></summary>
        <value><span data-ttu-id="f513e-368">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-368">Read-only.</span></span> <span data-ttu-id="f513e-369">메서드에 대한 내부 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-369">The internal handle for the method.</span></span> <span data-ttu-id="f513e-370">이 핸들을 사용하여 내부 메타데이터 핸들에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-370">Use this handle to access the underlying metadata handle.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f513e-371">이 메서드는 현재 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-371">This method is not currently supported.</span></span> <span data-ttu-id="f513e-372"><see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="T:System.Reflection.MethodInfo" />에 대해 <see cref="P:System.Reflection.MethodBase.MethodHandle" />를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-372">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="P:System.Reflection.MethodBase.MethodHandle" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-373">현재 메서드가 정의되는 모듈을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-373">Gets the module in which the current method is being defined.</span></span></summary>
        <value><span data-ttu-id="f513e-374">현재 <see cref="T:System.Reflection.Module" />가 나타내는 멤버가 정의되는 <see cref="T:System.Reflection.MemberInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-374">The <see cref="T:System.Reflection.Module" /> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is being defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-375">이 속성은 편의 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-375">This property is provided as a convenience.</span></span> <span data-ttu-id="f513e-376">사용 하는 것과 같습니다는 <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> 다음 호출 하는 메서드가 선언 되 고, 형식을 가져올 속성의 <xref:System.Type.Module%2A> 결과 속성 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-376">It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
 <span data-ttu-id="f513e-377">이 속성은 또한 호출 <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-377">This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-378">이 메서드의 이름을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-378">Retrieves the name of this method.</span></span></summary>
        <value><span data-ttu-id="f513e-379">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-379">Read-only.</span></span> <span data-ttu-id="f513e-380">이 메서드의 단순 이름을 포함하는 문자열을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-380">Retrieves a string containing the simple name of this method.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-381">이 개체를 얻은 리플렉션에서 사용된 클래스를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-381">Retrieves the class that was used in reflection to obtain this object.</span></span></summary>
        <value><span data-ttu-id="f513e-382">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-382">Read-only.</span></span> <span data-ttu-id="f513e-383">이 메서드를 얻는 데 사용된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-383">The type used to obtain this method.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-384">메서드의 반환 형식에 대한 정보(예: 반환 형식에 사용자 지정 한정자가 포함되는지 여부)가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-384">Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</span></span></summary>
        <value><span data-ttu-id="f513e-385">반환 형식에 대한 정보가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-385">A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-386">컴파일러 디자이너에서 사용할 수는 <xref:System.Reflection.ParameterInfo> 사용자 지정 여부를 검색 하려면이 속성에서 반환 된 개체 한정자와 같은 <xref:Microsoft.VisualC.IsConstModifier>, 반환 형식에 적용 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-386">Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-387">선언 형식이 만들어지지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-387">The declaring type has not been created.</span></span></exception>
        <altmember cref="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
        <altmember cref="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-388">이 <see cref="T:System.Reflection.Emit.MethodBuilder" />가 나타내는 메서드의 반환 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-388">Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span></span></summary>
        <value><span data-ttu-id="f513e-389">메서드의 반환 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-389">The return type of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f513e-390">.NET Framework 2.0 및.NET Compact Framework 2.0 이상에서는이 멤버는 기본 클래스에서 상속 된 <xref:System.Reflection.MethodInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-390">Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>.</span></span> <span data-ttu-id="f513e-391"><xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-391">See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-392">메서드 반환 형식의 사용자 지정 특성을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-392">Returns the custom attributes of the method's return type.</span></span></summary>
        <value><span data-ttu-id="f513e-393">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-393">Read-only.</span></span> <span data-ttu-id="f513e-394">메서드 반환 형식의 사용자 지정 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-394">The custom attributes of the method's return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-395">이 메서드는 항상 `null`을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-395">This method always returns `null`.</span></span> <span data-ttu-id="f513e-396">가져오기는 <xref:System.Reflection.MethodInfo> 포함 하는 후 <xref:System.Type> 만들어지고 호출 된 <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> 에 <xref:System.Reflection.MethodInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-396">Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f513e-397">사용자 지정 특성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-397">Sets a custom attribute.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="f513e-398">사용자 지정 특성을 설명하는 도우미 클래스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-398">An instance of a helper class to describe the custom attribute.</span></span></param>
        <summary><span data-ttu-id="f513e-399">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-399">Sets a custom attribute using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-400"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 메서드와 상호 작용할 수는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 조합 하 여 두 메서드를 사용할 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-400">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="f513e-401">설명 섹션을 참조는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 메서드에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-401">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f513e-402"><paramref name="customBuilder" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-402"><paramref name="customBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-403">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-403">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="f513e-404">사용자 지정 특성에 대한 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-404">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="f513e-405">특성을 나타내는 바이트 blob입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-405">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="f513e-406">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-406">Sets a custom attribute using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-407">서식을 지정 하는 방법에 대 한 내용은 `binaryAttribute`하십시오 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-407">For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="f513e-408">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f513e-408">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="f513e-409"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 메서드와 상호 작용할 수는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 조합 하 여 두 메서드를 사용할 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-409">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="f513e-410">설명 섹션을 참조는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 메서드에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-410">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f513e-411"><paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-411"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-412">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-412">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetImplementationFlags">
      <MemberSignature Language="C#" Value="public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetImplementationFlags(valuetype System.Reflection.MethodImplAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetImplementationFlags (attributes As MethodImplAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetImplementationFlags(System::Reflection::MethodImplAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodImplAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="f513e-413">설정할 구현 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-413">The implementation flags to set.</span></span></param>
        <summary><span data-ttu-id="f513e-414">이 메서드에 대한 구현 플래그를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-414">Sets the implementation flags for this method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-415">사용 하는 경우는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 함께에서 메서드는 <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 메서드를 상호 작용에 유의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-415">When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions.</span></span> <span data-ttu-id="f513e-416">예를 들어,를 사용 하 여는 <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 를 추가 하려면 메서드는 <xref:System.Runtime.InteropServices.DllImportAttribute> 특성 집합도는 <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-416">For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="f513e-417">이후에 호출 하는 경우는 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 메서드는 <xref:System.Reflection.MethodImplAttributes.PreserveSig> 플래그를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-417">If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten.</span></span> <span data-ttu-id="f513e-418">이 문제를 방지 하는 방법은 두 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-418">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="f513e-419">호출 된 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 메서드를 호출 하기 전에 <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-419">Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="f513e-420"><xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> 메서드는 항상 기존 메서드 구현 플래그를 존중 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-420">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.</span></span>  
  
-   <span data-ttu-id="f513e-421">구현 플래그를 설정 하면 호출 된 <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> 메서드 기존 플래그를 검색, 비트를 사용 하거나 플래그를 추가 하 고 다음 호출를 <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-421">When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-422">다음 코드 예제에서는 컨텍스트를 사용은 `SetImplementationFlags` 메서드 본문에서 MSIL의 구현을 설명 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-422">The code sample below illustrates the contextual use of the `SetImplementationFlags` method to describe the implementation of MSIL in a method body.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-423">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-423">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-424">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-424">-or-</span></span>  
  
 <span data-ttu-id="f513e-425">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-425">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetMarshal">
      <MemberSignature Language="C#" Value="public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMarshal(System::Reflection::Emit::UnmanagedMarshal ^ unmanagedMarshal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedMarshal" Type="System.Reflection.Emit.UnmanagedMarshal" />
      </Parameters>
      <Docs>
        <param name="unmanagedMarshal"><span data-ttu-id="f513e-426">이 메서드의 반환 형식에 대한 마샬링 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-426">Marshaling information for the return type of this method.</span></span></param>
        <summary><span data-ttu-id="f513e-427">이 메서드의 반환 형식에 대한 마샬링 정보를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-427">Sets marshaling information for the return type of this method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f513e-428">아래 코드 예제에서는 사용 하 여는 `SetMarshal` 메서드를 다른 형식으로 메서드 호출의 결과 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-428">The code sample below illustrates the contextual usage of the `SetMarshal` method to marshal the results of a method call as a different type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-429">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-429">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-430">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-430">-or-</span></span>  
  
 <span data-ttu-id="f513e-431">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-431">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetMethodBody">
      <MemberSignature Language="C#" Value="public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, System.Collections.Generic.IEnumerable&lt;int&gt; tokenFixups);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMethodBody(unsigned int8[] il, int32 maxStack, unsigned int8[] localSignature, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenFixups) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMethodBody (il As Byte(), maxStack As Integer, localSignature As Byte(), exceptionHandlers As IEnumerable(Of ExceptionHandler), tokenFixups As IEnumerable(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMethodBody(cli::array &lt;System::Byte&gt; ^ il, int maxStack, cli::array &lt;System::Byte&gt; ^ localSignature, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::ExceptionHandler&gt; ^ exceptionHandlers, System::Collections::Generic::IEnumerable&lt;int&gt; ^ tokenFixups);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="maxStack" Type="System.Int32" />
        <Parameter Name="localSignature" Type="System.Byte[]" />
        <Parameter Name="exceptionHandlers" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt;" />
        <Parameter Name="tokenFixups" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="il"><span data-ttu-id="f513e-432">유효한 MSIL 명령이 들어 있는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-432">An array that contains valid MSIL instructions.</span></span></param>
        <param name="maxStack"><span data-ttu-id="f513e-433">최대 스택 평가 깊이입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-433">The maximum stack evaluation depth.</span></span></param>
        <param name="localSignature"><span data-ttu-id="f513e-434">직렬화된 로컬 변수 구조를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-434">An array of bytes that contain the serialized local variable structure.</span></span> <span data-ttu-id="f513e-435">메서드에 로컬 변수가 없으면 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-435">Specify <see langword="null" /> if the method has no local variables.</span></span></param>
        <param name="exceptionHandlers"><span data-ttu-id="f513e-436">메서드에 대한 예외 처리기를 포함하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-436">A collection that contains the exception handlers for the method.</span></span> <span data-ttu-id="f513e-437">메서드에 예외 처리기가 없으면 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-437">Specify <see langword="null" /> if the method has no exception handlers.</span></span></param>
        <param name="tokenFixups"><span data-ttu-id="f513e-438"><c>il</c>의 오프셋을 나타내는 값 컬렉션으로, 각각이 수정할 수 있는 토큰의 시작을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-438">A collection of values that represent offsets in <c>il</c>, each of which specifies the beginning of a token that may be modified.</span></span> <span data-ttu-id="f513e-439">메서드에 수정해야 할 토큰이 없으면 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-439">Specify <see langword="null" /> if the method has no tokens that have to be modified.</span></span></param>
        <summary><span data-ttu-id="f513e-440">MSIL(Microsoft 중간 언어) 명령의 지정된 바이트 배열을 사용하여 메서드의 본문을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-440">Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f513e-441"><paramref name="il" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-441"><paramref name="il" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f513e-442"><paramref name="maxStack" />가 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-442"><paramref name="maxStack" /> is negative.</span></span>  
  
 <span data-ttu-id="f513e-443">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-443">-or-</span></span>  
  
 <span data-ttu-id="f513e-444"><paramref name="exceptionHandlers" /> 중 하나가 <paramref name="il" /> 오프셋 외부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-444">One of <paramref name="exceptionHandlers" /> specifies an offset outside of <paramref name="il" />.</span></span>  
  
 <span data-ttu-id="f513e-445">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-445">-or-</span></span>  
  
 <span data-ttu-id="f513e-446"><paramref name="tokenFixups" /> 중 하나가 <paramref name="il" /> 배열 외부의 오프셋을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-446">One of <paramref name="tokenFixups" /> specifies an offset that is outside the <paramref name="il" /> array.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-447">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 사용하여 이미 만들어져 있는 경우</span><span class="sxs-lookup"><span data-stu-id="f513e-447">The containing type was previously created using the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span>  
  
 <span data-ttu-id="f513e-448">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-448">-or-</span></span>  
  
 <span data-ttu-id="f513e-449">이 메서드는 이 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체에 이미 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-449">This method was called previously on this <see cref="T:System.Reflection.Emit.MethodBuilder" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (params Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (ParamArray parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(... cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterTypes" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameterTypes"><span data-ttu-id="f513e-450">매개 변수 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-450">An array of <see cref="T:System.Type" /> objects representing the parameter types.</span></span></param>
        <summary><span data-ttu-id="f513e-451">메서드에 대한 매개 변수 개수와 형식을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-451">Sets the number and types of parameters for a method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-452">매개 변수의 형식과 수를 알고 있는 경우 메서드가 정의 된 설정 될 수 있습니다 오버 로드를 사용 하 여는 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 매개 변수 형식의 배열을 받는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-452">If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="f513e-453">그러나 제네릭 메서드의 형식을 가진 메서드가 정의 된 후까지 정의할 수 없습니다 고유한 제네릭 형식 매개 변수 중 하나 이상의 지정 된 매개 변수가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-453">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="f513e-454">이 경우 형식 매개 변수를 설정 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-454">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="f513e-455">반환 형식에 선택적 또는 필수 사용자 지정 한정자를 하는 경우와 같은 <xref:System.Runtime.CompilerServices.IsConst>를 사용 하 여는 <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-455">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="f513e-456">사용 하 여 설정 된 모든 매개 변수 형식 대체이 메서드를 호출 하는 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-456">Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-457">다음 코드 예제에서는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드를 제네릭 메서드로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-457">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="f513e-458"><xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> 메서드 형식의 첫 번째 제네릭 형식 매개 변수에 의해 지정 됩니다 메서드 하나 매개 제공 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-458">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="f513e-459"><xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> 메서드는 반환 형식을 두 번째 제네릭 형식 매개 변수로 지정 된 메서드에 제공 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-459">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="f513e-460">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-460">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-461">현재 메서드는 제네릭이지만 제네릭 메서드 정의는 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-461">The current method is generic, but is not a generic method definition.</span></span> <span data-ttu-id="f513e-462">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-462">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="SetReturnType">
      <MemberSignature Language="C#" Value="public void SetReturnType (Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetReturnType(class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetReturnType (returnType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetReturnType(Type ^ returnType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="returnType"><span data-ttu-id="f513e-463">메서드의 반환 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-463">A <see cref="T:System.Type" /> object that represents the return type of the method.</span></span></param>
        <summary><span data-ttu-id="f513e-464">메서드의 반환 형식을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-464">Sets the return type of the method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-465">이 메서드를 사용 하 여 메서드의 제네릭 형식 매개 변수 중 하나에서 반환 형식을 지정 하는 경우 제네릭 메서드의 반환 형식을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-465">Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method.</span></span> <span data-ttu-id="f513e-466">반환 형식에 선택적 또는 필수 사용자 지정 한정자를 하는 경우와 같은 <xref:System.Runtime.CompilerServices.IsConst>를 사용 하 여는 <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-466">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="f513e-467">사용 하 여 반환 형식이 대체이 메서드를 호출 하는 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-467">Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-468">다음 코드 예제에서는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드를 제네릭 메서드로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-468">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="f513e-469"><xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> 메서드 형식의 첫 번째 제네릭 형식 매개 변수에 의해 지정 됩니다 메서드 하나 매개 제공 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-469">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="f513e-470"><xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> 메서드는 반환 형식을 두 번째 제네릭 형식 매개 변수로 지정 된 메서드에 제공 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-470">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="f513e-471">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-471">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-472">현재 메서드는 제네릭이지만 제네릭 메서드 정의는 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-472">The current method is generic, but is not a generic method definition.</span></span> <span data-ttu-id="f513e-473">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-473">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSignature">
      <MemberSignature Language="C#" Value="public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSignature(class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSignature (returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSignature(Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="returnType"><span data-ttu-id="f513e-474">메서드의 반환 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-474">The return type of the method.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="f513e-475">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-475">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="f513e-476">반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-476">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="f513e-477">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-477">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="f513e-478">반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-478">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="f513e-479">메서드의 매개 변수 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-479">The types of the parameters of the method.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="f513e-480">형식 배열의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-480">An array of arrays of types.</span></span> <span data-ttu-id="f513e-481">각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />).</span><span class="sxs-lookup"><span data-stu-id="f513e-481">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="f513e-482">특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-482">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="f513e-483">매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-483">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="f513e-484">형식 배열의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-484">An array of arrays of types.</span></span> <span data-ttu-id="f513e-485">각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />).</span><span class="sxs-lookup"><span data-stu-id="f513e-485">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="f513e-486">특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-486">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="f513e-487">매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-487">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="f513e-488">반환 형식, 매개 변수 형식, 반환 형식과 매개 변수 형식의 필수 및 선택적 사용자 지정 한정자를 포함하여 메서드 시그니처를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-488">Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-489">반환 형식 및 수와 유형의 매개 변수를 알고 있는 메서드가 정의 된 경우를 설정할 수 있습니다 오버 로드를 사용 하는 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 매개 변수 형식의 배열을 받는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-489">If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="f513e-490">그러나 제네릭 메서드의 형식을 가진 메서드가 정의 된 후까지 정의할 수 없습니다 고유한 제네릭 형식 매개 변수 중 하나 이상의 지정 된 매개 변수가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-490">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="f513e-491">이 경우 형식 매개 변수를 설정 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-491">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="f513e-492">반환 형식이 나 형식 매개 변수를 모두 있는 경우 선택적 또는 필수 사용자 지정 한정자를 같은 <xref:Microsoft.VisualC.IsConstModifier>를 사용할 수 있습니다는 <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> 및 <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-492">If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.</span></span>  
  
 <span data-ttu-id="f513e-493">매개 변수 및 반환 형식을 사용 하 여 설정 대신이 메서드를 호출 하는 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-493">Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-494">다음 코드 예제에서는 sample 형식 매개 변수가 있는 제네릭 클래스에 대 한 소스 코드를 포함 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-494">The following code example contains source code for a generic class named Sample that has a type parameter `T`.</span></span> <span data-ttu-id="f513e-495">클래스에는 이름이 필드 `Field`, 형식의 `T`는 제네릭 메서드 `GM` 자체 형식 매개 변수가 있는 `U`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-495">The class has a field named `Field`, of type `T`, and a generic method `GM` with its own type parameter, `U`.</span></span> <span data-ttu-id="f513e-496">메서드 `GM` 고유한 형식 매개 변수를 대체 하는 샘플의 인스턴스를 만들고 `U` 샘플의 형식 매개 변수에 대 한에 해당 입력된 매개 변수를 저장 하 고 `Field`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-496">Method `GM` creates an instance of Sample, substituting its own type parameter `U` for the type parameter of Sample, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="f513e-497">이 소스 코드는 컴파일 되었지만 사용 되지 않습니다. 사용 하 여 볼 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 클래스에 의해 생성 된 코드를 비교 하 고 `Example`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-497">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="f513e-498">클래스의 코드 `Example` 를 사용 하는 <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> 제네릭 코드에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-498">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method in emitting generic code.</span></span> <span data-ttu-id="f513e-499">`Main` 클래스의 메서드 `Example` 라는 클래스를 포함 하는 동적 어셈블리를 만들고 `Sample`를 사용 하 여는 <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> 는 형식 매개 변수를 추가 하 여 제네릭 만드는 메서드와 알림이 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-499">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="f513e-500">기본 생성자와 라는 필드 `Field`, 형식의 `T`, 클래스에 추가 `Sample`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-500">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="f513e-501">메서드에 `GM` 추가 되 고 사용 하 여 제네릭 메서드에로 설정 되는 <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-501">A method `GM` is added, and turned into a generic method using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="f513e-502">형식 매개 변수 `GM` 라는 `U`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-502">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="f513e-503">형식 매개 변수에서 정의 되 면의 서명을 `GM` 사용 하 여 추가 되는 <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f513e-503">Once the type parameter is defined, the signature of `GM` is added, using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method.</span></span> <span data-ttu-id="f513e-504">가 없는 반환 형식 및 없음 또는 사용자 지정 한정자를이 메서드의 모든 매개 변수는 `null` 제외 하 고 `parameterTypes`, 메서드의 유일한 매개 변수의 형식을 설정 하는이 메서드의 형식 매개 변수 설정은; `U`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-504">There is no return type, and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`, which sets the type of the only parameter of the method; this is set to the method's type parameter, `U`.</span></span> <span data-ttu-id="f513e-505">메서드의 본문 생성 된 형식의 인스턴스를 만듭니다 `Sample<U>` (`Sample(Of U)` Visual basic에서), 메서드의 매개 변수를 할당 `Field`, 한 다음 값을 출력 `Field`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-505">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="f513e-506">진입점 메서드를 보유 하기 위해 더미 형식은 정의 `Main`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-506">A dummy type is defined, to hold the entry point method `Main`.</span></span> <span data-ttu-id="f513e-507">본문에 `Main`, 정적 `GM` 메서드가 호출 되는 생성 된 제네릭 형식 `Sample<int>` (`Sample(Of Integer)` Visual basic에서), 형식과 <xref:System.String> 에 대 한 대체 `U`합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-507">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="f513e-508"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> 메서드 만드는 데 사용 되는 <xref:System.Reflection.MethodInfo> 정적에 대 한 `GM` 생성 된 제네릭 형식의 메서드 `Sample<U>`, 및 <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> 메서드를 만드는 데 다음는 <xref:System.Reflection.MethodInfo> 메서드 호출에서 내보낼 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-508">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="f513e-509">코드 예제를 실행할 때 생성된 된 어셈블리가 TypeBuilderGetFieldExample.exe로 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-509">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="f513e-510">TypeBuilderGetFieldExample.exe, 실행할 수 있고 사용할 수 있습니다는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 내보낸된 코드에 대 한 코드와 비교 하는 `Sample` 자체 코드 예제에서는로 컴파일되는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-510">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-511">현재 메서드는 제네릭이지만 제네릭 메서드 정의는 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-511">The current method is generic, but is not a generic method definition.</span></span> <span data-ttu-id="f513e-512">즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-512">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSymCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetSymCustomAttribute (string name, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSymCustomAttribute(string name, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSymCustomAttribute (name As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSymCustomAttribute(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f513e-513">기호화된 사용자 지정 특성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-513">The name of the symbolic custom attribute.</span></span></param>
        <param name="data"><span data-ttu-id="f513e-514">기호화된 사용자 지정 특성의 값을 나타내는 바이트 blob입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-514">The byte blob that represents the value of the symbolic custom attribute.</span></span></param>
        <summary><span data-ttu-id="f513e-515">blob을 사용하여 기호화된 사용자 지정 특성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-515">Set a symbolic custom attribute using a blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-516">메타 데이터 사용자 지정 특성와 달리이 사용자 지정 특성의 기호 작성기와 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-516">Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f513e-517">아래 코드 예제에서는 사용 하 여는 `SetSymCustomAttribute` 메서드에 연결 된 메서드 이름 및 사용자 지정 특성의 키에 대 한 바이트 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-517">The code sample below illustrates the contextual usage of the `SetSymCustomAttribute` method to set the byte values for the name and key of a custom attribute attached to a method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CPP/source2.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CS/source2.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f513e-518">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-518">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
 <span data-ttu-id="f513e-519">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-519">-or-</span></span>  
  
 <span data-ttu-id="f513e-520">이 메서드를 포함하는 모듈이 디버그 모듈이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-520">The module that contains this method is not a debug module.</span></span>  
  
 <span data-ttu-id="f513e-521">또는</span><span class="sxs-lookup"><span data-stu-id="f513e-521">-or-</span></span>  
  
 <span data-ttu-id="f513e-522">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-522">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public string Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Signature" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Signature { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f513e-523">메서드의 시그니처를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-523">Retrieves the signature of the method.</span></span></summary>
        <value><span data-ttu-id="f513e-524">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-524">Read-only.</span></span> <span data-ttu-id="f513e-525">이 <see langword="MethodBase" /> 인스턴스에서 리플렉션된 메서드의 시그니처를 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-525">A String containing the signature of the method reflected by this <see langword="MethodBase" /> instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="f513e-526">나중에 사용하기 위해 예약되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-526">Reserved for future use.</span></span> <span data-ttu-id="f513e-527">IID_NULL이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-527">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="f513e-528">매핑할 전달된 이름의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-528">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="f513e-529">매핑할 이름의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-529">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="f513e-530">이름을 해석할 로캘 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-530">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="f513e-531">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-531">Caller-allocated array that receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="f513e-532">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-532">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-533">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-533">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f513e-534">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-534">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f513e-535">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-535">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="f513e-536">반환할 형식 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-536">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="f513e-537">형식 정보의 로캘 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-537">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="f513e-538">요청된 형식 정보 개체에 대한 포인터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-538">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="f513e-539">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-539">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-540">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f513e-541">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-541">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f513e-542">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-542">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="f513e-543">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-543">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="f513e-544">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span><span class="sxs-lookup"><span data-stu-id="f513e-544">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-545">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-545">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f513e-546">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-546">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f513e-547">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-547">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="f513e-548">멤버를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-548">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="f513e-549">나중에 사용하기 위해 예약되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-549">Reserved for future use.</span></span> <span data-ttu-id="f513e-550">IID_NULL이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-550">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="f513e-551">인수를 해석할 로캘 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-551">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="f513e-552">호출의 컨텍스트를 설명하는 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-552">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="f513e-553">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-553">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="f513e-554">결과를 저장할 위치에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-554">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="f513e-555">예외 정보가 포함된 구조체에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-555">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="f513e-556">오류가 있는 첫 번째 인수의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-556">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="f513e-557">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-557">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f513e-558">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-558">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f513e-559">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-559">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f513e-560">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-560">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f513e-561">이 <see langword="MethodBuilder" /> 인스턴스를 문자열로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-561">Returns this <see langword="MethodBuilder" /> instance as a string.</span></span></summary>
        <returns><span data-ttu-id="f513e-562">이 메서드의 이름, 특성, 메서드 서명, 예외 및 로컬 서명 뒤에 현재 MSIL(Microsoft Intermediate Language) 스트림이 포함된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f513e-562">Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>