<Type Name="AssemblyBuilder" FullName="System.Reflection.Emit.AssemblyBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b92ac3b5f1f997c42aefa84e77a107a8c39f415" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36470269" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AssemblyBuilder : System.Reflection.Assembly, System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AssemblyBuilder extends System.Reflection.Assembly implements class System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyBuilder&#xA;Inherits Assembly&#xA;Implements _AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder sealed : System::Reflection::Assembly, System::Runtime::InteropServices::_AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class&#xA;    inherit Assembly&#xA;    interface _AssemblyBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.Assembly</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._AssemblyBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._AssemblyBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c156d-101">동적 어셈블리를 정의하고 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c156d-101">Defines and represents a dynamic assembly.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-102">동적 어셈블리는 어셈블리를 리플렉션 내보내기를 Api를 사용 하 여 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-102">A dynamic assembly is an assembly that is created using the Reflection Emit APIs.</span></span> <span data-ttu-id="c156d-103">사용 하 여 동적 어셈블리를 저장할 때 어셈블리에 동적 모듈은 저장 된 <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-103">The dynamic modules in the assembly are saved when the dynamic assembly is saved using the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method.</span></span> <span data-ttu-id="c156d-104">실행 파일을 생성 하는 <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> 의 진입점인 어셈블리에 있는 메서드를 식별 하 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-104">To generate an executable, the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method must be called to identify the method that is the entry point to the assembly.</span></span> <span data-ttu-id="c156d-105">어셈블리는 Dll로 기본적으로 저장 하지 않는 한는 <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> 메서드는 콘솔 응용 프로그램 또는 Windows 기반 응용 프로그램의 생성을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-105">Assemblies are saved as DLLs by default, unless the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method requests the generation of a console application or a Windows-based application.</span></span>  
  
 <span data-ttu-id="c156d-106">어셈블리의 매니페스트 파일 이름은 첫 번째 인수에 지정 된 모듈의 이름이 일치 해야 하는 동적 어셈블리 동적 모듈을 여러 개 들어 있는 경우는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-106">If a dynamic assembly contains more than one dynamic module, the assembly's manifest file name should match the module's name that is specified as the first argument to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A> method.</span></span>  
  
 <span data-ttu-id="c156d-107">기본의 일부 메서드 <xref:System.Reflection.Assembly> 클래스 같은 `GetModules` 및 `GetLoadedModules`에서 호출 될 때 제대로 작동 하지 것입니다 <xref:System.Reflection.Emit.AssemblyBuilder> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-107">Some methods on the base <xref:System.Reflection.Assembly> class, such as `GetModules` and `GetLoadedModules`, will not work correctly when called from <xref:System.Reflection.Emit.AssemblyBuilder> objects.</span></span> <span data-ttu-id="c156d-108">정의 된 동적 어셈블리를 로드 하 고 로드 된 어셈블리 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-108">You can load the defined dynamic assembly and call the methods on the loaded assembly.</span></span> <span data-ttu-id="c156d-109">예를 들어 되도록 하려면 리소스 모듈 반환된 된 모듈 목록에 포함 되어 있는지, 호출 `GetModules` 에 로드 된 <xref:System.Reflection.Assembly> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-109">For example, to ensure that resource modules are included in the returned module list, call `GetModules` on the loaded <xref:System.Reflection.Assembly> object.</span></span>  
  
 <span data-ttu-id="c156d-110">사용 하 여 동적 어셈블리에 서명 <xref:System.Reflection.AssemblyName.KeyPair%2A> 어셈블리가 저장 될 때까지 적용 되지 않습니다 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-110">The signing of a dynamic assembly using <xref:System.Reflection.AssemblyName.KeyPair%2A> is not effective until the assembly is saved to disk.</span></span> <span data-ttu-id="c156d-111">따라서 강력한 이름이 임시 동적 어셈블리와 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-111">So, strong names will not work with transient dynamic assemblies.</span></span>  
  
 <span data-ttu-id="c156d-112">가져오려는 <xref:System.Reflection.Emit.AssemblyBuilder> 개체를 가져오려면는 <xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-112">To get an <xref:System.Reflection.Emit.AssemblyBuilder> object, use the <xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType> method.</span></span>  
  
## <a name="reflection-emit-dynamic-assembly-scenarios"></a><span data-ttu-id="c156d-113">리플렉션 내보내기 동적 어셈블리 시나리오</span><span class="sxs-lookup"><span data-stu-id="c156d-113">Reflection emit dynamic assembly scenarios</span></span>  
 <span data-ttu-id="c156d-114">다음 사용할 때 고려할 몇 가지는 <xref:System.Reflection.Emit.AssemblyBuilder> 동적 어셈블리를 만드는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-114">The following are some things to consider when using the <xref:System.Reflection.Emit.AssemblyBuilder> class to create dynamic assemblies.</span></span>  
  
### <a name="dynamic-modules"></a><span data-ttu-id="c156d-115">동적 모듈</span><span class="sxs-lookup"><span data-stu-id="c156d-115">Dynamic modules</span></span>  
 <span data-ttu-id="c156d-116">리플렉션 내보내기 지원 동적 어셈블리에 정의 된 동적 모듈을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-116">Reflection emit supports the creation of dynamic modules defined in dynamic assemblies.</span></span> <span data-ttu-id="c156d-117">동적 어셈블리에서 만든 동적 모듈에는 일시적 이거나 지속 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-117">A dynamic module created in a dynamic assembly can be transient or persistable.</span></span>  
  
### <a name="restrictions-on-type-references"></a><span data-ttu-id="c156d-118">형식 참조에 대 한 제한</span><span class="sxs-lookup"><span data-stu-id="c156d-118">Restrictions on type references</span></span>  
 <span data-ttu-id="c156d-119">어셈블리에는 다른 어셈블리에 정의 된 형식을 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-119">Assemblies can reference types defined in another assembly.</span></span> <span data-ttu-id="c156d-120">임시 동적 어셈블리를 다른 임시 동적 어셈블리, 지속 동적 어셈블리 또는 정적 어셈블리에 정의 된 형식 안전 하 게 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-120">A transient dynamic assembly can safely reference types defined in another transient dynamic assembly, a persistable dynamic assembly, or a static assembly.</span></span> <span data-ttu-id="c156d-121">그러나 공용 언어 런타임에서 임시 동적 모듈에 정의 된 형식을 참조 하는 지속 가능한 동적 모듈을 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-121">However, the common language runtime does not allow a persistable dynamic module to reference a type defined in a transient dynamic module.</span></span> <span data-ttu-id="c156d-122">즉, 런타임은 디스크에 저장 한 후 유지 되는 동적 모듈 로드 될 때 임시 동적 모듈에 정의 된 형식에 대 한 참조를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-122">This is because when the persisted dynamic module is loaded after being saved to disk, the runtime cannot resolve the references to types defined in the transient dynamic module.</span></span>  
  
### <a name="restrictions-on-emitting-to-remote-application-domains"></a><span data-ttu-id="c156d-123">표시 하 고 원격 응용 프로그램 도메인에 대 한 제한 사항</span><span class="sxs-lookup"><span data-stu-id="c156d-123">Restrictions on emitting to remote application domains</span></span>  
 <span data-ttu-id="c156d-124">일부 시나리오는 동적 어셈블리를 만들고 원격 응용 프로그램 도메인에서 실행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-124">Some scenarios require a dynamic assembly to be created and executed in a remote application domain.</span></span> <span data-ttu-id="c156d-125">리플렉션 내보내기 원격 응용 프로그램 도메인에 직접 내보낼 수는 동적 어셈블리를 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-125">Reflection emit does not allow a dynamic assembly to be emitted directly to a remote application domain.</span></span> <span data-ttu-id="c156d-126">현재 응용 프로그램 도메인에서 동적 어셈블리를 내보내고 내보낸된 동적 어셈블리를 디스크에 저장 하 고 다음 원격 응용 프로그램 도메인에는 동적 어셈블리를 로드 하는 솔루션은입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-126">The solution is to emit the dynamic assembly in the current application domain, save the emitted dynamic assembly to disk, and then load the dynamic assembly into the remote application domain.</span></span>  
  
### <a name="dynamic-assembly-access-modes"></a><span data-ttu-id="c156d-127">동적 어셈블리 액세스 모드</span><span class="sxs-lookup"><span data-stu-id="c156d-127">Dynamic assembly access modes</span></span>  
 <span data-ttu-id="c156d-128">다음 액세스 모드 중 하나를 사용 하 여 동적 어셈블리를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-128">Dynamic assemblies can be created using one of the following access modes:</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Run?displayProperty=nameWithType>  
  
     <span data-ttu-id="c156d-129">으로 표시 하는 동적 어셈블리는 <xref:System.Reflection.Emit.AssemblyBuilder> 개체는 일시적입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-129">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is transient.</span></span> <span data-ttu-id="c156d-130">동적 어셈블리 내보낸된 코드 실행에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-130">The dynamic assembly can only be used to execute the emitted code.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save?displayProperty=nameWithType>  
  
     <span data-ttu-id="c156d-131">으로 표시 하는 동적 어셈블리는 <xref:System.Reflection.Emit.AssemblyBuilder> 개체는 지속 되지만 저장 된 pe (이식 가능) 파일을 디스크에서 로드할 때까지 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-131">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable but cannot be executed until the saved portable executable (PE) file has been loaded from disk.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType>  
  
     <span data-ttu-id="c156d-132">으로 표시 하는 동적 어셈블리는 <xref:System.Reflection.Emit.AssemblyBuilder> 는 지속, 개체 이지만 전에 및/또는 어셈블리를 저장 한 후에 실행할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-132">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable, but can also be executed before and/or after the assembly is saved to disk.</span></span>  
  
 <span data-ttu-id="c156d-133">적절 한 제공 하 여 액세스 모드를 지정 해야 <xref:System.Reflection.Emit.AssemblyBuilderAccess> 값에 대 한 호출에는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType> 메서드는 동적 어셈블리에 정의 되어 있고 나중에 변경할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="c156d-133">The access mode must be specified by providing the appropriate <xref:System.Reflection.Emit.AssemblyBuilderAccess> value in the call to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType> method when the dynamic assembly is defined and cannot be changed later.</span></span> <span data-ttu-id="c156d-134">런타임에서는 어셈블리의 내부 표현 최적화 하는 동적 어셈블리의 액세스 모드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-134">The runtime uses the access mode of a dynamic assembly to optimize the assembly's internal representation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-135">다음 코드 예제에서는 한 모듈을 사용 하는 동적 어셈블리를 정의 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-135">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="c156d-136">예제에서는 어셈블리 모듈에에서 포함 한 형식 `MyDynamicType`, 여기에 전용 필드, private 필드를 가져오거나 설정 하는 속성, private 필드를 초기화 하는 생성자 및에 전용 필드는 사용자가 제공한 숫자 메서드 값 및 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-136">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="c156d-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> 어셈블리를 만들 때 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> is specified when the assembly is created.</span></span> <span data-ttu-id="c156d-138">어셈블리도 저장 하 고 어셈블리 코드는 즉시 사용을 검사할 수 있도록 디스크에 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 또는 다른 응용 프로그램에서 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-138">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.ReflectionPermission">
      <span data-ttu-id="c156d-139">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c156d-139">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
      </span>
      <span data-ttu-id="c156d-140">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="c156d-140">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
      </span>
    </permission>
    <altmember cref="Overload:System.AppDomain.DefineDynamicAssembly" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddResourceFile">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-141">이 어셈블리에 기존 리소스 파일을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-141">Adds an existing resource file to this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-142">리소스의 논리적 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-142">The logical name of the resource.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-143">논리적 이름이 매핑되는 물리적 파일 이름(.resources 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-143">The physical file name (.resources file) to which the logical name is mapped.</span>
          </span>
          <span data-ttu-id="c156d-144">경로가 포함되지 않아야 합니다. 해당 파일은 이 파일이 추가되는 어셈블리와 동일한 디렉터리에 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-144">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-145">이 어셈블리에 기존 리소스 파일을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-145">Adds an existing resource file to this assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-146">`fileName` 되지 않아야 하는 다른 지속 모듈, 독립 실행형 관리 되는 리소스 또는 독립 실행형 매니페스트 파일의와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-146">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="c156d-147">관리 되는 리소스 파일에는 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-147">The managed resources in the file are assumed to be public.</span></span>  
  
 <span data-ttu-id="c156d-148">지정된 된 리소스 파일 어셈블리를 저장할 디렉터리에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-148">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-149">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-149">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-150">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-150">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-151">다음 코드 예제를 사용 하 여 동적으로 만들어진된 어셈블리에 리소스 파일을 연결 하는 방법을 보여 줍니다 `AddResourceFile`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-151">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-152">
            <paramref name="name" />이 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-152">
              <paramref name="name" /> has been previously defined.</span>
          </span>
          <span data-ttu-id="c156d-153">-또는-  어셈블리에 이름이 <paramref name="fileName" />인 다른 파일이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-153">-or-  There is another file in the assembly named <paramref name="fileName" />.</span>
          </span>
          <span data-ttu-id="c156d-154">-또는-  <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-154">-or-  The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-155">-또는-  <paramref name="fileName" />의 길이가 0이거나 <paramref name="fileName" />에 경로가 포함되어 있는 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-155">-or-  The length of <paramref name="fileName" /> is zero, or if <paramref name="fileName" /> includes a path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-156">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-156">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c156d-157">
            <paramref name="fileName" /> 파일을 찾을 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-157">The file <paramref name="fileName" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-158">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-158">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-159">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-159">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-160">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-160">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-161">리소스 파일에 액세스 하려면 FileIOPermissionAccess.Read 권한이 필요 <paramref name="resourceFileName" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-161">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String, attribute As ResourceAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string * System.Reflection.ResourceAttributes -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-162">리소스의 논리적 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-162">The logical name of the resource.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-163">논리적 이름이 매핑되는 물리적 파일 이름(.resources 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-163">The physical file name (.resources file) to which the logical name is mapped.</span>
          </span>
          <span data-ttu-id="c156d-164">경로가 포함되지 않아야 합니다. 해당 파일은 이 파일이 추가되는 어셈블리와 동일한 디렉터리에 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-164">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span>
          </span>
        </param>
        <param name="attribute">
          <span data-ttu-id="c156d-165">리소스 특성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-165">The resource attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-166">이 어셈블리에 기존 리소스 파일을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-166">Adds an existing resource file to this assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-167">`fileName` 되지 않아야 하는 다른 지속 모듈, 독립 실행형 관리 되는 리소스 또는 독립 실행형 매니페스트 파일의와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-167">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="c156d-168">관리되는 리소스에 대해 특성을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-168">Attributes can be specified for the managed resource.</span></span>  
  
 <span data-ttu-id="c156d-169">지정된 된 리소스 파일 어셈블리를 저장할 디렉터리에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-169">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-170">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-170">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-171">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-171">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-172">다음 코드 예제를 사용 하 여 동적으로 만들어진된 어셈블리에 리소스 파일을 연결 하는 방법을 보여 줍니다 `AddResourceFile`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-172">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-173">
            <paramref name="name" />이 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-173">
              <paramref name="name" /> has been previously defined.</span>
          </span>
          <span data-ttu-id="c156d-174">-또는-  어셈블리에 이름이 <paramref name="fileName" />인 다른 파일이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-174">-or-  There is another file in the assembly named <paramref name="fileName" />.</span>
          </span>
          <span data-ttu-id="c156d-175">-또는-  <paramref name="name" />의 길이가 0이거나 <paramref name="fileName" />의 길이가 0인 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-175">-or-  The length of <paramref name="name" /> is zero or if the length of <paramref name="fileName" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-176">-또는-  <paramref name="fileName" />에 경로가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-176">-or-  <paramref name="fileName" /> includes a path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-177">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-177">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c156d-178">
            <paramref name="fileName" /> 파일을 찾을 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-178">If the file <paramref name="fileName" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-179">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-179">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-180">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-180">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-181">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-181">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-182">리소스 파일에 액세스 하려면 FileIOPermissionAccess.Read 권한이 필요 <paramref name="resourceFileName" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-182">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CodeBase">
      <MemberSignature Language="C#" Value="public override string CodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBase : string" Usage="System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-183">원래 지정된 것처럼(예: <see cref="T:System.Reflection.AssemblyName" /> 개체) 어셈블리의 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-183">Gets the location of the assembly, as specified originally (such as in an <see cref="T:System.Reflection.AssemblyName" /> object).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-184">원래 지정된 어셈블리 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-184">The location of the assembly, as specified originally.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-185">로드 된 매니페스트가 들어 있는 파일에 절대 경로 가져오려면는 <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-185">To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-186">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-186">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-187">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-187">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-188">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-188">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-189">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-189">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefinedTypes">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; DefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ DefinedTypes { System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefinedTypes : seq&lt;System.Reflection.TypeInfo&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-190">동적 어셈블리를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-190">Defines a dynamic assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-191">어셈블리의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-191">The name of the assembly.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="c156d-192">어셈블리의 액세스 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-192">The access rights of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-193">지정된 이름 및 액세스 권한을 가진 동적 어셈블리를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-193">Defines a dynamic assembly that has the specified name and access rights.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-194">새 어셈블리를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-194">An object that represents the new assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-195">어셈블리의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-195">The name of the assembly.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="c156d-196">어셈블리의 액세스 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-196">The access rights of the assembly.</span>
          </span>
        </param>
        <param name="assemblyAttributes">
          <span data-ttu-id="c156d-197">어셈블리의 특성을 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-197">A collection that contains the attributes of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-198">지정된 이름, 액세스 권한 및 특성을 가진 새 어셈블리를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-198">Defines a new assembly that has the specified name, access rights, and attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-199">새 어셈블리를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-199">An object that represents the new assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicModule">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-200">이 어셈블리에서 동적 모듈을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-200">Defines a dynamic module in this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-201">동적 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-201">The name of the dynamic module.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-202">이 어셈블리에서 명명된 임시 동적 모듈을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-202">Defines a named transient dynamic module in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-203">정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-203">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-204">것 같은 이름의 동적 모듈의 여러 어셈블리에 정의 하면 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-204">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="c156d-205">정의 된 동적 모듈은 일시적입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-205">The defined dynamic module is transient.</span></span> <span data-ttu-id="c156d-206">동적 모듈이 저장 되지 부모 동적 어셈블리를 만든 경우에 <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-206">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-207">최적화를 동적 모듈을 디버깅 하는 경우 표시 하지 않으려면 적용 된 <xref:System.Diagnostics.DebuggableAttribute> 특성을 호출 하기 전에 동적 어셈블리 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-207">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="c156d-208">인스턴스를 만들고 <xref:System.Diagnostics.DebuggableAttribute> 와 <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> 플래그를 사용 하 여 적용할는 <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-208">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="c156d-209">동적 어셈블리에는 특성을 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-209">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="c156d-210">모듈에 적용 하는 경우 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-210">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-211">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-211">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-212">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-212">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-213">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="c156d-213">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="c156d-214">다음 코드 예제에서는를 사용 하 여 임시 동적 모듈을 만드는 방법을 `DefineDynamicModule`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-214">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-215">
            <paramref name="name" />은 공백으로 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-215">
              <paramref name="name" /> begins with white space.</span>
          </span>
          <span data-ttu-id="c156d-216">-또는-  <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-216">-or-  The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-217">-또는-  <paramref name="name" />의 길이가 시스템 정의 최대 길이보다 깁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-217">-or-  The length of <paramref name="name" /> is greater than the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-218">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-218">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-219">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-219">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ExecutionEngineException">
          <span data-ttu-id="c156d-220">기본 기호 작성기에 대한 어셈블리를 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-220">The assembly for default symbol writer cannot be loaded.</span>
          </span>
          <span data-ttu-id="c156d-221">-또는-  기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-221">-or-  The type that implements the default symbol writer interface cannot be found.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-222">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-222">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-223">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-223">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-224">동적 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-224">The name of the dynamic module.</span>
          </span>
        </param>
        <param name="emitSymbolInfo">
          <span data-ttu-id="c156d-225">기호 정보를 내보내야 하는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-225">
              <see langword="true" /> if symbol information is to be emitted; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-226">이 어셈블리에서 명명된 임시 동적 모듈을 정의하고 기호 정보를 내보내야 하는지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-226">Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-227">정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-227">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-228">것 같은 이름의 동적 모듈의 여러 어셈블리에 정의 하면 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-228">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="c156d-229">동적 모듈이 저장 되지 부모 동적 어셈블리를 만든 경우에 <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-229">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-230">최적화를 동적 모듈을 디버깅 하는 경우 표시 하지 않으려면 적용 된 <xref:System.Diagnostics.DebuggableAttribute> 특성을 호출 하기 전에 동적 어셈블리 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-230">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="c156d-231">인스턴스를 만들고 <xref:System.Diagnostics.DebuggableAttribute> 와 <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> 플래그를 사용 하 여 적용할는 <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-231">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="c156d-232">동적 어셈블리에는 특성을 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-232">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="c156d-233">모듈에 적용 하는 경우 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-233">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-234">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-234">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-235">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-235">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-236">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="c156d-236">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="c156d-237">다음 코드 예제에서는를 사용 하 여 임시 동적 모듈을 만드는 방법을 `DefineDynamicModule`, 기호 정보를 생략 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-237">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`, suppressing symbol information.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#2)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#2)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-238">
            <paramref name="name" />은 공백으로 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-238">
              <paramref name="name" /> begins with white space.</span>
          </span>
          <span data-ttu-id="c156d-239">-또는-  <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-239">-or-  The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-240">-또는-  <paramref name="name" />의 길이가 시스템 정의 최대 길이보다 깁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-240">-or-  The length of <paramref name="name" /> is greater than the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-241">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-241">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ExecutionEngineException">
          <span data-ttu-id="c156d-242">기본 기호 작성기에 대한 어셈블리를 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-242">The assembly for default symbol writer cannot be loaded.</span>
          </span>
          <span data-ttu-id="c156d-243">-또는-  기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-243">-or-  The type that implements the default symbol writer interface cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-244">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-244">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-245">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-245">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-246">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-246">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-247">동적 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-247">The name of the dynamic module.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-248">동적 모듈이 저장되어야 하는 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-248">The name of the file to which the dynamic module should be saved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-249">지정된 파일에 저장될 지정된 이름의 유지할 수 있는 동적 모듈을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-249">Defines a persistable dynamic module with the given name that will be saved to the specified file.</span>
          </span>
          <span data-ttu-id="c156d-250">기호 정보를 내보내지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-250">No symbol information is emitted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-251">정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-251">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-252">지속 가능한 동적 모듈을 정의 하려면이 어셈블리를 만들 수 있어야는 <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> 또는 <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-252">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="c156d-253">모듈 어셈블리 매니페스트를 포함 하도록 하려는 경우 `name` 어셈블리의 이름과 동일 해야 (즉,는 <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> 의 속성은 <xref:System.Reflection.AssemblyName> 는 동적 어셈블리를 만드는 데 사용) 및 `fileName` 와 동일 해야는 어셈블리를 저장 하는 경우 지정한 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-253">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="c156d-254">하나의 모듈과 어셈블리에서 해당 모듈에 어셈블리 매니페스트가 포함 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-254">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-255">최적화를 동적 모듈을 디버깅 하는 경우 표시 하지 않으려면 적용 된 <xref:System.Diagnostics.DebuggableAttribute> 특성을 호출 하기 전에 동적 어셈블리 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-255">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="c156d-256">인스턴스를 만들고 <xref:System.Diagnostics.DebuggableAttribute> 와 <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> 플래그를 사용 하 여 적용할는 <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-256">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="c156d-257">동적 어셈블리에는 특성을 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-257">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="c156d-258">모듈에 적용 하는 경우 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-258">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-259">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-259">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-260">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-260">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-261">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="c156d-261">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="c156d-262">다음 코드 예제에서는를 사용 하 여 영구 동적 모듈을 만드는 방법을 `DefineDynamicModule`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-262">The code example below demonstrates how to create a persistent dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#3)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#3)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-263">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-263">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-264">
            <paramref name="name" /> 또는 <paramref name="fileName" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-264">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-265">-또는-  <paramref name="name" />의 길이가 시스템 정의 최대 길이보다 깁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-265">-or-  The length of <paramref name="name" /> is greater than the system-defined maximum length.</span>
          </span>
          <span data-ttu-id="c156d-266">-또는-  <paramref name="fileName" />에 경로 지정(예: 디렉터리 구성 요소)이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-266">-or-  <paramref name="fileName" /> contains a path specification (a directory component, for example).</span>
          </span>
          <span data-ttu-id="c156d-267">-또는-  이 어셈블리에 속하는 다른 파일의 이름과 충돌합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-267">-or-  There is a conflict with the name of another file that belongs to this assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-268">이 어셈블리는 이전에 저장되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-268">This assembly has been previously saved.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-269">이 어셈블리는 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 특성을 갖는 동적 어셈블리에 대해 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-269">This assembly was called on a dynamic assembly with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-270">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-270">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ExecutionEngineException">
          <span data-ttu-id="c156d-271">기본 기호 작성기에 대한 어셈블리를 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-271">The assembly for default symbol writer cannot be loaded.</span>
          </span>
          <span data-ttu-id="c156d-272">-또는-  기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-272">-or-  The type that implements the default symbol writer interface cannot be found.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-273">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-273">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-274">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-274">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-275">쓰기 = true 또는 추가 = true 모듈을 저장 해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-275">Write=true or Append=true is needed to save the module</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-276">동적 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-276">The name of the dynamic module.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-277">동적 모듈이 저장되어야 하는 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-277">The name of the file to which the dynamic module should be saved.</span>
          </span>
        </param>
        <param name="emitSymbolInfo">
          <span data-ttu-id="c156d-278">
            <see langword="true" />이면 기본 기호 작성기를 사용하여 기호 정보가 기록됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-278">If <see langword="true" />, symbolic information is written using the default symbol writer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-279">지속 가능한 동적 모듈을 정의하고 모듈 이름, 모듈이 저장될 파일의 이름, 기본 기호 작성기를 사용하여 기호 정보를 내보낼지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-279">Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-280">정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-280">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-281">지속 가능한 동적 모듈을 정의 하려면이 어셈블리를 만들 수 있어야는 <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> 또는 <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-281">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="c156d-282">모듈 어셈블리 매니페스트를 포함 하도록 하려는 경우 `name` 어셈블리의 이름과 동일 해야 (즉,는 <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> 의 속성은 <xref:System.Reflection.AssemblyName> 는 동적 어셈블리를 만드는 데 사용) 및 `fileName` 와 동일 해야는 어셈블리를 저장 하는 경우 지정한 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-282">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="c156d-283">하나의 모듈과 어셈블리에서 해당 모듈에 어셈블리 매니페스트가 포함 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-283">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-284">최적화를 동적 모듈을 디버깅 하는 경우 표시 하지 않으려면 적용 된 <xref:System.Diagnostics.DebuggableAttribute> 특성을 호출 하기 전에 동적 어셈블리 <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-284">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="c156d-285">인스턴스를 만들고 <xref:System.Diagnostics.DebuggableAttribute> 와 <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> 플래그를 사용 하 여 적용할는 <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-285">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="c156d-286">동적 어셈블리에는 특성을 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-286">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="c156d-287">모듈에 적용 하는 경우 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-287">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-288">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-288">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-289">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-289">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-290">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="c156d-290">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="c156d-291">아래 코드 예제에는 기호 내보내기를 사용 하 여 영구 동적 모듈을 만드는 방법을 보여 줍니다 `DefineDynamicModule`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-291">The code example below demonstrates how to create a persistent dynamic module with symbol emission using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#4)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#4)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-292">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-292">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-293">
            <paramref name="name" /> 또는 <paramref name="fileName" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-293">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-294">-또는-  <paramref name="name" />의 길이가 시스템 정의 최대 길이보다 깁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-294">-or-  The length of <paramref name="name" /> is greater than the system-defined maximum length.</span>
          </span>
          <span data-ttu-id="c156d-295">-또는-  <paramref name="fileName" />에 경로 지정(예: 디렉터리 구성 요소)이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-295">-or-  <paramref name="fileName" /> contains a path specification (a directory component, for example).</span>
          </span>
          <span data-ttu-id="c156d-296">-또는-  이 어셈블리에 속하는 다른 파일의 이름과 충돌합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-296">-or-  There is a conflict with the name of another file that belongs to this assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-297">이 어셈블리는 이전에 저장되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-297">This assembly has been previously saved.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-298">이 어셈블리는 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 특성을 갖는 동적 어셈블리에 대해 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-298">This assembly was called on a dynamic assembly with the <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span>
          </span>
        </exception>
        <exception cref="T:System.ExecutionEngineException">
          <span data-ttu-id="c156d-299">기본 기호 작성기에 대한 어셈블리를 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-299">The assembly for default symbol writer cannot be loaded.</span>
          </span>
          <span data-ttu-id="c156d-300">-또는-  기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-300">-or-  The type that implements the default symbol writer interface cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-301">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-301">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-302">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-303">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-304">쓰기 = true 또는 추가 = true이이 모듈을 저장 해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-304">Write=true or Append=true is needed to save this module</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-305">이 어셈블리에 대한 독립 실행형 관리되는 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-305">Defines a standalone managed resource for this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-306">리소스의 논리적 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-306">The logical name of the resource.</span>
          </span>
        </param>
        <param name="description">
          <span data-ttu-id="c156d-307">리소스의 텍스트 설명입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-307">A textual description of the resource.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-308">논리적 이름이 매핑되는 물리적 파일 이름(.resources 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-308">The physical file name (.resources file) to which the logical name is mapped.</span>
          </span>
          <span data-ttu-id="c156d-309">이 항목에는 경로를 포함하면 안 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-309">This should not include a path.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-310">기본 공용 리소스 특성을 사용하여 이 어셈블리에 대한 독립 실행형 관리 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-310">Defines a standalone managed resource for this assembly with the default public resource attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-311">지정된 리소스의 <see cref="T:System.Resources.ResourceWriter" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-311">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-312">세부적인 리소스를 추가할 수 있습니다 반환 된 <xref:System.Resources.ResourceWriter> 호출 하 여 <xref:System.Resources.ResourceWriter.AddResource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-312">Fine grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="c156d-313">`fileName` 되지 않아야 하는 다른 지속 모듈, 독립 실행형 관리 되는 리소스 또는 독립 실행형 매니페스트 파일의와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-313">`fileName` should not be the same as that of any other persistable module, stand-alone managed resource, or the stand-alone manifest file.</span></span>  
  
 <span data-ttu-id="c156d-314">런타임 호출은 <xref:System.Resources.ResourceWriter.Close%2A> 메서드는 동적 어셈블리를 저장할 때.</span><span class="sxs-lookup"><span data-stu-id="c156d-314">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-315">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-315">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-316">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-316">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-317">다음 예제에서는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A> 메서드는를 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-317">The following example uses the <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A> method to get a resource writer.</span></span> <span data-ttu-id="c156d-318">이 예제에서는 리소스 작성기를 사용 하 여 세 가지 리소스 문자열을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-318">The example uses the resource writer to add three resource strings.</span></span>  
  
 [!code-cpp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CPP/assemblybuilder_defineresource.cpp#1)]
 [!code-csharp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CS/assemblybuilder_defineresource.cs#1)]
 [!code-vb[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/VB/assemblybuilder_defineresource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-319">
            <paramref name="name" />이 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-319">
              <paramref name="name" /> has been previously defined.</span>
          </span>
          <span data-ttu-id="c156d-320">-또는-  어셈블리에 이름이 <paramref name="fileName" />인 다른 파일이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-320">-or-  There is another file in the assembly named <paramref name="fileName" />.</span>
          </span>
          <span data-ttu-id="c156d-321">-또는-  <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-321">-or-  The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-322">-또는-  <paramref name="fileName" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-322">-or-  The length of <paramref name="fileName" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-323">-또는-  <paramref name="fileName" />에 경로가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-323">-or-  <paramref name="fileName" /> includes a path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-324">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-324">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-325">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-325">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-326">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-326">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-327">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-327">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-328">쓰기 = true 또는 추가 = true</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-328">Write=true or Append=true</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String, attribute As ResourceAttributes) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string * System.Reflection.ResourceAttributes -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-329">리소스의 논리적 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-329">The logical name of the resource.</span>
          </span>
        </param>
        <param name="description">
          <span data-ttu-id="c156d-330">리소스의 텍스트 설명입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-330">A textual description of the resource.</span>
          </span>
        </param>
        <param name="fileName">
          <span data-ttu-id="c156d-331">논리적 이름이 매핑되는 물리적 파일 이름(.resources 파일)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-331">The physical file name (.resources file) to which the logical name is mapped.</span>
          </span>
          <span data-ttu-id="c156d-332">이 항목에는 경로를 포함하면 안 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-332">This should not include a path.</span>
          </span>
        </param>
        <param name="attribute">
          <span data-ttu-id="c156d-333">리소스 특성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-333">The resource attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-334">이 어셈블리에 대한 독립 실행형 관리되는 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-334">Defines a standalone managed resource for this assembly.</span>
          </span>
          <span data-ttu-id="c156d-335">관리되는 리소스에 대해 특성을 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-335">Attributes can be specified for the managed resource.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-336">지정된 리소스의 <see cref="T:System.Resources.ResourceWriter" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-336">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-337">세부적으로 리소스를 추가할 수 있습니다 반환 된 <xref:System.Resources.ResourceWriter> 호출 하 여 <xref:System.Resources.ResourceWriter.AddResource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-337">Fine-grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="c156d-338">`fileName` 되지 않아야 하는 다른 지속 모듈, 독립 실행형 관리 되는 리소스 또는 독립 실행형 매니페스트 파일의와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-338">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="c156d-339">런타임 호출은 <xref:System.Resources.ResourceWriter.Close%2A> 메서드는 동적 어셈블리를 저장할 때.</span><span class="sxs-lookup"><span data-stu-id="c156d-339">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-340">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-340">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-341">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-341">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-342">
            <paramref name="name" />이 이전에 정의되었거나 이름이 <paramref name="fileName" />인 어셈블리에 다른 파일이 있는 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-342">
              <paramref name="name" /> has been previously defined or if there is another file in the assembly named <paramref name="fileName" />.</span>
          </span>
          <span data-ttu-id="c156d-343">-또는-  <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-343">-or-  The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-344">-또는-  <paramref name="fileName" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-344">-or-  The length of <paramref name="fileName" /> is zero.</span>
          </span>
          <span data-ttu-id="c156d-345">-또는-  <paramref name="fileName" />에 경로가 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-345">-or-  <paramref name="fileName" /> includes a path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-346">
            <paramref name="name" /> 또는 <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-346">
              <paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-347">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-347">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-348">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-348">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-349">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-349">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-350">쓰기 = true 또는 추가 = true</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-350">Write=true or Append=true</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineUnmanagedResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-351">이 어셈블리에 대한 관리되는 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-351">Defines an unmanaged resource for this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (byte[] resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(unsigned int8[] resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resource As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(cli::array &lt;System::Byte&gt; ^ resource);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : byte[] -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="resource">
          <span data-ttu-id="c156d-352">관리되지 않는 리소스를 나타내는 불투명 blob 바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-352">The opaque blob of bytes representing the unmanaged resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-353">이 어셈블리에 대한 관리되는 리소스를 불투명 blob 바이트로 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-353">Defines an unmanaged resource for this assembly as an opaque blob of bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-354">어셈블리 관리 되지 않는 리소스를 하나만 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-354">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="c156d-355">즉, 호출 하는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> 또는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> 중 호출 된 메서드 중 하나를 throw 되 고 System.ArgumentException 이전에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-355">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException being throw.</span></span> <span data-ttu-id="c156d-356">여러 관리 되지 않는 리소스 (공용 언어 런타임 함께 제공 되지)는 Microsoft ResMerge 유틸리티와 같은 도구와 병합 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-356">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-357">다음 코드 예제를 만들고 사용 하 여 동적 어셈블리를 관리 되지 않는 리소스를 나타내는 바이트 배열을 연결 `DefineUnmanagedResource`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-357">The following code sample creates and attaches an array of bytes representing an unmanaged resource to a dynamic assembly, using `DefineUnmanagedResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CPP/assemblybuilder_defineunmanagedresource2.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CS/assemblybuilder_defineunmanagedresource2.cs#1)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/VB/assemblybuilder_defineunmanagedresource2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-358">관리되지 않는 리소스가 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-358">An unmanaged resource was previously defined.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-359">
            <paramref name="resource" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-359">
              <paramref name="resource" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-360">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-360">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-361">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-361">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-362">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-362">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (string resourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(string resourceFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resourceFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(System::String ^ resourceFileName);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : string -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resourceFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceFileName">
          <span data-ttu-id="c156d-363">리소스 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-363">The name of the resource file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-364">리소스 파일의 이름이 지정된 이 어셈블리에 대해 관리되지 않는 리소스 파일을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-364">Defines an unmanaged resource file for this assembly given the name of the resource file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-365">어셈블리 관리 되지 않는 리소스를 하나만 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-365">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="c156d-366">즉, 호출 하는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> 또는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> 중 호출 된 메서드 중 하나는 System.ArgumentException 이전에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-366">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="c156d-367">여러 관리 되지 않는 리소스 (공용 언어 런타임 함께 제공 되지)는 Microsoft ResMerge 유틸리티와 같은 도구와 병합 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-367">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-368">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-368">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-369">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-369">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-370">다음 예제에 대 한 호출에서는 `DefineUnmanagedResource`, 외부 리소스 파일을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-370">The example below demonstrates a call to `DefineUnmanagedResource`, passing an external resource file.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CPP/assemblybuilder_defineunmanagedresource.cpp#3)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CS/assemblybuilder_defineunmanagedresource.cs#3)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/VB/assemblybuilder_defineunmanagedresource.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-371">관리되지 않는 리소스가 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-371">An unmanaged resource was previously defined.</span>
          </span>
          <span data-ttu-id="c156d-372">-또는-  <paramref name="resourceFileName" /> 파일을 읽을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-372">-or-  The file <paramref name="resourceFileName" /> is not readable.</span>
          </span>
          <span data-ttu-id="c156d-373">-또는-  <paramref name="resourceFileName" />이 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-373">-or-  <paramref name="resourceFileName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-374">
            <paramref name="resourceFileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-374">
              <paramref name="resourceFileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c156d-375">
            <paramref name="resourceFileName" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-375">
              <paramref name="resourceFileName" /> is not found.</span>
          </span>
          <span data-ttu-id="c156d-376">-또는-  <paramref name="resourceFileName" />은 디렉터리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-376">-or-  <paramref name="resourceFileName" /> is a directory.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-377">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-377">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-378">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-378">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-379">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-379">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-380">리소스 파일에 액세스 하려면 FileIOPermissionAccess.Read 권한이 필요 <paramref name="resourceFileName" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-380">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineVersionInfoResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-381">이 어셈블리에 대한 관리되지 않은 버전 정보 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-381">Defines an unmanaged version information resource for this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource();" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : unit -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-382">어셈블리의 AssemblyName 개체와 어셈블리의 사용자 지정 특성에 지정된 정보를 사용하여 관리되지 않는 버전 정보 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-382">Defines an unmanaged version information resource using the information specified in the assembly's AssemblyName object and the assembly's custom attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-383">어셈블리 관리 되지 않는 리소스를 하나만 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-383">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="c156d-384">즉, 호출 하는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> 또는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> 중 호출 된 메서드 중 하나는 System.ArgumentException 이전에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-384">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="c156d-385">여러 관리 되지 않는 리소스 (공용 언어 런타임 SDK에 제공 되지)는 Microsoft ResMerge 유틸리티와 같은 도구와 병합 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-385">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="c156d-386">빈 인수 문자열 단일 공간으로 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-386">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="c156d-387">공백으로 인수 문자열에 null 문자에 대 한 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-387">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="c156d-388">유추 되는 정보는 `AssemblyName` 이 동적 어셈블리를 정의 하는 데 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-388">The information is inferred from the `AssemblyName` object used to define this dynamic assembly.</span></span> <span data-ttu-id="c156d-389">이 어셈블리의 사용자 지정 특성에 지정 된 정보를 재정의 `AssemblyName` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-389">This assembly's custom attributes override information specified in the `AssemblyName` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-390">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-390">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-391">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-391">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-392">다음 예제에서는의 사용법을 보여 줍니다. `DefineVersionInfoResource`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-392">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-393">관리되지 않는 버전 정보 리소스가 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-393">An unmanaged version information resource was previously defined.</span>
          </span>
          <span data-ttu-id="c156d-394">-또는-  관리되지 않는 버전 정보가 너무 커서 지속할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-394">-or-  The unmanaged version information is too large to persist.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-395">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-395">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-396">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-396">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-397">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-397">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource (string product, string productVersion, string company, string copyright, string trademark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource (product As String, productVersion As String, company As String, copyright As String, trademark As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource(System::String ^ product, System::String ^ productVersion, System::String ^ company, System::String ^ copyright, System::String ^ trademark);" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : string * string * string * string * string -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource (product, productVersion, company, copyright, trademark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="product" Type="System.String" />
        <Parameter Name="productVersion" Type="System.String" />
        <Parameter Name="company" Type="System.String" />
        <Parameter Name="copyright" Type="System.String" />
        <Parameter Name="trademark" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="product">
          <span data-ttu-id="c156d-398">이 어셈블리가 배포된 제품의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-398">The name of the product with which this assembly is distributed.</span>
          </span>
        </param>
        <param name="productVersion">
          <span data-ttu-id="c156d-399">이 어셈블리는 배포된 제품의 버전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-399">The version of the product with which this assembly is distributed.</span>
          </span>
        </param>
        <param name="company">
          <span data-ttu-id="c156d-400">이 어셈블리를 만든 회사의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-400">The name of the company that produced this assembly.</span>
          </span>
        </param>
        <param name="copyright">
          <span data-ttu-id="c156d-401">이 어셈블리에 적용되는 모든 저작권 표시, 상표 및 등록 상표에 대해 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-401">Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly.</span>
          </span>
          <span data-ttu-id="c156d-402">여기에는 모든 알림 전문, 법적 기호, 저작권 날짜, 상표 번호 등이 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-402">This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on.</span>
          </span>
          <span data-ttu-id="c156d-403">이 문자열은 다음 형식이어야 합니다. "Copyright Microsoft Corp. 1990-2001".</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-403">In English, this string should be in the format "Copyright Microsoft Corp. 1990-2001".</span>
          </span>
        </param>
        <param name="trademark">
          <span data-ttu-id="c156d-404">이 어셈블리에 적용되는 모든 상표 및 등록 상표에 대해 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-404">Describes all trademarks and registered trademarks that apply to this assembly.</span>
          </span>
          <span data-ttu-id="c156d-405">여기에는 모든 알림 전문, 법적 기호, 상표 번호 등이 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-405">This should include the full text of all notices, legal symbols, trademark numbers, and so on.</span>
          </span>
          <span data-ttu-id="c156d-406">이 문자열은 다음 형식이어야 합니다. "Windows는 Microsoft Corporation의 상표입니다."</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-406">In English, this string should be in the format "Windows is a trademark of Microsoft Corporation".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-407">지정된 사양을 사용하여 이 어셈블리에 대한 관리되지 않은 버전 정보 리소스를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-407">Defines an unmanaged version information resource for this assembly with the given specifications.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-408">어셈블리 관리 되지 않는 리소스를 하나만 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-408">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="c156d-409">즉, 호출 하는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> 또는 <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> 중 호출 된 메서드 중 하나는 System.ArgumentException 이전에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-409">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="c156d-410">여러 관리 되지 않는 리소스는 microsoft 도구와 병합 해야 `ResMerge` 유틸리티 (공용 언어 런타임 SDK 함께 제공 되지 않습니다).</span><span class="sxs-lookup"><span data-stu-id="c156d-410">Multiple unmanaged resources need to be merged with a tool such as the Microsoft `ResMerge` utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="c156d-411">빈 인수 문자열 단일 공간으로 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-411">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="c156d-412">공백으로 인수 문자열에 null 문자에 대 한 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-412">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="c156d-413">버전 리소스의 구조에는 버전, 언어 및 파일의 배포를 식별 하는 데이터가 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-413">The structure of the version resource includes data that identifies the version, language, and distribution of the file.</span></span> <span data-ttu-id="c156d-414">설치 프로그램 파일 설치 라이브러리 (버전에에서는 함수를 사용 하 여 DLL) 파일에서 버전 정보 리소스를 검색 하 고 리소스에서 버전 정보 블록을 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-414">Installation programs use the functions in the file installation library (VER.DLL) to retrieve the version information resource from a file and to extract the version information blocks from the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-415">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-415">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-416">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-416">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-417">다음 예제에서는의 사용법을 보여 줍니다. `DefineVersionInfoResource`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-417">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-418">관리되지 않는 버전 정보 리소스가 이전에 정의되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-418">An unmanaged version information resource was previously defined.</span>
          </span>
          <span data-ttu-id="c156d-419">-또는-  관리되지 않는 버전 정보가 너무 커서 지속할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-419">-or-  The unmanaged version information is too large to persist.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-420">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-420">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-421">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-421">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-422">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-422">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo EntryPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EntryPoint" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EntryPoint As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ EntryPoint { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPoint : System.Reflection.MethodInfo" Usage="System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-423">이 어셈블리의 진입점을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-423">Returns the entry point of this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-424">이 어셈블리의 진입점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-424">The entry point of this assembly.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-425">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-425">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-426">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-426">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-427">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-427">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="assemblyBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c156d-428">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-428">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-429">이 인스턴스가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-429">Returns a value that indicates whether this instance is equal to the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-430">
            <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-430">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public override System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-431">이 어셈블리의 증명을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-431">Gets the evidence for this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-432">이 어셈블리에 대한 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-432">The evidence for this assembly.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-433">현재 동적 어셈블리의 표시 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-433">Gets the display name of the current dynamic assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-434">동적 어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-434">The display name of the dynamic assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-435">참조 <xref:System.Reflection.AssemblyName> 에 대 한 설명은 형식의 어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-435">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-436">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용된 사용자 지정 특성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-436">Returns custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /></span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="c156d-437">이 인수는 이 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-437">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-438">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용된 사용자 지정 특성을 모두 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-438">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-439">사용자 지정 특성을 포함하는 배열입니다. 특성이 없는 경우 배열이 비어 있는 것입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-439">An array that contains the custom attributes; the array is empty if there are no attributes.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="c156d-440">특성이 파생되는 기본 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-440">The base type from which attributes derive.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="c156d-441">이 인수는 이 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-441">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-442">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용되었으며 지정된 특성 형식에서 파생되는 사용자 지정 특성을 모두 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-442">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />, and that derive from a specified attribute type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-443">임의 수준의 <paramref name="attributeType" />에서 파생된 사용자 지정 특성이 들어 있는 배열입니다. 해당 특성이 없으면 배열이 비어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-443">An array that contains the custom attributes that are derived at any level from <paramref name="attributeType" />; the array is empty if there are no such attributes.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-444">
            <paramref name="attributeType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-444">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-445">
            <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-445">
              <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime.</span>
          </span>
          <span data-ttu-id="c156d-446">예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-446">For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="assemblyBuilder.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-447">현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성에 대한 정보가 들어 있는 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-447">Returns <see cref="T:System.Reflection.CustomAttributeData" /> objects that contain information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-448">현재 모듈에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-448">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-449">리플렉션 전용 컨텍스트에 사용자 지정 특성 자체 리플렉션 전용 컨텍스트로 로드 된 코드에 정의 되어 있는 경우 코드의 한 사용자 지정 특성을 검사 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-449">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="c156d-450">와 같은 메서드 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> 특성의 인스턴스를 만들기 때문에 이러한 경우에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-450">Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="c156d-451">리플렉션 전용 컨텍스트에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-451">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="c156d-452">자세한 내용 및 예를 들어 코드를 실행 하는 것에 대 한 참조는 <xref:System.Reflection.CustomAttributeData> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-452">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder GetDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder GetDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ GetDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.GetDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-453">요청된 동적 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-453">The name of the requested dynamic module.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-454">지정된 이름의 동적 모듈을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-454">Returns the dynamic module with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-455">요청된 동적 모듈을 나타내는 ModuleBuilder 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-455">A ModuleBuilder object representing the requested dynamic module.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-456">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-456">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-457">
            <paramref name="name" />의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-457">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-458">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-458">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-459">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-459">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-460">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-460">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetExportedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetExportedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetExportedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetExportedTypes();" />
      <MemberSignature Language="F#" Value="override this.GetExportedTypes : unit -&gt; Type[]" Usage="assemblyBuilder.GetExportedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-461">이 어셈블리에 정의된 내보낸 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-461">Gets the exported types defined in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-462">해당 어셈블리에 정의되어 있는 내보낸 형식이 들어 있는 <see cref="T:System.Type" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-462">An array of <see cref="T:System.Type" /> containing the exported types defined in this assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-463">이 메서드가 구현되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-463">This method is not implemented.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-464">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-464">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-465">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-465">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-466">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-466">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream GetFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream GetFile(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFile (name As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::FileStream ^ GetFile(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetFile : string -&gt; System.IO.FileStream" Usage="assemblyBuilder.GetFile name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-467">지정된 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-467">The name of the specified file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-468">이 어셈블리의 매니페스트 파일 테이블에서 지정된 파일에 대한 <see cref="T:System.IO.FileStream" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-468">Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-469">지정된 파일에 대한 <see cref="T:System.IO.FileStream" />이며, 해당 파일이 없는 경우에는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-469">A <see cref="T:System.IO.FileStream" /> for the specified file, or <see langword="null" />, if the file is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-470">`name` 파일 경로 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-470">`name` should not include the path to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-471">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-471">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-472">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-472">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-473">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-473">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-474">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-474">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream[] GetFiles (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream[] GetFiles(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFiles (getResourceModules As Boolean) As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetFiles : bool -&gt; System.IO.FileStream[]" Usage="assemblyBuilder.GetFiles getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="c156d-475">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-475">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-476">리소스 모듈의 포함 여부를 지정하여 어셈블리 매니페스트의 파일 테이블에서 파일을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-476">Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-477">
            <see cref="T:System.IO.FileStream" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-477">An array of <see cref="T:System.IO.FileStream" /> objects.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-478">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-478">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-479">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-479">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-480">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-480">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-481">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-481">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="assemblyBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-482">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-482">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-483">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-483">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLoadedModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetLoadedModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetLoadedModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="c156d-484">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-484">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-485">이 어셈블리의 일부인 로드된 모든 모듈을 반환하고 필요에 따라 리소스 모듈을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-485">Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-486">이 어셈블리의 일부인 로드된 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-486">The loaded modules that are part of this assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceInfo">
      <MemberSignature Language="C#" Value="public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceInfo (resourceName As String) As ManifestResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::ManifestResourceInfo ^ GetManifestResourceInfo(System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo" Usage="assemblyBuilder.GetManifestResourceInfo resourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ManifestResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="c156d-487">리소스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-487">The name of the resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-488">지정된 리소스가 지속되는 방법에 대한 정보를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-488">Returns information about how the given resource has been persisted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-489">리소스의 토폴로지에 대한 정보로 채워진 <see cref="T:System.Reflection.ManifestResourceInfo" />이거나, 리소스를 찾을 수 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-489">
              <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-490">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-490">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-491">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-491">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-492">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-492">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-493">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-493">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceNames">
      <MemberSignature Language="C#" Value="public override string[] GetManifestResourceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetManifestResourceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetManifestResourceNames();" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceNames : unit -&gt; string[]" Usage="assemblyBuilder.GetManifestResourceNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-494">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-494">Loads the specified manifest resource from this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-495">모든 리소스의 이름이 들어 있는 <see langword="String" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-495">An array of type <see langword="String" /> containing the names of all the resources.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-496">이 메서드가 동적 어셈블리에서 지원되지 않는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-496">This method is not supported on a dynamic assembly.</span>
          </span>
          <span data-ttu-id="c156d-497">매니페스트 리소스 이름을 가져오려면 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />를 사용하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-497">To get the manifest resource names, use <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-498">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-498">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-499">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-499">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-500">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-500">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetManifestResourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-501">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-501">Loads the specified manifest resource from this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceStream (name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-502">요청된 매니페스트 리소스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-502">The name of the manifest resource being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-503">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-503">Loads the specified manifest resource from this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-504">이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-504">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-505">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-505">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-506">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-506">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-507">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-507">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-508">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-508">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : Type * string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="c156d-509">해당 네임스페이스가 매니페스트 리소스 이름의 범위를 지정하는 데 사용된 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-509">The type whose namespace is used to scope the manifest resource name.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="c156d-510">요청된 매니페스트 리소스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-510">The name of the manifest resource being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-511">지정된 형식의 네임스페이스에 의해 범위가 지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-511">Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-512">이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-512">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-513">반환 된 <xref:System.IO.Stream> 리소스의 시작으로 설정 하는 파일 포인터에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-513">The returned <xref:System.IO.Stream> has its file pointer set to the beginning of the resource.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-514">하는 경우의 전체 이름을 `type` "MyNameSpace.MyClasses"은 및 `name` "점"는 `GetManifestResourceStream` MyNameSpace.Dot 명명 된 리소스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-514">If the full name of `type` is "MyNameSpace.MyClasses" and `name` is "Dot", `GetManifestResourceStream` will search for a resource named MyNameSpace.Dot.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-515">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-515">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-516">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-516">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-517">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-517">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-518">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-518">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module GetModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module GetModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModule (name As String) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Module ^ GetModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetModule : string -&gt; System.Reflection.Module" Usage="assemblyBuilder.GetModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-519">요청된 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-519">The name of the requested module.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-520">이 어셈블리에 있는 지정된 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-520">Gets the specified module in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-521">요청되는 모듈 또는 모듈이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-521">The module being requested, or <see langword="null" /> if the module is not found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="c156d-522">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-522">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-523">이 어셈블리의 일부인 모든 모듈을 가져오고 필요에 따라 리소스 모듈을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-523">Gets all the modules that are part of this assembly, and optionally includes resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-524">이 어셈블리의 일부인 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-524">The modules that are part of this assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberSignature Language="F#" Value="override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="assemblyBuilder.GetName copiedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="copiedName">
          <span data-ttu-id="c156d-525">코드베이스를 섀도 복사한 후 어셈블리 위치로 설정하려면 <see langword="true" />이고, 코드베이스를 원래 위치로 설정하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-525">
              <see langword="true" /> to set the code base to the location of the assembly after it is shadow-copied; <see langword="false" /> to set the code base to the original location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-526">현재 동적 어셈블리를 만들 때 지정된 <see cref="T:System.Reflection.AssemblyName" />을 가져오고 코드베이스를 지정된 상태로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-526">Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created, and sets the code base as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-527">동적 어셈블리의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-527">The name of the dynamic assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName[] GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetReferencedAssemblies () As AssemblyName()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ GetReferencedAssemblies();" />
      <MemberSignature Language="F#" Value="override this.GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]" Usage="assemblyBuilder.GetReferencedAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c156d-528">이 <see cref="T:System.Reflection.AssemblyName" />가 참조하는 어셈블리에 대한 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체의 불완전 목록을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-528">Gets an incomplete list of <see cref="T:System.Reflection.AssemblyName" /> objects for the assemblies that are referenced by this <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-529">참조된 어셈블리의 어셈블리 이름 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-529">An array of assembly names for the referenced assemblies.</span>
          </span>
          <span data-ttu-id="c156d-530">이 배열은 전체 목록이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-530">This array is not a complete list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-531">이 메서드는 참조 된 어셈블리의 전체 목록은 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-531">This method does not return a complete list of referenced assemblies.</span></span> <span data-ttu-id="c156d-532">예를 들어, 사용자 지정 특성을 적용 하는 경우는 <xref:System.Reflection.Emit.AssemblyBuilder>, 해당 특성이 정의 되어 어셈블리가이 메서드에 의해 반환 되는 목록에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-532">For example, if you apply a custom attribute to the <xref:System.Reflection.Emit.AssemblyBuilder>, the assembly in which the attribute was defined is included in the list returned by this method.</span></span> <span data-ttu-id="c156d-533">그러나 사용 하는 경우는 <xref:System.Type> 형식은 포함 되지 않습니다는 메서드 매개 변수의 유형을 지정 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-533">However, if you use a <xref:System.Type> object to specify the type of a method parameter, that type is not included.</span></span>  
  
 <span data-ttu-id="c156d-534">참조 된 어셈블리의 전체 목록을 가져오려면, 어셈블리를 저장, 다른 응용 프로그램 도메인 및 호출에 로드 된 <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-534">To get a complete list of referenced assemblies, save the assembly, load it into another application domain, and call the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSatelliteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-535">지정된 위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-535">Gets a specified satellite assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSatelliteAssembly (culture As CultureInfo) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="c156d-536">지정된 문화권입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-536">The specified culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-537">지정된 문화권에 대한 위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-537">Gets the satellite assembly for the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-538">지정된 위성 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-538">The specified satellite assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-539">위성 어셈블리는 기본 문화권 이나 중립 문화권으로 사용 되는 단일 문화권에 대 한 리소스와 지역화할 수 없는 실행 코드가 포함 되어 있는 기본 응용 프로그램 어셈블리와 구별 하 여 지역화 된 리소스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-539">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="c156d-540">현재 어셈블리 버전을 사용 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-540">Call this method to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-541">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-541">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c156d-542">어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-542">The assembly cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c156d-543">일치하는 파일 이름을 가진 위성 어셈블리는 있지만 <see langword="CultureInfo" />가 지정된 어셈블리와 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-543">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c156d-544">위성 어셈블리가 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-544">The satellite assembly is not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture, Version ^ version);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly (culture, version)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="c156d-545">지정된 문화권입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-545">The specified culture.</span>
          </span>
        </param>
        <param name="version">
          <span data-ttu-id="c156d-546">위성 어셈블리의 버전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-546">The version of the satellite assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-547">지정된 문화권에 대한 지정된 버전의 위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-547">Gets the specified version of the satellite assembly for the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-548">지정된 위성 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-548">The specified satellite assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-549">위성 어셈블리는 기본 문화권 이나 중립 문화권으로 사용 되는 단일 문화권에 대 한 리소스와 지역화할 수 없는 실행 코드가 포함 되어 있는 기본 응용 프로그램 어셈블리와 구별 하 여 지역화 된 리소스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-549">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="c156d-550">호출 된 <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> 현재 어셈블리 버전을 사용 하는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-550">Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-551">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-551">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="c156d-552">일치하는 파일 이름을 가진 위성 어셈블리는 있지만 <see langword="CultureInfo" /> 또는 버전이 지정된 어셈블리와 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-552">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c156d-553">어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-553">The assembly cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="c156d-554">위성 어셈블리가 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-554">The satellite assembly is not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public override Type GetType (string name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetType (name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetType(System::String ^ name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool * bool -&gt; Type" Usage="assemblyBuilder.GetType (name, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="c156d-555">검색할 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-555">The name of the type to search for.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="c156d-556">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-556">
              <see langword="true" /> to throw an exception if the type is not found; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="c156d-557">검색 시 형식 이름의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-557">
              <see langword="true" /> to ignore the case of the type name when searching; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-558">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 정의하고 만든 형식에서 지정된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-558">Gets the specified type from the types that have been defined and created in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-559">지정된 형식 또는 이 형식을 찾을 수 없거나 아직 형식을 만들지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-559">The specified type, or <see langword="null" /> if the type is not found or has not been created yet.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-560">호출 하 여 생성 될 때까지 형식을 찾을 수 없는 <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-560">A type cannot be found until it has been created by calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAssemblyCache">
      <MemberSignature Language="C#" Value="public override bool GlobalAssemblyCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GlobalAssemblyCache" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GlobalAssemblyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GlobalAssemblyCache { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAssemblyCache : bool" Usage="System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-561">어셈블리를 전역 어셈블리 캐시에서 로드했는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-561">Gets a value that indicates whether the assembly was loaded from the global assembly cache.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-562">항상 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-562">Always <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-563"><xref:System.Reflection.Emit.AssemblyBuilder> 개체는 항상 동적 어셈블리를 나타냅니다 및 따라서 되지에서 로드 되 고 전역 어셈블리 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-563"><xref:System.Reflection.Emit.AssemblyBuilder> objects always represent dynamic assemblies, and therefore are never loaded from the global assembly cache.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public override long HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 HostContext" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HostContext As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long HostContext { long get(); };" />
      <MemberSignature Language="F#" Value="member this.HostContext : int64" Usage="System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-564">동적 어셈블리를 만드는 중인 호스트 컨텍스트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-564">Gets the host context where the dynamic assembly is being created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-565">동적 어셈블리를 만드는 중인 호스트 컨텍스트를 나타내는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-565">A value that indicates the host context where the dynamic assembly is being created.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRuntimeVersion">
      <MemberSignature Language="C#" Value="public override string ImageRuntimeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageRuntimeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ImageRuntimeVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ImageRuntimeVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRuntimeVersion : string" Usage="System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-566">매니페스트를 포함하는 파일에 저장될 공용 언어 런타임의 버전을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-566">Gets the version of the common language runtime that will be saved in the file containing the manifest.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-567">공용 언어 런타임 버전을 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-567">A string representing the common language runtime version.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-568">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-568">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-569">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-569">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-570">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-570">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="assemblyBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="c156d-571">테스트할 특성의 유형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-571">The type of attribute to test for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="c156d-572">이 인수는 이 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-572">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-573">지정된 특성 유형의 인스턴스 중 하나 이상이 이 멤버에 적용되는지 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-573">Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c156d-574">이 동적 어셈블리에 <paramref name="attributeType" />의 인스턴스가 하나 이상 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-574">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" /> is applied to this dynamic assembly; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public override bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-575">현재 어셈블리가 동적 어셈블리인지 표시하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-575">Gets a value that indicates that the current assembly is a dynamic assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-576">항상 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-576">Always <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-577"><xref:System.Reflection.Emit.AssemblyBuilder> 개체는 항상 동적 어셈블리를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-577">An <xref:System.Reflection.Emit.AssemblyBuilder> object always represents a dynamic assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public override string Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : string" Usage="System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-578">섀도 복사되지 않은 경우 매니페스트를 포함하는 로드된 파일의 위치를 코드베이스 형식으로 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-578">Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-579">매니페스트가 포함된 로드된 파일의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-579">The location of the loaded file that contains the manifest.</span>
          </span>
          <span data-ttu-id="c156d-580">로드된 파일이 섀도 복사된 경우 <see langword="Location" />은 섀도 복사되기 전 파일의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-580">If the loaded file has been shadow-copied, the <see langword="Location" /> is that of the file before being shadow-copied.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-581">이 메서드는 현재 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-581">This method is not currently supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-582">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-582">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-583">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-583">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-584">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-584">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-585">어셈블리 매니페스트가 포함된 현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에서 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-585">Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> that contains the assembly manifest.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-586">매니페스트 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-586">The manifest module.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Module&gt; Modules" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Modules As IEnumerable(Of Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ Modules { System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : seq&lt;System.Reflection.Module&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public override System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-587">현재 동적 어셈블리의 권한 부여 집합을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-587">Gets the grant set of the current dynamic assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-588">현재 동적 어셈블리의 권한 부여 집합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-588">The grant set of the current dynamic assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-589"><xref:System.Security.PermissionSet> 개체는 경로 같은 중요 한 정보를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-589"><xref:System.Security.PermissionSet> objects can contain sensitive information such as paths.</span></span> <span data-ttu-id="c156d-590">따라서 이러한 개체에 액세스 하려면 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-590">Therefore, full trust is required to access these objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c156d-591">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-591">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c156d-592">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-592">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnly">
      <MemberSignature Language="C#" Value="public override bool ReflectionOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReflectionOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectionOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReflectionOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnly : bool" Usage="System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-593">동적 어셈블리가 리플렉션 전용 컨텍스트인지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-593">Gets a value indicating whether the dynamic assembly is in the reflection-only context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-594">동적 어셈블리가 리플렉션 전용 컨텍스트에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-594">
              <see langword="true" /> if the dynamic assembly is in the reflection-only context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-595">리플렉션 전용 컨텍스트에 동적 어셈블리를 생성 하려면 지정 <xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType> 만들 때는 <xref:System.Reflection.Emit.AssemblyBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-595">To emit a dynamic assembly in the reflection-only context, specify <xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType> when you create the <xref:System.Reflection.Emit.AssemblyBuilder>.</span></span> <span data-ttu-id="c156d-596">동적 어셈블리를 리플렉션 전용 컨텍스트에 내보낸 경우에 해당 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-596">If a dynamic assembly is emitted in the reflection-only context, its code cannot be executed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-597">동적 어셈블리를 디스크에 저장 한 후 사용할 수 있습니다는 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> 메서드를 완료 된 어셈블리를 리플렉션 전용 컨텍스트에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-597">After you have saved a dynamic assembly to disk, you can use the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method to load the completed assembly into the reflection-only context.</span></span> <span data-ttu-id="c156d-598">그러나 어셈블리 수 더 이상 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-598">However, the assembly can no longer be modified.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly" />
        <altmember cref="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-599">이 동적 어셈블리를 디스크에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-599">Saves this dynamic assembly to disk.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (assemblyFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="assemblyBuilder.Save assemblyFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName">
          <span data-ttu-id="c156d-600">어셈블리의 파일 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-600">The file name of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-601">이 동적 어셈블리를 디스크에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-601">Saves this dynamic assembly to disk.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-602">이 메서드는이 동적 어셈블리에 정의 된 모든 일시적이 지 않은 동적 모듈을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-602">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="c156d-603">임시 동적 모듈 저장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-603">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="c156d-604">어셈블리 파일 이름에는 모듈 중 하나의 이름과 같을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-604">The assembly file name can be the same as the name of one of the modules.</span></span> <span data-ttu-id="c156d-605">이 경우 어셈블리 매니페스트가 해당 모듈에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-605">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="c156d-606">`assemblyFileName` 모든 어셈블리에 포함 된 모듈의 이름이 다르게 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-606">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="c156d-607">이 경우 어셈블리 매니페스트만 어셈블리 파일에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-607">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="c156d-608">각 <xref:System.Resources.ResourceWriter> 사용 하 여 가져온 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>,이 메서드는.resources 파일 및 호출 기록 <xref:System.Resources.ResourceWriter.Close%2A> 를 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-608">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="c156d-609">`assemblyFileName` 드라이브나 디렉터리 구성 요소 없이 단순한 파일 이름 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-609">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="c156d-610">특정 디렉터리에서 어셈블리를 만들려는 중 하나를 사용는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 대상 디렉터리 인수를 사용 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-610">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 <span data-ttu-id="c156d-611">.NET framework 버전 2.0에서는이 오버 로드는 <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> 호출 하는 것과 같습니다는 <xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29> 메서드 오버 로드와 <xref:System.Reflection.PortableExecutableKinds.ILOnly> 에 대 한는 `portableExecutableKind` 매개 변수 및 <xref:System.Reflection.ImageFileMachine.I386> 에 대 한는 `imageFileMachine` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-611">In the .NET Framework version 2.0, this overload of the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method is equivalent to calling the <xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29> method overload with <xref:System.Reflection.PortableExecutableKinds.ILOnly> for the `portableExecutableKind` parameter and <xref:System.Reflection.ImageFileMachine.I386> for the `imageFileMachine` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-612">다음 코드 예제는 동적 어셈블리를 만들고 사용 하 여 로컬 디스크에 지속 되 면 `Save`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-612">The following code sample creates a dynamic assembly and then persists it to a local disk using `Save`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-613">
            <paramref name="assemblyFileName" />의 길이가 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-613">The length of <paramref name="assemblyFileName" /> is 0.</span>
          </span>
          <span data-ttu-id="c156d-614">-또는-  어셈블리에 동일한 이름 가진 둘 이상의 모듈 리소스 파일이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-614">-or-  There are two or more modules resource files in the assembly with the same name.</span>
          </span>
          <span data-ttu-id="c156d-615">-또는-  어셈블리의 대상 디렉터리가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-615">-or-  The target directory of the assembly is invalid.</span>
          </span>
          <span data-ttu-id="c156d-616">-또는-  <paramref name="assemblyFileName" />이 단순한 파일 이름이 아니거나(예: 디렉터리 또는 드라이브 구성 요소 있음), 이 어셈블리에 둘 이상의 관리되지 않는 리소스(버전 정보 리소스 포함)가 정의되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-616">-or-  <paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resource, was defined in this assembly.</span>
          </span>
          <span data-ttu-id="c156d-617">-또는-  <see cref="T:System.Reflection.AssemblyCultureAttribute" />의 <see langword="CultureInfo" /> 문자열이 유효한 문자열이 아니거나 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />가 이 메서드 호출 전에 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-617">-or-  The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-618">
            <paramref name="assemblyFileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-618">
              <paramref name="assemblyFileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-619">이 어셈블리를 이전에 저장한 적이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-619">This assembly has been saved before.</span>
          </span>
          <span data-ttu-id="c156d-620">-또는-  이 어셈블리에 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /> 액세스 권한이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-620">-or-  This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c156d-621">저장하는 동안 출력 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-621">An output error occurs during the save.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-622">디스크에 기록될 어셈블리의 모듈에 있는 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-622">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-623">쓰기 = true 또는 추가 = true를 지정 된 파일 이름으로이 어셈블리를 저장 해야 하는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-623">Write = true or Append = true is needed to save this assembly to the specified file name.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-624">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-624">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-625">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-625">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName, valuetype System.Reflection.PortableExecutableKinds portableExecutableKind, valuetype System.Reflection.ImageFileMachine imageFileMachine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName, System::Reflection::PortableExecutableKinds portableExecutableKind, System::Reflection::ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Reflection.PortableExecutableKinds * System.Reflection.ImageFileMachine -&gt; unit" Usage="assemblyBuilder.Save (assemblyFileName, portableExecutableKind, imageFileMachine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" />
        <Parameter Name="portableExecutableKind" Type="System.Reflection.PortableExecutableKinds" />
        <Parameter Name="imageFileMachine" Type="System.Reflection.ImageFileMachine" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName">
          <span data-ttu-id="c156d-626">어셈블리의 파일 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-626">The file name of the assembly.</span>
          </span>
        </param>
        <param name="portableExecutableKind">
          <span data-ttu-id="c156d-627">코드의 특성을 지정하는 <see cref="T:System.Reflection.PortableExecutableKinds" /> 값들의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-627">A bitwise combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values that specifies the nature of the code.</span>
          </span>
        </param>
        <param name="imageFileMachine">
          <span data-ttu-id="c156d-628">대상 플랫폼을 지정하는 <see cref="T:System.Reflection.ImageFileMachine" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-628">One of the <see cref="T:System.Reflection.ImageFileMachine" /> values that specifies the target platform.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-629">이 동적 어셈블리를 디스크에 저장하고, 어셈블리의 실행 파일 및 대상 플랫폼에 코드의 특성을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-629">Saves this dynamic assembly to disk, specifying the nature of code in the assembly's executables and the target platform.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-630">경우 `imageFileMachine` 및 `portableExecutableKind` 호환 되지 않는 `imageFileMachine` 우선 `portableExecutableKind`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-630">If `imageFileMachine` and `portableExecutableKind` are incompatible, `imageFileMachine` takes precedence over `portableExecutableKind`.</span></span> <span data-ttu-id="c156d-631">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-631">No exception is thrown.</span></span> <span data-ttu-id="c156d-632">예를 들어, 지정 하는 경우 <xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType> 와 <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType> 는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-632">For example, if you specify <xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType> with <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType> is ignored.</span></span>  
  
 <span data-ttu-id="c156d-633">이 메서드는이 동적 어셈블리에 정의 된 모든 일시적이 지 않은 동적 모듈을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-633">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="c156d-634">임시 동적 모듈 저장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-634">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="c156d-635">어셈블리 파일 이름에는 모듈 중 하나의 이름과 같을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-635">The assembly file name can be the same as the name of one of the module.</span></span> <span data-ttu-id="c156d-636">이 경우 어셈블리 매니페스트가 해당 모듈에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-636">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="c156d-637">`assemblyFileName` 모든 어셈블리에 포함 된 모듈의 이름이 다르게 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-637">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="c156d-638">이 경우 어셈블리 매니페스트만 어셈블리 파일에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-638">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="c156d-639">각 <xref:System.Resources.ResourceWriter> 사용 하 여 가져온 <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>,이 메서드는.resources 파일 및 호출 기록 <xref:System.Resources.ResourceWriter.Close%2A> 를 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-639">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="c156d-640">`assemblyFileName` 드라이브나 디렉터리 구성 요소 없이 단순한 파일 이름 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-640">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="c156d-641">특정 디렉터리에서 어셈블리를 만들려는 중 하나를 사용는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 대상 디렉터리 인수를 사용 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="c156d-641">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-642">
            <paramref name="assemblyFileName" />의 길이가 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-642">The length of <paramref name="assemblyFileName" /> is 0.</span>
          </span>
          <span data-ttu-id="c156d-643">-또는-  어셈블리에 동일한 이름 가진 둘 이상의 모듈 리소스 파일이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-643">-or-  There are two or more modules resource files in the assembly with the same name.</span>
          </span>
          <span data-ttu-id="c156d-644">-또는-  어셈블리의 대상 디렉터리가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-644">-or-  The target directory of the assembly is invalid.</span>
          </span>
          <span data-ttu-id="c156d-645">-또는-  <paramref name="assemblyFileName" />이 단순한 파일 이름이 아니거나(예: 디렉터리 또는 드라이브 구성 요소 있음), 이 어셈블리에 둘 이상의 관리되지 않는 리소스(버전 정보 리소스 포함)가 정의되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-645">-or-  <paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resources, was defined in this assembly.</span>
          </span>
          <span data-ttu-id="c156d-646">-또는-  <see cref="T:System.Reflection.AssemblyCultureAttribute" />의 <see langword="CultureInfo" /> 문자열이 유효한 문자열이 아니거나 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />가 이 메서드 호출 전에 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-646">-or-  The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-647">
            <paramref name="assemblyFileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-647">
              <paramref name="assemblyFileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-648">이 어셈블리를 이전에 저장한 적이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-648">This assembly has been saved before.</span>
          </span>
          <span data-ttu-id="c156d-649">-또는-  이 어셈블리에 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /> 액세스 권한이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-649">-or-  This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c156d-650">저장하는 동안 출력 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-650">An output error occurs during the save.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c156d-651">디스크에 기록될 어셈블리의 모듈에 있는 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-651">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="c156d-652">쓰기 = true 또는 추가 = true를 지정 된 파일 이름으로이 어셈블리를 저장 해야 하는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-652">Write = true or Append = true is needed to save this assembly to the specified file name.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-653">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-653">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-654">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-654">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityRuleSet">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityRuleSet SecurityRuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.SecurityRuleSet SecurityRuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SecurityRuleSet As SecurityRuleSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::SecurityRuleSet SecurityRuleSet { System::Security::SecurityRuleSet get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityRuleSet : System.Security.SecurityRuleSet" Usage="System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityRuleSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-655">CLR(공용 언어 런타임)가 이 어셈블리에 대해 적용해야 하는 보안 규칙 집합을 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-655">Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c156d-656">CLR이 이 동적 어셈블리에 대해 적용하는 보안 규칙 집합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-656">The security rule set that the CLR enforces for this dynamic assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-657">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 항상 수준 2 투명도 적용 (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>)를 생성 하는 동적 어셈블리에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-657">The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] always enforces level 2 transparency (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>) for the dynamic assemblies it generates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-658">이 어셈블리에서 사용자 지정 특성을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-658">Sets a custom attribute on this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="c156d-659">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-659">An instance of a helper class to define the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-660">사용자 지정 특성 작성기를 사용하여 이 어셈블리에 대한 사용자 지정 특성을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-660">Set a custom attribute on this assembly using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c156d-661"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 선언적 보안 특성을 설정 하려면 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-661"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="c156d-662">오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 은 선택 사항 필요 하며 사용 권한을 거부 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-662">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-663">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-664">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-664">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-665">다음 코드 샘플에서는 `SetCustomAttribute` 내 <xref:System.Reflection.Emit.AssemblyBuilder>를 사용 하 여 한 <xref:System.Reflection.Emit.CustomAttributeBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-665">The following code sample illustrates the use of `SetCustomAttribute` within <xref:System.Reflection.Emit.AssemblyBuilder>, using a <xref:System.Reflection.Emit.CustomAttributeBuilder>.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CPP/assemblybuilder_setcustomattribute1.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CS/assemblybuilder_setcustomattribute1.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/VB/assemblybuilder_setcustomattribute1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-666">
            <paramref name="con" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-666">
              <paramref name="con" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-667">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-667">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-668">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-668">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-669">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-669">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="c156d-670">사용자 지정 특성에 대한 생성자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-670">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="c156d-671">특성을 나타내는 바이트 blob입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-671">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-672">지정한 사용자 지정 특성 blob을 사용하여 이 어셈블리에 대한 사용자 지정 특성을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-672">Set a custom attribute on this assembly using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-673">서식을 지정 하는 방법에 대 한 자세한 내용은 ECMA Partition II 설명서에서 메타 데이터 사양을 참조 `binaryAttribute`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-673">See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`.</span></span> <span data-ttu-id="c156d-674">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c156d-674">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="c156d-675">`RuntimeConstructorInfo` 특별 한 형식 시스템에서 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-675">`RuntimeConstructorInfo` is a special type generated by the system.</span></span> <span data-ttu-id="c156d-676">파생 되는 <xref:System.Reflection.ConstructorInfo> 클래스 및 모든 <xref:System.Reflection.ConstructorInfo> 리플렉션을 통해 가져온 개체는 실제로 인스턴스 `RuntimeConstructorInfo`합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-676">It derives from the <xref:System.Reflection.ConstructorInfo> class, and any <xref:System.Reflection.ConstructorInfo> object you obtain through reflection is actually an instance of `RuntimeConstructorInfo`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-677"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 선언적 보안 특성을 설정 하려면 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-677"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="c156d-678">오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 은 선택 사항 필요 하며 사용 권한을 거부 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-678">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c156d-679">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-679">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-680">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-680">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c156d-681">다음 코드 샘플에서는 `SetCustomAttribute` 사용자 지정 특성을 동적으로 생성 된 어셈블리를 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-681">The following code sample illustrates the use of `SetCustomAttribute` to attach a custom attribute to a dynamically generated assembly.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CPP/assemblybuilder_setcustomattribute2.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CS/assemblybuilder_setcustomattribute2.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/VB/assemblybuilder_setcustomattribute2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-682">
            <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-682">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-683">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-683">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c156d-684">
            <paramref name="con" />이 <see langword="RuntimeConstructorInfo" /> 개체가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-684">
              <paramref name="con" /> is not a <see langword="RuntimeConstructorInfo" /> object.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-685">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-685">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-686">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-686">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetEntryPoint">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c156d-687">이 동적 어셈블리에 대한 진입점을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-687">Sets the entry point for this dynamic assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo -&gt; unit" Usage="assemblyBuilder.SetEntryPoint entryMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="entryMethod">
          <span data-ttu-id="c156d-688">이 동적 어셈블리에 대한 진입점을 나타내는 메서드에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-688">A reference to the method that represents the entry point for this dynamic assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-689">콘솔 응용 프로그램이 작성되고 있다고 가정하고 이 동적 어셈블리에 대한 진입점을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-689">Sets the entry point for this dynamic assembly, assuming that a console application is being built.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-690">
            <paramref name="entryMethod" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-690">
              <paramref name="entryMethod" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-691">해당 어셈블리 내에 <paramref name="entryMethod" />가 포함되어 있지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-691">
              <paramref name="entryMethod" /> is not contained within this assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-692">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-692">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-693">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-693">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-694">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-694">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod, valuetype System.Reflection.Emit.PEFileKinds fileKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo, fileKind As PEFileKinds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod, System::Reflection::Emit::PEFileKinds fileKind);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo * System.Reflection.Emit.PEFileKinds -&gt; unit" Usage="assemblyBuilder.SetEntryPoint (entryMethod, fileKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="fileKind" Type="System.Reflection.Emit.PEFileKinds" />
      </Parameters>
      <Docs>
        <param name="entryMethod">
          <span data-ttu-id="c156d-695">이 동적 어셈블리에 대한 진입점을 나타내는 메서드에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-695">A reference to the method that represents the entry point for this dynamic assembly.</span>
          </span>
        </param>
        <param name="fileKind">
          <span data-ttu-id="c156d-696">빌드되는 어셈블리 실행 파일의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-696">The type of the assembly executable being built.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-697">이 어셈블리의 진입점을 설정하고 빌드되는 PE(이식 가능한 실행 파일)의 형식을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-697">Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c156d-698">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 필요 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-698">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="c156d-699">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-699">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c156d-700">
            <paramref name="entryMethod" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-700">
              <paramref name="entryMethod" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c156d-701">해당 어셈블리 내에 <paramref name="entryMethod" />가 포함되어 있지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-701">
              <paramref name="entryMethod" /> is not contained within this assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c156d-702">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-702">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="c156d-703">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-703">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="c156d-704">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-704">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AssemblyBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_AssemblyBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="c156d-705">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-705">Reserved for future use.</span>
          </span>
          <span data-ttu-id="c156d-706">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-706">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="c156d-707">매핑할 전달된 이름의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-707">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="c156d-708">매핑할 이름의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-708">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c156d-709">이름을 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-709">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="c156d-710">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-710">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-711">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-711">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-712">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-712">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c156d-713">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-713">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c156d-714">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-714">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AssemblyBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="c156d-715">반환할 형식 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-715">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c156d-716">형식 정보의 로캘 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-716">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="c156d-717">요청된 형식 정보 개체에 대한 포인터를 받습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-717">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-718">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-718">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-719">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-719">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c156d-720">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-720">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c156d-721">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-721">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AssemblyBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="c156d-722">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-722">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-723">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-723">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-724">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-724">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c156d-725">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-725">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c156d-726">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-726">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AssemblyBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_AssemblyBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="c156d-727">멤버를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-727">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="c156d-728">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-728">Reserved for future use.</span>
          </span>
          <span data-ttu-id="c156d-729">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-729">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="c156d-730">인수를 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-730">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="c156d-731">호출의 컨텍스트를 설명하는 플래그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-731">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="c156d-732">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-732">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="c156d-733">결과를 저장할 위치에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-733">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="c156d-734">예외 정보가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-734">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="c156d-735">오류가 있는 첫 번째 인수의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-735">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c156d-736">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-736">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c156d-737">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-737">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="c156d-738">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="c156d-738">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c156d-739">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c156d-739">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>