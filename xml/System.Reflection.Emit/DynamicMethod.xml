<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f6030d34440b4f0bc0d18e5f1f3b143ba646c121" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37474815" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9447e-101">컴파일, 실행 및 삭제할 수 있는 동적 메서드를 정의하고 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9447e-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="9447e-102">삭제된 메서드는 가비지 수집에 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9447e-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-103">사용할 수는 <xref:System.Reflection.Emit.DynamicMethod> 클래스를 생성 하는 메서드를 포함 하는 동적 어셈블리 및 동적 형식을 생성 하지 않고 런타임에 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="9447e-104">실행 시간 (JIT) 컴파일러에서 만든 코드를 회수 하는 경우는 <xref:System.Reflection.Emit.DynamicMethod> 개체를 회수 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="9447e-105">동적 메서드 생성 하 고 적은 양의 코드를 실행 하는 가장 효율적인 방법은 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="9447e-106">동적 메서드가 익명으로 호스팅될 수 또는 형식 또는 모듈을 사용 하 여 논리적으로 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="9447e-107">동적 메서드가 익명으로 호스팅된 시스템에서 제공 된 어셈블리에 있고 이므로 다른 코드에서 분리 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="9447e-108">기본적으로 public이 아닌 데이터에 액세스할 수 없는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="9447e-109">익명으로 호스트 된 동적 메서드를 권한이 부여 된 경우 JIT 컴파일러의 표시 유형 확인을 건너뛰는 기능을 제한 될 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-110">동적 메서드가 public이 아닌 멤버가 액세스 어셈블리의 신뢰 수준과 같거나 하위 집합인 동적 메서드를 내보내는 호출 스택의 트러스트 수준 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="9447e-111">익명으로 호스트 된 동적 메서드에 대 한 자세한 내용은 참조 하십시오 [연습: 부분 신뢰 시나리오에서 코드 내보내기](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="9447e-112">동적 메서드를 지정 하는 모듈에 연결 하는 경우에 동적 메서드는 해당 모듈에 효과적으로 전역입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="9447e-113">모듈의 모든 형식 및 모든 액세스할 수 있습니다 `internal` (`Friend` Visual basic에서) 형식의 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="9447e-114">동적을 연결할 수 있습니다에 대 한 요청 하는 모듈을 만들었는지 여부에 관계 없이 모든 모듈을 사용 하 여 메서드 제공 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> 코드에 포함 된 호출 스택은 여 플래그를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="9447e-115">경우는 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그는 권한 부여에 포함 된, 동적 메서드가 JIT 컴파일러의 가시성 검사를 생략 및 모듈 또는 어셈블리의 다른 모든 모듈을 선언 하는 모든 종류의 개인 데이터에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9447e-116">동적 메서드가 연결 된 모듈을 지정 하는 경우에 익명 호스팅에 사용 되는 시스템 제공 어셈블리에서 해당 모듈 되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="9447e-117">동적 메서드를 지정 하는 형식과 연결 하는 경우 액세스 수준에 관계 없이 형식의 모든 멤버에 대 한 액세스를 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="9447e-118">또한 JIT 표시 유형 확인을 건너뛸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="9447e-119">그러면 모든 어셈블리의 다른 모든 모듈 또는 같은 모듈에서 선언 된 다른 종류의 개인 데이터에 동적 메서드에 대 한 액세스를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="9447e-120">모든 형식을 사용 하 여 동적 메서드를 연결할 수 있지만 코드를 부여 되어야 합니다 <xref:System.Security.Permissions.ReflectionPermission> 둘 다와 함께 합니다 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> 및 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="9447e-121">다음 표에서 형식 및 멤버는 익명으로 호스트 된 동적 메서드 및 인지에 따라 JIT 가시성 검사를 하지 않고 액세스할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> 플래그 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="9447e-122"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="9447e-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="9447e-123"><xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>과 함께</span><span class="sxs-lookup"><span data-stu-id="9447e-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="9447e-124">JIT 표시 유형 확인을 건너뛰지 않고</span><span class="sxs-lookup"><span data-stu-id="9447e-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="9447e-125">모든 어셈블리에서 public 형식의 공용 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="9447e-126">모든 어셈블리에서 public 형식의 공용 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="9447e-127">건너뜁니다 JIT 가시성 검사를 제한</span><span class="sxs-lookup"><span data-stu-id="9447e-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="9447e-128">모든 어셈블리에서 public 형식의 공용 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="9447e-129">해당 신뢰 수준이 동적 메서드를 내보내는 어셈블리의 신뢰 수준 보다 작거나 같음은 어셈블리에만 모든 유형의 모든 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="9447e-130">이전에 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], 필요한 코드를 내보내는 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-131">FullTrust 및 LocalIntranet 명명 된 권한 집합에는 기본적으로이 권한이 포함 되어 있지만 하지 인터넷 사용 권한을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="9447e-132">따라서 이전 버전의에서 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 있을 경우에 인터넷 권한으로 라이브러리를 사용할 수 있습니다 합니다 <xref:System.Security.SecurityCriticalAttribute> 특성 및 실행는 <xref:System.Security.PermissionSet.Assert%2A> 에 대 한 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="9447e-133">코딩 오류가 있을 경우 보안 허점이 발생할 수 있으므로 이러한 라이브러리는 신중한 보안 검토가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="9447e-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]에서는 코드 생성이 기본적으로 권한 있는 작업이 아니기 때문에 보안 요구를 실행하지 않고 부분 신뢰 시나리오에서 코드를 내보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="9447e-135">즉, 생성된 코드에 코드를 내보내는 어셈블리보다 많은 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="9447e-136">따라서 코드를 내보내는 라이브러리가 보안상 투명할 수 있으며 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>를 어설션할 필요가 없으므로 보안 라이브러리 작성 작업이 간소화됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="9447e-137">이 기능을 사용 하려면 응용 프로그램이 대상 해야는 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상.</span><span class="sxs-lookup"><span data-stu-id="9447e-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="9447e-138">다음 표에서 형식 및 멤버는 모듈을 사용 하 여 또는 모듈의 형식과 연결 된 동적 메서드에서 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="9447e-139">모듈에 연결 된</span><span class="sxs-lookup"><span data-stu-id="9447e-139">Associated with module</span></span>|<span data-ttu-id="9447e-140">형식과 사용 하 여 연결</span><span class="sxs-lookup"><span data-stu-id="9447e-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="9447e-141">JIT 표시 유형 확인을 건너뛰지 않고</span><span class="sxs-lookup"><span data-stu-id="9447e-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="9447e-142">모듈의 공용, 내부 및 개인 형식의 public 및 내부 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="9447e-143">모든 어셈블리에서 public 형식의 공용 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="9447e-144">연결 된 형식의 모든 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-144">All members of the associated type.</span></span> <span data-ttu-id="9447e-145">모듈의 다른 모든 종류의 public 및 내부 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="9447e-146">모든 어셈블리에서 public 형식의 공용 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="9447e-147">JIT 가시성 검사를 건너뜀</span><span class="sxs-lookup"><span data-stu-id="9447e-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="9447e-148">모든 어셈블리에 있는 모든 유형의 모든 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="9447e-149">모든 어셈블리에 있는 모든 유형의 모든 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="9447e-150">모듈을 사용 하 여 연결 된 동적 메서드는 해당 모듈의 권한을 갖습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="9447e-151">형식과 연결 된 동적 메서드는 해당 형식이 포함 된 모듈의 권한을 갖습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="9447e-152">동적 메서드 및 해당 매개 변수 명명 수 없지만 디버깅 하는 데 도움이 되는 이름을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="9447e-153">동적 메서드 또는 해당 매개 변수에서 사용자 지정 특성을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="9447e-154">동적 메서드는 있지만 `static` 메서드 (`Shared` Visual Basic의 메서드), 대리자 바인딩이에서 도입 된 규칙을 완화 합니다 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 인스턴스 메서드처럼 작동할 수 있도록 개체를 바인딩할 동적 메서드를 허용 때 해당 대리자 인스턴스를 사용 하 여 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="9447e-155">이 보여 주는 예제는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-156">에 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], 기호 정보를, 로컬 변수 이름 및 줄 번호 매핑 동적 메서드를 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="9447e-157">이 제한은 이후 버전에서 제거 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="9447e-158">사용할 수 있습니다 <xref:System.Reflection.Emit.AssemblyBuilder> 는 생성 된 MSIL (Microsoft intermediate language), 디버깅을 간소화 하기 때문에 동적 메서드를 최종 배포 하는 동안 다음 전환 하는 개발 하는 동안는 <xref:System.Reflection.Emit.ILGenerator> 호출은 두 경우 모두에서 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="9447e-159">확인</span><span class="sxs-lookup"><span data-stu-id="9447e-159">Verification</span></span>  
 <span data-ttu-id="9447e-160">다음 목록에는 동적 메서드는 확인할 수 없는 코드를 포함할 수 있습니다 조건이 요약 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="9447e-161">(예를 들어, 동적 메서드를 확인할 수 없습니다 경우 해당 <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> 속성이 `false`.)</span><span class="sxs-lookup"><span data-stu-id="9447e-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="9447e-162">보안에 중요 한 어셈블리와 연결 된 동적 메서드가 보안에 중요 한 이기도 하며 확인을 건너뛸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="9447e-163">예를 들어, 데스크톱 응용 프로그램으로 실행 되는 보안 특성 없이 어셈블리는 런타임에서 보안에 중요로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="9447e-164">어셈블리와 동적 메서드를 연결 하는 경우 동적 메서드에 확인할 수 없는 코드를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="9447e-165">비안정형 코드를 포함 하는 동적 메서드는 수준 1 투명도 어셈블리와 연결 된 경우-just-in-time (JIT) 컴파일러는 보안 요청을 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="9447e-166">요청에는 완전히 신뢰할 수 있는 코드에서 동적 메서드를 실행 하는 경우에 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="9447e-167">참조 [보안 투명 코드, 수준 1](~/docs/framework/misc/security-transparent-code-level-1.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="9447e-168">확인할 수 없는 코드를 포함 하는 동적 메서드 (예: mscorlib.dll) 수준 2 투명도 있는 어셈블리와 연결 된 경우 보안 요청을 하는 대신 (JIT 컴파일러에 의해 삽입) 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="9447e-169">참조 [보안 투명 코드, 수준 2](~/docs/framework/misc/security-transparent-code-level-2.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="9447e-170">항상 확인할 수 없는 코드를 포함 하는 익명으로 호스트 된 동적 메서드는 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="9447e-171">생성 되 고 완전히 신뢰할 수 있는 코드 실행 하는 경우에 확인을 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="9447e-172">확인할 수 없는 코드에 대해 throw 되는 예외 동적 메서드가 호출 된 방식에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="9447e-173">반환 된 대리자를 사용 하 여 동적 메서드를 호출 하는 경우는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 메서드는 <xref:System.Security.VerificationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="9447e-174">사용 하 여 동적 메서드를 호출 하는 경우는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드를 <xref:System.Reflection.TargetInvocationException> 내부 예외가 <xref:System.Security.VerificationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-175">다음 코드 예제에서는 두 개의 매개 변수를 사용 하는 동적 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="9447e-176">이 예제에서는 콘솔에 첫 번째 매개 변수를 인쇄 하는 간단한 함수 본문을 내보내는 및 예제에서는 메서드의 반환 값으로 두 번째 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="9447e-177">이 예제에서는 대리자를 만들어 메서드를 완료 다른 매개 변수를 사용 하 여 대리자를 호출 하 고 마지막으로 사용 하 여 동적 메서드를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-178">동적 메서드를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-179">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-180">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-181">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-182">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-183">메서드 이름, 반환 형식 및 매개 변수 형식을 지정하여 익명으로 호스팅된 동적 메서드를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-184">이 생성자에 의해 만들어진 동적 메서드가 익명 어셈블리 대신 기존 형식이 나 모듈에 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="9447e-185">익명 어셈블리에 다른 코드에서 격리 하 고, 즉 동적 메서드에 대 한 샌드박스 환경을 제공 하기 위해서만 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="9447e-186">이 환경에서는 내보내지고 부분적으로 신뢰할 수 있는 코드 실행에 동적 메서드에 대 한 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="9447e-187">이 생성자는 (적시에 JIT) 가시성 검사를 MSIL (Microsoft intermediate language)에 적용 됩니다 동적 메서드를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="9447e-188">즉, 동적 메서드의 코드에서에서 공용 클래스의 공용 메서드에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="9447e-189">메서드가 형식 또는 멤버에 액세스 하려고 하는 경우 예외가 throw 됩니다 `private`, `protected`, 또는 `internal` (`Friend` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="9447e-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="9447e-190">JIT 가시성 검사를 건너뛰는 기능을 제한 된 동적 메서드를 만들려면 사용 합니다 <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="9447e-191">익명으로 호스트 된 동적 메서드를 생성 될 때 내보내는 어셈블리 호출 스택이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="9447e-192">메서드가 호출 될 때 내보내는 어셈블리의 사용 권한은 실제 호출자의 권한 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="9447e-193">따라서 동적 메서드는 전달 되 고 더 높은 신뢰 수준을 가진 어셈블리에서 실행 하는 경우에 내보낸 어셈블리 보다 높은 수준의 권한에서 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="9447e-194">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 하 고 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 및 호출 규칙 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-195">이 생성자에 도입 된 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상.</span><span class="sxs-lookup"><span data-stu-id="9447e-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-196">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-197">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-198">
            <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-199">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-200">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-201">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-202">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="9447e-203">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에 대해 JIT 가시성 검사를 건너뛰려면(단, 이러한 형식과 멤버를 포함하는 어셈블리의 트러스트 수준이 동적 메서드를 내보내는 호출 스택의 트러스트 수준보다 작거나 같아야 한다는 제한이 적용되는 경우) <see langword="true" />이며, 건너뛰지 않으려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-204">메서드 이름, 반환 형식, 매개 변수 형식, 그리고 동적 메서드의 MSIL(Microsoft Intermediate Language)에서 액세스하는 형식 및 멤버에 대해 JIT(적시) 가시성 검사를 건너뛰어야 하는지 여부를 지정하는 익명으로 호스팅된 동적 메서드를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-205">이 생성자에 의해 만들어진 동적 메서드가 익명 어셈블리 대신 기존 형식이 나 모듈에 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="9447e-206">익명 어셈블리에 다른 코드에서 격리 하 고, 즉 동적 메서드에 대 한 샌드박스 환경을 제공 하기 위해서만 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="9447e-207">이 환경에서는 내보내지고 부분적으로 신뢰할 수 있는 코드 실행에 동적 메서드에 대 한 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="9447e-208">익명으로 호스트 된 동적 메서드 형식 또는 멤버에 자동으로 액세스를 필요가 없습니다 `private`, `protected`, 또는 `internal` (`Friend` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="9447e-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="9447e-209">이 해당 범위의 숨겨진된 멤버에 액세스할 수 있는 기존 형식이 나 모듈에 연결 된 동적 메서드 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="9447e-210">지정할 `true` 에 대 한 `restrictedSkipVisibility` 동적 메서드에 형식 또는 멤버에 액세스할 수 있는지 `private`를 `protected`, 또는 `internal`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="9447e-211">그러면 이러한 멤버에 대 한 액세스를 제한 하는 동적 메서드 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="9447e-212">즉, 다음 조건에 해당 하는 경우에 멤버를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="9447e-213">대상 멤버 크거나 동적 메서드를 내보내는 호출 스택의 보다 낮은 신뢰 수준을 가진 어셈블리에 속하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="9447e-214">부여 된 동적 메서드를 내보내는 호출 스택의 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-215">이 완전 신뢰를 사용 하 여 코드를 실행 하는 경우에 항상 true입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="9447e-216">부분적으로 신뢰할 수 있는 코드에 대 한 것은 사실 호스트에는 명시적으로 권한을 부여 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9447e-217">보안 예외가 때 throw 권한이 부여 되지 않은, 경우 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 라고 또는 동적 메서드를 호출 하면 되지 경우이 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="9447e-218">동적 메서드를 내보낼 수 없는 특별 한 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="9447e-219">예를 들어, 동적 메서드를 사용 하 여 만들어집니다 `restrictedSkipVisibility` 로 `true` 호출 스택 제한 된 멤버 액세스 권한이 부여 된 경우 호출 스택에 있는 모든 어셈블리의 private 멤버에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="9447e-220">동적 메서드를 호출 스택에 부분적으로 신뢰할 수 있는 코드를 사용 하 여 만든 경우에서 형식의 private 멤버에 액세스할 수 없습니다 것을 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 어셈블리 이러한 어셈블리는 완전히 신뢰할 수 있는 이기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="9447e-221">하는 경우 `restrictedSkipVisibility` 는 `false`, JIT 표시 유형 확인을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="9447e-222">동적 메서드의 코드에서에서 공용 클래스의 공용 메서드에 액세스할 수 있고 형식이 나 멤버에 액세스 하려고 시도 하는 경우 예외가 throw 됩니다 `private`하십시오 `protected`, 또는 `internal`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="9447e-223">익명으로 호스트 된 동적 메서드를 생성 될 때 내보내는 어셈블리 호출 스택이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="9447e-224">메서드가 호출 되 면 내보내는 호출 스택의 권한은 실제 호출자의 권한 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="9447e-225">따라서 동적 메서드는 전달 되 고 더 높은 신뢰 수준을 가진 어셈블리에서 실행 하는 경우에 내보낸 어셈블리 보다 높은 수준의 권한에서 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="9447e-226">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 하 고 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 및 호출 규칙 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-227">이 생성자에 도입 된 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상.</span><span class="sxs-lookup"><span data-stu-id="9447e-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-228">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-229">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-230">
            <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-231">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-232">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-233">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-234">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="9447e-235">동적 메서드를 논리적으로 연결할 모듈을 나타내는 <see cref="T:System.Reflection.Module" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-236">메서드 이름, 반환 형식, 매개 변수 형식 및 모듈을 지정하여 모듈 전체에서 사용되는 동적 메서드를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-237">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 호출 규칙 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, 및-just-in-time (JIT) 표시 유형 확인을 건너뛰지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="9447e-238">이 생성자를 사용 하 여 만든 동적 메서드가 public에 대 한 액세스 및 `internal` (`Friend` Visual basic에서) 모듈에 포함 된 모든 형식의 멤버 `m`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-239">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `m` 호출 모듈 및 수요 이외의 모듈인 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-240">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-241">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-242">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-243">다음 코드 예제에서는 두 개의 매개 변수를 사용 하는 동적 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="9447e-244">이 예제에서는 콘솔에 첫 번째 매개 변수를 인쇄 하는 간단한 함수 본문을 내보내는 및 예제에서는 메서드의 반환 값으로 두 번째 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="9447e-245">이 예제에서는 대리자를 만들어 메서드를 완료 다른 매개 변수를 사용 하 여 대리자를 호출 하 고 마지막으로 사용 하 여 동적 메서드를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-246">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-247">-또는-  <paramref name="m" />이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-247">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-248">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-248">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-249">-또는-  <paramref name="m" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-249">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-250">
            <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-250">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-251">호출 모듈이 아닌 모듈을 사용 하 여 동적 메서드를 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-251">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-252">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-252">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-253">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-253">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-254">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-254">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-255">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-255">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-256">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-256">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="9447e-257">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-257">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="9447e-258">동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-258">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-259">메서드 이름, 반환 형식, 매개 변수 형식 및 동적 메서드가 논리적으로 연결된 형식을 지정하여 동적 메서드를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-259">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-260">이 생성자를 사용 하 여 만든 동적 메서드가 형식의 모든 멤버에 액세스할 `owner`, 및 공용 및 `internal` (`Friend` Visual basic에서) 포함 된 모듈의 다른 모든 형식 멤버 `owner`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-260">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="9447e-261">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 및 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 호출 규칙 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, 및-just-in-time (JIT) 표시 유형 확인을 건너뛰지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-261">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-262">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `owner` 호출 모듈을 대 한 수요 아닌 모듈에 있는 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-262">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-263">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-263">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-264">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-264">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-265">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-265">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-266">다음 코드 예제에서는 <xref:System.Reflection.Emit.DynamicMethod> 형식과 논리적으로 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-266">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="9447e-267">이 연결 제공 해당 형식의 private 멤버에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-267">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="9447e-268">이라는 클래스를 정의 하는 코드 예제 `Example` 클래스 라는 private 필드를 사용 하 여 `DerivedFromxample` 첫 번째 클래스에서 파생 된 이라는 대리자 형식을 `UseLikeStatic` 반환 하는 <xref:System.Int32> 형식의 매개 변수가 및 `Example` 및 <xref:System.Int32>, 및 라는 대리자 형식을 `UseLikeInstance` 반환 하는 <xref:System.Int32> 형식의 매개 변수가 하나이 고 <xref:System.Int32>입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-268">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="9447e-269">예제 코드를 다음 만듭니다는 <xref:System.Reflection.Emit.DynamicMethod> 인스턴스의 private 필드를 변경 하는 `Example` 이전 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-269">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-270">일반적으로 클래스의 내부 필드를 변경 합니다. 아닌 경우 좋은 개체 지향 코딩 사례</span><span class="sxs-lookup"><span data-stu-id="9447e-270">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="9447e-271">예제 코드의 인스턴스를 만들고 `Example` 다음 두 명의 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-271">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="9447e-272">형식의 첫 번째는 `UseLikeStatic`을 동적 방법으로 동일한 매개 변수가 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-272">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="9447e-273">두 번째 형식입니다 `UseLikeInstance`에 첫 번째 매개 변수는 없는 (형식의 `Example`).</span><span class="sxs-lookup"><span data-stu-id="9447e-273">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="9447e-274">이 대리자를 사용 하 여 만들어집니다 합니다 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> ; 메서드 오버 로드 두 번째 메서드 오버 로드 하는 매개 변수는 인스턴스의 `Example`,이 경우에 새로 생성된 된 대리자에 바인딩되는 방금 만든 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9447e-274">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="9447e-275">인스턴스에 바인딩된 동적 메서드는 작동 대리자가 호출 될 때마다 `Example`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-275">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-276">도입 된 대리자 바인딩이 이것이 관대 한 규칙의 예는 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], 새 오버 로드와 함께 <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-276">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9447e-277">자세한 내용은 <xref:System.Delegate> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9447e-277">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="9447e-278">`UseLikeStatic` 대리자를 호출 하는 인스턴스를 전달 `Example` 에 바인딩되는 `UseLikeInstance` 대리자.</span><span class="sxs-lookup"><span data-stu-id="9447e-278">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="9447e-279">그런 다음 `UseLikeInstance` 둘 다 대리자의 동일한 인스턴스에서 작동할 수 있도록 대리자가 호출 `Example`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-279">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="9447e-280">호출한 후 마다 내부 필드의 값에 변경 내용이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-280">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="9447e-281">마지막으로 `UseLikeInstance` 인스턴스의 대리자가 바인딩된 `DerivedFromxample`, 대리자를 호출 하 여 반복 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-281">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-282">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-282">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-283">-또는-  <paramref name="owner" />가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-283">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-284">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-285">-또는-  <paramref name="owner" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-285">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-286">
            <paramref name="returnType" />은 <see langword="null" />이거나 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-286">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-287">동적 메서드 호출 모듈이 아닌 모듈 유형으로 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-287">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-288">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-288">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-289">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-289">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-290">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-290">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-291">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-291">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-292">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-292">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="9447e-293">동적 메서드를 논리적으로 연결할 모듈을 나타내는 <see cref="T:System.Reflection.Module" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-293">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="9447e-294">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-294">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-295">모듈 전체에 적용되는 동적 메서드를 만들어 메서드 이름, 반환 형식, 매개 변수 형식, 모듈을 지정하고, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-295">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-296">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 하 고 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 호출 규칙 및 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-296">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9447e-297">이 생성자를 사용 하 여 만든 동적 메서드가 public에 대 한 액세스 및 `internal` (`Friend` Visual basic에서) 포함 된 모듈에 있는 모든 형식의 멤버 `m`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-297">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="9447e-298">JIT 건너뜁니다 컴파일러의 가시성 검사 모든 다른 형식 에서도 전용 및 보호 된 멤버에 액세스 하려면 동적 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-298">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="9447e-299">예를 들어 개체를 serialize 하는 코드를 작성할 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-299">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-300">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `m` 호출 모듈 및 수요 이외의 모듈인 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-300">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-301">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-301">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-302">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-302">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-303">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-303">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-304">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-304">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-305">-또는-  <paramref name="m" />이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-305">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-306">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-306">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-307">-또는-  <paramref name="m" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-307">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-308">
            <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-308">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-309">호출 모듈이 아닌 모듈을 사용 하 여 동적 메서드를 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-309">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-310">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-310">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-311">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-311">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-312">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-312">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-313">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-313">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-314">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-314">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="9447e-315">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-315">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="9447e-316">동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-316">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="9447e-317">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-317">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-318">동적 메서드를 만들고, 메서드 이름, 반환 형식, 매개 변수 형식, 동적 메서드가 논리적으로 연결되는 형식, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-318">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-319">이 생성자를 사용 하 여 만든 동적 메서드가 형식의 모든 멤버에 액세스할 `owner`, 및 공용 및 `internal` (`Friend` Visual basic에서) 포함 된 모듈의 다른 모든 형식 멤버 `owner`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-319">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="9447e-320">JIT 건너뜁니다 컴파일러의 가시성 검사 모든 다른 형식 에서도 전용 및 보호 된 멤버에 액세스 하려면 동적 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-320">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="9447e-321">예를 들어 개체를 serialize 하는 코드를 작성할 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-321">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="9447e-322">이 생성자에 메서드 특성 지정 <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> 하 고 <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, 호출 규칙 및 <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-322">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-323">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `owner` 호출 모듈을 대 한 수요 아닌 모듈에 있는 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-323">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-324">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-324">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-325">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-325">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-326">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-326">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-327">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-327">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-328">-또는-  <paramref name="owner" />가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-328">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-329">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-329">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-330">-또는-  <paramref name="owner" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-330">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-331">
            <paramref name="returnType" />은 <see langword="null" />이거나 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-331">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-332">동적 메서드 호출 모듈이 아닌 모듈 유형으로 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-332">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-333">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-334">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-334">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-335">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-335">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="9447e-336">동적 메서드의 특성을 지정하는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-336">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-337">허용되는 유일한 조합은 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-337">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="9447e-338">동적 메서드에 대한 호출 규칙입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-338">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-339">
            <see cref="F:System.Reflection.CallingConventions.Standard" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-339">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-340">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-340">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-341">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-341">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="9447e-342">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-342">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-343">모듈 전체에 적용되는 동적 메서드를 만들어 메서드 이름, 특성, 호출 규칙, 반환 형식, 매개 변수 형식, 모듈을 지정하고, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-343">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-344">이 생성자를 사용 하 여 만든 동적 메서드가 public에 대 한 액세스 및 `internal` (`Friend` Visual basic에서) 모듈에 포함 된 모든 public 및 내부 형식이 멤버인 `m`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-344">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="9447e-345">JIT 건너뜁니다 컴파일러의 가시성 검사 모듈에 다른 모든 어셈블리에도 다른 모든 종류의 전용 및 보호 된 멤버에 액세스할 수 동적 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-345">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="9447e-346">예를 들어 개체를 serialize 하는 코드를 작성할 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-346">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-347">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `m` 호출 모듈 및 수요 이외의 모듈인 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-347">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-348">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-348">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-349">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-349">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-350">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-350">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-351">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-351">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-352">-또는-  <paramref name="m" />이 동적 메서드에 대한 익명 호스팅을 제공하는 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-352">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-353">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-353">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-354">-또는-  <paramref name="m" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-354">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-355">
            <paramref name="attributes" />는 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" /> 이외의 플래그 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-355">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="9447e-356">-또는-  <paramref name="callingConvention" />이 <see cref="F:System.Reflection.CallingConventions.Standard" />가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-356">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="9447e-357">-또는-  <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-357">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-358">호출 모듈이 아닌 모듈을 사용 하 여 동적 메서드를 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-358">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-359">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-359">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9447e-360">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-360">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-361">이 항목에는 빈 문자열을 지정할 수 있지만 <see langword="null" />은 지정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-361">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="9447e-362">동적 메서드의 특성을 지정하는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-362">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-363">허용되는 유일한 조합은 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-363">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="9447e-364">동적 메서드에 대한 호출 규칙입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-364">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="9447e-365">
            <see cref="F:System.Reflection.CallingConventions.Standard" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-365">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9447e-366">동적 메서드의 반환 형식을 지정하는 <see cref="T:System.Type" /> 개체이거나, 메서드에 반환 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-366">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="9447e-367">동적 메서드의 매개 변수 형식을 지정하는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드에 매개 변수가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-367">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="9447e-368">동적 메서드가 논리적으로 연결되는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-368">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="9447e-369">동적 메서드에 해당 형식의 모든 멤버에 대한 액세스 권한이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-369">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="9447e-370">동적 메서드의 MSIL에서 액세스하는 형식 및 멤버에서 JIT 표시 유형 확인을 건너뛰는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-370">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-371">동적 메서드를 만들고, 메서드 이름, 특성, 호출 규칙, 반환 형식, 매개 변수 형식, 동적 메서드가 논리적으로 연결되는 형식, 동적 메서드의 MSIL(Microsoft Intermediate Language)이 액세스하는 형식과 멤버에 대해 JIT(just-in-time) 표시 유형 확인을 건너뛸지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-371">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-372">동적 메서드는 형식을 포함 하는 모듈에 전역 `owner`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-372">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="9447e-373">형식의 모든 멤버에 액세스할 수 `owner`입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-373">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="9447e-374">이 생성자를 사용 하 여 만든 동적 메서드가 형식의 모든 멤버에 액세스할 `owner`, 및 공용 및 `internal` (`Friend` Visual basic에서) 포함 된 모듈에 포함 된 모든 형식의 멤버 `owner`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-374">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="9447e-375">JIT 건너뜁니다 컴파일러의 가시성 검사 모든 다른 형식 에서도 전용 및 보호 된 멤버에 액세스 하려면 동적 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-375">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="9447e-376">예를 들어 개체를 serialize 하는 코드를 작성할 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-376">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-377">이전 버전과 호환성을 위해이 생성자는 다음과 같이 요구 됩니다. <xref:System.Security.Permissions.SecurityPermission> 사용 하 여는 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> 플래그를 둘 다 다음과 같은 경우 true: `owner` 호출 모듈을 대 한 수요 아닌 모듈에 있는 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여를 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-377">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="9447e-378">경우에 대 한 수요 <xref:System.Security.Permissions.SecurityPermission> 성공 하면이 작업은 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-378">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-379">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를이 멤버는 더 이상 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-379">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="9447e-380">(참조 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) 이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-380">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-381">
            <paramref name="parameterTypes" />의 요소는 <see langword="null" /> 또는 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-381">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="9447e-382">-또는-  <paramref name="owner" />가 인터페이스, 배열, 개방형 제네릭 형식, 제네릭 형식 또는 메서드의 형식 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-382">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-383">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-383">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9447e-384">-또는-  <paramref name="owner" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-384">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-385">
            <paramref name="attributes" />는 <see cref="F:System.Reflection.MethodAttributes.Public" /> 및 <see cref="F:System.Reflection.MethodAttributes.Static" /> 이외의 플래그 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-385">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="9447e-386">-또는-  <paramref name="callingConvention" />이 <see cref="F:System.Reflection.CallingConventions.Standard" />가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-386">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="9447e-387">-또는-  <paramref name="returnType" />은 <see cref="P:System.Type.IsByRef" />가 <see langword="true" />를 반환하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-387">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9447e-388">동적 메서드 호출 모듈이 아닌 모듈 유형으로 연결 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-388">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="9447e-389">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-390">동적 메서드를 만들 때 지정된 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-390">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-391">메서드의 특성을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-391">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-392">현재 동적 메서드에 대 한 메서드 특성은 항상 <xref:System.Reflection.MethodAttributes.Public> 고 <xref:System.Reflection.MethodAttributes.Static>입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-392">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-393">다음 코드 예제에서는 동적 메서드를 메서드 특성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-393">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="9447e-394">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-394">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-395">동적 메서드를 만들 때 지정된 호출 규칙을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-395">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-396">메서드의 호출 규칙을 나타내는 <see cref="T:System.Reflection.CallingConventions" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-396">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-397">현재, 동적 메서드의 호출 규칙은 항상 <xref:System.Reflection.CallingConventions.Standard>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-397">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-398">다음 코드 예제에서는 동적 메서드의 호출 규칙을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-398">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="9447e-399">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-399">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-400">동적 메서드를 완료하고 실행하는 데 사용할 수 있는 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-400">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="9447e-401">서명이 동적 메서드의 서명과 일치하는 대리자 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-401">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-402">동적 메서드를 완료하고 실행하는 데 사용할 수 있는 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-402">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-403">지정된 형식의 대리자로, 동적 메서드를 실행하는 데 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-403">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-404">호출 된 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 메서드 또는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드는 동적 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-404">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="9447e-405">추가 매개 변수 정의 수정 하는 등 동적 메서드를 변경 하려고 또는 자세한 MSIL (Microsoft intermediate language)을 내보내는 설정은 무시 됩니다. 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-405">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="9447e-406">동적 메서드에 대 한 메서드 본문을 만들면 고유한 MSIL 생성기가를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> 메서드는 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-406">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="9447e-407">고유한 MSIL 생성기가 없는 경우 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> 메서드는 <xref:System.Reflection.Emit.ILGenerator> 메서드 본문을 생성 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-407">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-408">다음 코드 예제에서는 두 개의 매개 변수를 사용 하는 동적 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-408">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="9447e-409">이 예제에서는 콘솔에 첫 번째 매개 변수를 인쇄 하는 간단한 함수 본문을 내보내는 및 예제에서는 메서드의 반환 값으로 두 번째 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-409">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="9447e-410">이 예제에서는 대리자를 만들어 메서드를 완료 다른 매개 변수를 사용 하 여 대리자를 호출 하 고 마지막으로 사용 하 여 동적 메서드를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-410">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-411">동적 메서드에 메서드 본문이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-411">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-412">
            <paramref name="delegateType" />의 매개 변수 개수가 잘못되었거나 매개 변수 유형이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-412">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="9447e-413">서명이 동적 메서드의 서명과 일치하는 대리자 형식에서 첫 번째 매개 변수를 뺀 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-413">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9447e-414">대리자가 바인딩된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-414">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="9447e-415">동적 메서드의 첫 번째 매개 변수와 동일한 형식이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-415">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-416">동적 메서드를 완료하고 대리자 형식과 대리자가 바인딩되는 개체를 지정하여 해당 메서드를 실행하는 데 사용할 수 있는 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-416">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-417">지정된 형식의 대리자로, 지정된 대상 개체를 사용하여 동적 메서드를 실행하는 데 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-417">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-418">이 메서드 오버 로드는 특정 개체에 바인딩된 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-418">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="9447e-419">이러한 대리자는 첫 번째 인수에 대해 닫혀 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-419">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="9447e-420">인스턴스 메서드를 사용 하는 것 처럼 동작 메서드가 정적이 있지만 인스턴스가 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-420">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="9447e-421">이 메서드 오버 로드가 필요 `target` 동적 메서드의 첫 번째 매개 변수로 동일한 형식 이어야 하거나 해당 형식 (예: 파생된 클래스)에 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-421">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="9447e-422">서명의 `delegateType` 첫 번째를 제외한 동적 메서드의 매개 변수를 모두 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-422">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="9447e-423">예를 들어 동적 메서드에 매개 변수가 <xref:System.String>, <xref:System.Int32>, 및 <xref:System.Byte>, 한 다음 `delegateType` 매개 변수에 <xref:System.Int32> 및 <xref:System.Byte>; `target` 유형의 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-423">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="9447e-424">호출 된 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 메서드 또는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드는 동적 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-424">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="9447e-425">추가 매개 변수 정의 수정 하는 등 동적 메서드를 변경 하려고 또는 자세한 MSIL (Microsoft intermediate language)을 내보내는 설정은 무시 됩니다. 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-425">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="9447e-426">동적 메서드에 대 한 메서드 본문을 만들면 고유한 MSIL 생성기가를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> 메서드는 <xref:System.Reflection.Emit.DynamicILInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-426">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="9447e-427">고유한 MSIL 생성기가 없는 경우 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> 메서드는 <xref:System.Reflection.Emit.ILGenerator> 메서드 본문을 생성 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-427">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-428">다음 코드 예제에 바인딩하는 대리자를 만듭니다를 <xref:System.Reflection.Emit.DynamicMethod> 형식의 인스턴스로 메서드 될 때마다 동일한 인스턴스에서 작동할 수 있도록 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-428">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="9447e-429">이라는 클래스를 정의 하는 코드 예제 `Example` 클래스 라는 private 필드를 사용 하 여 `DerivedFromxample` 첫 번째 클래스에서 파생 된 이라는 대리자 형식을 `UseLikeStatic` 반환 하는 <xref:System.Int32> 형식의 매개 변수가 및 `Example` 및 <xref:System.Int32>, 및 라는 대리자 형식을 `UseLikeInstance` 반환 하는 <xref:System.Int32> 형식의 매개 변수가 하나이 고 <xref:System.Int32>입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-429">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="9447e-430">예제 코드를 다음 만듭니다는 <xref:System.Reflection.Emit.DynamicMethod> 인스턴스의 private 필드를 변경 하는 `Example` 이전 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-430">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-431">일반적으로 클래스의 내부 필드를 변경 합니다. 아닌 경우 좋은 개체 지향 코딩 사례</span><span class="sxs-lookup"><span data-stu-id="9447e-431">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="9447e-432">예제 코드의 인스턴스를 만들고 `Example` 다음 두 명의 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-432">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="9447e-433">형식의 첫 번째는 `UseLikeStatic`을 동적 방법으로 동일한 매개 변수가 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-433">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="9447e-434">두 번째 형식입니다 `UseLikeInstance`에 첫 번째 매개 변수는 없는 (형식의 `Example`).</span><span class="sxs-lookup"><span data-stu-id="9447e-434">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="9447e-435">이 대리자를 사용 하 여 만들어집니다 합니다 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> ; 메서드 오버 로드 두 번째 메서드 오버 로드 하는 매개 변수는 인스턴스의 `Example`,이 경우에 새로 생성된 된 대리자에 바인딩되는 방금 만든 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9447e-435">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="9447e-436">인스턴스에 바인딩된 동적 메서드는 작동 대리자가 호출 될 때마다 `Example`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-436">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-437">도입 된 대리자 바인딩이 이것이 관대 한 규칙의 예는 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], 새 오버 로드와 함께 <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-437">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9447e-438">자세한 내용은 <xref:System.Delegate> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9447e-438">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="9447e-439">`UseLikeStatic` 대리자를 호출 하는 인스턴스를 전달 `Example` 에 바인딩되는 `UseLikeInstance` 대리자.</span><span class="sxs-lookup"><span data-stu-id="9447e-439">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="9447e-440">그런 다음 `UseLikeInstance` 둘 다 대리자의 동일한 인스턴스에서 작동할 수 있도록 대리자가 호출 `Example`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-440">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="9447e-441">호출한 후 마다 내부 필드의 값에 변경 내용이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-441">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="9447e-442">마지막으로 `UseLikeInstance` 인스턴스의 대리자가 바인딩된 `DerivedFromxample`, 대리자를 호출 하 여 반복 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-442">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-443">동적 메서드에 메서드 본문이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-443">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-444">
            <paramref name="target" />이 동적 메서드의 첫 번째 매개 변수와 동일한 형식이 아니며 해당 형식에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-444">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="9447e-445">-또는-  <paramref name="delegateType" />의 매개 변수 개수가 잘못되었거나 매개 변수 유형이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-445">-or-  <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-446">동적 메서드에 대해 항상 <see langword="null" />인 메서드를 선언하는 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-446">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-447">항상 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-447">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-448">이 속성은 항상 반환 `null` 동적 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-448">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="9447e-449">동적 메서드를 논리적으로 형식과 연결 하는 경우에 형식으로 선언 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-449">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-450">다음 코드 예제에는 동적 메서드의 선언 형식이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-450">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="9447e-451">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-451">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="9447e-452">매개 변수 목록에서 매개 변수의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-452">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="9447e-453">매개 변수가 첫 번째 매개 변수에 대한 숫자 1부터 시작해서 인덱싱됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-453">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="9447e-454">매개 변수의 특성을 지정하는 <see cref="T:System.Reflection.ParameterAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-454">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="9447e-455">매개 변수의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-455">The name of the parameter.</span>
          </span>
          <span data-ttu-id="9447e-456">이름은 빈 문자열일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-456">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-457">동적 메서드의 매개 변수를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-457">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-458">항상 <see langword="null" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-458">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-459">하는 경우 `position` 가 0 이면는 <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> 메서드 반환 값을 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-459">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="9447e-460">매개 변수 정보 설정 해도 반환 값에는 영향이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-460">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="9447e-461">경우 동적 메서드가 이미 완료 된를 호출 하 여는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 또는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드를 <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> 메서드는 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-461">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="9447e-462">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-462">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-463">다음 코드 예제에는 동적 메서드에 대 한 매개 변수 정보를 정의 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-463">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="9447e-464">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-464">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9447e-465">메서드에 매개 변수가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-465">The method has no parameters.</span>
          </span>
          <span data-ttu-id="9447e-466">-또는-  <paramref name="position" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-466">-or-  <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="9447e-467">-또는-  <paramref name="position" />이 메서드의 매개 변수 개수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-467">-or-  <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-468">메서드에 대한 기본 구현을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-468">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-469">메서드의 기본 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-469">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-470">이 메서드는 항상 현재 반환 `DynamicMethod` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-470">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-471">메서드에 적용된 사용자 지정 특성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-471">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="9447e-472">메서드의 상속 체인을 검색하여 사용자 지정 특성을 찾으려면 <see langword="true" />이고, 현재 메서드만 검사하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-472">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-473">이 메서드에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-473">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-474">이 메서드의 모든 사용자 지정 특성을 나타내는 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-474">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-475">지정 하는 동적 메서드에 대 한 `true` 에 대 한 `inherit` 메서드 형식에서 선언 되지 않았으므로 아무 효과가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-475">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-476">동적 메서드에 사용자 지정 특성이 현재 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-476">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="9447e-477">유일한 특성은 반환 <xref:System.Runtime.CompilerServices.MethodImplAttribute>; 얻을 수 있습니다 메서드 구현 플래그 보다 쉽게 사용 하 여는 <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-477">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="9447e-478">반환할 사용자 지정 특성의 형식을 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-478">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="9447e-479">메서드의 상속 체인을 검색하여 사용자 지정 특성을 찾으려면 <see langword="true" />이고, 현재 메서드만 검사하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-479">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-480">메서드에 적용된 지정된 형식의 사용자 지정 특성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-480">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-481">
            <paramref name="attributeType" /> 형식의 메서드 또는 <paramref name="attributeType" /> 형식에서 파생된 메서드의 특성을 나타내는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-481">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-482">지정 하는 동적 메서드에 대 한 `true` 에 대 한 `inherit` 메서드 형식에서 선언 되지 않았으므로 아무 효과가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-482">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-483">동적 메서드에 사용자 지정 특성이 현재 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-483">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="9447e-484">유일한 특성은 반환 <xref:System.Runtime.CompilerServices.MethodImplAttribute>; 얻을 수 있습니다 메서드 구현 플래그 보다 쉽게 사용 하 여는 <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-484">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9447e-485">
            <paramref name="attributeType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-485">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-486">메타데이터 토큰, 범위 및 MSIL(Microsoft Intermediate Language) 스트림에서 메서드 본문을 생성하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-486">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-487">메타데이터 토큰, 범위 및 MSIL 스트림에서 메서드 본문을 생성하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-487">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-488"><xref:System.Reflection.Emit.DynamicILInfo> 클래스는 관리 되지 않는 코드 생성을 지원 하기 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-488">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9447e-489">비관리 코드를 실행 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-489">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="9447e-490">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-490">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-491">동적 메서드의 본문을 내보내는 데 사용할 수 있는 MSIL 생성기를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-491">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-492">64바이트의 기본 MSIL(Microsoft Intermediate Language) 스트림 크기를 사용하는 메서드에 대한 MSIL 생성기를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-492">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-493">메서드에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-493">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-494">동적 메서드가 완료 된 후에 호출 하 여 합니다 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 또는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드를 하나 더 추가 하려고 MSIL은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-494">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="9447e-495">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-495">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-496">일부 완전 신뢰 시나리오 에서도 동적 메서드에 확인할 수 없는 코드에는 제한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-496">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="9447e-497"><xref:System.Reflection.Emit.DynamicMethod>에 대한 설명에서 "확인" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9447e-497">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-498">다음 코드 예제에서는 두 개의 매개 변수를 사용 하는 동적 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-498">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="9447e-499">이 예제에서는 콘솔에 첫 번째 매개 변수를 인쇄 하는 간단한 함수 본문을 내보내는 및 예제에서는 메서드의 반환 값으로 두 번째 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-499">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="9447e-500">이 예제에서는 대리자를 만들어 메서드를 완료 다른 매개 변수를 사용 하 여 대리자를 호출 하 고 마지막으로 사용 하 여 동적 메서드를 호출 합니다 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-500">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="9447e-501">MSIL 스트림에 바이트의 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-501">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-502">지정된 된 MSIL 스트림 크기를 사용하는 메서드에 대한 MSIL(Microsoft Intermediate Language) 생성기를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-502">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-503">지정된 MSIL 스트림 크기를 가진 메서드의 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-503">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-504">동적 메서드가 완료 된 후에 호출 하 여 합니다 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 또는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드를 하나 더 추가 하려고 MSIL은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-504">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="9447e-505">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-505">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-506">일부 완전 신뢰 시나리오 에서도 동적 메서드에 확인할 수 없는 코드에는 제한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-506">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="9447e-507"><xref:System.Reflection.Emit.DynamicMethod>에 대한 설명에서 "확인" 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9447e-507">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-508">다음 코드 예제에서는이 메서드 오버 로드를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-508">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="9447e-509">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-509">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-510">메서드에 대한 구현 플래그를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-510">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-511">메서드에 대한 구현 플래그를 나타내는 <see cref="T:System.Reflection.MethodImplAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-511">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-512">현재 동적 메서드에 대 한 메서드 구현 특성은 항상 <xref:System.Reflection.MethodImplAttributes.IL> 고 <xref:System.Reflection.MethodImplAttributes.NoInlining>입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-512">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-513">동적 메서드의 매개 변수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-513">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-514">동적 메서드의 매개 변수를 나타내는 <see cref="T:System.Reflection.ParameterInfo" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-514">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-515"><xref:System.Reflection.ParameterInfo> 이 메서드에서 반환 된 개체는 정보 제공 용입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-515">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="9447e-516">사용 된 <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> 매개 변수의 특성을 변경 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-516">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-517">다음 코드 예제에서는 동적 메서드의 매개 변수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-517">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="9447e-518">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-518">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-519">메서드의 로컬 변수가 0으로 초기화되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-519">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-520">메서드의 로컬 변수가 0으로 초기화되었으면 <see langword="true" />이고, 초기화되지 않았으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-520">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9447e-521">기본값은 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-521">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-522">이 속성 설정 된 경우 `true`에 내보낸된 MSIL (Microsoft intermediate language) 로컬 변수의 초기화를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-522">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="9447e-523">로 설정 된 경우 `false`, 로컬 변수가 초기화 되지 및 생성된 된 코드를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-523">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-524">다음 코드 예제는 <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> 동적 메서드는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-524">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="9447e-525">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-525">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="9447e-526">이 매개 변수는 정적이기 때문에 동적 메서드에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-526">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="9447e-527">
            <see langword="null" />을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-527">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="9447e-528">
            <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-528">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9447e-529">리플렉션을 통해 바인딩, 인수 형식 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.Binder" /> 개체의 검색을 가능하게 하는 <see cref="T:System.Reflection.MemberInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-529">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="9447e-530">
            <c>바인더</c>가 <see langword="null" />이면 기본 바인더가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-530">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="9447e-531">자세한 내용은 <see cref="T:System.Reflection.Binder" />을 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-531">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="9447e-532">인수 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-532">An argument list.</span>
          </span>
          <span data-ttu-id="9447e-533">호출되는 메서드의 매개 변수와 숫자, 순서, 형식이 동일한 인수의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-533">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="9447e-534">매개 변수가 없는 경우 이 매개 변수는 <see langword="null" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-534">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="9447e-535">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-535">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="9447e-536">이 매개 변수가 <see langword="null" />이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-536">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="9447e-537">예를 들어, 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 올바르게 변환하는 데 이 정보가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-537">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-538">지정된 문화권 정보를 사용하고 지정된 바인더의 제약 조건에 따라, 지정된 매개 변수를 사용하여 동적 메서드를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-538">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-539">호출된 메서드의 반환 값이 들어 있는 <see cref="T:System.Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-539">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-540">예외를 나열된 하는 것 외에도 호출 코드에서 동적 메서드에 의해 throw 된 예외를 catch 하도록 준비 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-540">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="9447e-541">만든 대리자를 사용 하 여 동적 메서드를 실행 합니다 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 메서드는 사용 하 여 실행할 때 보다 더 효율적는 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-541">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="9447e-542">호출 된 <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> 메서드 또는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 메서드는 동적 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-542">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="9447e-543">추가 매개 변수 정의 수정 하는 등 동적 메서드를 변경 하려고 또는 자세한 MSIL (Microsoft intermediate language)을 내보내는 설정은 무시 됩니다. 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-543">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="9447e-544">모든 동적 메서드는 정적 이므로 `obj` 매개 변수는 항상 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-544">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="9447e-545">동적 메서드가 인스턴스 메서드인 것 처럼 처리를 사용 하 여는 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> 개체 인스턴스를 사용 하는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-545">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="9447e-546">동적 메서드의 매개 변수가 없는 경우, 값 `parameters` 있어야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-546">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="9447e-547">그렇지 않으면 개수, 형식 및 매개 변수 배열에서 요소의 순서는 개수, 형식 및 동적 메서드의 매개 변수의 순서와 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-547">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-548">이 메서드 오버 로드는 <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> 에서 상속 된 메서드 오버 로드는 <xref:System.Reflection.MethodBase> 클래스, 오버 로드를 모두에 게 이전 설명을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-548">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="9447e-549">이 메서드는 권한이 직접 필요 하지 않지만 동적 메서드를 호출 하는 방법에 따라 보안 요구 사항을 충족에서 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-549">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="9447e-550">로 생성 되는 익명으로 호스트 된 동적 메서드의 없는 요구가 수행 됩니다는 예를 들어 합니다 `restrictedSkipVisibility` 매개 변수 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-550">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="9447e-551">반면, 사용 하 여 메서드를 만드는 경우 `restrictedSkipVisibility` 로 설정 `true` 메서드를 더하기 대상 어셈블리의 사용 권한 요청 하면 대상 어셈블리의 숨겨진된 멤버를 액세스할 수 있도록 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-551">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-552">이전에 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)],이 메서드는 데 필요한 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-552">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-553">다음 코드 예제에서는 영어 (미국) 문화권을 사용 하는 정확한 바인딩으로 동적 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-553">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="9447e-554">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-554">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9447e-555">
            <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 호출 규칙이 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-555">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="9447e-556">
            <paramref name="parameters" />에 있는 요소의 수가 동적 메서드에 있는 매개 변수의 수와 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-556">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9447e-557">
            <paramref name="parameters" />에 있는 하나 이상의 요소 형식이 동적 메서드에 있는 해당 매개 변수의 형식과 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-557">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9447e-558">동적 메서드를 모듈과 연결했고 익명으로 호스팅하지 않았으며 이를 생성할 때 <paramref name="skipVisibility" />를 <see langword="false" />로 설정했지만 이 동적 메서드에서 <see langword="public" /> 또는 <see langword="internal" />(Visual Basic의 경우 <see langword="Friend" />)이 아닌 멤버에 액세스하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-558">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="9447e-559">-또는-  동적 메서드가 익명으로 호스팅되고 <paramref name="skipVisibility" /> 값을 <see langword="false" />로 설정하여 만들어졌지만, <see langword="public" />이 아닌 멤버에 액세스합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-559">-or-  The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="9447e-560">-또는-  동적 메서드에 확인할 수 없는 코드가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-560">-or-  The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="9447e-561">
            <see cref="T:System.Reflection.Emit.DynamicMethod" />에 대한 설명에서 "확인" 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-561">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="9447e-562">검색할 사용자 지정 특성의 형식을 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-562">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="9447e-563">메서드의 상속 체인을 검색하여 사용자 지정 특성을 찾으려면 <see langword="true" />이고, 현재 메서드만 검사하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-563">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9447e-564">지정된 사용자 지정 특성 유형이 정의되었는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-564">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-565">지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-565">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-566">지정 하는 동적 메서드에 대 한 `true` 에 대 한 `inherit` 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-566">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="9447e-567">동적 메서드는 상속 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-567">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9447e-568">동적 메서드에 사용자 지정 특성이 현재 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-568">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-569">현재 동적 메서드가 보안에 중요하거나 보안 안전에 중요하여 중요한 작업을 수행할 수 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-569">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-570">현재 동적 메서드가 보안에 중요한 형식이거나 보안 안전에 중요한 형식이면 <see langword="true" />이고, 투명 형식이면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-570">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-571">합니다 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, 및 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> 속성의 CLR (공용 언어 런타임)에 의해 결정 된 동적 메서드의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-571">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9447e-572">이러한 속성의 조합도 표에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-572">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9447e-573">보안 수준</span><span class="sxs-lookup"><span data-stu-id="9447e-573">Security level</span></span>|<span data-ttu-id="9447e-574">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-574">IsSecurityCritical</span></span>|<span data-ttu-id="9447e-575">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-575">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9447e-576">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9447e-576">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9447e-577">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-577">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9447e-578">안전 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-578">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9447e-579">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-579">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9447e-580">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-580">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="9447e-581">동적 메서드의 투명도와 연결 된 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-581">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="9447e-582">동적 메서드가 모듈 대신 형식을 사용 하 여 연결 된 경우 해당 투명도 형식을 포함 하는 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-582">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="9447e-583">동적 메서드는 관련 된 모듈에 대 한 투명도 할당 보안 주석을 갖지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-583">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="9447e-584">익명으로 호스트 된 동적 메서드는 포함 하는 시스템 제공 모듈 투명 하기 때문에 투명 하 고, 항상입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-584">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="9447e-585">투명도 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된) 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드는 다음 표에 설명 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-585">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="9447e-586">어셈블리 주석</span><span class="sxs-lookup"><span data-stu-id="9447e-586">Assembly annotation</span></span>|<span data-ttu-id="9447e-587">수준 1 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-587">Level 1 transparency</span></span>|<span data-ttu-id="9447e-588">수준 2 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-588">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="9447e-589">완전히 투명 하 게</span><span class="sxs-lookup"><span data-stu-id="9447e-589">Fully transparent</span></span>|<span data-ttu-id="9447e-590">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-590">Transparent</span></span>|<span data-ttu-id="9447e-591">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-591">Transparent</span></span>|  
    |<span data-ttu-id="9447e-592">완벽 하 게 중요 한</span><span class="sxs-lookup"><span data-stu-id="9447e-592">Fully critical</span></span>|<span data-ttu-id="9447e-593">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-593">Critical</span></span>|<span data-ttu-id="9447e-594">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-594">Critical</span></span>|  
    |<span data-ttu-id="9447e-595">혼합된 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-595">Mixed transparency</span></span>|<span data-ttu-id="9447e-596">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-596">Transparent</span></span>|<span data-ttu-id="9447e-597">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-597">Transparent</span></span>|  
    |<span data-ttu-id="9447e-598">보안 중립적</span><span class="sxs-lookup"><span data-stu-id="9447e-598">Security-agnostic</span></span>|<span data-ttu-id="9447e-599">안전에 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-599">Safe-critical</span></span>|<span data-ttu-id="9447e-600">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-600">Critical</span></span>|  
  
     <span data-ttu-id="9447e-601">예를 들어 2의 혼합된 투명도 수준에 mscorlib.dll에 있는 형식을 사용 하 여 동적 메서드를 연결 하는 경우 동적 메서드는 투명 및 중요 한 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-601">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="9447e-602">투명도 수준에 대 한 자세한 내용은 [보안 투명 코드, 수준 1](~/docs/framework/misc/security-transparent-code-level-1.md) 하 고 [보안 투명 코드, 수준 2](~/docs/framework/misc/security-transparent-code-level-2.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-602">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9447e-603">보안에 종속 되지 않으므로, System.dll과 같은 신뢰할 수 있는 수준 1 어셈블리에 모듈을 사용 하 여 동적 메서드를 연결 하는 경우에 신뢰 권한 상승이 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-603">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="9447e-604">동적 메서드를 호출 하는 코드의 권한 부여 집합 (즉, 완전 신뢰), System.dll의 권한 집합이 포함 되어 있지 않으면 <xref:System.Security.SecurityException> 동적 메서드를 호출할 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-604">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="9447e-605">투명도 부분적으로 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드의 어셈블리를 로드 하는 방법에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-605">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="9447e-606">어셈블리 (예를 들어 샌드박스 응용 프로그램 도메인)으로 부분 신뢰를 사용 하 여 로드 된 경우 런타임은 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-606">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9447e-607">어셈블리 및 모든 해당 형식 및 멤버에 동적 메서드를 포함 하 여 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-607">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="9447e-608">런타임 (예를 들어, 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전 신뢰 여 부분 신뢰 어셈블리를 로드 하는 경우에 보안 주석에 주의 지불 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-608">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9447e-609">이 경우 런타임은 어셈블리의 주석에 따라 메서드에 대 한 투명도 동적 메서드를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-609">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="9447e-610">리플렉션에 대 한 자세한 내용은 내보내기 및 투명도 참조 하세요 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-610">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="9447e-611">투명성에 대 한 정보를 참조 하세요 [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-611">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-612">동적 메서드에는 메서드 본문이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-612">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-613">현재 동적 메서드가 현재 신뢰 수준에서 보안 안전에 중요한 형식인지, 즉 중요한 작업을 수행할 수 있고 투명 코드로 액세스할 수 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-613">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-614">동적 메서드가 현재 신뢰 수준에서 보안 안전에 중요하면 <see langword="true" />이고, 보안에 중요하거나 투명하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-614">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-615">합니다 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, 및 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> 속성의 CLR (공용 언어 런타임)에 의해 결정 된 동적 메서드의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-615">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9447e-616">이러한 속성의 조합도 표에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-616">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9447e-617">보안 수준</span><span class="sxs-lookup"><span data-stu-id="9447e-617">Security level</span></span>|<span data-ttu-id="9447e-618">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-618">IsSecurityCritical</span></span>|<span data-ttu-id="9447e-619">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-619">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9447e-620">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9447e-620">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9447e-621">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-621">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9447e-622">안전 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-622">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9447e-623">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-623">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9447e-624">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-624">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="9447e-625">동적 메서드의 투명도와 연결 된 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-625">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="9447e-626">동적 메서드가 모듈 대신 형식을 사용 하 여 연결 된 경우 해당 투명도 형식을 포함 하는 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-626">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="9447e-627">동적 메서드는 관련 된 모듈에 대 한 투명도 할당 보안 주석을 갖지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-627">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="9447e-628">익명으로 호스트 된 동적 메서드는 포함 하는 시스템 제공 모듈 투명 하기 때문에 투명 하 고, 항상입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-628">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="9447e-629">투명도 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된) 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드는 다음 표에 설명 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-629">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="9447e-630">어셈블리 주석</span><span class="sxs-lookup"><span data-stu-id="9447e-630">Assembly annotation</span></span>|<span data-ttu-id="9447e-631">수준 1 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-631">Level 1 transparency</span></span>|<span data-ttu-id="9447e-632">수준 2 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-632">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="9447e-633">완전히 투명 하 게</span><span class="sxs-lookup"><span data-stu-id="9447e-633">Fully transparent</span></span>|<span data-ttu-id="9447e-634">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-634">Transparent</span></span>|<span data-ttu-id="9447e-635">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-635">Transparent</span></span>|  
    |<span data-ttu-id="9447e-636">완벽 하 게 중요 한</span><span class="sxs-lookup"><span data-stu-id="9447e-636">Fully critical</span></span>|<span data-ttu-id="9447e-637">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-637">Critical</span></span>|<span data-ttu-id="9447e-638">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-638">Critical</span></span>|  
    |<span data-ttu-id="9447e-639">혼합된 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-639">Mixed transparency</span></span>|<span data-ttu-id="9447e-640">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-640">Transparent</span></span>|<span data-ttu-id="9447e-641">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-641">Transparent</span></span>|  
    |<span data-ttu-id="9447e-642">보안 중립적</span><span class="sxs-lookup"><span data-stu-id="9447e-642">Security-agnostic</span></span>|<span data-ttu-id="9447e-643">안전에 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-643">Safe-critical</span></span>|<span data-ttu-id="9447e-644">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-644">Critical</span></span>|  
  
     <span data-ttu-id="9447e-645">예를 들어 2의 혼합된 투명도 수준에 mscorlib.dll에 있는 형식을 사용 하 여 동적 메서드를 연결 하는 경우 동적 메서드는 투명 및 중요 한 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-645">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="9447e-646">투명도 수준에 대 한 자세한 내용은 [보안 투명 코드, 수준 1](~/docs/framework/misc/security-transparent-code-level-1.md) 하 고 [보안 투명 코드, 수준 2](~/docs/framework/misc/security-transparent-code-level-2.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-646">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9447e-647">보안에 종속 되지 않으므로, System.dll과 같은 신뢰할 수 있는 수준 1 어셈블리에 모듈을 사용 하 여 동적 메서드를 연결 하는 경우에 신뢰 권한 상승이 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-647">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="9447e-648">동적 메서드를 호출 하는 코드의 권한 부여 집합 (즉, 완전 신뢰), System.dll의 권한 집합이 포함 되어 있지 않으면 <xref:System.Security.SecurityException> 동적 메서드를 호출할 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-648">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="9447e-649">투명도 부분적으로 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드의 어셈블리를 로드 하는 방법에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-649">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="9447e-650">어셈블리 (예를 들어 샌드박스 응용 프로그램 도메인)으로 부분 신뢰를 사용 하 여 로드 된 경우 런타임은 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-650">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9447e-651">어셈블리 및 모든 해당 형식 및 멤버에 동적 메서드를 포함 하 여 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-651">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="9447e-652">런타임 (예를 들어, 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전 신뢰 여 부분 신뢰 어셈블리를 로드 하는 경우에 보안 주석에 주의 지불 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-652">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9447e-653">이 경우 런타임은 어셈블리의 주석에 따라 메서드에 대 한 투명도 동적 메서드를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-653">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="9447e-654">리플렉션에 대 한 자세한 내용은 내보내기 및 투명도 참조 하세요 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-654">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="9447e-655">투명성에 대 한 정보를 참조 하세요 [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-655">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-656">동적 메서드에는 메서드 본문이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-656">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-657">현재 동적 메서드가 현재 신뢰 수준에서 투명하여 중요한 작업을 수행할 수 없는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-657">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-658">동적 메서드가 현재 신뢰 수준에서 보안에 투명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-658">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-659">합니다 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, 및 <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> 속성의 CLR (공용 언어 런타임)에 의해 결정 된 동적 메서드의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-659">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9447e-660">이러한 속성의 조합도 표에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-660">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9447e-661">보안 수준</span><span class="sxs-lookup"><span data-stu-id="9447e-661">Security level</span></span>|<span data-ttu-id="9447e-662">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-662">IsSecurityCritical</span></span>|<span data-ttu-id="9447e-663">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9447e-663">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9447e-664">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9447e-664">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9447e-665">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-665">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9447e-666">안전 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-666">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9447e-667">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-667">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9447e-668">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-668">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="9447e-669">동적 메서드의 투명도와 연결 된 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-669">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="9447e-670">동적 메서드가 모듈 대신 형식을 사용 하 여 연결 된 경우 해당 투명도 형식을 포함 하는 모듈에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-670">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="9447e-671">동적 메서드는 관련 된 모듈에 대 한 투명도 할당 보안 주석을 갖지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-671">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="9447e-672">익명으로 호스트 된 동적 메서드는 포함 하는 시스템 제공 모듈 투명 하기 때문에 투명 하 고, 항상입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-672">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="9447e-673">투명도 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된) 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드는 다음 표에 설명 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-673">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="9447e-674">어셈블리 주석</span><span class="sxs-lookup"><span data-stu-id="9447e-674">Assembly annotation</span></span>|<span data-ttu-id="9447e-675">수준 1 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-675">Level 1 transparency</span></span>|<span data-ttu-id="9447e-676">수준 2 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-676">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="9447e-677">완전히 투명 하 게</span><span class="sxs-lookup"><span data-stu-id="9447e-677">Fully transparent</span></span>|<span data-ttu-id="9447e-678">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-678">Transparent</span></span>|<span data-ttu-id="9447e-679">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-679">Transparent</span></span>|  
    |<span data-ttu-id="9447e-680">완벽 하 게 중요 한</span><span class="sxs-lookup"><span data-stu-id="9447e-680">Fully critical</span></span>|<span data-ttu-id="9447e-681">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-681">Critical</span></span>|<span data-ttu-id="9447e-682">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-682">Critical</span></span>|  
    |<span data-ttu-id="9447e-683">혼합된 투명도</span><span class="sxs-lookup"><span data-stu-id="9447e-683">Mixed transparency</span></span>|<span data-ttu-id="9447e-684">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-684">Transparent</span></span>|<span data-ttu-id="9447e-685">투명</span><span class="sxs-lookup"><span data-stu-id="9447e-685">Transparent</span></span>|  
    |<span data-ttu-id="9447e-686">보안 중립적</span><span class="sxs-lookup"><span data-stu-id="9447e-686">Security-agnostic</span></span>|<span data-ttu-id="9447e-687">안전에 중요</span><span class="sxs-lookup"><span data-stu-id="9447e-687">Safe-critical</span></span>|<span data-ttu-id="9447e-688">위험</span><span class="sxs-lookup"><span data-stu-id="9447e-688">Critical</span></span>|  
  
     <span data-ttu-id="9447e-689">예를 들어 2의 혼합된 투명도 수준에 mscorlib.dll에 있는 형식을 사용 하 여 동적 메서드를 연결 하는 경우 동적 메서드는 투명 및 중요 한 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-689">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="9447e-690">투명도 수준에 대 한 자세한 내용은 [보안 투명 코드, 수준 1](~/docs/framework/misc/security-transparent-code-level-1.md) 하 고 [보안 투명 코드, 수준 2](~/docs/framework/misc/security-transparent-code-level-2.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-690">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9447e-691">보안에 종속 되지 않으므로, System.dll과 같은 신뢰할 수 있는 수준 1 어셈블리에 모듈을 사용 하 여 동적 메서드를 연결 하는 경우에 신뢰 권한 상승이 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-691">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="9447e-692">동적 메서드를 호출 하는 코드의 권한 부여 집합 (즉, 완전 신뢰), System.dll의 권한 집합이 포함 되어 있지 않으면 <xref:System.Security.SecurityException> 동적 메서드를 호출할 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-692">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="9447e-693">투명도 부분적으로 신뢰할 수 있는 어셈블리와 연결 된 동적 메서드의 어셈블리를 로드 하는 방법에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-693">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="9447e-694">어셈블리 (예를 들어 샌드박스 응용 프로그램 도메인)으로 부분 신뢰를 사용 하 여 로드 된 경우 런타임은 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-694">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9447e-695">어셈블리 및 모든 해당 형식 및 멤버에 동적 메서드를 포함 하 여 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-695">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="9447e-696">런타임 (예를 들어, 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전 신뢰 여 부분 신뢰 어셈블리를 로드 하는 경우에 보안 주석에 주의 지불 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-696">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9447e-697">이 경우 런타임은 어셈블리의 주석에 따라 메서드에 대 한 투명도 동적 메서드를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-697">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="9447e-698">리플렉션에 대 한 자세한 내용은 내보내기 및 투명도 참조 하세요 [리플렉션 내보내기의 보안 문제점](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-698">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="9447e-699">투명성에 대 한 정보를 참조 하세요 [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-699">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-700">동적 메서드에는 메서드 본문이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-700">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-701">동적 메서드에는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-701">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-702">동적 메서드에는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-702">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9447e-703">동적 메서드에는 허용되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-703">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-704">동적 메서드가 논리적으로 연결되는 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-704">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-705">현재 동적 메서드가 연결된 <see cref="T:System.Reflection.Module" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-705">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-706">모듈 동적 메서드를 만들 때 지정 된 경우이 속성이 해당 모듈을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-706">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="9447e-707">동적 메서드를 만들 때 소유자 형식이 지정 된,이 속성 형식임을 포함 하는 모듈을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-707">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-708">다음 코드 예제는 <xref:System.Reflection.Emit.DynamicMethod.Module%2A> 동적 메서드는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-708">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="9447e-709">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-709">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-710">동적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-710">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-711">메서드의 단순한 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-711">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9447e-712">동적 메서드 이름 하는 데 필요한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-712">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-713">다음 코드 예제에서는 동적 메서드 이름을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-713">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="9447e-714">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-714">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-715">메서드를 얻기 위해 리플렉션에 사용된 클래스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-715">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-716">항상 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-716">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-717">이 속성은 항상 반환 `null` 동적 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-717">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-718">다음 코드 예제에서는 반영된 형식의 동적 메서드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-718">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="9447e-719">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-719">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-720">동적 메서드의 반환 매개 변수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-720">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-721">항상 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-721">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-722">이 속성은 항상 반환 `null` 동적 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-722">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-723">동적 메서드에 대한 반환 값 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-723">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-724">현재 메서드의 반환 값 형식을 나타내는 <see cref="T:System.Type" />입니다. 메서드에 반환 형식이 없으면 <see cref="T:System.Void" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-724">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-725">하는 경우 `null` 동적 메서드 생성 된이 속성을 반환 하는 경우 반환 형식에 대 한 지정 된 <xref:System.Void?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-725">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-726">다음 코드 예제에는 동적 메서드의 반환 형식 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-726">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="9447e-727">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-727">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9447e-728">동적 메서드에 대한 반환 형식의 사용자 지정 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-728">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9447e-729">동적 메서드의 반환 형식에 대한 사용자 지정 특성을 나타내는 <see cref="T:System.Reflection.ICustomAttributeProvider" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-729">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-730">사용자 지정 특성의 배열을 반환 하 여 동적 메서드의 반환 형식에 사용자 지정 특성이 지원 되지 않습니다는 <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> 메서드는 항상 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-730">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-731">다음 코드 예제에서는 동적 메서드 반환 형식의 사용자 지정 특성을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-731">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="9447e-732">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-732">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9447e-733">문자열로 표현된 메서드의 서명을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-733">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9447e-734">메서드 시그니처를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9447e-734">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9447e-735">서명이 있는 경우 형식과 메서드 이름을 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-735">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="9447e-736">매개 변수 이름이 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-736">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9447e-737">다음 코드 예제는 <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> 동적 메서드의 메서드.</span><span class="sxs-lookup"><span data-stu-id="9447e-737">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="9447e-738">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Emit.DynamicMethod> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9447e-738">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>