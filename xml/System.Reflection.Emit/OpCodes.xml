<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a136bc8fb48fe619f1be21928afbfcd9094d7463" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30474587" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c233f-101">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> 같은 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" /> 클래스 멤버를 사용한 내보내기 작업에 사용되는 MSIL(Microsoft Intermediate Language) 명령의 필드 표현을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c233f-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-102">에 대 한 자세한 설명은 멤버 opcode 공용 언어 인프라 (CLI) 설명서, 특히 "III 파티션: CIL 명령 집합" 및 "II: 메타 데이터 정의 및 의미"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="c233f-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="c233f-103">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c233f-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c233f-104">다음 예제에서는 사용 하 여 동적 메서드 생성 <xref:System.Reflection.Emit.ILGenerator> 를 내보내는 `OpCodes` 에 <xref:System.Reflection.Emit.MethodBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-105">두 개 값을 더하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-105">Adds two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-106">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-107">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-107">Format</span></span>|<span data-ttu-id="c233f-108">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-108">Assembly Format</span></span>|<span data-ttu-id="c233f-109">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-110">58</span><span class="sxs-lookup"><span data-stu-id="c233f-110">58</span></span>|<span data-ttu-id="c233f-111">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-111">add</span></span>|<span data-ttu-id="c233f-112">새 숫자 값을 반환 하는 두 개의 숫자 값을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="c233f-113">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-114">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-115">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-116">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 에 추가 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-117">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-118">정수 연산에 오버플로 인식 되지 않습니다 (적절 한 오버플로 처리를 위해 참조 <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="c233f-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="c233f-119">정수 추가 포화 되지 않고 래핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="c233f-120">예를 들어 8 비트 정수를 가정 여기서 `value1` 255 자로 설정 및 `value2` 설정 되어 1로 래핑된 결과 256이 아닌 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="c233f-121">부동 소수점 오버플로가 반환 `+inf` (`PositiveInfinity`) 또는 `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="c233f-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="c233f-122">아래 표에 가능한 피연산자 형식과 해당 결과 데이터 형식을 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="c233f-123">특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 및 `float`; `int32` 및 `int64`),이 잘못 된 언어 MSIL (Microsoft Intermediate) 하 고 오류를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="c233f-124">피연산자</span><span class="sxs-lookup"><span data-stu-id="c233f-124">operand</span></span>|<span data-ttu-id="c233f-125">value1 유형</span><span class="sxs-lookup"><span data-stu-id="c233f-125">value1 type</span></span>|<span data-ttu-id="c233f-126">value2 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-126">value2 type</span></span>|<span data-ttu-id="c233f-127">결과 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="c233f-128">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="c233f-129">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="c233f-130">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="c233f-131">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="c233f-132">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="c233f-133">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="c233f-134">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="c233f-135">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="c233f-136">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="c233f-137">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="c233f-138">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="c233f-139">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="c233f-140">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="c233f-141">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="c233f-142">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-144">두 정수를 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-145">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-146">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-146">Format</span></span>|<span data-ttu-id="c233f-147">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-147">Assembly Format</span></span>|<span data-ttu-id="c233f-148">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-149">D6</span><span class="sxs-lookup"><span data-stu-id="c233f-149">D6</span></span>|<span data-ttu-id="c233f-150">add.ovf</span><span class="sxs-lookup"><span data-stu-id="c233f-150">add.ovf</span></span>|<span data-ttu-id="c233f-151">오버플로 검사 하는 부호 있는 정수 값을 두 개를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-152">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-153">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-154">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-155">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 에 추가 `value2` 오버플로 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="c233f-156">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-157"><xref:System.OverflowException> 결과 형식으로 결과 나타내지 않는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-158">부호 있는 정수에 대 한이 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="c233f-159">부동 소수점 값에 대 한 사용 <xref:System.Reflection.Emit.OpCodes.Add>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="c233f-160">아래 표에 가능한 피연산자 형식과 해당 결과 데이터 형식을 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="c233f-161">특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 및 `float`; `int32` 및 `int64`), 잘못 된 언어 MSIL (Microsoft Intermediate) 명령이 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="c233f-162">피연산자</span><span class="sxs-lookup"><span data-stu-id="c233f-162">operand</span></span>|<span data-ttu-id="c233f-163">value1 유형</span><span class="sxs-lookup"><span data-stu-id="c233f-163">value1 type</span></span>|<span data-ttu-id="c233f-164">value2 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-164">value2 type</span></span>|<span data-ttu-id="c233f-165">결과 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="c233f-166">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="c233f-167">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="c233f-168">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="c233f-169">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="c233f-170">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="c233f-171">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="c233f-172">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="c233f-173">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="c233f-174">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="c233f-175">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="c233f-176">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="c233f-177">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="c233f-178">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="c233f-179">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="c233f-180">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-182">부호 없는 두 정수 값을 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-183">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-184">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-184">Format</span></span>|<span data-ttu-id="c233f-185">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-185">Assembly Format</span></span>|<span data-ttu-id="c233f-186">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-187">D7</span><span class="sxs-lookup"><span data-stu-id="c233f-187">D7</span></span>|<span data-ttu-id="c233f-188">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="c233f-188">add.ovf.un</span></span>|<span data-ttu-id="c233f-189">오버플로 검사 하는 두 개의 부호 없는 정수 값을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-190">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-191">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-192">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-193">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 에 추가 `value2` 오버플로 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="c233f-194">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-195"><xref:System.OverflowException> 결과 형식으로 결과 나타내지 않는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-196">부호 있는 정수에 대 한이 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="c233f-197">부동 소수점 값에 대 한 사용 <xref:System.Reflection.Emit.OpCodes.Add>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="c233f-198">아래 표에 가능한 피연산자 형식과 해당 결과 데이터 형식을 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="c233f-199">특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 및 `float`; `int32` 및 `int64`), 잘못 된 언어 MSIL (Microsoft Intermediate) 명령이 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="c233f-200">피연산자</span><span class="sxs-lookup"><span data-stu-id="c233f-200">operand</span></span>|<span data-ttu-id="c233f-201">value1 유형</span><span class="sxs-lookup"><span data-stu-id="c233f-201">value1 type</span></span>|<span data-ttu-id="c233f-202">value2 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-202">value2 type</span></span>|<span data-ttu-id="c233f-203">결과 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="c233f-204">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="c233f-205">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="c233f-206">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="c233f-207">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="c233f-208">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="c233f-209">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="c233f-210">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="c233f-211">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="c233f-212">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="c233f-213">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="c233f-214">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="c233f-215">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="c233f-216">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="c233f-217">추가</span><span class="sxs-lookup"><span data-stu-id="c233f-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="c233f-218">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-220">두 값의 비트 AND를 계산하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-221">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-222">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-222">Format</span></span>|<span data-ttu-id="c233f-223">명령</span><span class="sxs-lookup"><span data-stu-id="c233f-223">Instruction</span></span>|<span data-ttu-id="c233f-224">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="c233f-225">5F</span><span class="sxs-lookup"><span data-stu-id="c233f-225">5F</span></span>|<span data-ttu-id="c233f-226">를 갖는</span><span class="sxs-lookup"><span data-stu-id="c233f-226">and</span></span>|<span data-ttu-id="c233f-227">두 정수 값의 비트 AND를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="c233f-228">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-229">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-230">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-231">`value1` 및 `value2` 스택에서 팝 되 고 두 값의 비트 AND를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="c233f-232">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-233">`and` 명령은 스택에서 맨 위의 두 값의 비트 AND를 계산 하 고 결과 스택에 남겨 둡니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="c233f-234">`And` 정수 관련 작업이입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="c233f-235">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `and` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-237">현재 메서드의 인수 목록에 대한 관리되지 않는 포인터를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-237">Returns an unmanaged pointer to the argument list of the current method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-238">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-239">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-239">Format</span></span>|<span data-ttu-id="c233f-240">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-240">Assembly Format</span></span>|<span data-ttu-id="c233f-241">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="c233f-242">FE 00</span></span>|<span data-ttu-id="c233f-243">arglist</span><span class="sxs-lookup"><span data-stu-id="c233f-243">arglist</span></span>|<span data-ttu-id="c233f-244">현재 메서드에 대 한 인수 목록 핸들을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="c233f-245">계산 스택 동작이 없음이 작업에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="c233f-246">`arglist` 불투명 핸들을 반환 하는 명령 (형식의 관리 되지 않는 포인터 `native int`) 나타내는 현재 메서드의 인수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="c233f-247">이 핸들은 현재 메서드의 기간 동안에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="c233f-248">그러나 현재 방법은 컨트롤의 스레드에 대해으로 메서드를 다른 메서드에 핸들을 전달할 수, 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="c233f-249">실행할 수 있습니다는 `arglist` 가변 개수의 인수를 사용 하는 메서드 내에서 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="c233f-250">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `arglist` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-252">두 값이 같으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-252">Transfers control to a target instruction if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-253">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-254">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-254">Format</span></span>|<span data-ttu-id="c233f-255">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-255">Assembly Format</span></span>|<span data-ttu-id="c233f-256">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-257">3B < `int32` ></span></span>|<span data-ttu-id="c233f-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-258">beq `target`</span></span>|<span data-ttu-id="c233f-259">오프셋에서 대상 명령으로 분기 `target` 두 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="c233f-260">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-261">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-262">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-263">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-264">`beq` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 같으면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="c233f-265">효과 수행 하는 것과 같습니다는 `ceq` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-266">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-267">가능한 피연산자 종류는 다음과 같이 캡슐화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="c233f-268">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="c233f-269">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다 (이러한 전송을 사용 해야 하 게 제한 되므로 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 대신).</span><span class="sxs-lookup"><span data-stu-id="c233f-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="c233f-270">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `beq` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-271">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-272">두 값이 같으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-272">Transfers control to a target instruction (short form) if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-273">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-274">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-274">Format</span></span>|<span data-ttu-id="c233f-275">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-275">Assembly Format</span></span>|<span data-ttu-id="c233f-276">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-277">2E < `int8` ></span></span>|<span data-ttu-id="c233f-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-278">beq.s `target`</span></span>|<span data-ttu-id="c233f-279">오프셋에서 대상 명령으로 분기 `target` 같으면, 약식</span><span class="sxs-lookup"><span data-stu-id="c233f-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="c233f-280">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-281">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-282">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-283">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-284">`beq.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 같으면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="c233f-285">효과 수행 하는 것과 같습니다는 `ceq` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-286">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-287">가능한 피연산자 종류는 다음과 같이 캡슐화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="c233f-288">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="c233f-289">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다 (이러한 전송을 사용 해야 하 게 제한 되므로 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 대신).</span><span class="sxs-lookup"><span data-stu-id="c233f-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="c233f-290">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `beq.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-291">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-292">첫째 값이 둘째 값보다 크거나 같으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-293">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-294">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-294">Format</span></span>|<span data-ttu-id="c233f-295">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-295">Assembly Format</span></span>|<span data-ttu-id="c233f-296">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="c233f-297">3C `<int32>`</span></span>|<span data-ttu-id="c233f-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-298">bge `target`</span></span>|<span data-ttu-id="c233f-299">첫 번째 값이 둘째 값 보다 크거나 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="c233f-300">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-301">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-302">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-303">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크거나 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-304">`bge` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같으면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="c233f-305">결과 동일을 수행 하는 `clt.un` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-306">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-307">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-308">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-309">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-310">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-311">첫째 값이 둘째 값보다 크거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-312">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-313">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-313">Format</span></span>|<span data-ttu-id="c233f-314">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-314">Assembly Format</span></span>|<span data-ttu-id="c233f-315">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="c233f-316">2F `<int8>`</span></span>|<span data-ttu-id="c233f-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-317">bge.s `target`</span></span>|<span data-ttu-id="c233f-318">약식 두 번째 값 보다 크거나 같은 경우 첫 번째 값이 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="c233f-319">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-320">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-321">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-322">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크거나 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-323">`bge.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같으면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="c233f-324">결과 동일을 수행 하는 `clt.un` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-325">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-326">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-327">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-328">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-329">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-330">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-331">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-332">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-332">Format</span></span>|<span data-ttu-id="c233f-333">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-333">Assembly Format</span></span>|<span data-ttu-id="c233f-334">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="c233f-335">41 `<int32>`</span></span>|<span data-ttu-id="c233f-336">bge.un `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-336">bge.un `target`</span></span>|<span data-ttu-id="c233f-337">첫 번째 값이 두 번째 값 (부호 없는 값) 보다 크거나 같은 경우 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-338">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-339">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-340">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-341">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크거나 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-342">`bge.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같으면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-343">결과 동일을 수행 하는 `clt` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-344">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-345">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-346">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-347">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-348">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-349">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-350">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-351">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-351">Format</span></span>|<span data-ttu-id="c233f-352">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-352">Assembly Format</span></span>|<span data-ttu-id="c233f-353">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-354">34 < `int8` ></span></span>|<span data-ttu-id="c233f-355">bge.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-355">bge.un.s `target`</span></span>|<span data-ttu-id="c233f-356">약식 두 번째 값 (부호 없는 값) 보다 크거나 같은 경우 첫 번째 값이 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="c233f-357">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-358">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-359">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-360">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크거나 같으면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-361">`bge.un.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같으면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-362">결과 동일을 수행 하는 `clt` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-363">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-364">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-365">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-366">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-367">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-368">첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-368">Transfers control to a target instruction if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-369">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-370">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-370">Format</span></span>|<span data-ttu-id="c233f-371">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-371">Assembly Format</span></span>|<span data-ttu-id="c233f-372">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-373">3D < `int32` ></span></span>|<span data-ttu-id="c233f-374">bgt의 경우 `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-374">bgt `target`</span></span>|<span data-ttu-id="c233f-375">지정 된 오프셋 첫 번째 값이 둘째 값 보다 크면 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="c233f-376">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-377">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-378">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-379">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-380">`bgt` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="c233f-381">결과 동일을 수행 하는 `cgt` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-382">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-383">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-384">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-385">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-386">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-387">첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-388">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-389">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-389">Format</span></span>|<span data-ttu-id="c233f-390">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-390">Assembly Format</span></span>|<span data-ttu-id="c233f-391">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-392">30 < `int8` ></span></span>|<span data-ttu-id="c233f-393">bgt.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-393">bgt.s `target`</span></span>|<span data-ttu-id="c233f-394">첫 번째 값 약식 두 번째 값 보다 큰 경우 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="c233f-395">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-396">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-397">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-398">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-399">`bgt.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="c233f-400">결과 동일을 수행 하는 `cgt` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-401">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-402">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-403">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-404">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-405">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-406">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-407">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-408">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-408">Format</span></span>|<span data-ttu-id="c233f-409">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-409">Assembly Format</span></span>|<span data-ttu-id="c233f-410">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-411">42 < `int32` ></span></span>|<span data-ttu-id="c233f-412">bgt.un `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-412">bgt.un `target`</span></span>|<span data-ttu-id="c233f-413">지정된 된 오프셋 첫 번째 값이 두 번째 값 (부호 없는 값) 보다 크면 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-414">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-415">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-416">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-417">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-418">`bgt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-419">결과 동일을 수행 하는 `cgt.un` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-420">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-421">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-422">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-423">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-424">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-425">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-426">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-427">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-427">Format</span></span>|<span data-ttu-id="c233f-428">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-428">Assembly Format</span></span>|<span data-ttu-id="c233f-429">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-430">35 < `int8` ></span></span>|<span data-ttu-id="c233f-431">bgt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-431">bgt.un.s `target`</span></span>|<span data-ttu-id="c233f-432">첫 번째 값 약식 두 번째 값 (부호 없는 값) 보다 큰 경우 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="c233f-433">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-434">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-435">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-436">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 크면 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-437">`bgt.un.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-438">결과 동일을 수행 하는 `cgt.un` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-439">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-440">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-441">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-442">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-443">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-444">첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-445">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-446">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-446">Format</span></span>|<span data-ttu-id="c233f-447">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-447">Assembly Format</span></span>|<span data-ttu-id="c233f-448">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="c233f-449">3E `<int32>`</span></span>|<span data-ttu-id="c233f-450">배포용 `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-450">ble `target`</span></span>|<span data-ttu-id="c233f-451">첫 번째 값이 둘째 값 보다 작거나 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="c233f-452">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-453">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-454">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-455">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 작거나 같음 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-456">`ble` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="c233f-457">결과 동일을 수행 하는 `cgt` 명령 (`cgt.un` float에 대 한) 이어서는 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-458">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-459">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-460">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-461">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-462">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-463">첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-464">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-465">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-465">Format</span></span>|<span data-ttu-id="c233f-466">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-466">Assembly Format</span></span>|<span data-ttu-id="c233f-467">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="c233f-468">31 `<int8>`</span></span>|<span data-ttu-id="c233f-469">ble.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-469">ble.s `target`</span></span>|<span data-ttu-id="c233f-470">첫 번째 값이 약식 두 번째 값 보다 작거나 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="c233f-471">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-472">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-473">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-474">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 작거나 같음 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-475">`ble.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="c233f-476">결과 동일을 수행 하는 `cgt` 명령 (`cgt.un` float에 대 한) 명령 다음에`brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-477">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-478">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-479">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-480">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-481">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-482">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-483">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-484">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-484">Format</span></span>|<span data-ttu-id="c233f-485">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-485">Assembly Format</span></span>|<span data-ttu-id="c233f-486">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="c233f-487">43 `<int32>`</span></span>|<span data-ttu-id="c233f-488">경우 `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-488">ble.un `target`</span></span>|<span data-ttu-id="c233f-489">첫 번째 값이 두 번째 값 (부호 없는 값) 보다 작거나 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-490">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-491">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-492">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-493">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 작거나 같음 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-494">`ble.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-495">결과 동일을 수행 하는 `cgt.un` 명령 (`cgt` float에 대 한) 이어서는 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-496">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-497">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-498">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-499">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-500">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-501">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-502">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-503">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-503">Format</span></span>|<span data-ttu-id="c233f-504">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-504">Assembly Format</span></span>|<span data-ttu-id="c233f-505">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="c233f-506">36 `<int8>`</span></span>|<span data-ttu-id="c233f-507">ble.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-507">ble.un.s `target`</span></span>|<span data-ttu-id="c233f-508">첫 번째 값이 두 번째 값 (부호 없는 값) 약식 보다 작거나 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="c233f-509">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-510">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-511">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-512">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 보다 작거나 같음 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-513">`ble.un.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-514">결과 동일을 수행 하는 `cgt.un` 명령 (`cgt` float에 대 한) 이어서는 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-515">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-516">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-517">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-518">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-519">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-520">첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-520">Transfers control to a target instruction if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-521">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-522">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-522">Format</span></span>|<span data-ttu-id="c233f-523">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-523">Assembly Format</span></span>|<span data-ttu-id="c233f-524">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-525">3F < `int32` ></span></span>|<span data-ttu-id="c233f-526">blt `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-526">blt `target`</span></span>|<span data-ttu-id="c233f-527">두 번째 값 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="c233f-528">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-529">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-530">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-531">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 는 보다 작은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-532">`blt` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="c233f-533">결과 동일을 수행 하는 `clt` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-534">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-535">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-536">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-537">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-538">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-539">첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-540">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-541">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-541">Format</span></span>|<span data-ttu-id="c233f-542">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-542">Assembly Format</span></span>|<span data-ttu-id="c233f-543">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-544">32 < `int8` ></span></span>|<span data-ttu-id="c233f-545">blt.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-545">blt.s `target`</span></span>|<span data-ttu-id="c233f-546">약식 두 번째 값 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="c233f-547">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-548">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-549">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-550">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 는 보다 작은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-551">`blt.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="c233f-552">결과 동일을 수행 하는 `clt` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-553">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-554">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-555">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-556">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-557">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-558">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-559">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-560">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-560">Format</span></span>|<span data-ttu-id="c233f-561">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-561">Assembly Format</span></span>|<span data-ttu-id="c233f-562">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-563">44 < `int32` ></span></span>|<span data-ttu-id="c233f-564">blt.un `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-564">blt.un `target`</span></span>|<span data-ttu-id="c233f-565">두 번째 값 (부호 없는 값) 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-566">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-567">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-568">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-569">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 는 보다 작은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-570">`blt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-571">결과 동일을 수행 하는 `clt.un` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-572">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-573">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-574">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-575">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-576">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-577">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-578">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-579">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-579">Format</span></span>|<span data-ttu-id="c233f-580">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-580">Assembly Format</span></span>|<span data-ttu-id="c233f-581">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-582">37 < `int8` ></span></span>|<span data-ttu-id="c233f-583">blt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-583">blt.un.s `target`</span></span>|<span data-ttu-id="c233f-584">약식 두 번째 값 (부호 없는 값) 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="c233f-585">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-586">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-587">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-588">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 는 보다 작은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-589">`blt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-590">결과 동일을 수행 하는 `clt.un` 명령 다음에 `brtrue` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-591">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-592">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-593">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-594">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-595">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-596">두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-597">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-598">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-598">Format</span></span>|<span data-ttu-id="c233f-599">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-599">Assembly Format</span></span>|<span data-ttu-id="c233f-600">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-601">40 < `int32` ></span></span>|<span data-ttu-id="c233f-602">bne.un `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-602">bne.un `target`</span></span>|<span data-ttu-id="c233f-603">분기 대상에 두 개의 부호 없는 정수 값 지정된 된 오프셋에서 명령 (부호 없는 값)과 같지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-604">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-605">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-606">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-607">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 과 같지 않은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-608">`bne.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 과 같지 않은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-609">결과 동일을 수행 하는 `ceq` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-610">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-611">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-612">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-613">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bne.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-614">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-615">두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-616">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-617">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-617">Format</span></span>|<span data-ttu-id="c233f-618">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-618">Assembly Format</span></span>|<span data-ttu-id="c233f-619">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-620">33 < `int8` ></span></span>|<span data-ttu-id="c233f-621">bne.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-621">bne.un.s `target`</span></span>|<span data-ttu-id="c233f-622">분기 대상에 명령에 지정된 된 오프셋 두 개의 부호 없는 정수 값은 같은 (부호 없는 값), 약식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="c233f-623">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-624">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-625">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-626">`value2` 및 `value1` 경우 스택에서 팝 되 고 `value1` 과 같지 않은 `value2`, 분기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="c233f-627">`bne.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 과 같지 않은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="c233f-628">결과 동일을 수행 하는 `ceq` 명령 다음에 `brfalse` 특정 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="c233f-629">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-630">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-631">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-632">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bne.un.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-633">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-634">값 형식을 개체 참조(<see langword="O" /> 형식)로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-634">Converts a value type to an object reference (type <see langword="O" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-635">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-636">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-636">Format</span></span>|<span data-ttu-id="c233f-637">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-637">Assembly Format</span></span>|<span data-ttu-id="c233f-638">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-639">8C < `T` ></span></span>|<span data-ttu-id="c233f-640">상자 `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="c233f-640">box `valTypeToken`</span></span>|<span data-ttu-id="c233f-641">값 형식으로 변환 (에 지정 된 형식의 `valTypeToken`) 진정한 개체 참조에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="c233f-642">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-643">값 형식으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-644">값 형식은 스택에서 팝 됩니다. `box` 작업이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="c233f-645">결과 "boxed" 값 형식에 대 한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-646">값 형식에 공용 언어 인프라 (CLI) 내에서 두 개의 별도 표현:</span><span class="sxs-lookup"><span data-stu-id="c233f-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="c233f-647">다른 개체 또는 스택에 값 형식이 포함 된 경우 사용 '원시' 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="c233f-648">값 형식의 데이터 줄 바꿈되는 위치 (boxed) 개체로 독립 엔터티로 존재할 수 있는 'boxed' 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="c233f-649">`box` 개체 참조에 '원시' unboxed 값 형식을 변환 하는 명령 (형식 `O`).</span><span class="sxs-lookup"><span data-stu-id="c233f-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="c233f-650">이 새 개체를 만들고 새로 할당 된 개체에 값 형식에서 데이터를 복사 하 여 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="c233f-651">`valTypeToken` 스택에 값 형식의 형식의 있음을 나타내는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="c233f-652"><xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="c233f-653"><xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="c233f-654">이 상황은 일반적으로 언어 MSIL (Microsoft Intermediate) 런타임이 아닌 네이티브 코드로 변환 되 면 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-655">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `box` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-656">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-657">조건에 상관 없이 대상 명령으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-657">Unconditionally transfers control to a target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-658">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-659">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-659">Format</span></span>|<span data-ttu-id="c233f-660">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-660">Assembly Format</span></span>|<span data-ttu-id="c233f-661">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-662">38 < `int32` ></span></span>|<span data-ttu-id="c233f-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-663">br `target`</span></span>|<span data-ttu-id="c233f-664">지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="c233f-665">계산 스택 동작이 없음이 작업에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="c233f-666">`br` 명령이 조건에 관계 없이 대상 명령으로 제어를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="c233f-667">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-668">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-669">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-670">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `br` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-671">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-672">조건에 상관 없이 대상 명령(약식)으로 제어를 전송합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-672">Unconditionally transfers control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-673">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-674">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-674">Format</span></span>|<span data-ttu-id="c233f-675">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-675">Assembly Format</span></span>|<span data-ttu-id="c233f-676">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-677">2B < `int8` ></span></span>|<span data-ttu-id="c233f-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-678">br.s `target`</span></span>|<span data-ttu-id="c233f-679">약식 표현 지정된 된 오프셋에 대상 명령으로 분기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="c233f-680">계산 스택 동작이 없음이 작업에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="c233f-681">`br.s` 명령이 조건에 관계 없이 대상 명령으로 제어를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="c233f-682">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-683">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-684">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-685">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `br.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-686">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-687">중단점이 설정되었음을 디버거에 알리기 위해 CLI(공용 언어 인프라)에 신호를 보냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-688">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-689">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-689">Format</span></span>|<span data-ttu-id="c233f-690">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-690">Assembly Format</span></span>|<span data-ttu-id="c233f-691">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-692">01</span><span class="sxs-lookup"><span data-stu-id="c233f-692">01</span></span>|<span data-ttu-id="c233f-693">break</span><span class="sxs-lookup"><span data-stu-id="c233f-693">break</span></span>|<span data-ttu-id="c233f-694">중단점에 도달 했습니다 디버거에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="c233f-695">계산 스택 동작이 없음이 작업에 의해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="c233f-696">`break` 디버깅 지원에 대 한 명령은입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="c233f-697">중단점 기가 발생 되었습니다 디버거에 알리기 위해 CLI에 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="c233f-698">효과가 없습니다 다른 인터프리터 상태에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="c233f-699">`break` 명령에는 코드 가능한 최소 크기 사용할 수 있도록 중단점으로 패치 및 주변 코드에 주는 영향을 최소화할 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="c233f-700">`break` 명령은 디버거로 트래핑, 아무 작업도 수행 하거나, 보안 예외를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="c233f-701">정확한 동작은 구현에서 정의 된 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="c233f-702">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `break` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-704">
            <paramref name="value" />가 <see langword="false" />, null 참조(Visual Basic에서는 <see langword="Nothing" />) 또는 0인 경우 대상 명령으로 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-705">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-706">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-706">Format</span></span>|<span data-ttu-id="c233f-707">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-707">Assembly Format</span></span>|<span data-ttu-id="c233f-708">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-709">39 < `int32` ></span></span>|<span data-ttu-id="c233f-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="c233f-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="c233f-712">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-712">brzero `target`</span></span>|<span data-ttu-id="c233f-713">이면 지정된 된 오프셋된에서 대상 명령으로 분기 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="c233f-714">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-715">`value` 이 이전 작업에서 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="c233f-716">`value` 스택에서 팝 경우 `value` 은 `false`, 분기 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="c233f-717">`brfalse` 명령 (및 해당 별칭 `brnull` 및 `brzero`) 하는 경우 지정 된 대상 명령으로 제어를 전송 `value` (형식의 `int32`, `int64`, 개체 참조가 `O`, 관리 되는 포인터 `&`, 임시 포인터 `*`, `native int`)은 0 (`false`).</span><span class="sxs-lookup"><span data-stu-id="c233f-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="c233f-718">경우 `value` 0이 아닌 (`true`) 다음 명령에서 실행이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="c233f-719">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-720">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-721">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-722">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brfalse` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-723">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-724">
            <paramref name="value" />가 <see langword="false" />, null 참조 또는 0인 경우 대상 명령으로 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-725">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-726">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-726">Format</span></span>|<span data-ttu-id="c233f-727">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-727">Assembly Format</span></span>|<span data-ttu-id="c233f-728">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-729">2C <`int8` ></span></span>|<span data-ttu-id="c233f-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="c233f-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="c233f-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-732">brzero.s `target`</span></span>|<span data-ttu-id="c233f-733">이면 지정된 된 오프셋된에서 대상 명령으로 분기 `false`, 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="c233f-734">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-735">`value` 이 이전 작업에서 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="c233f-736">`value` 스택에서 팝 경우 `value` 은 `false`, 분기 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="c233f-737">`brfalse.s` 명령 (및 해당 별칭 `brnull` 및 `brzero`) 하는 경우 지정 된 대상 명령으로 제어를 전송 `value` (형식의 `int32`, `int64`, 개체 참조가 `O`, 관리 되는 포인터 `&`, 임시 포인터 `*`, `native int`)은 0 (`false`).</span><span class="sxs-lookup"><span data-stu-id="c233f-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="c233f-738">경우 `value` 0이 아닌 (`true`) 다음 명령에서 실행이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="c233f-739">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-740">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-741">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-742">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brfalse.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-743">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-744">
            <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령으로 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-745">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-746">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-746">Format</span></span>|<span data-ttu-id="c233f-747">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-747">Assembly Format</span></span>|<span data-ttu-id="c233f-748">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-749">3A < `int32` ></span></span>|<span data-ttu-id="c233f-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="c233f-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-751">brinst `target`</span></span>|<span data-ttu-id="c233f-752">0이 아닌 경우 지정된 된 오프셋에 대상 명령으로 분기 (`true`).</span><span class="sxs-lookup"><span data-stu-id="c233f-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="c233f-753">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-754">`value` 이 이전 작업에서 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="c233f-755">`value` 스택에서 팝 경우 `value` 은 `true`, 분기 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="c233f-756">`brtrue` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value` (형식 `native int`) 0이 아닌 (`true`).</span><span class="sxs-lookup"><span data-stu-id="c233f-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="c233f-757">경우 `value` 은 0 (`false`) 다음 명령에서 실행이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="c233f-758">경우 `value` 개체 참조입니다 (형식 `O`) 다음 `brinst` (에 대 한 별칭 `brtrue`) 개체의 인스턴스를 나타내는 경우 제어 전달 (null 개체 참조; 아닌 경우 표시 되는 예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="c233f-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="c233f-759">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-760">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-761">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-762">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brtrue` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-763">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-764">
            <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령(약식)으로 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-765">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-766">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-766">Format</span></span>|<span data-ttu-id="c233f-767">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-767">Assembly Format</span></span>|<span data-ttu-id="c233f-768">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-769">2D < `int8` ></span></span>|<span data-ttu-id="c233f-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="c233f-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-771">brinst.s `target`</span></span>|<span data-ttu-id="c233f-772">0이 아닌 경우 지정된 된 오프셋에 대상 명령으로 분기 (`true`), 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="c233f-773">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-774">`value` 이 이전 작업에서 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="c233f-775">`value` 스택에서 팝 경우 `value` 은 `true`, 분기 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="c233f-776">`brtrue.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value` (형식 `native int`) 0이 아닌 (`true`).</span><span class="sxs-lookup"><span data-stu-id="c233f-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="c233f-777">경우 `value` 은 0 (`false`) 다음 명령에서 실행이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="c233f-778">경우 `value` 개체 참조입니다 (형식 `O`) 다음 `brinst` (에 대 한 별칭 `brtrue`) 개체의 인스턴스를 나타내는 경우 제어 전달 (null 개체 참조; 아닌 경우 표시 되는 예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="c233f-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="c233f-779">대상 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-780">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="c233f-781">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="c233f-782">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brtrue.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-783">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-784">전송된 메서드 설명자가 나타내는 메서드를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-784">Calls the method indicated by the passed method descriptor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-785">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-786">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-786">Format</span></span>|<span data-ttu-id="c233f-787">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-787">Assembly Format</span></span>|<span data-ttu-id="c233f-788">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-789">28 < `T` ></span></span>|<span data-ttu-id="c233f-790">호출 `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="c233f-790">call `methodDesc`</span></span>|<span data-ttu-id="c233f-791">에 설명 된 메서드를 호출 `methodDesc`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="c233f-792">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-793">메서드 인수 `arg1` 통해 `argN` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-794">메서드 인수 `arg1` 통해 `argN` 스택에서 팝 되 고 이러한 인수를 사용 하는 메서드가 호출 되 고 메서드 설명자가 참조 하는 메서드로 제어가 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="c233f-795">완료 되 면 반환 값 호출 수신자 메서드에 의해 생성 된 이며 호출자에 게 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="c233f-796">반환 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-797">`call` 명령의 명령으로 전달 된 메서드 설명자가 나타내는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="c233f-798">메서드 설명자에 메서드 호출 수, 형식 및 호출 규칙을 사용할 뿐만 아니라 해당 메서드에 전달할 스택에 배치 된 인수의 순서를 나타내는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="c233f-799">`call` 명령 바로 앞에 여는 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 접두사 제어를 전송 하기 전에 현재 메서드 상태가 해제 되어야 함을 지정 하는 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="c233f-800">원본 메서드보다 더 높은 신뢰의 메서드로 제어를 전송 하는 호출을 하는 경우 스택 프레임 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="c233f-801">대신, 실행 서 계속 자동으로 처럼는 `tail` 이 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="c233f-802">메타 데이터 토큰 정적 메서드, 인스턴스 메서드, 가상 메서드 또는 전역 함수 호출 인지 확인 하기 위한 충분 한 정보를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="c233f-803">이러한 모든 경우에 대상 주소 메서드 설명자에서 결정 됩니다 (으로는 <xref:System.Reflection.Emit.OpCodes.Callvirt> 여기서는 대상 주소가 결정 인스턴스의 런타임 형식을 가상 메서드를 호출 하기 위한 지침 참조 앞에 밀어넣을 <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="c233f-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="c233f-804">인수는 왼쪽에서 오른쪽 순서로 스택에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="c233f-805">즉, 첫 번째 인수는 계산 하 고 필요한 모든 인수가 내림차순 스택의 맨 위에 표시 될 때까지 차례로 두 번째 인수는 세 번째에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="c233f-806">다음 세 가지 중요 한 특별 한 경우:</span><span class="sxs-lookup"><span data-stu-id="c233f-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="c233f-807">호출 메서드는 사용자가 볼 수 인수의 하기 전에 해당 인스턴스 참조를 푸시 해야 (또는 가상) 인스턴스로.</span><span class="sxs-lookup"><span data-stu-id="c233f-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="c233f-808">인스턴스 참조 null 참조일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="c233f-809">메타 데이터에 들어 있지 않습니다에 대 한 매개 변수 목록에 있는 항목의 `this` 포인터; 대신 사용 하 여 한 비트를 메서드에 전달 해야 하는지 여부를 나타내는 `this` 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="c233f-810">사용 하 여 가상 메서드를 호출 하는 데 유효한 `call` (대신 `callvirt`); 메서드를 호출 하는 개체에서 동적으로 지정 하는 것이 아니라 메서드를 지정 하는 클래스를 사용 하 여 해결할 수 임을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="c233f-811">대리자의 `Invoke` 메서드를 사용 하 여 호출할 수는 `call` 또는 `callvirt` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="c233f-812"><xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스 권한을 부여 하지 않는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="c233f-813">보안 검사는 런타임이 아닌 네이티브 코드로 Microsoft MSIL (Intermediate Language) 명령이 변환 될 때 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c233f-814">값 형식에 System.Object의 메서드를 호출할 때 사용 하 여 고려는 `constrained` 접두사로 사용 하 여는 `callvirt` 명령을 내보내는 대신는 `call` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="c233f-815">그러면 잠재적 버전 관리 문제를 방지 값 형식에서 메서드를 재정의 하는 여부에 따라 서로 다른 IL 내보낼 필요가 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="c233f-816">사용 하는 것이 좋습니다는 `constrained` 접두사 값 형식에서 인터페이스 메서드를 인터페이스 메서드를 구현 하는 값 형식 메서드 이후에 호출할 때 사용 하 여 변경할 수 있습니다는 `MethodImpl`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="c233f-817">이러한 문제를에서 더 자세하게 설명의 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="c233f-818">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `call` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-819">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="c233f-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="c233f-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c233f-821"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> 메서드 ´ ë ç `varargs` 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="c233f-822">사용 하 여는 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 일반 호출에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="c233f-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-823">호출 규칙에서 설명하는 인수를 사용하여 계산 스택에 표시된 메서드를 진입점에 대한 포인터로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-824">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-825">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-825">Format</span></span>|<span data-ttu-id="c233f-826">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-826">Assembly Format</span></span>|<span data-ttu-id="c233f-827">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-828">29 < `T` ></span></span>|<span data-ttu-id="c233f-829">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="c233f-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="c233f-830">호출 규칙에서 설명 하는 인수를 사용 하 여 가리킨 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="c233f-831">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-832">메서드 인수 `arg1` 통해 `argN` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-833">메서드 진입점 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-834">메서드 인수 `arg1` 통해 `argN` 및 메서드 진입점 스택에서 팝 됩니다; 메서드를 호출을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="c233f-835">완료 되 면 반환 값 호출 수신자 메서드에 의해 생성 된 이며 호출자에 게 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="c233f-836">반환 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-837">`calli` 메서드 진입점의 인수와 함께 호출 하는 명령 `arg1` 통해 `argN`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="c233f-838">특정 호출 규칙을 통해 이러한 인수의 유형에 대해서는 설명 (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="c233f-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="c233f-839">`calli` 하 여 명령 바로 뒤는 `tail` 접두사 (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 제어를 전송 하기 전에 현재 메서드 상태가 해제 되어야 함을 지정 하려면.</span><span class="sxs-lookup"><span data-stu-id="c233f-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="c233f-840">전달 호출 스택 프레임 원본 메서드보다 신뢰도 높은 메서드로 제어를 해제 하지 됩니다; 대신, 실행 자동으로 계속 됩니다 처럼는 `tail` 이 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="c233f-841">메서드 진입점 (대상 컴퓨터)의 호출 규칙 (독립 실행형 서명에 대 한 메타 데이터 토큰)을 통해 설명 하는 인수 없이 합법적인 방식으로 호출할 수 있는 네이티브 코드에 대 한 특정 포인터로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="c233f-842">이러한 포인터를 사용 하 여 만들 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Ldftn> 또는 <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> 지침 또는 네이티브 코드에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="c233f-843">호출 규칙을 동적으로 선택 하지 않으면, 따라서 사용 하는 코드는 `calli` 대상 실제로 지정된 된 호출 규칙을 사용 하지 않는 경우 명령이 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="c233f-844">인수는 왼쪽에서 오른쪽 순서로 스택에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="c233f-845">즉, 첫 번째 인수는 계산 하 고 필요한 모든 인수가 내림차순 스택의 맨 위에 표시 될 때까지 차례로 두 번째 인수는 세 번째에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="c233f-846">인스턴스 메서드 또는 가상 메서드에 대 한 인수 빌드 코드 시퀀스 전에 사용자에 게 표시 되는 인수의 (null 참조를 이어야 함)는 해당 인스턴스 참조를 푸시 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="c233f-847"><xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스 권한을 부여 하지 않는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="c233f-848">보안 검사는 네이티브 코드로 아니라 런타임 시 언어 MSIL (Microsoft Intermediate) 명령이 변환 될 때 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-849">다음 <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> 메서드를 사용 하 여을 수행할 수 있습니다는 `calli` 스택에 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="c233f-850">`calli` 를 통해 호출 해야는 아래 메서드를 사용 하지 않고는 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 스택에 직접 명령을 배치 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="c233f-851">ILGenerator.EmitCalli (Opcode, CallingConventions, 형식, 입력, 관리 되는 호출 규칙을 사용 하 여 호출에 대 한 Type[]) 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="c233f-852">ILGenerator.EmitCalli (에서 관리 되지 않는 호출 규칙을 사용 하 여 호출에 대 한 CallingConvention, 유형, Type[]) Opcode입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-853">개체에서 런타임에 바인딩된 메서드를 호출하고 반환 값을 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-854">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-855">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-855">Format</span></span>|<span data-ttu-id="c233f-856">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-856">Assembly Format</span></span>|<span data-ttu-id="c233f-857">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-858">6F < `T` ></span></span>|<span data-ttu-id="c233f-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="c233f-859">callvirt `method`</span></span>|<span data-ttu-id="c233f-860">와 관련 된 특정 메서드를 호출 `obj`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="c233f-861">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-862">개체 참조 `obj` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-863">메서드 인수 `arg1` 통해 `argN` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-864">메서드 인수 `arg1` 통해 `argN` 및 개체 참조 `obj` 스택에서 팝 되 고 이러한 인수를 사용 하는 메서드가 호출 되 고 메서드에 제어가 `obj` 참조 하는 메서드 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="c233f-865">완료 되 면 반환 값 호출 수신자 메서드에 의해 생성 된 이며 호출자에 게 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="c233f-866">반환 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-867">`callvirt` 명령 개체에서 런타임에 바인딩된 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="c233f-868">즉, 메서드가의 런타임 형식을 기반으로 선택 됩니다 `obj` 메서드 포인터에 표시 되는 컴파일 타임 클래스 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="c233f-869">`Callvirt` 메서드와 인스턴스 메서드를 모두 가상 호출할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="c233f-870">`callvirt` 하 여 명령 바로 뒤는 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 접두사를 제어를 전송 하기 전에 현재 스택 프레임 해제 되어야 함을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="c233f-871">호출 전달 스택 프레임 원래 방법 보다 신뢰도 높은 메서드로 제어를 해제 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="c233f-872">이 이름, 클래스, 호출 하는 메서드의 시그니처를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="c233f-873">관련 된 클래스 `obj` 인스턴스 되었습니다 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="c233f-874">표시 된 메서드 이름 및 서명을 일치 하는 비정적 메서드를 정의 하는 클래스,이 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="c233f-875">그렇지 않으면이 클래스의 기본 클래스 체인의 모든 클래스는 순서 대로 검사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="c233f-876">메서드가 없는 경우 오류를입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="c233f-877">`Callvirt` 메서드를 호출 하기 전에 개체와 관련 된 인수를 계산 스택에서 팝 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="c233f-878">메서드 반환 값이 있으면 메서드가 완료 될 때 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="c233f-879">호출 수신자 쪽에서 `obj` 매개 변수 인수, 0으로 액세스 `arg1` 인수 1, 및 등입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="c233f-880">인수는 왼쪽에서 오른쪽 순서로 스택에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="c233f-881">즉, 첫 번째 인수는 계산 하 고 필요한 모든 인수가 내림차순 스택의 맨 위에 표시 될 때까지 차례로 두 번째 인수는 세 번째에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="c233f-882">인스턴스 참조 `obj` (에 항상 필요한 `callvirt`) 전에 사용자에 게 표시 되는 인수의 밀어넣어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="c233f-883">서명 (메타 데이터 토큰에서 수행 됨)이에 대 한 매개 변수 목록에 있는 항목을 포함할 필요가 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="c233f-884">가상 메서드 수 또한 호출할 수를 사용 하 여 <xref:System.Reflection.Emit.OpCodes.Call> 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="c233f-885"><xref:System.MissingMethodException> 관련 된 클래스에 표시 된 이름 및 서명을 갖는 비정적 메서드를 찾을 수 없는 경우 throw 되 `obj` 또는 해당 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="c233f-886">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-887"><xref:System.NullReferenceException> obj null 이면 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="c233f-888"><xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스 권한을 부여 하지 않는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="c233f-889">보안 검사는 CIL이 런타임이 아닌 네이티브 코드로 변환 하는 경우에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c233f-890">값 형식에 System.Object의 메서드를 호출할 때 사용 하 여 고려는 `constrained` 접두사로 사용 하 여는 `callvirt` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="c233f-891">그러면 잠재적 버전 관리 문제를 방지 값 형식에서 메서드를 재정의 하는 여부에 따라 서로 다른 IL 내보낼 필요가 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="c233f-892">사용 하는 것이 좋습니다는 `constrained` 접두사 값 형식에서 인터페이스 메서드를 인터페이스 메서드를 구현 하는 값 형식 메서드 이후에 호출할 때 사용 하 여 변경할 수 있습니다는 `MethodImpl`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="c233f-893">이러한 문제를에서 더 자세하게 설명의 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="c233f-894">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `callvirt` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-895">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="c233f-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="c233f-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-897">참조로 전송된 개체를 지정된 클래스로 캐스팅하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-897">Attempts to cast an object passed by reference to the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-898">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-899">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-899">Format</span></span>|<span data-ttu-id="c233f-900">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-900">Assembly Format</span></span>|<span data-ttu-id="c233f-901">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-902">74 < `T` ></span></span>|<span data-ttu-id="c233f-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-903">castclass `class`</span></span>|<span data-ttu-id="c233f-904">개체 형식의 새 개체를 `class`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="c233f-905">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-906">한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-907">개체 참조는 스택에서 팝 됩니다. 참조 된 개체 캐스팅 되는 지정 된 대로 `class`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="c233f-908">성공 하면 새 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-909">`castclass` 명령으로 개체 참조를 캐스팅 하려고 하므로 (형식 `O`) 지정된 된 클래스 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="c233f-910">새 클래스를 지정 하 여 필요한 클래스를 표시 하는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="c233f-911">스택의 맨 위에 있는 개체의 클래스 (새 클래스 인터페이스 라고 가정함) 새 클래스를 구현 하지 않는 없는 경우 새 클래스의 파생된 클래스는 <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="c233f-912">개체 참조는 null 참조 인 경우 `castclass` 성공 하 고 새 개체를 null 참조로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="c233f-913"><xref:System.InvalidCastException> obj 클래스로 캐스팅할 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="c233f-914"><xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="c233f-915">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령 런타임이 아닌 네이티브 코드로 변환 되 면 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-915">This is typically detected when a Microsoft Intermediate Language (MSIL)instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-916">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `castclass` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-917">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-918">두 값을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-918">Compares two values.</span>
          </span>
          <span data-ttu-id="c233f-919">두 값이 같으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-920">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-921">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-921">Format</span></span>|<span data-ttu-id="c233f-922">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-922">Assembly Format</span></span>|<span data-ttu-id="c233f-923">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="c233f-924">FE 01</span></span>|<span data-ttu-id="c233f-925">ceq</span><span class="sxs-lookup"><span data-stu-id="c233f-925">ceq</span></span>|<span data-ttu-id="c233f-926">하는 경우 1을 푸시합니다 `value1` equals `value2`, 그렇지 않으면 0을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="c233f-927">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-928">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-929">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-930">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 에 비해 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-931">경우 `value1` 같으면 `value2`, 1은 스택에 밀어 넣은; 그렇지 않으면 0이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-932">`ceq` 명령 비교 `value1` 및 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="c233f-933">경우 `value1` 같으면 `value2`, 다음 1 (형식의 `int32`) 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="c233f-934">그렇지 않으면 0 (형식의 `int32`) 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="c233f-935">부동 소수점 숫자에 대 한 `ceq` 숫자는 순서가 지정 된 경우 0을 반환 합니다 (하나 또는 둘 모두가 NaN).</span><span class="sxs-lookup"><span data-stu-id="c233f-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="c233f-936">무한 한 값은 자기 자신과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="c233f-937">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ceq` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-939">두 값을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-939">Compares two values.</span>
          </span>
          <span data-ttu-id="c233f-940">첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-941">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-942">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-942">Format</span></span>|<span data-ttu-id="c233f-943">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-943">Assembly Format</span></span>|<span data-ttu-id="c233f-944">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="c233f-945">FE 02</span></span>|<span data-ttu-id="c233f-946">cgt</span><span class="sxs-lookup"><span data-stu-id="c233f-946">cgt</span></span>|<span data-ttu-id="c233f-947">하는 경우 1을 푸시합니다 `value1` 보다 크면 `value2`, 그렇지 않으면 0을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="c233f-948">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-949">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-950">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-951">`value2` 및 `value1` 스택에서 팝 되 고 `cgt` 테스트 `value1` 보다 크면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-952">경우 `value1` 보다 크면 `value2`, 1은 스택에 밀어 넣은; 그렇지 않으면 0이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-953">`cgt` 명령 비교 `value1` 및 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="c233f-954">경우 `value1` 보다 엄격 하 게 크면 `value2`, 아니라면 `int32` 1의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="c233f-955">그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="c233f-956">부동 소수점 숫자에 대 한 `cgt` (즉, 경우 인수 중 하나 이상이 NaN) 숫자는 순서가 지정 된 경우 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="c233f-957">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cgt` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-959">부호가 없거나 순서가 지정되지 않은 두 값을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-959">Compares two unsigned or unordered values.</span>
          </span>
          <span data-ttu-id="c233f-960">첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-961">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-962">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-962">Format</span></span>|<span data-ttu-id="c233f-963">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-963">Assembly Format</span></span>|<span data-ttu-id="c233f-964">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="c233f-965">FE 03</span></span>|<span data-ttu-id="c233f-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="c233f-966">cgt.un</span></span>|<span data-ttu-id="c233f-967">하는 경우 1을 푸시합니다 `value1` 보다 크면 `value2`, 그렇지 않으면 0 (부호 없는 값)을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-968">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-969">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-970">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-971">`value2` 및 `value1` 스택에서 팝 되 고 `cgt.un` 테스트 `value1` 보다 크면 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-972">경우 `value1` 보다 크면 `value2`, 1은 스택에 밀어 넣은; 그렇지 않으면 0이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-973">`int32` 1의 값이 다음 중 하나라도 스택에 푸시됩니다 `true` :</span><span class="sxs-lookup"><span data-stu-id="c233f-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="c233f-974">부동 소수점 숫자에 대 한 `value1` 기준으로 정렬 되지 않은 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="c233f-975">정수 값에 대 한 `value1` 보다 엄격 하 게 크면 `value2` 부호 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="c233f-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="c233f-976">그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="c233f-977">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cgt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-979">값이 유한 값이 아니면 <see cref="T:System.ArithmeticException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-980">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-981">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-981">Format</span></span>|<span data-ttu-id="c233f-982">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-982">Assembly Format</span></span>|<span data-ttu-id="c233f-983">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-984">C3</span><span class="sxs-lookup"><span data-stu-id="c233f-984">C3</span></span>|<span data-ttu-id="c233f-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="c233f-985">ckfinite</span></span>|<span data-ttu-id="c233f-986">throw <xref:System.ArithmeticException> 값이 한정 된 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="c233f-987">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-988">`value` 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-988">`value` is pushed onto the stack..</span></span>  
  
2.  <span data-ttu-id="c233f-989">`value` 스택에서 팝 되 고 `ckfinite` 명령이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="c233f-990">`value` 가 스택에 밀어 넣은 다시 경우 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-991">`ckfinite instruction` throw <xref:System.ArithmeticException> 경우 `value` (부동 소수점 숫자)가 하나는 "숫자가 아님" 값 (NaN) 또는 `+-` 무한대 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="c233f-992">`Ckfinite` 예외가 throw 되 면 스택의 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="c233f-993">경우에 실행이 지정 되지 `value` 부동 소수점 숫자가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="c233f-994"><xref:System.ArithmeticException> 이 throw 됩니다 `value` 'normal' 숫자가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="c233f-995">특별 한 예외 또는 파생된 클래스의 <xref:System.ArithmeticException> 알맞은 예외 처리기에 잘못 된 값이 전달 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="c233f-996">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ckfinite` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-998">두 값을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-998">Compares two values.</span>
          </span>
          <span data-ttu-id="c233f-999">첫째 값이 둘째 값보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1000">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1001">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1001">Format</span></span>|<span data-ttu-id="c233f-1002">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1002">Assembly Format</span></span>|<span data-ttu-id="c233f-1003">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="c233f-1004">FE 04</span></span>|<span data-ttu-id="c233f-1005">clt</span><span class="sxs-lookup"><span data-stu-id="c233f-1005">clt</span></span>|<span data-ttu-id="c233f-1006">하는 경우 1을 푸시합니다 `value1` 는 보다 작은 `value2`, 그렇지 않으면 0을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="c233f-1007">순서 대로 스택 전환 동작이: `value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1007">The stack transitional behavior, in sequential order, is: `value1` is pushed onto the stack.</span></span>  
  
1.  <span data-ttu-id="c233f-1008">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1008">`value2` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1009">`value2` 및 `value1` 스택에서 팝 되 고 `clt` 테스트 `value1` 는 보다 작은 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1009">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
3.  <span data-ttu-id="c233f-1010">경우 `value1` 는 보다 작은 `value2`, 1은 스택에 밀어 넣은; 그렇지 않으면 0이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1010">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1011">`clt` 명령 비교 `value1` 및 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1011">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="c233f-1012">경우 `value1` 는 보다 작은 `value2`, 아니라면 `int32` 1의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1012">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="c233f-1013">그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1013">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="c233f-1014">부동 소수점 숫자에 대 한 `clt` (즉, 경우 인수 중 하나 이상이 NaN) 숫자는 순서가 지정 된 경우 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1014">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="c233f-1015">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `clt` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1015">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1016">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1016">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1017">부호가 없거나 순서가 없는 <paramref name="value1" />과 <paramref name="value2" />를 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1017">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span>
          </span>
          <span data-ttu-id="c233f-1018">
            <paramref name="value1" />이 <paramref name="value2" />보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1018">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1019">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1019">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1020">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1020">Format</span></span>|<span data-ttu-id="c233f-1021">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1021">Assembly Format</span></span>|<span data-ttu-id="c233f-1022">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1022">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1023">FE 05</span><span class="sxs-lookup"><span data-stu-id="c233f-1023">FE 05</span></span>|<span data-ttu-id="c233f-1024">clt.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1024">clt.un</span></span>|<span data-ttu-id="c233f-1025">하는 경우 1을 푸시합니다 `value1` 는 보다 작은 `value2`, 그렇지 않으면 0 (부호 없는 값)을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1025">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="c233f-1026">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1026">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1027">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1027">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1028">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1028">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1029">`value2` 및 `value1` 스택에서 팝 되 고 `clt.un` 테스트 `value1` 는 보다 작은 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1029">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-1030">경우 `value1` 는 보다 작은 `value2`, 1은 스택에 밀어 넣은; 그렇지 않으면 0이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1030">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1031">`clt.un` 명령 비교 `value1` 및 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1031">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="c233f-1032">`int32` 다음 중 하나에 해당 하는 경우 값 1 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1032">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="c233f-1033">`value1` 보다 작은 `value2` (에 대 한 `clt`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1033">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="c233f-1034">부동 소수점 숫자에 대 한 `value1` 기준으로 정렬 되지 않은 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1034">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="c233f-1035">정수 값에 대 한 `value1` 는 보다 작은 `value2` 부호 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="c233f-1035">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="c233f-1036">그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1036">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="c233f-1037">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `clt.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1039">가상 메서드가 호출되는 형식을 제한합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1039">Constrains the type on which a virtual method call is made.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1040">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft MSIL (intermediate language) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1040">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1041">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1041">Format</span></span>|<span data-ttu-id="c233f-1042">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1042">Assembly Format</span></span>|<span data-ttu-id="c233f-1043">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1044">FE 16 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-1044">FE 16 < `T` ></span></span>|<span data-ttu-id="c233f-1045">제약을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1045">constrained.</span></span> `thisType`|<span data-ttu-id="c233f-1046">형식으로 제한 된 형식에서 가상 메서드는 호출 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1046">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="c233f-1047">`constrained` 접두사의 경우에 허용 되는 `callvirt` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1047">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="c233f-1048">이 시점에 MSIL 스택 상태는 다음과 같이 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1048">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="c233f-1049">관리 되는 포인터 `ptr`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1049">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="c233f-1050">유형의 `ptr` 관리 되는 포인터 여야 합니다 (`&`)를 `thisType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1050">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="c233f-1051">이 접두사의 경우와에서 다른 `callvirt` 의 참조를 사용 하는 명령 `thisType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1051">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="c233f-1052">메서드 인수 `arg1` 통해 `argN` 와 마찬가지로 명령과 스택에 밀어넣은 `callvirt` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1052">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="c233f-1053">`constrained` 접두사를 허용 하도록 되어 `callvirt` 지침에에서 만들는 균일 한 방식 인지에 관계 없이 `thisType` 값 형식 또는 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1053">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="c233f-1054">경우는 `callvirt` `method` 명령 앞에 `constrained` `thisType`, 명령이 다음과 같이 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1054">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="c233f-1055">경우 `thisType` 참조 형식이 값 형식) (대비 다음 `ptr` 역참조 이며 'this'이 포인터를 변수로 전달 되는 `callvirt` 의 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1055">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="c233f-1056">경우 `thisType` 값 형식이 및 `thisType` 구현 `method` 다음 `ptr` 'this'이 포인터를으로 수정 되지 않은 전달 되는 `call` `method` 의 구현에 대 한 명령 `method` 여`thisType`.</span><span class="sxs-lookup"><span data-stu-id="c233f-1056">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="c233f-1057">경우 `thisType` 값 형식이 및 `thisType` 구현 하지 않는 `method` 다음 `ptr` 역참조, box 및 'this'이 포인터를 변수로 전달 되는 `callvirt` `method` 명령 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1057">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="c233f-1058">이 경우에 발생할 수 있습니다 경우에만 `method` 에 정의 된 <xref:System.Object>, <xref:System.ValueType>, 또는 <xref:System.Enum> 으로 재정의 되지 않은 `thisType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1058">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="c233f-1059">이 경우 boxing 하면 만들어지는 원래 개체의 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1059">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="c233f-1060">그러나 때문에의 메서드 중 <xref:System.Object>, <xref:System.ValueType>, 및 <xref:System.Enum> 상태를 수정 된 개체의이 팩트를 검색할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1060">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="c233f-1061">`constrained` 접두사 IL 생성기 제네릭 코드 만들기를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1061">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="c233f-1062">일반적으로 `callvirt` 명령 값 형식에서 유효 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1062">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="c233f-1063">대신 IL 컴파일러에 효과적으로 컴파일 시의 유형에 따라 위에서 설명한 'this'이 변환을 수행할 `ptr` 및 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1063">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="c233f-1064">그러나 때 `ptr` 는 컴파일 타임에 알려지지 않은 제네릭 형식이 컴파일 타임에이 변환을 수행할 수 없으면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1064">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="c233f-1065">`constrained` opcode를 사용 하면 가상 함수에 대 한 호출에서에서 있도록 일관 된 방식 인지에 관계 없이 IL 컴파일러 `ptr` 값 형식 또는 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1065">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="c233f-1066">경우 참조 하시면 유용 하지만 여기서 `thisType` 는 제네릭 형식 변수는 `constrained` works 제네릭이 아닌 형식에도 접두사 및 값 형식 구별 하는 언어에서 생성 하는 가상 호출의 복잡성을 줄일 수 있습니다 및 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1066">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="c233f-1067">사용 하 여 `constrained` 접두사 값 형식 버전 관리 문제가 발생할 가능성을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1067">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="c233f-1068">경우는 `constrained` 접두사가 사용 되지 않으면, 값 형식이 System.Object의 메서드를 재정의 하는 여부에 따라 서로 다른 IL을 내보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1068">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="c233f-1069">예를 들어 값 형식이 `V` Object.ToString() 메서드를 재정의 하는 `call` `V.ToString()` 명령을 내보냅니다; 존재 하지 않는 경우는 `box` 명령 및 `callvirt` `Object.ToString()` 명령을 내보내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1069">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="c233f-1070">재정의 나중에 추가 하 고 후자의 경우 나중에 재정의가 제거 하는 경우 전자의 경우에서 버전 관리 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1070">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="c233f-1071">`constrained` 인터페이스 메서드를 구현 하는 값 형식 메서드를 사용 하 여 변경할 수 있으므로 접두사 값 형식에서 사용 되는 인터페이스 메서드의 호출에 대 한 사용할 수도 있습니다는 `MethodImpl`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1071">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="c233f-1072">경우는 `constrained` 접두사가 사용 되지 않으면, 컴파일러는 컴파일 타임에 바인딩할 형식의 메서드 값의 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1072">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="c233f-1073">사용 하 여 `constrained` 접두사는 MSIL을 런타임 시 아니라 컴파일 타임에 인터페이스 메서드를 구현 하는 메서드를 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1073">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="c233f-1074">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `constrained` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1074">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1075">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-1075">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1076">계산 스택 맨 위에 있는 값을 <see langword="native int" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1076">Converts the value on top of the evaluation stack to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1077">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1078">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1078">Format</span></span>|<span data-ttu-id="c233f-1079">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1079">Assembly Format</span></span>|<span data-ttu-id="c233f-1080">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1081">D3</span><span class="sxs-lookup"><span data-stu-id="c233f-1081">D3</span></span>|<span data-ttu-id="c233f-1082">conv.i</span><span class="sxs-lookup"><span data-stu-id="c233f-1082">conv.i</span></span>|<span data-ttu-id="c233f-1083">변환할 `native int`고 `native int` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1083">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1084">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1085">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1085">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1086">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1086">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1087">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1087">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1088">`conv.i` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1088">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1089">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1089">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1090">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1090">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1091">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1091">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1092">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1092">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1093">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1093">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1094">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1094">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1095">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1095">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1096">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1096">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1097">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1097">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1098">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1098">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1099">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1099">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1100">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1100">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1101">계산 스택 맨 위에 있는 값을 <see langword="int8" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1101">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1102">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1103">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1103">Format</span></span>|<span data-ttu-id="c233f-1104">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1104">Assembly Format</span></span>|<span data-ttu-id="c233f-1105">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1106">67</span><span class="sxs-lookup"><span data-stu-id="c233f-1106">67</span></span>|<span data-ttu-id="c233f-1107">conv.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-1107">conv.i1</span></span>|<span data-ttu-id="c233f-1108">변환할 `int8`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1108">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1109">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1109">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1110">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1110">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1111">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1111">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1112">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1112">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1113">`conv.i1` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1113">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1114">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1114">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1115">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1115">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1116">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1116">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1117">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1117">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1118">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1118">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1119">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1119">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1120">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1120">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1121">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1121">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1122">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1122">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1123">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1123">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1124">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1124">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1125">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1125">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1126">계산 스택 맨 위에 있는 값을 <see langword="int16" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1126">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1127">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1128">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1128">Format</span></span>|<span data-ttu-id="c233f-1129">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1129">Assembly Format</span></span>|<span data-ttu-id="c233f-1130">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1131">68</span><span class="sxs-lookup"><span data-stu-id="c233f-1131">68</span></span>|<span data-ttu-id="c233f-1132">conv.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-1132">conv.i2</span></span>|<span data-ttu-id="c233f-1133">변환할 `int16`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1133">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1134">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1135">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1135">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1136">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1136">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1137">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1137">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1138">`conv.i2` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1138">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1139">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1139">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1140">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1140">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1141">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1141">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1142">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1142">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1143">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1143">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1144">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1144">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1145">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1145">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1146">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1146">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1147">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1147">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1148">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1148">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1149">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1149">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1150">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1150">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1151">계산 스택 맨 위에 있는 값을 <see langword="int32" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1151">Converts the value on top of the evaluation stack to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1152">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1152">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1153">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1153">Format</span></span>|<span data-ttu-id="c233f-1154">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1154">Assembly Format</span></span>|<span data-ttu-id="c233f-1155">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1155">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1156">69</span><span class="sxs-lookup"><span data-stu-id="c233f-1156">69</span></span>|<span data-ttu-id="c233f-1157">conv.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-1157">conv.i4</span></span>|<span data-ttu-id="c233f-1158">변환할 `int32`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1158">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1159">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1159">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1160">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1160">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1161">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1161">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1162">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1162">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1163">`conv.i4` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1163">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1164">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1164">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1165">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1165">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1166">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1166">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1167">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1167">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1168">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1168">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1169">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1169">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1170">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1170">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1171">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1171">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1172">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1172">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1173">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1173">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1174">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1175">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1175">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1176">계산 스택 맨 위에 있는 값을 <see langword="int64" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1176">Converts the value on top of the evaluation stack to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1177">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1178">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1178">Format</span></span>|<span data-ttu-id="c233f-1179">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1179">Assembly Format</span></span>|<span data-ttu-id="c233f-1180">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1181">6A</span><span class="sxs-lookup"><span data-stu-id="c233f-1181">6A</span></span>|<span data-ttu-id="c233f-1182">conv.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-1182">conv.i8</span></span>|<span data-ttu-id="c233f-1183">변환할 `int64`고 `int64` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1183">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1184">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1185">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1185">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1186">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1186">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1187">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1187">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1188">`conv.i8` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1188">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1189">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1189">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1190">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1190">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1191">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1191">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1192">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1192">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1193">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1193">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1194">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1194">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1195">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1195">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1196">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1196">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1197">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1197">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1198">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1198">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1199">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1201">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1201">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1202">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1203">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1203">Format</span></span>|<span data-ttu-id="c233f-1204">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1204">Assembly Format</span></span>|<span data-ttu-id="c233f-1205">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1206">D4</span><span class="sxs-lookup"><span data-stu-id="c233f-1206">D4</span></span>|<span data-ttu-id="c233f-1207">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="c233f-1207">conv.ovf.i</span></span>|<span data-ttu-id="c233f-1208">변환할는 `native int` (스택에 `native int`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1208">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1209">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1210">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1210">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1211">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1211">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1212">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1212">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1213">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1213">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1214">`conv.ovf.i` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1214">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1215">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1215">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1216">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1216">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1217">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1217">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1218"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1218"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1219">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1219">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1220">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1220">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1221">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1221">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1222">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1222">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1223">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1223">Format</span></span>|<span data-ttu-id="c233f-1224">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1224">Assembly Format</span></span>|<span data-ttu-id="c233f-1225">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1225">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1226">8A</span><span class="sxs-lookup"><span data-stu-id="c233f-1226">8A</span></span>|<span data-ttu-id="c233f-1227">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1227">conv.ovf.i.un</span></span>|<span data-ttu-id="c233f-1228">부호 없는 값으로 변환 된 `native int` (스택에 `native int`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1228">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1229">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1229">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1230">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1230">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1231">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1231">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1232">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1232">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1233">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1233">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1234">`conv.ovf.i.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1234">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1235">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1235">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1236">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1236">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1237">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1237">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1238"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1238"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1239">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1240">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1240">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1241">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1241">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1242">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1242">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1243">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1243">Format</span></span>|<span data-ttu-id="c233f-1244">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1244">Assembly Format</span></span>|<span data-ttu-id="c233f-1245">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1245">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1246">B3</span><span class="sxs-lookup"><span data-stu-id="c233f-1246">B3</span></span>|<span data-ttu-id="c233f-1247">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-1247">conv.ovf.i1</span></span>|<span data-ttu-id="c233f-1248">변환할는 `int8` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1248">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1249">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1249">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1250">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1250">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1251">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1251">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1252">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1252">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1253">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1253">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1254">`conv.ovf.i1` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1254">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1255">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1255">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1256">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1256">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1257">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1257">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1258"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1258"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1259">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1260">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1260">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1261">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1261">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1262">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1263">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1263">Format</span></span>|<span data-ttu-id="c233f-1264">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1264">Assembly Format</span></span>|<span data-ttu-id="c233f-1265">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1266">82</span><span class="sxs-lookup"><span data-stu-id="c233f-1266">82</span></span>|<span data-ttu-id="c233f-1267">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1267">conv.ovf.i1.un</span></span>|<span data-ttu-id="c233f-1268">부호 없는 값으로 변환 된 `int8` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1268">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1269">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1269">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1270">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1270">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1271">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1271">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1272">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1272">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1273">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1273">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1274">`conv.ovf.i1.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1274">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1275">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1275">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1276">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1276">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1277">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1277">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1278"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1278"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1279">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i1.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1281">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int16" />으로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1281">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1282">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1283">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1283">Format</span></span>|<span data-ttu-id="c233f-1284">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1284">Assembly Format</span></span>|<span data-ttu-id="c233f-1285">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1286">B5</span><span class="sxs-lookup"><span data-stu-id="c233f-1286">B5</span></span>|<span data-ttu-id="c233f-1287">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-1287">conv.ovf.i2</span></span>|<span data-ttu-id="c233f-1288">변환할는 `int16` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1288">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1289">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1290">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1290">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1291">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1291">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1292">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1292">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1293">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1293">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1294">`conv.ovf.i2` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1294">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1295">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1295">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1296">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1296">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1297">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1297">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1298"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1298"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1299">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1299">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1300">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1300">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1301">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1301">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1302">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1302">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1303">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1303">Format</span></span>|<span data-ttu-id="c233f-1304">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1304">Assembly Format</span></span>|<span data-ttu-id="c233f-1305">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1305">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1306">83</span><span class="sxs-lookup"><span data-stu-id="c233f-1306">83</span></span>|<span data-ttu-id="c233f-1307">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1307">conv.ovf.i2.un</span></span>|<span data-ttu-id="c233f-1308">부호 없는 값으로 변환 된 `int16` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1308">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1309">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1309">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1310">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1310">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1311">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1311">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1312">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1312">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1313">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1313">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1314">`conv.ovf.i2.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1314">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1315">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1315">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1316">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1316">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1317">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1317">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1318"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1318"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1319">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i2.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1319">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1320">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1320">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1321">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1321">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1322">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1323">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1323">Format</span></span>|<span data-ttu-id="c233f-1324">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1324">Assembly Format</span></span>|<span data-ttu-id="c233f-1325">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1326">B7</span><span class="sxs-lookup"><span data-stu-id="c233f-1326">B7</span></span>|<span data-ttu-id="c233f-1327">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-1327">conv.ovf.i4</span></span>|<span data-ttu-id="c233f-1328">변환할는 `int32` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1328">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1329">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1330">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1330">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1331">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1331">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1332">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1332">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1333">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1333">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1334">`conv.ovf.i4` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1334">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1335">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1335">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1336">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1336">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1337">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1337">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1338"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1338"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1339">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1339">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1340">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1340">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1341">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1341">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1342">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1342">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1343">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1343">Format</span></span>|<span data-ttu-id="c233f-1344">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1344">Assembly Format</span></span>|<span data-ttu-id="c233f-1345">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1345">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1346">84</span><span class="sxs-lookup"><span data-stu-id="c233f-1346">84</span></span>|<span data-ttu-id="c233f-1347">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1347">conv.ovf.i4.un</span></span>|<span data-ttu-id="c233f-1348">부호 없는 값으로 변환 된 `int32` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1348">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1349">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1349">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1350">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1350">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1351">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1351">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1352">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1352">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1353">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1353">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1354">`conv.ovf.i4.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1354">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1355">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1355">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1356">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1356">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1357">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1357">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1358"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1358"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1359">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i4.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1360">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1360">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1361">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1361">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1362">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1363">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1363">Format</span></span>|<span data-ttu-id="c233f-1364">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1364">Assembly Format</span></span>|<span data-ttu-id="c233f-1365">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1366">B9</span><span class="sxs-lookup"><span data-stu-id="c233f-1366">B9</span></span>|<span data-ttu-id="c233f-1367">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-1367">conv.ovf.i8</span></span>|<span data-ttu-id="c233f-1368">변환할는 `int64` (스택에 `int64`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1368">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1369">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1370">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1371">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1372">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1373">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1374">`conv.ovf.i8` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1374">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1375">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1376">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1377">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1378"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1379">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1380">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1380">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1381">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1381">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1382">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1382">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1383">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1383">Format</span></span>|<span data-ttu-id="c233f-1384">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1384">Assembly Format</span></span>|<span data-ttu-id="c233f-1385">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1385">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1386">85</span><span class="sxs-lookup"><span data-stu-id="c233f-1386">85</span></span>|<span data-ttu-id="c233f-1387">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1387">conv.ovf.i8.un</span></span>|<span data-ttu-id="c233f-1388">부호 없는 값으로 변환 된 `int64` (스택에 `int64`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1388">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1389">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1389">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1390">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1390">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1391">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1391">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1392">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1392">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1393">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1393">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1394">`conv.ovf.i8.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1394">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1395">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1395">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1396">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1396">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1397">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1397">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1398"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1398"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1399">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i8.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1399">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1400">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1400">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1401">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1401">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1402">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1402">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1403">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1403">Format</span></span>|<span data-ttu-id="c233f-1404">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1404">Assembly Format</span></span>|<span data-ttu-id="c233f-1405">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1405">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1406">D5</span><span class="sxs-lookup"><span data-stu-id="c233f-1406">D5</span></span>|<span data-ttu-id="c233f-1407">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="c233f-1407">conv.ovf.u</span></span>|<span data-ttu-id="c233f-1408">변환할는 `unsigned native int` (스택에 `native int`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1408">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1409">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1409">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1410">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1410">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1411">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1411">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1412">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1412">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1413">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1413">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1414">`conv.ovf.u` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1414">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1415">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1415">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1416">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1416">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1417">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1417">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1418"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1418"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1419">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1419">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1420">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1420">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1421">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1421">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1422">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1422">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1423">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1423">Format</span></span>|<span data-ttu-id="c233f-1424">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1424">Assembly Format</span></span>|<span data-ttu-id="c233f-1425">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1425">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1426">8B</span><span class="sxs-lookup"><span data-stu-id="c233f-1426">8B</span></span>|<span data-ttu-id="c233f-1427">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1427">conv.ovf.u.un</span></span>|<span data-ttu-id="c233f-1428">값을 부호는 `unsigned native int` (스택에 `native int`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1428">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1429">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1429">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1430">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1430">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1431">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1431">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1432">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1432">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1433">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1433">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1434">`conv.ovf.u.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1434">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1435">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1435">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1436">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1436">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1437">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1437">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1438"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1438"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1439">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.uvf.u.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1439">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1440">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1440">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1441">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1441">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1442">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1442">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1443">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1443">Format</span></span>|<span data-ttu-id="c233f-1444">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1444">Assembly Format</span></span>|<span data-ttu-id="c233f-1445">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1445">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1446">B4</span><span class="sxs-lookup"><span data-stu-id="c233f-1446">B4</span></span>|<span data-ttu-id="c233f-1447">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="c233f-1447">conv.ovf.u1</span></span>|<span data-ttu-id="c233f-1448">변환할는 `unsigned int8` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1448">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1449">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1449">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1450">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1450">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1451">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1451">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1452">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1452">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1453">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1453">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1454">`conv.ovf.u1` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1454">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1455">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1455">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1456">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1456">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1457">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1457">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1458"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1458"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1459">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1461">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1461">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1462">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1463">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1463">Format</span></span>|<span data-ttu-id="c233f-1464">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1464">Assembly Format</span></span>|<span data-ttu-id="c233f-1465">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1466">86</span><span class="sxs-lookup"><span data-stu-id="c233f-1466">86</span></span>|<span data-ttu-id="c233f-1467">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1467">conv.ovf.u1.un</span></span>|<span data-ttu-id="c233f-1468">부호 없는 값으로 변환 된 `unsigned int8` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1468">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1469">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1470">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1470">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1471">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1471">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1472">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1472">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1473">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1473">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1474">`conv.ovf.u1.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1474">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1475">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1475">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1476">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1476">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1477">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1477">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1478"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1478"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1479">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u1.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1479">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1480">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1480">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1481">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1481">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1482">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1482">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1483">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1483">Format</span></span>|<span data-ttu-id="c233f-1484">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1484">Assembly Format</span></span>|<span data-ttu-id="c233f-1485">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1485">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1486">B6</span><span class="sxs-lookup"><span data-stu-id="c233f-1486">B6</span></span>|<span data-ttu-id="c233f-1487">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="c233f-1487">conv.ovf.u2</span></span>|<span data-ttu-id="c233f-1488">변환할는 `unsigned int16` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1488">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1489">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1489">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1490">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1490">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1491">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1491">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1492">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1492">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1493">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1493">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1494">`conv.ovf.u2` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1494">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1495">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1495">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1496">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1496">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1497">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1497">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1498"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1498"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1499">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1500">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1500">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1501">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1501">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1502">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1503">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1503">Format</span></span>|<span data-ttu-id="c233f-1504">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1504">Assembly Format</span></span>|<span data-ttu-id="c233f-1505">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1506">87</span><span class="sxs-lookup"><span data-stu-id="c233f-1506">87</span></span>|<span data-ttu-id="c233f-1507">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1507">conv.ovf.u2.un</span></span>|<span data-ttu-id="c233f-1508">부호 없는 값으로 변환 된 `unsigned int16` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1508">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1509">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1510">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1510">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1511">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1511">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1512">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1512">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1513">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1513">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1514">`conv.ovf.u2.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1514">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1515">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1515">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1516">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1516">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1517">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1517">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1518"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1518"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1519">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u2.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1519">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1520">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1520">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1521">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1521">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1522">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1522">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1523">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1523">Format</span></span>|<span data-ttu-id="c233f-1524">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1524">Assembly Format</span></span>|<span data-ttu-id="c233f-1525">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1525">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1526">B8</span><span class="sxs-lookup"><span data-stu-id="c233f-1526">B8</span></span>|<span data-ttu-id="c233f-1527">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="c233f-1527">conv.ovf.u4</span></span>|<span data-ttu-id="c233f-1528">변환할는 `unsigned int32` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1528">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1529">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1529">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1530">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1530">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1531">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1531">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1532">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1532">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1533">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1533">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1534">`conv.ovf.u4` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1534">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1535">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1535">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1536">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1536">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1537">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1537">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1538"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1538"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1539">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1539">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1540">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1540">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1541">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1541">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1542">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1542">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1543">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1543">Format</span></span>|<span data-ttu-id="c233f-1544">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1544">Assembly Format</span></span>|<span data-ttu-id="c233f-1545">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1545">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1546">88</span><span class="sxs-lookup"><span data-stu-id="c233f-1546">88</span></span>|<span data-ttu-id="c233f-1547">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1547">conv.ovf.u4.un</span></span>|<span data-ttu-id="c233f-1548">부호 없는 값으로 변환 된 `unsigned int32` (스택에 `int32`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1548">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1549">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1549">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1550">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1550">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1551">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1551">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1552">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1552">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1553">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1553">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1554">`conv.ovf.u4.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1554">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1555">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1555">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1556">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1556">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1557">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1557">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1558"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1558"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1559">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u4.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1559">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1560">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1560">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1561">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1561">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1562">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1562">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1563">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1563">Format</span></span>|<span data-ttu-id="c233f-1564">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1564">Assembly Format</span></span>|<span data-ttu-id="c233f-1565">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1565">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1566">BA</span><span class="sxs-lookup"><span data-stu-id="c233f-1566">BA</span></span>|<span data-ttu-id="c233f-1567">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="c233f-1567">conv.ovf.u8</span></span>|<span data-ttu-id="c233f-1568">변환할는 `unsigned int64` (스택에 `int64`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1568">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1569">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1569">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1570">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1570">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1571">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1571">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1572">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1572">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1573">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1573">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1574">`conv.ovf.u8` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1574">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1575">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1575">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1576">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1576">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1577">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1577">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1578"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1578"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1579">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1579">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1580">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1580">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1581">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1581">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1582">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1583">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1583">Format</span></span>|<span data-ttu-id="c233f-1584">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1584">Assembly Format</span></span>|<span data-ttu-id="c233f-1585">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1586">89</span><span class="sxs-lookup"><span data-stu-id="c233f-1586">89</span></span>|<span data-ttu-id="c233f-1587">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1587">conv.ovf.u8.un</span></span>|<span data-ttu-id="c233f-1588">부호 없는 값으로 변환 된 `unsigned int64` (스택에 `int64`) 오버플로가 발생 한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1588">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="c233f-1589">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1590">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1590">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1591">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1591">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="c233f-1592">오버플로가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1592">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="c233f-1593">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1593">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1594">`conv.ovf.u8.un` opcode 변환는 `value` 고 스택의 맨 위에 있는 값을 변환 하는 위치에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1594">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1595">값이 너무 크거나 너무 작은 대상 형식으로 표현할 수 없는 경우, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1595">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="c233f-1596">부동 소수점 숫자에서 정수 값으로의 변환은 소수점을 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1596">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="c233f-1597">4 바이트 보다 작은 정수 값으로 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.ovf.i` 또는 `conv.ovf.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1597">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="c233f-1598"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1598"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-1599">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u8.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1599">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1600">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1600">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1601">계산 스택 맨 위에 있는 부호 없는 정수 값을 <see langword="float32" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1601">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1602">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1602">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1603">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1603">Format</span></span>|<span data-ttu-id="c233f-1604">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1604">Assembly Format</span></span>|<span data-ttu-id="c233f-1605">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1605">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1606">76</span><span class="sxs-lookup"><span data-stu-id="c233f-1606">76</span></span>|<span data-ttu-id="c233f-1607">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1607">conv.r.un</span></span>|<span data-ttu-id="c233f-1608">Convert 부호 없는 정수를 부동 소수점, 푸시 `F` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1608">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1609">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1609">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1610">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1610">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1611">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1611">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1612">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1612">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1613">`conv.r.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1613">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1614">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1614">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1615">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1615">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1616">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1616">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1617">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1617">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1618">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1618">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1619">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1619">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1620">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1620">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1621">오버플로가 발생 하는 정수를 부동 소수점 형식을 변환 하는 경우는 `result` 반환 되는 지정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1621">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="c233f-1622">`conv.r.un` 작업 스택에서 정수, 부호 없는 것으로 해석 하 고 정수를 나타내는 부동 소수점 숫자로 대체 하는: 중 하나는 `float32`, 이것이 만큼 너비가 충분 정밀도의 손실 없이 정수를 나타내는 또는 다른 경우 `float64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1622">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="c233f-1623">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1623">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="c233f-1624">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1626">계산 스택 맨 위에 있는 값을 <see langword="float32" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1626">Converts the value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1627">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1628">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1628">Format</span></span>|<span data-ttu-id="c233f-1629">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1629">Assembly Format</span></span>|<span data-ttu-id="c233f-1630">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1631">6B</span><span class="sxs-lookup"><span data-stu-id="c233f-1631">6B</span></span>|<span data-ttu-id="c233f-1632">conv.r4</span><span class="sxs-lookup"><span data-stu-id="c233f-1632">conv.r4</span></span>|<span data-ttu-id="c233f-1633">변환할 `float32`고 `F` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1633">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1634">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1635">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1636">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1637">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1638">`conv.r4` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1638">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1639">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1640">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1641">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1642">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1643">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1644">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1645">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1646">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1647">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1647">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="c233f-1648">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1648">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1649">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1649">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1650">계산 스택 맨 위에 있는 값을 <see langword="float64" />로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1650">Converts the value on top of the evaluation stack to <see langword="float64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1651">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1652">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1652">Format</span></span>|<span data-ttu-id="c233f-1653">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1653">Assembly Format</span></span>|<span data-ttu-id="c233f-1654">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1655">6C</span><span class="sxs-lookup"><span data-stu-id="c233f-1655">6C</span></span>|<span data-ttu-id="c233f-1656">conv.r8</span><span class="sxs-lookup"><span data-stu-id="c233f-1656">conv.r8</span></span>|<span data-ttu-id="c233f-1657">변환할 `float64`고 `F` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1657">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1658">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1659">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1660">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1661">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1662">`conv.r8` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1662">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1663">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1664">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1665">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1666">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1667">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1668">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1669">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1670">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1671">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1671">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="c233f-1672">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1672">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1673">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1673">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1674">계산 스택 맨 위에 있는 값을 <see langword="unsigned native int" />로 변환하고 <see langword="native int" />로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1674">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1675">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1676">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1676">Format</span></span>|<span data-ttu-id="c233f-1677">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1677">Assembly Format</span></span>|<span data-ttu-id="c233f-1678">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1679">E0</span><span class="sxs-lookup"><span data-stu-id="c233f-1679">E0</span></span>|<span data-ttu-id="c233f-1680">conv.u</span><span class="sxs-lookup"><span data-stu-id="c233f-1680">conv.u</span></span>|<span data-ttu-id="c233f-1681">변환할 `unsigned native int`고 `native int` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1681">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1682">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1683">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1684">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1685">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1686">`conv.u` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1686">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1687">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1688">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1689">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1690">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1691">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1692">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1693">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1694">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1695">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1696">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1697">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1699">계산 스택 맨 위에 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1699">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1700">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1701">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1701">Format</span></span>|<span data-ttu-id="c233f-1702">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1702">Assembly Format</span></span>|<span data-ttu-id="c233f-1703">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1704">D2</span><span class="sxs-lookup"><span data-stu-id="c233f-1704">D2</span></span>|<span data-ttu-id="c233f-1705">conv.u1</span><span class="sxs-lookup"><span data-stu-id="c233f-1705">conv.u1</span></span>|<span data-ttu-id="c233f-1706">변환할 `int8`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1706">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1707">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1708">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1708">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1709">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1709">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1710">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1710">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1711">`conv.u1` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1711">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1712">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1712">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1713">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1713">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1714">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1714">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1715">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1715">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1716">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1716">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1717">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1717">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1718">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1718">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1719">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1719">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1720">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1720">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1721">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1721">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1722">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1723">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1723">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1724">계산 스택 맨 위에 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1724">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1725">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1726">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1726">Format</span></span>|<span data-ttu-id="c233f-1727">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1727">Assembly Format</span></span>|<span data-ttu-id="c233f-1728">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1729">D1</span><span class="sxs-lookup"><span data-stu-id="c233f-1729">D1</span></span>|<span data-ttu-id="c233f-1730">conv.u2</span><span class="sxs-lookup"><span data-stu-id="c233f-1730">conv.u2</span></span>|<span data-ttu-id="c233f-1731">변환할 `int16`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1731">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1732">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1733">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1733">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1734">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1734">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1735">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1735">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1736">`conv.u2` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1736">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1737">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1737">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1738">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1738">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1739">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1739">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1740">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1740">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1741">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1741">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1742">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1742">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1743">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1743">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1744">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1744">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1745">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1745">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1746">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1746">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1747">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1747">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1748">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1748">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1749">계산 스택 맨 위에 있는 값을 <see langword="unsigned int32" />로 변환하고 <see langword="int32" />로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1749">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1750">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1750">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1751">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1751">Format</span></span>|<span data-ttu-id="c233f-1752">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1752">Assembly Format</span></span>|<span data-ttu-id="c233f-1753">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1753">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1754">6D</span><span class="sxs-lookup"><span data-stu-id="c233f-1754">6D</span></span>|<span data-ttu-id="c233f-1755">conv.u4</span><span class="sxs-lookup"><span data-stu-id="c233f-1755">conv.u4</span></span>|<span data-ttu-id="c233f-1756">변환할 `unsigned int32`고 `int32` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1756">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1757">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1757">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1758">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1758">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1759">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1759">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1760">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1760">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1761">`conv.u4` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1761">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1762">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1762">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1763">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1763">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1764">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1764">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1765">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1765">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1766">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1766">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1767">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1767">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1768">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1768">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1769">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1769">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1770">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1770">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1771">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1771">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1772">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1772">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1773">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1773">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1774">계산 스택 맨 위에 있는 값을 <see langword="unsigned int64" />로 변환하고 <see langword="int64" />로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1774">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1775">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1775">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1776">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1776">Format</span></span>|<span data-ttu-id="c233f-1777">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1777">Assembly Format</span></span>|<span data-ttu-id="c233f-1778">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1778">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1779">6E</span><span class="sxs-lookup"><span data-stu-id="c233f-1779">6E</span></span>|<span data-ttu-id="c233f-1780">conv.u8</span><span class="sxs-lookup"><span data-stu-id="c233f-1780">conv.u8</span></span>|<span data-ttu-id="c233f-1781">변환할 `int64`고 `int64` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1781">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="c233f-1782">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1782">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1783">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1783">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1784">`value` 팝 되 고 변환 작업이 시도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1784">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="c233f-1785">변환이 성공 하는 경우 결과 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1785">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1786">`conv.u8` opcode 변환는 `value` opcode 및 스택의 맨 위에 있는 값을 변환 하는 연결 해제에 지정 된 형식과 스택 맨 위에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1786">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="c233f-1787">4 바이트 보다 작은 정수 값을 확장 하 `int32` 를 계산 스택으로 로드 되 면 (하지 않는 한 `conv.i` 또는 `conv.u` 사용 되는 경우 결과 또한 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1787">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="c233f-1788">부동 소수점 값으로 변환 됩니다는 `F` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1788">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="c233f-1789">부동 소수점 숫자를 정수 값으로 변환 수를 0이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1789">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="c233f-1790">변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1790">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="c233f-1791">경우 `value` 에 맞게 너무 커서는 `float32 (F)`, 양의 무한대 (경우 `value` 가 양수) 음의 무한대 또는 (경우 `value` 가 음수)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1791">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="c233f-1792">오버플로가 발생 간에 변환 하는 동안 하나의 정수 형식, 상위 비트는 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1792">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="c233f-1793">결과 보다 작은 경우는 `int32`, 값이 부호 확장 된 슬롯을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1793">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="c233f-1794">오버플로가 발생 하는 경우 지정 되지 않습니다 값이 반환 하는 정수를 부동 소수점 형식을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1794">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="c233f-1795">이 필드를 사용 하는 경우에 없음 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1795">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="c233f-1796">참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> 및 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> 제대로 결과 형식은 결과 값을 나타내지 수 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1796">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="c233f-1797">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1797">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1798">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1798">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1799">지정된 수의 바이트를 소스 주소에서 대상 주소로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1799">Copies a specified number bytes from a source address to a destination address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1800">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1801">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1801">Format</span></span>|<span data-ttu-id="c233f-1802">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1802">Assembly Format</span></span>|<span data-ttu-id="c233f-1803">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1804">FE 17</span><span class="sxs-lookup"><span data-stu-id="c233f-1804">FE 17</span></span>|<span data-ttu-id="c233f-1805">cpblk</span><span class="sxs-lookup"><span data-stu-id="c233f-1805">cpblk</span></span>|<span data-ttu-id="c233f-1806">메모리 블록에서 데이터를 다른 위치로 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1806">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="c233f-1807">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1808">대상 주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1808">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1809">소스 주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1809">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1810">복사할 바이트 수를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1810">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-1811">바이트, 원본 주소 및 대상 주소 수가 스택에서 팝 되 고 지정 된 바이트 수는 대상 주소에는 원본 주소에서 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1811">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="c233f-1812">`cpblk` 숫자를 복사 하는 명령 (형식 `unsigned int32`) 원본 주소에서 바이트 (형식의 `*`, `native int`, 또는 `&`) 대상 주소 (형식의 `*`, `native int`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1812">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="c233f-1813">동작은 `cpblk` 원본 및 대상 영역이 겹치면 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1813">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="c233f-1814">`cpblk` 소스와 대상 주소가 지정 된 컴퓨터의 원래 크기에 정렬 되어 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1814">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="c233f-1815">`cpblk` 명령 바로 앞에 여는 `unaligned.<prefix>` 소스 또는 대상 정렬 임을 나타내기 위해 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1815">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="c233f-1816">작업은 `cpblk` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1816">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-1817"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1817"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-1818">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cpblk` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1820">개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소에 있는 값 형식을 대상 개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1820">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1821">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1822">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1822">Format</span></span>|<span data-ttu-id="c233f-1823">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1823">Assembly Format</span></span>|<span data-ttu-id="c233f-1824">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1825">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-1825">70 < `T` ></span></span>|<span data-ttu-id="c233f-1826">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="c233f-1826">cpobj `classTok`</span></span>|<span data-ttu-id="c233f-1827">대상 개체에 값 복사는 원본 개체에서 입력합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1827">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="c233f-1828">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1829">대상 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1829">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1830">소스 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1830">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1831">두 개체 참조는 스택에서 팝 됩니다. 원본 개체의 주소에 있는 값 형식의 대상 개체의 주소에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1831">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="c233f-1832">동작 `cpobj` 원본 및 대상 개체가 참조 클래스 토큰이 나타내는 클래스의 인스턴스를 가리키는 포인터가 지정 되지 않았습니다 `classTok` (한 `typeref` 또는 `typedef`), if 또는 `classTok` 나타내지 않습니다는 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1832">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="c233f-1833"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1833"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-1834">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cpobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1834">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1835">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-1835">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1836">두 값을 나누고 결과를 부동 소수점(<see langword="F" /> 형식)이나 몫(<see langword="int32" /> 형식)으로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1836">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1837">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1837">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1838">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1838">Format</span></span>|<span data-ttu-id="c233f-1839">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1839">Assembly Format</span></span>|<span data-ttu-id="c233f-1840">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1840">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1841">5B</span><span class="sxs-lookup"><span data-stu-id="c233f-1841">5B</span></span>|<span data-ttu-id="c233f-1842">div</span><span class="sxs-lookup"><span data-stu-id="c233f-1842">div</span></span>|<span data-ttu-id="c233f-1843">Quotient 또는 부동 소수점 결과를 반환 하는 두 개의 값을 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1843">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="c233f-1844">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1844">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1845">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1845">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1846">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1846">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1847">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 나눈 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1847">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-1848">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1848">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1849">`result` = `value1` 다음 조건을 충족 하는 div value2:</span><span class="sxs-lookup"><span data-stu-id="c233f-1849">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="c233f-1850">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, 및:</span><span class="sxs-lookup"><span data-stu-id="c233f-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="c233f-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span><span class="sxs-lookup"><span data-stu-id="c233f-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="c233f-1852">`div` 명령이 결과 계산 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1852">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="c233f-1853">정수 나누기를 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1853">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="c233f-1854">0으로 한정 된 수의 무한 올바르게 지정 된 값을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1854">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="c233f-1855">0으로 또는 무한대에서 무한대 생성 NaN (Not A Number) 값을 나눕니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1855">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="c233f-1856">무한대로 나눈 수는 0 값을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1856">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="c233f-1857">정수 연산 throw <xref:System.ArithmeticException> 결과 형식으로 결과 표현할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="c233f-1857">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="c233f-1858">이 경우 발생할 수 있습니다 `value1` 최대 음수 값은 및 `value2` 은-1입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1858">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="c233f-1859">정수 연산 throw <xref:System.DivideByZeroException> 경우 `value2` 은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1859">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="c233f-1860">Intel 기반 플랫폼에서 유의 <xref:System.OverflowException> (minint div-1)를 계산할 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1860">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="c233f-1861">부동 소수점 연산 (낼 무한대 또는 Nan 대신) 하는 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1861">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="c233f-1862">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `div` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1862">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1863">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1863">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1864">두 개의 부호 없는 정수를 나누고 결과(<see langword="int32" />)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1864">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1865">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1866">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1866">Format</span></span>|<span data-ttu-id="c233f-1867">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1867">Assembly Format</span></span>|<span data-ttu-id="c233f-1868">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1869">5C</span><span class="sxs-lookup"><span data-stu-id="c233f-1869">5C</span></span>|<span data-ttu-id="c233f-1870">div.un</span><span class="sxs-lookup"><span data-stu-id="c233f-1870">div.un</span></span>|<span data-ttu-id="c233f-1871">두 값을 나눕니다 unsigned, 몫을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1871">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="c233f-1872">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1873">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1873">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1874">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1874">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1875">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 나눈 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1875">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-1876">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1876">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1877">`div.un` 명령 계산 `value1` 나눈 `value2`, 부호 없는 정수 및 푸시를 그대로 둘 다는 `result` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1877">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="c233f-1878">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `div.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1879">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1879">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1880">현재 계산 스택 맨 위에 있는 값을 복사하여 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1880">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1881">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1881">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1882">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1882">Format</span></span>|<span data-ttu-id="c233f-1883">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1883">Assembly Format</span></span>|<span data-ttu-id="c233f-1884">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1884">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1885">25</span><span class="sxs-lookup"><span data-stu-id="c233f-1885">25</span></span>|<span data-ttu-id="c233f-1886">dup</span><span class="sxs-lookup"><span data-stu-id="c233f-1886">dup</span></span>|<span data-ttu-id="c233f-1887">스택의 맨 위에 있는 값을 복제합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1887">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="c233f-1888">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1888">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1889">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1889">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1890">`value` 복제를 위해 스택에서 팝 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1890">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="c233f-1891">`value` 가 스택에 밀어 넣은 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1891">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-1892">중복 값을 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1892">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1893">`dup` 명령은 스택의 맨 위에 있는 요소를 복제 하 고 맨 위에 동일한 두 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1893">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="c233f-1894">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `dup` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1895">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1895">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1896">예외의 <see langword="filter" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1896">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1897">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1898">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1898">Format</span></span>|<span data-ttu-id="c233f-1899">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1899">Assembly Format</span></span>|<span data-ttu-id="c233f-1900">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1901">FE 11</span><span class="sxs-lookup"><span data-stu-id="c233f-1901">FE 11</span></span>|<span data-ttu-id="c233f-1902">endfilter</span><span class="sxs-lookup"><span data-stu-id="c233f-1902">endfilter</span></span>|<span data-ttu-id="c233f-1903">SEH 예외 처리의 끝 필터 절입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1903">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="c233f-1904">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1905">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1905">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1906">`value` 스택에서 팝 `endfilter` 실행 되 고 예외 처리기로 제어가 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1906">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="c233f-1907">`Value` (형식의 이어야 `int32` 을 특정 값 집합 중 하나) 필터 절에서 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1907">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="c233f-1908">하나 여야 함:</span><span class="sxs-lookup"><span data-stu-id="c233f-1908">It should be one of:</span></span>  
  
-   <span data-ttu-id="c233f-1909">`exception_continue_search` (`value` = 0)는 예외 처리기에 대 한 검색을 계속 하려면</span><span class="sxs-lookup"><span data-stu-id="c233f-1909">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="c233f-1910">`exception_execute_handler` (`value` = 1) 두 번째 시작 하는 finally 블록이 실행 되는 처리기가 필터 절이에 연관 될 때까지 예외 처리의 단계 위치한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1910">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="c233f-1911">처리기가 발견 하는 즉시 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1911">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="c233f-1912">다른 정수 값에 지정 되지 않은 결과가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1912">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="c233f-1913">필터의 진입점 메서드 예외 테이블에 나와 있는 것 처럼 필터의 코드 블록에 있는 첫 번째 명령 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1913">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="c233f-1914">`endfilter` 명령 필터의 코드 블록에 있는 마지막 명령 이어야 합니다. (따라서 하나만 있을 수 있습니다 하나 `endfilter` 모든 단일 필터 블록에 대 한).</span><span class="sxs-lookup"><span data-stu-id="c233f-1914">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="c233f-1915">실행 한 후의 `endfilter` 명령 컨트롤 CLI 예외 처리 메커니즘에 다시 논리적으로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1915">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="c233f-1916">예외 메커니즘을 통해 제외 하 고 필터 블록으로 컨트롤을 전송할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1916">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="c233f-1917">컨트롤을 사용 하 여 제외 하 고 필터 블록 밖으로 전송할 수 없습니다는 `throw` 명령 또는 최종을 실행 하 여 `endfilter` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1917">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="c233f-1918">포함할 수 없습니다는 `try` 블록 내에 `filter` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1918">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="c233f-1919">내에서 예외가 throw 되는 경우는 `filter` 블록 차단 되 고 값이 0 (`exception_continue_search`) 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1919">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="c233f-1920">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `endfilter` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1920">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1921">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1921">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1922">예외 블록의 <see langword="fault" /> 절이나 <see langword="finally" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1922">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1923">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1923">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1924">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1924">Format</span></span>|<span data-ttu-id="c233f-1925">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1925">Assembly Format</span></span>|<span data-ttu-id="c233f-1926">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1926">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1927">DC</span><span class="sxs-lookup"><span data-stu-id="c233f-1927">DC</span></span>|<span data-ttu-id="c233f-1928">endfinally</span><span class="sxs-lookup"><span data-stu-id="c233f-1928">endfinally</span></span><br /><br /> <span data-ttu-id="c233f-1929">endfault</span><span class="sxs-lookup"><span data-stu-id="c233f-1929">endfault</span></span>|<span data-ttu-id="c233f-1930">종료는 `finally` 또는 `fault` 예외 블록의 절.</span><span class="sxs-lookup"><span data-stu-id="c233f-1930">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="c233f-1931">이 명령에 대 한 전환 동작은 스택이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1931">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-1932">`Endfinally` 및 `endfault` 의 끝에서 `finally` 또는 `fault` 절 예외 처리기가 호출 될 때까지 해당 스택 해제 계속 될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1932">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="c233f-1933">`endfinally` 또는 `endfault` 명령이 다시 CLI 예외 메커니즘에 제어를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1933">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="c233f-1934">다음으로 검색 한 메커니즘 다음 `finally` leave 명령을 사용 하는 보호 된 블록 끝난 경우 체인에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1934">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="c233f-1935">보호 된 블록을 끝난 경우 예외가 발생 하 여 CLI가 다음을 검색할 `finally` 또는 `fault`, 또는 예외 처리의 첫 번째 단계에서 선택한 예외 처리기를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1935">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="c233f-1936">`endfinally` 명령만 내 어휘 적으로 나타날 수 있습니다는 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1936">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="c233f-1937">와 달리는 `endfilter` 명령 블록으로 끝나는 요구 사항은 없습니다는 `endfinally` 명령과 만큼 있을 수 있습니다 `endfinally` 필요에 따라 블록 내에 있는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1937">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="c233f-1938">이러한 동일한 제한이 적용 된 `endfault` 명령 및 `fault` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1938">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="c233f-1939">으로 제어를 전달할 수는 `finally` (또는 `fault`) 예외 메커니즘을 통해 제외 하 고 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1939">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="c233f-1940">제어를 전달할 수 없습니다는 `finally` (또는 `fault`)을 사용 하 여 제외 하 고 차단는 `throw` 명령 또는 명령 실행은 `endfinally` (또는 `endfault`) 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1940">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="c233f-1941">특히 떨어질 수 없습니다"out"의 `finally` (또는 `fault`) 블록 하거나 실행 하는 <xref:System.Reflection.Emit.OpCodes.Ret> 또는 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 내에서 한 `finally` (또는 `fault`) 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1941">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="c233f-1942">`endfault` 및 `endfinally` 지침은 별칭-같은 opcode에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1942">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="c233f-1943">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `endfinally` (`endfault`) opcode로 `ILGenerator` 메서드 <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="c233f-1944">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1944">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="c233f-1945">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="c233f-1945">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1946">특정 주소에 지정된 메모리 블록을 주어진 크기와 초기 값으로 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1946">Initializes a specified block of memory at a specific address to a given size and initial value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1947">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1947">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1948">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1948">Format</span></span>|<span data-ttu-id="c233f-1949">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1949">Assembly Format</span></span>|<span data-ttu-id="c233f-1950">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1950">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1951">FE 18</span><span class="sxs-lookup"><span data-stu-id="c233f-1951">FE 18</span></span>|<span data-ttu-id="c233f-1952">initblk</span><span class="sxs-lookup"><span data-stu-id="c233f-1952">initblk</span></span>|<span data-ttu-id="c233f-1953">지정된 된 값에는 메모리 블록에서 각 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1953">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="c233f-1954">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1954">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1955">시작 주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1955">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1956">초기화 값 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1956">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-1957">초기화 하는 바이트 수를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1957">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-1958">바이트 수, 초기화 값에서 시작 주소는 스택에서 팝 되 고 및 해당 값에 따라 초기화가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1958">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="c233f-1959">`initblk` 수를 설정 하는 명령 (`unsigned int32`) 지정된 된 주소에서 시작 하는 바이트 (형식의 `native int`, `&`, 또는 `*`)를 초기값 (형식의 `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="c233f-1959">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="c233f-1960">`initblk` 시작 주소는 컴퓨터의 원래 크기에 정렬 되도록 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1960">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="c233f-1961">작업은 `initblk` 바로 앞에서 지침을 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1961">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-1962"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1962"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-1963">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `initblk` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1964">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-1964">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1965">지정된 주소에서 값 형식의 각 필드를 null 참조 또는 적절한 기본 형식의 0으로 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1965">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1966">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1966">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1967">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1967">Format</span></span>|<span data-ttu-id="c233f-1968">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1968">Assembly Format</span></span>|<span data-ttu-id="c233f-1969">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1969">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1970">FE 15 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-1970">FE 15 < `T` ></span></span>|<span data-ttu-id="c233f-1971">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="c233f-1971">`initobj` `typeTok`</span></span>|<span data-ttu-id="c233f-1972">값 유형을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="c233f-1973">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1974">초기화 하는 값 형식의 주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1975">스택에서 팝 되는 주소 지정된 된 주소에서 값 형식이 형식으로 초기화 되어 `typeTok`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="c233f-1976">`initobj` 명령 푸시된 주소로 지정 된 값 형식의 각 필드를 초기화 합니다 (형식의 `native int`, `&`, 또는 `*`) null 참조 또는 해당 기본 형식의 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="c233f-1977">이 메서드는 후 인스턴스를 생성자 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="c233f-1978">경우 `typeTok` 참조 형식인 것과 동일한 결과가이 명령 `ldnull` 이어서 `stind.ref`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="c233f-1979">와 달리 <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` 생성자 메서드를 호출 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="c233f-1980">`Initobj` 값 형식 초기화를 위한 동안 `newobj` 할당 및 개체를 초기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1980">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="c233f-1981">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `initobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-1982">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-1983">개체 참조(<see langword="O" /> 형식)가 특정 클래스의 인스턴스인지 여부를 테스트합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-1984">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-1985">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1985">Format</span></span>|<span data-ttu-id="c233f-1986">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-1986">Assembly Format</span></span>|<span data-ttu-id="c233f-1987">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-1988">75 < `T` ></span></span>|<span data-ttu-id="c233f-1989">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-1989">isinst `class`</span></span>|<span data-ttu-id="c233f-1990">개체 참조의 인스턴스가 있는지를 테스트 `class`인터페이스 이거나 null 참조 또는 해당 클래스의 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="c233f-1991">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-1992">한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-1993">개체 참조는 스택에서 팝 하 고에 전달 된 클래스의 인스턴스 인지 테스트 `class`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="c233f-1994">(개체 참조 또는 null 참조일) 결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-1995">`Class` 메타 데이터 토큰은 필요한 클래스를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1995">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="c233f-1996">스택의 맨 위에 있는 개체의 클래스를 구현 하는 경우 `class` (경우 `class` 인터페이스)는의 파생된 클래스 또는 `class` (경우 `class` 는 일반 클래스) 형식으로 캐스팅 되 `class` 고 결과를 스택에 푸시됩니다. 정확 하 게 처럼 <xref:System.Reflection.Emit.OpCodes.Castclass> 호출한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="c233f-1997">그렇지 않으면 null 참조 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="c233f-1998">개체 참조 자체가 null 참조 `isinst` 마찬가지로 null 참조를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="c233f-1999"><xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-1999"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="c233f-2000">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-2001">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `isinst` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2002">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2003">현재 메서드를 종료하고 지정된 메서드로 점프합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2003">Exits current method and jumps to specified method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2004">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2005">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2005">Format</span></span>|<span data-ttu-id="c233f-2006">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2006">Assembly Format</span></span>|<span data-ttu-id="c233f-2007">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2008">27 < `T` ></span></span>|<span data-ttu-id="c233f-2009">jmp `method`</span><span class="sxs-lookup"><span data-stu-id="c233f-2009">jmp `method`</span></span>|<span data-ttu-id="c233f-2010">현재 메서드를 종료 하 고 지정 된 메서드로 점프 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="c233f-2011">이 명령에 대 한 전환 동작은 스택이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-2012">`jmp` (점프) 명령으로 제어를 전송으로 지정한 메서드의 `method`은 메서드 참조에 대 한 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="c233f-2013">현재 인수 대상 메서드로 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="c233f-2014">이 명령이 실행 될 때 계산 스택 비어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="c233f-2015">호출 규칙, 번호 및 대상 주소에 대 한 인수의 형식이 현재 메서드와 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="c233f-2016">`jmp` 명령 밖으로 제어를 전송 하는 데 사용할 수 없습니다는 `try`, `filter`, `catch`, 또는 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="c233f-2017">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `jmp` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2018">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2019">지정된 인덱스 값이 참조하는 인수를 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2019">Loads an argument (referenced by a specified index value) onto the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2020">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2021">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2021">Format</span></span>|<span data-ttu-id="c233f-2022">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2022">Assembly Format</span></span>|<span data-ttu-id="c233f-2023">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2024">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-2025">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-2025">ldarg `index`</span></span>|<span data-ttu-id="c233f-2026">에 있는 인수 로드 `index` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="c233f-2027">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2028">에 인수 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2029">`ldarg` 명령에 인덱싱된 인수에서 푸시하는 `index`위치 인수를 계산 스택으로에서 인덱싱된 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2030">`ldarg` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2031">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2032">가변 길이 인수 목록을 사용 하는 프로시저는 `ldarg` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 (참조는 <xref:System.Reflection.Emit.OpCodes.Arglist> 에).</span><span class="sxs-lookup"><span data-stu-id="c233f-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="c233f-2033">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2034">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2035">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2036">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2037">인덱스 0에 있는 인수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2037">Loads the argument at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2038">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2039">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2039">Format</span></span>|<span data-ttu-id="c233f-2040">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2040">Assembly Format</span></span>|<span data-ttu-id="c233f-2041">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2042">02</span><span class="sxs-lookup"><span data-stu-id="c233f-2042">02</span></span>|<span data-ttu-id="c233f-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="c233f-2043">ldarg.0</span></span>|<span data-ttu-id="c233f-2044">0 인수를 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="c233f-2045">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2046">인덱스 0에 있는 인수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2047">`ldarg.0` 명령은 인덱스 0에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="c233f-2048">`ldarg.0` 를 계산 스택으로 0에 인덱싱된 인수를 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2049">`ldarg.0` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2050">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2051">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2052">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2053">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2055">인덱스 1에 있는 인수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2055">Loads the argument at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2056">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2057">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2057">Format</span></span>|<span data-ttu-id="c233f-2058">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2058">Assembly Format</span></span>|<span data-ttu-id="c233f-2059">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2060">03</span><span class="sxs-lookup"><span data-stu-id="c233f-2060">03</span></span>|<span data-ttu-id="c233f-2061">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="c233f-2061">ldarg.1</span></span>|<span data-ttu-id="c233f-2062">1 인수를 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="c233f-2063">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2064">인덱스 1에 있는 인수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2065">`ldarg.1` 명령은 인덱스 1에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="c233f-2066">`ldarg.1` 계산 스택에 1에 인덱싱된 인수를 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2067">`ldarg.1` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2068">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2069">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2070">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2071">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2073">인덱스 2에 있는 인수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2073">Loads the argument at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2074">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2075">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2075">Format</span></span>|<span data-ttu-id="c233f-2076">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2076">Assembly Format</span></span>|<span data-ttu-id="c233f-2077">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2078">04</span><span class="sxs-lookup"><span data-stu-id="c233f-2078">04</span></span>|<span data-ttu-id="c233f-2079">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="c233f-2079">ldarg.2</span></span>|<span data-ttu-id="c233f-2080">인수 2 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="c233f-2081">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2082">인덱스 2에 있는 인수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2083">`ldarg.2` 명령은 인덱스 2에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="c233f-2084">`ldarg.2` 2를 계산 스택으로 인덱싱된 인수를 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2085">`ldarg.2` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2086">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2087">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2088">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2089">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2091">인덱스 3에 있는 인수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2091">Loads the argument at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2092">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2093">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2093">Format</span></span>|<span data-ttu-id="c233f-2094">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2094">Assembly Format</span></span>|<span data-ttu-id="c233f-2095">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2096">05</span><span class="sxs-lookup"><span data-stu-id="c233f-2096">05</span></span>|<span data-ttu-id="c233f-2097">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="c233f-2097">ldarg.3</span></span>|<span data-ttu-id="c233f-2098">인수 3 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="c233f-2099">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2100">인덱스 3에 있는 인수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2101">`ldarg.3` 명령은 인덱스 3에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="c233f-2102">`ldarg.3` 를 계산 스택으로 3에 인덱싱된 인수를 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2103">`ldarg.3` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2104">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2105">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2106">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2107">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2109">지정된 약식 인덱스가 참조하는 인수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2110">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2111">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2111">Format</span></span>|<span data-ttu-id="c233f-2112">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2112">Assembly Format</span></span>|<span data-ttu-id="c233f-2113">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2114">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-2115">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-2115">ldarg.s `index`</span></span>|<span data-ttu-id="c233f-2116">에 있는 인수 로드 `index` 스택에 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="c233f-2117">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2118">에 인수 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2119">`ldarg.s` 명령은 4에서 255 사이의 인덱싱된 인수 로드에 대 한 효율적인 인코딩할입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="c233f-2120">`ldarg.s` 명령에 인덱싱된 인수에서 푸시하는 `index`위치 인수를 계산 스택으로에서 인덱싱된 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2121">`ldarg.s` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택으로 기본 값을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="c233f-2122">인수 값 형식은 현재 메서드의 시그니처에 하 여 지정 된 인수 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-2123">가변 길이 인수 목록을 사용 하는 프로시저는 `ldarg.s` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 (참조는 <xref:System.Reflection.Emit.OpCodes.Arglist> 에).</span><span class="sxs-lookup"><span data-stu-id="c233f-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="c233f-2124">4 바이트 보다 작은 정수 값을 포함 하는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-2125">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-2126">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2127">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2128">인수 주소를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2128">Load an argument address onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2129">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2130">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2130">Format</span></span>|<span data-ttu-id="c233f-2131">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2131">Assembly Format</span></span>|<span data-ttu-id="c233f-2132">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2133">FE 0A < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-2134">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-2134">ldarga `index`</span></span>|<span data-ttu-id="c233f-2135">인덱싱된 인수 주소를 페치합니다 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="c233f-2136">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2137">주소 `addr` 의해 인덱싱된 인수의 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2138">`ldarga` 주소를 인출 하는 명령 (형식의 `*`) 의해 인덱싱된 인수의 `index`, 인수를에서 위치 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="c233f-2139">주소 `addr` 는 항상 대상 컴퓨터의 자연 경계에 맞춰집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="c233f-2140">가변 길이 인수 목록을 사용 하는 프로시저는 `ldarga` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="c233f-2141">`ldarga` 참조로 매개 변수 전달에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2141">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="c233f-2142">다른 경우 <xref:System.Reflection.Emit.OpCodes.Ldarg> 및 <xref:System.Reflection.Emit.OpCodes.Starg> 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="c233f-2143">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarga` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2144">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2145">인수 주소를 계산 스택에 약식으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2145">Load an argument address, in short form, onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2146">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2147">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2147">Format</span></span>|<span data-ttu-id="c233f-2148">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2148">Assembly Format</span></span>|<span data-ttu-id="c233f-2149">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2150">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-2151">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-2151">ldarga.s `index`</span></span>|<span data-ttu-id="c233f-2152">인덱싱된 인수 주소를 페치합니다 `index`, 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="c233f-2153">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2154">주소 `addr` 의해 인덱싱된 인수의 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2155">`ldarga.s` (의 약식 형태는 `ldarga`) 0-255 인수 번호에 사용 해야 하며 보다 효율적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2155">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="c233f-2156">`ldarga.s` 주소를 인출 하는 명령 (형식의`*`) 의해 인덱싱된 인수의 `index`, 인수를에서 위치 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="c233f-2157">주소 `addr` 는 항상 대상 컴퓨터의 자연 경계에 맞춰집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="c233f-2158">가변 길이 인수 목록을 사용 하는 프로시저는 `ldarga.s` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="c233f-2159">`ldarga.s` 참조로 매개 변수 전달에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2159">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="c233f-2160">다른 경우 <xref:System.Reflection.Emit.OpCodes.Ldarg_S> 및 <xref:System.Reflection.Emit.OpCodes.Starg_S> 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="c233f-2161">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarga.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2162">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2163">
            <see langword="int32" /> 형식의 주어진 값을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2164">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2165">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2165">Format</span></span>|<span data-ttu-id="c233f-2166">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2166">Assembly Format</span></span>|<span data-ttu-id="c233f-2167">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2168">20 < `int32` ></span></span>|<span data-ttu-id="c233f-2169">ldc.i4 `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-2169">ldc.i4 `num`</span></span>|<span data-ttu-id="c233f-2170">값을 푸시합니다 `num` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2171">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2172">값 `num` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2173">Note 정수-128에서 127, 짧은 인코딩이-1-8에 대 한를 통해에 대 한 특수 한 짧은 (및 따라서 보다 효율적인) 인코딩은 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="c233f-2174">모든 짧은 인코딩으로 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="c233f-2175">8 바이트 정수 및 4 및 8 바이트 부동 소수점 숫자와 같은 짧은 형식으로 표시할 수 없는 4 바이트 값 긴 인코딩이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="c233f-2176">세 가지 방법으로 8 바이트 정수 상수를 스택에 푸시할 수</span><span class="sxs-lookup"><span data-stu-id="c233f-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="c233f-2177">사용 하 여 <xref:System.Reflection.Emit.OpCodes.Ldc_I8> 32 비트 이상에 표현 하는 상수에 대 한 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="c233f-2178">사용 하 여는 <xref:System.Reflection.Emit.OpCodes.Ldc_I4> 명령 다음에 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 9 ~ 32 비트를 필요로 하는 상수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="c233f-2179">약식 명령을 수행한를 사용 하 여 한 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 비트 8 이하로 표현할 수 있는 상수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="c233f-2180">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2181">ILGenerator.Emit(OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="c233f-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2182">정수 값 0을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2183">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2184">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2184">Format</span></span>|<span data-ttu-id="c233f-2185">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2185">Assembly Format</span></span>|<span data-ttu-id="c233f-2186">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2187">16</span><span class="sxs-lookup"><span data-stu-id="c233f-2187">16</span></span>|<span data-ttu-id="c233f-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="c233f-2188">ldc.i4.0</span></span>|<span data-ttu-id="c233f-2189">0을 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2190">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2191">값이 0으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2192">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2193">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2194">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2196">정수 값 1을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2197">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2198">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2198">Format</span></span>|<span data-ttu-id="c233f-2199">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2199">Assembly Format</span></span>|<span data-ttu-id="c233f-2200">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2201">17</span><span class="sxs-lookup"><span data-stu-id="c233f-2201">17</span></span>|<span data-ttu-id="c233f-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="c233f-2202">ldc.i4.1</span></span>|<span data-ttu-id="c233f-2203">1을 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2204">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2205">값 1 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2206">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2207">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2208">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2210">정수 값 2를 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2211">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2212">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2212">Format</span></span>|<span data-ttu-id="c233f-2213">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2213">Assembly Format</span></span>|<span data-ttu-id="c233f-2214">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2215">18</span><span class="sxs-lookup"><span data-stu-id="c233f-2215">18</span></span>|<span data-ttu-id="c233f-2216">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="c233f-2216">ldc.i4.2</span></span>|<span data-ttu-id="c233f-2217">2를 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2218">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2219">값 2 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2220">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2221">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2222">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2224">정수 값 3을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2225">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2226">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2226">Format</span></span>|<span data-ttu-id="c233f-2227">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2227">Assembly Format</span></span>|<span data-ttu-id="c233f-2228">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2229">19</span><span class="sxs-lookup"><span data-stu-id="c233f-2229">19</span></span>|<span data-ttu-id="c233f-2230">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="c233f-2230">ldc.i4.3</span></span>|<span data-ttu-id="c233f-2231">3을 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2232">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2233">값이 3으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2234">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2235">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2236">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2238">정수 값 4를 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2239">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2240">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2240">Format</span></span>|<span data-ttu-id="c233f-2241">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2241">Assembly Format</span></span>|<span data-ttu-id="c233f-2242">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2243">1A</span><span class="sxs-lookup"><span data-stu-id="c233f-2243">1A</span></span>|<span data-ttu-id="c233f-2244">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="c233f-2244">ldc.i4.4</span></span>|<span data-ttu-id="c233f-2245">4를 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2246">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2247">값 4 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2248">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2249">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2250">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2252">정수 값 5를 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2253">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2254">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2254">Format</span></span>|<span data-ttu-id="c233f-2255">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2255">Assembly Format</span></span>|<span data-ttu-id="c233f-2256">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2257">1B</span><span class="sxs-lookup"><span data-stu-id="c233f-2257">1B</span></span>|<span data-ttu-id="c233f-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="c233f-2258">ldc.i4.5</span></span>|<span data-ttu-id="c233f-2259">5 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2260">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2261">값 5 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2262">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2263">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2264">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.5` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2266">정수 값 6을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2267">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2268">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2268">Format</span></span>|<span data-ttu-id="c233f-2269">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2269">Assembly Format</span></span>|<span data-ttu-id="c233f-2270">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2271">1C</span><span class="sxs-lookup"><span data-stu-id="c233f-2271">1C</span></span>|<span data-ttu-id="c233f-2272">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="c233f-2272">ldc.i4.6</span></span>|<span data-ttu-id="c233f-2273">6 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2274">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2275">값 6 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2276">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2277">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2278">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.6` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2280">정수 값 7을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2281">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2282">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2282">Format</span></span>|<span data-ttu-id="c233f-2283">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2283">Assembly Format</span></span>|<span data-ttu-id="c233f-2284">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2285">1D</span><span class="sxs-lookup"><span data-stu-id="c233f-2285">1D</span></span>|<span data-ttu-id="c233f-2286">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="c233f-2286">ldc.i4.7</span></span>|<span data-ttu-id="c233f-2287">7을 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2288">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2289">값 7 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2290">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2291">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2292">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.7` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2294">정수 값 8을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2295">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2296">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2296">Format</span></span>|<span data-ttu-id="c233f-2297">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2297">Assembly Format</span></span>|<span data-ttu-id="c233f-2298">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2299">1E</span><span class="sxs-lookup"><span data-stu-id="c233f-2299">1E</span></span>|<span data-ttu-id="c233f-2300">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="c233f-2300">ldc.i4.8</span></span>|<span data-ttu-id="c233f-2301">8 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2302">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2303">8 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2304">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2305">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2306">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2308">정수 값 -1을 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2309">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2310">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2310">Format</span></span>|<span data-ttu-id="c233f-2311">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2311">Assembly Format</span></span>|<span data-ttu-id="c233f-2312">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2313">15</span><span class="sxs-lookup"><span data-stu-id="c233f-2313">15</span></span>|<span data-ttu-id="c233f-2314">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="c233f-2314">ldc.i4.m1</span></span>|<span data-ttu-id="c233f-2315">-1을 스택에 밀어넣습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2316">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2317">-1 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2318">이 정수 값 0 한 번에 대 한 특별 한 짧은 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="c233f-2319">모든 특수 한 짧은 인코딩을 4 바이트 정수 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="c233f-2320">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.m1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2322">주어진 <see langword="int8" /> 값을 약식인 <see langword="int32" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2323">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2324">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2324">Format</span></span>|<span data-ttu-id="c233f-2325">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2325">Assembly Format</span></span>|<span data-ttu-id="c233f-2326">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2327">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2327">1F < `int8` ></span></span>|<span data-ttu-id="c233f-2328">ldc.i4.s `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-2328">ldc.i4.s `num`</span></span>|<span data-ttu-id="c233f-2329">푸시 `num` 로 스택에 `int32`, 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="c233f-2330">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2331">값 `num` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2331">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2332">`ldc.i4.s` 계산 스택으로 정수-128에서 127 푸시할 보다 효율적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2332">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2333">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2334">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2335">
            <see langword="int64" /> 형식의 주어진 값을 <see langword="int64" />로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2336">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2337">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2337">Format</span></span>|<span data-ttu-id="c233f-2338">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2338">Assembly Format</span></span>|<span data-ttu-id="c233f-2339">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2340">21 < `int64` ></span></span>|<span data-ttu-id="c233f-2341">ldc.i8 `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="c233f-2342">푸시 `num` 로 스택에 `int64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="c233f-2343">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2344">값 `num` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2345">이 인코딩은 푸시합니다는 `int64` 스택으로 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2346">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2347">ILGenerator.Emit(OpCode, long)</span><span class="sxs-lookup"><span data-stu-id="c233f-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2348">
            <see langword="float32" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2349">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2350">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2350">Format</span></span>|<span data-ttu-id="c233f-2351">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2351">Assembly Format</span></span>|<span data-ttu-id="c233f-2352">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2353">22 < `float32` ></span></span>|<span data-ttu-id="c233f-2354">ldc.r4 `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="c233f-2355">푸시 `num` 로 스택에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2356">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2357">값 `num` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2358">이 인코딩은 푸시합니다는 `float32` 스택으로 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2359">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2360">ILGenerator.Emit(OpCode, single)</span><span class="sxs-lookup"><span data-stu-id="c233f-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2361">
            <see langword="float64" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2362">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2363">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2363">Format</span></span>|<span data-ttu-id="c233f-2364">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2364">Assembly Format</span></span>|<span data-ttu-id="c233f-2365">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2366">23 < `float64` ></span></span>|<span data-ttu-id="c233f-2367">ldc.r8 `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="c233f-2368">푸시 `num` 로 스택에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2369">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2370">값 `num` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2371">이 인코딩은 푸시합니다는 `float64` 스택으로 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2372">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2373">ILGenerator.Emit(OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="c233f-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2374">지정된 배열 인덱스에 있는 요소를 이 명령에 지정된 형식으로 계산 스택 맨 위에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2375">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft MSIL (intermediate language) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2376">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2376">Format</span></span>|<span data-ttu-id="c233f-2377">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2377">Assembly Format</span></span>|<span data-ttu-id="c233f-2378">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2379">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2379">A3 < `T` ></span></span>|<span data-ttu-id="c233f-2380">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="c233f-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="c233f-2381">에 있는 요소를 로드 `index` 형식으로 스택 맨 위에 `typeTok`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="c233f-2382">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2383">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2384">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2385">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2386">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2387">`ldelem` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2388">배열 개체 및 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2389">토큰이 지정 된 반환 값의 형식 `typeTok` 명령에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="c233f-2390"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2391"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나의 상한 보다 큰 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2392">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2393">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2394">지정된 배열 인덱스에서 <see langword="native int" /> 형식을 갖는 요소를 계산 스택 위에 <see langword="native int" />로서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2395">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2396">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2396">Format</span></span>|<span data-ttu-id="c233f-2397">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2397">Assembly Format</span></span>|<span data-ttu-id="c233f-2398">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2399">97</span><span class="sxs-lookup"><span data-stu-id="c233f-2399">97</span></span>|<span data-ttu-id="c233f-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="c233f-2400">ldelem.i</span></span>|<span data-ttu-id="c233f-2401">형식의 요소를 로드 `native int` 에서 `index` 로 스택 맨 위에 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="c233f-2402">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2403">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2404">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2405">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2406">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2407">`ldelem.i` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2408">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2409">반환 값에 대 한 `ldelem.i` 은 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="c233f-2410">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2411"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2412"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2413"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2414">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2416">지정된 배열 인덱스의 <see langword="int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2417">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2418">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2418">Format</span></span>|<span data-ttu-id="c233f-2419">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2419">Assembly Format</span></span>|<span data-ttu-id="c233f-2420">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2421">90</span><span class="sxs-lookup"><span data-stu-id="c233f-2421">90</span></span>|<span data-ttu-id="c233f-2422">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-2422">ldelem.i1</span></span>|<span data-ttu-id="c233f-2423">형식의 요소를 로드 `int8` 에서 `index` 로 스택 맨 위에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2424">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2425">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2426">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2427">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2428">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2429">`ldelem.i1` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2430">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2431">반환 값에 대 한 `ldelem.i1` 은 `int8`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="c233f-2432">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2433"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2434"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2435"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2436">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2438">지정된 배열 인덱스의 <see langword="int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2439">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2440">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2440">Format</span></span>|<span data-ttu-id="c233f-2441">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2441">Assembly Format</span></span>|<span data-ttu-id="c233f-2442">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2443">92</span><span class="sxs-lookup"><span data-stu-id="c233f-2443">92</span></span>|<span data-ttu-id="c233f-2444">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-2444">ldelem.i2</span></span>|<span data-ttu-id="c233f-2445">형식의 요소를 로드 `int16` 에서 `index` 로 스택 맨 위에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2446">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2447">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2448">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2449">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2450">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2451">`ldelem.i2` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2452">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2453">반환 값에 대 한 `ldelem.i2` 은 `int16`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="c233f-2454">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2455"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2456"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2457"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2458">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2460">지정된 배열 인덱스의 <see langword="int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2461">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2462">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2462">Format</span></span>|<span data-ttu-id="c233f-2463">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2463">Assembly Format</span></span>|<span data-ttu-id="c233f-2464">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2465">94</span><span class="sxs-lookup"><span data-stu-id="c233f-2465">94</span></span>|<span data-ttu-id="c233f-2466">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-2466">ldelem.i4</span></span>|<span data-ttu-id="c233f-2467">형식의 요소를 로드 `int32` 에서 `index` 로 스택 맨 위에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2468">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2469">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2470">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2471">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2472">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2473">`ldelem.i4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2474">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2475">반환 값에 대 한 `ldelem.i4` 은 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2476">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2477"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2478"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2479"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2480">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2482">지정된 배열 인덱스의 <see langword="int64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int64" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2483">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2484">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2484">Format</span></span>|<span data-ttu-id="c233f-2485">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2485">Assembly Format</span></span>|<span data-ttu-id="c233f-2486">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2487">96</span><span class="sxs-lookup"><span data-stu-id="c233f-2487">96</span></span>|<span data-ttu-id="c233f-2488">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-2488">ldelem.i8</span></span>|<span data-ttu-id="c233f-2489">형식의 요소를 로드 `int64` 에서 `index` 로 스택 맨 위에 `int64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="c233f-2490">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2491">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2492">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2493">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2494">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2495">`ldelem.i8` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2496">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2497">반환 값에 대 한 `ldelem.i8` 은 `int64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="c233f-2498">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2499"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2500"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2501"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2502">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2504">지정된 배열 인덱스에서 <see langword="float32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2505">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2506">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2506">Format</span></span>|<span data-ttu-id="c233f-2507">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2507">Assembly Format</span></span>|<span data-ttu-id="c233f-2508">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2509">98</span><span class="sxs-lookup"><span data-stu-id="c233f-2509">98</span></span>|<span data-ttu-id="c233f-2510">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="c233f-2510">ldelem.r4</span></span>|<span data-ttu-id="c233f-2511">형식의 요소를 로드 `float32` 에서 `index` 유형으로 스택 맨 위에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2512">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2513">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2514">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2515">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2516">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2517">`ldelem.r4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2518">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2519">반환 값에 대 한 `ldelem.r4` 은 `float32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="c233f-2520">부동 소수점 값 형식으로 변환 됩니다 `F` 를 계산 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2521"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2522"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2523"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2524">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2526">지정된 배열 인덱스에서 <see langword="float64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2527">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2528">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2528">Format</span></span>|<span data-ttu-id="c233f-2529">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2529">Assembly Format</span></span>|<span data-ttu-id="c233f-2530">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2531">99</span><span class="sxs-lookup"><span data-stu-id="c233f-2531">99</span></span>|<span data-ttu-id="c233f-2532">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="c233f-2532">ldelem.r8</span></span>|<span data-ttu-id="c233f-2533">형식의 요소를 로드 `float64` 에서 `index` 형식으로 스택 맨 위에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2534">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2535">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2536">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2537">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2538">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2539">`ldelem.r8` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2540">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2541">반환 값에 대 한 `ldelem.r8` 은 `float64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="c233f-2542">부동 소수점 값 형식으로 변환 됩니다 `F` 를 계산 스택으로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2543"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2544"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2545"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2546">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2548">지정된 배열 인덱스에서 개체 참조를 포함하는 요소를 <see langword="O" /> 형식(개체 참조)으로 계산 스택 맨 위에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2549">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2550">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2550">Format</span></span>|<span data-ttu-id="c233f-2551">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2551">Assembly Format</span></span>|<span data-ttu-id="c233f-2552">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2553">9A</span><span class="sxs-lookup"><span data-stu-id="c233f-2553">9A</span></span>|<span data-ttu-id="c233f-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="c233f-2554">ldelem.ref</span></span>|<span data-ttu-id="c233f-2555">개체 참조가 있는 요소를 로드 `index` 형식으로 스택 맨 위에 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="c233f-2556">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2557">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2558">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2559">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2560">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2561">`ldelem.ref` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2562">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2563">반환 값에 대 한 `ldelem.ref` 형식이 `O` (개체 참조).</span><span class="sxs-lookup"><span data-stu-id="c233f-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="c233f-2564"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2565"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2566"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2567">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2569">지정된 배열 인덱스의 <see langword="unsigned int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2570">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2571">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2571">Format</span></span>|<span data-ttu-id="c233f-2572">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2572">Assembly Format</span></span>|<span data-ttu-id="c233f-2573">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2574">91</span><span class="sxs-lookup"><span data-stu-id="c233f-2574">91</span></span>|<span data-ttu-id="c233f-2575">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="c233f-2575">ldelem.u1</span></span>|<span data-ttu-id="c233f-2576">형식의 요소를 로드 `unsigned int8` 에서 `index` 로 스택 맨 위에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2577">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2578">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2579">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2580">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2581">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2582">`ldelem.u1` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2583">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2584">반환 값에 대 한 `ldelem.u1` 은 `int8`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="c233f-2585">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2586"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2587"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2588"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2589">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2591">지정된 배열 인덱스의 <see langword="unsigned int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2592">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2593">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2593">Format</span></span>|<span data-ttu-id="c233f-2594">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2594">Assembly Format</span></span>|<span data-ttu-id="c233f-2595">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2596">93</span><span class="sxs-lookup"><span data-stu-id="c233f-2596">93</span></span>|<span data-ttu-id="c233f-2597">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="c233f-2597">ldelem.u2</span></span>|<span data-ttu-id="c233f-2598">형식의 요소를 로드 `unsigned int16` 로 스택 맨 위에 인덱스에는 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2599">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2600">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2601">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2602">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2603">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2604">`ldelem.u2` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2605">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2606">반환 값에 대 한 `ldelem.u2` 은 `int16`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="c233f-2607">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2608"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2609"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2610"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2611">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2613">지정된 배열 인덱스의 <see langword="unsigned int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2614">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2615">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2615">Format</span></span>|<span data-ttu-id="c233f-2616">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2616">Assembly Format</span></span>|<span data-ttu-id="c233f-2617">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2618">95</span><span class="sxs-lookup"><span data-stu-id="c233f-2618">95</span></span>|<span data-ttu-id="c233f-2619">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="c233f-2619">ldelem.u4</span></span>|<span data-ttu-id="c233f-2620">형식의 요소를 로드 `unsigned int32` 로 스택 맨 위에 인덱스에는 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2621">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2622">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2623">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2624">`index` 및 `array` 스택에서 팝 위치에 저장 된 값 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2625">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2626">`ldelem.u4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2627">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2628">반환 값에 대 한 `ldelem.u4` 은 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2629">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2630"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2631"><xref:System.ArrayTypeMismatchException> 배열 필요한 형식의 요소를 포함 하지 않는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2632"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2633">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2635">지정된 배열 인덱스에 있는 배열 요소의 주소를 <see langword="&amp;" /> 형식(관리되는 포인터)으로 계산 스택 맨 위에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2636">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2637">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2637">Format</span></span>|<span data-ttu-id="c233f-2638">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2638">Assembly Format</span></span>|<span data-ttu-id="c233f-2639">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2640">8F < `T` ></span></span>|<span data-ttu-id="c233f-2641">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-2641">ldelema `class`</span></span>|<span data-ttu-id="c233f-2642">에 있는 배열 요소의 주소를 로드 `index` 형식으로 계산 스택 맨 위에 `&` (관리 되는 포인터).</span><span class="sxs-lookup"><span data-stu-id="c233f-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="c233f-2643">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2644">개체 참조 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2645">인덱스 값 `index` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-2646">`index` 및 `array` 스택에서 팝 위치에 저장 된 주소의 `index` 에 `array` 를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="c233f-2647">주소가 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2648">`ldelema` 개체의 배열에서 특정 인덱스에 개체의 주소를 검색 하는 데 사용 됩니다 (형식의 `class`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="c233f-2649">`ldelema` 인덱스에 있는 값의 주소를 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="c233f-2650">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-2651">값 형식 이어야 합니다 `class` 의 명령으로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="c233f-2652">반환 값에 대 한 `ldelema` 관리 되는 포인터 (형식 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="c233f-2653">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2654"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-2655"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-2656"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-2657">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelema` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2658">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2659">현재 계산 스택에 참조가 있는 개체에서 필드의 값을 찾습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2660">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2661">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2661">Format</span></span>|<span data-ttu-id="c233f-2662">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2662">Assembly Format</span></span>|<span data-ttu-id="c233f-2663">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2664">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2664">7B < `T` ></span></span>|<span data-ttu-id="c233f-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-2665">ldfld `field`</span></span>|<span data-ttu-id="c233f-2666">스택으로 지정된 된 개체에 있는 필드의 값을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2667">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2668">개체 참조 (또는 포인터)를 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2669">개체 참조 (또는 포인터)이 스택에서 팝 합니다. 개체에 지정된 된 필드의 값을 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="c233f-2670">필드에 저장 된 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2671">`ldfld` 명령이 스택으로 개체에 있는 필드의 값을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="c233f-2672">스택에 대 한 개체 참조로 개체 여야 합니다 (형식 `O`), 관리 되는 포인터 (형식 `&`), 관리 되지 않는 포인터 (형식 `native int`), 임시 포인터 (형식 `*`), 또는 값 형식의 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c233f-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="c233f-2673">안정형 코드에서 관리 되지 않는 포인터의 사용 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="c233f-2674">개체의 필드는 필드 멤버를 참조 하는 메타 데이터 토큰에서 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="c233f-2675">반환 형식은 필드와 연결 된 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="c233f-2676">인스턴스 필드 (이 경우 개체 이어야 함 null 참조) 또는 정적 필드의 필드 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="c233f-2677">`ldfld` 명령 앞에 나와야 중 하나 또는 모두는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 및 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="c233f-2678"><xref:System.NullReferenceException> 개체가 null 인 필드 고정 되지 않은 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="c233f-2679"><xref:System.MissingFieldException> 메타 데이터에는 지정된 된 필드를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="c233f-2680">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 실행 시 하지 네이티브 코드로 변환 될 때 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="c233f-2681">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2682">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2683">현재 계산 스택에 참조가 있는 개체에서 필드의 주소를 찾습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2684">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2685">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2685">Format</span></span>|<span data-ttu-id="c233f-2686">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2686">Assembly Format</span></span>|<span data-ttu-id="c233f-2687">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2688">7C < `T` ></span></span>|<span data-ttu-id="c233f-2689">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-2689">ldflda `field`</span></span>|<span data-ttu-id="c233f-2690">주소를 푸시합니다 `field` 스택으로 지정된 된 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2691">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2692">개체 참조 (또는 포인터)를 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2693">개체 참조 (또는 포인터)이 스택에서 팝 합니다. 개체에 지정된 된 필드의 주소를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="c233f-2694">지정된 된 필드의 주소를 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2695">`ldflda` 스택으로 개체에 있는 필드의 주소를 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="c233f-2696">스택에 대 한 개체 참조로 개체 여야 합니다 (형식 `O`), 관리 되는 포인터 (형식 `&`), 관리 되지 않는 포인터 (형식 `native int`), 임시 포인터 (형식 `*`), 또는 값 형식의 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c233f-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="c233f-2697">안정형 코드에서 관리 되지 않는 포인터의 사용 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="c233f-2698">개체의 필드는 필드 멤버를 참조 하는 메타 데이터 토큰에서 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="c233f-2699">반환한 값 `ldflda` 관리 되는 포인터 (형식 `&`) 개체가 관리 되지 않는 포인터로 스택에 밀어넣어,이 경우 반송 주소 이기도 관리 되지 않는 포인터 (형식 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="c233f-2700">`ldflda` 명령 앞에 나와야 중 하나 또는 모두는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 및 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="c233f-2701"><xref:System.InvalidOperationException> 개체는 액세스 하 고 있는 응용 프로그램 도메인 내에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="c233f-2702">에 액세스 하는 응용 프로그램 도메인 내의 없는 필드의 주소를 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="c233f-2703"><xref:System.NullReferenceException> 개체가 null 인 필드 고정 되지 않은 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="c233f-2704"><xref:System.MissingFieldException> 메타 데이터에는 지정된 된 필드를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="c233f-2705">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 실행 시 하지 네이티브 코드로 변환 될 때 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="c233f-2706">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldflda` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2707">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2708">특정 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2709">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2710">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2710">Format</span></span>|<span data-ttu-id="c233f-2711">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2711">Assembly Format</span></span>|<span data-ttu-id="c233f-2712">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2713">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="c233f-2714">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="c233f-2714">ldftn `method`</span></span>|<span data-ttu-id="c233f-2715">참조 하는 메서드에 대 한 포인터 푸시합니다 `method` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2716">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2717">관리 되지 않는 포인터를 특정 메서드에 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2718">특정 메서드 (`method`)를 사용 하 여 호출할 수는 <xref:System.Reflection.Emit.OpCodes.Calli> 관리 되는 메서드 (또는 비관리 코드에 관리 코드에서 전환 하는 스텁을)를 참조 하는 경우 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="c233f-2719">호출 규칙 CLR을 사용 하 여 네이티브 코드에 반환 되는 값 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="c233f-2720">이 메서드가 포인터 콜백 루틴으로 관리 되지 않는 네이티브 코드에 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="c233f-2721">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldftn` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2722">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2723">
            <see langword="native int" /> 형식의 값을 <see langword="native int" /> 형식으로 계산 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2724">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2725">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2725">Format</span></span>|<span data-ttu-id="c233f-2726">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2726">Assembly Format</span></span>|<span data-ttu-id="c233f-2727">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2728">4D</span><span class="sxs-lookup"><span data-stu-id="c233f-2728">4D</span></span>|<span data-ttu-id="c233f-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="c233f-2729">ldind.i</span></span>|<span data-ttu-id="c233f-2730">로드는 `native int` 주소에 `addr` 로 스택에 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="c233f-2731">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2732">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2733">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2734">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2735">`ldind.i` 명령 간접적으로 로드 한 `native int` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="c233f-2736">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2737">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2738">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2739">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2740">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2741">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2742">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2743">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2744"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2745">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2747">
            <see langword="int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2748">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2749">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2749">Format</span></span>|<span data-ttu-id="c233f-2750">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2750">Assembly Format</span></span>|<span data-ttu-id="c233f-2751">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2752">46</span><span class="sxs-lookup"><span data-stu-id="c233f-2752">46</span></span>|<span data-ttu-id="c233f-2753">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-2753">ldind.i1</span></span>|<span data-ttu-id="c233f-2754">로드는 `int8` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2755">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2756">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2757">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2758">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2758">The fetched value is pushed onto the stack..</span></span>  
  
 <span data-ttu-id="c233f-2759">`ldind.i1` 명령 간접적으로 로드 한 `int8` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2760">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2761">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2762">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2763">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2764">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2765">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2766">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2767">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2768"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2769">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2771">
            <see langword="int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2772">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2773">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2773">Format</span></span>|<span data-ttu-id="c233f-2774">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2774">Assembly Format</span></span>|<span data-ttu-id="c233f-2775">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2776">48</span><span class="sxs-lookup"><span data-stu-id="c233f-2776">48</span></span>|<span data-ttu-id="c233f-2777">ldind.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-2777">ldind.i2</span></span>|<span data-ttu-id="c233f-2778">로드는 `int16` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2779">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2780">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2781">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2782">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2783">`ldind.i2` 명령 간접적으로 로드 한 `int16` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2784">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2785">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2786">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2787">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2788">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2789">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2790">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2791">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2792"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2793">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2795">
            <see langword="int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2796">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2797">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2797">Format</span></span>|<span data-ttu-id="c233f-2798">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2798">Assembly Format</span></span>|<span data-ttu-id="c233f-2799">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2800">4A</span><span class="sxs-lookup"><span data-stu-id="c233f-2800">4A</span></span>|<span data-ttu-id="c233f-2801">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-2801">ldind.i4</span></span>|<span data-ttu-id="c233f-2802">로드는 `int32` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2803">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2804">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2805">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2806">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2807">`ldind.i4` 명령 간접적으로 로드 한 `int32` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2808">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2809">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2810">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2811">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2812">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2813">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2814">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2815">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2816"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2817">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2819">
            <see langword="int64" /> 형식의 값을 <see langword="int64" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2820">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2821">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2821">Format</span></span>|<span data-ttu-id="c233f-2822">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2822">Assembly Format</span></span>|<span data-ttu-id="c233f-2823">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2824">4C</span><span class="sxs-lookup"><span data-stu-id="c233f-2824">4C</span></span>|<span data-ttu-id="c233f-2825">ldind.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-2825">ldind.i8</span></span>|<span data-ttu-id="c233f-2826">로드는 `int64` 주소에 `addr` 로 스택에 `int64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="c233f-2827">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2828">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2829">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2830">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2831">`ldind.i8` 명령 간접적으로 로드 한 `int64` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="c233f-2832">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2833">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2834">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2835">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2836">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2837">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2838">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2839">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2840"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2841">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2843">
            <see langword="float32" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2844">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2845">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2845">Format</span></span>|<span data-ttu-id="c233f-2846">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2846">Assembly Format</span></span>|<span data-ttu-id="c233f-2847">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2848">4E</span><span class="sxs-lookup"><span data-stu-id="c233f-2848">4E</span></span>|<span data-ttu-id="c233f-2849">ldind.r4</span><span class="sxs-lookup"><span data-stu-id="c233f-2849">ldind.r4</span></span>|<span data-ttu-id="c233f-2850">로드는 `float32` 주소에 `addr` 형식으로 스택에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2851">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2852">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2853">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2854">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2855">`ldind.r4` 명령 간접적으로 로드 한 `float32` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)는 형식으로 스택에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="c233f-2856">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2857">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2858">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2859">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2860">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2861">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2862">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2863">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2864"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2865">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2867">
            <see langword="float64" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2868">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2869">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2869">Format</span></span>|<span data-ttu-id="c233f-2870">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2870">Assembly Format</span></span>|<span data-ttu-id="c233f-2871">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2872">4F</span><span class="sxs-lookup"><span data-stu-id="c233f-2872">4F</span></span>|<span data-ttu-id="c233f-2873">ldind.r8</span><span class="sxs-lookup"><span data-stu-id="c233f-2873">ldind.r8</span></span>|<span data-ttu-id="c233f-2874">로드는 `float64` 주소에 `addr` 형식으로 스택에 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="c233f-2875">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2876">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2877">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2878">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2879">`ldind.r8` 명령 간접적으로 로드 한 `float64` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `float64`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="c233f-2880">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2881">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2882">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2883">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2884">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2885">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2886">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2887">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2888"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2889">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2891">개체 참조를 <see langword="O" /> 형식(개체 참조)으로 계산 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2892">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2893">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2893">Format</span></span>|<span data-ttu-id="c233f-2894">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2894">Assembly Format</span></span>|<span data-ttu-id="c233f-2895">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2896">50</span><span class="sxs-lookup"><span data-stu-id="c233f-2896">50</span></span>|<span data-ttu-id="c233f-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="c233f-2897">ldind.ref</span></span>|<span data-ttu-id="c233f-2898">주소에서 개체 참조를 로드 `addr` 형식으로 스택에 `O`</span><span class="sxs-lookup"><span data-stu-id="c233f-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="c233f-2899">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2900">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2901">스택에서 팝 되는 주소 주소에 있는 개체 참조를 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2902">인출 된 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2903">`ldind.ref` 명령 간접적으로 로드 한 개체 참조에 지정된 된 주소 (형식의 `native int`, `&`, 또는 \*) 형식으로 스택에 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="c233f-2904">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2905">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2906">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2907">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2908">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2909">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2910">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2911">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2912"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2913">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2915">
            <see langword="unsigned int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2916">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2917">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2917">Format</span></span>|<span data-ttu-id="c233f-2918">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2918">Assembly Format</span></span>|<span data-ttu-id="c233f-2919">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2920">47</span><span class="sxs-lookup"><span data-stu-id="c233f-2920">47</span></span>|<span data-ttu-id="c233f-2921">ldind.u1</span><span class="sxs-lookup"><span data-stu-id="c233f-2921">ldind.u1</span></span>|<span data-ttu-id="c233f-2922">로드는 `unsigned int8` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2923">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2924">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2925">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2926">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2927">`ldind.u1` 명령 간접적으로 로드 한 `unsigned int8` 지정된 된 주소에서 값 (형식의`native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2928">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2929">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2930">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2931">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2932">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2933">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2934">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2935">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2936"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2937">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2939">
            <see langword="unsigned int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2940">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2941">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2941">Format</span></span>|<span data-ttu-id="c233f-2942">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2942">Assembly Format</span></span>|<span data-ttu-id="c233f-2943">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2944">49</span><span class="sxs-lookup"><span data-stu-id="c233f-2944">49</span></span>|<span data-ttu-id="c233f-2945">ldind.u2</span><span class="sxs-lookup"><span data-stu-id="c233f-2945">ldind.u2</span></span>|<span data-ttu-id="c233f-2946">로드는 `unsigned int16` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2947">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2948">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2949">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2950">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2951">`ldind.u2` 명령 간접적으로 로드 한 `unsigned int16` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2952">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2953">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2954">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2955">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2956">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2957">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2958">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2959">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2960"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2961">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2963">
            <see langword="unsigned int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2964">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2965">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2965">Format</span></span>|<span data-ttu-id="c233f-2966">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2966">Assembly Format</span></span>|<span data-ttu-id="c233f-2967">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2968">4B</span><span class="sxs-lookup"><span data-stu-id="c233f-2968">4B</span></span>|<span data-ttu-id="c233f-2969">ldind.u4</span><span class="sxs-lookup"><span data-stu-id="c233f-2969">ldind.u4</span></span>|<span data-ttu-id="c233f-2970">로드는 `unsigned int32` 주소에 `addr` 로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="c233f-2971">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2972">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2973">스택에서 팝 되는 주소 주소에 있는 값을 가져오지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="c233f-2974">인출 된 값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2975">`ldind.u4` 명령 간접적으로 로드 한 `unsigned int32` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 \*)로 스택에 `int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="c233f-2976">모든는 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="c233f-2977">4 바이트 보다 작은 정수 값을 확장 하는 참고 `int32` (하지 `native int`)를 계산 스택으로 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="c233f-2978">부동 소수점 값으로 변환할지 `F` 를 계산 스택으로 로드 될 때 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-2979">잘못 된 형식의 MSIL Microsoft Intermediate Language ()를 사용 하면는 `ldind` 지침 포인터의 형식과 동일한 방식으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="c233f-2980">처음 스택에 밀어 넣은 주소는 컴퓨터에 있는 개체의 원래 크기에 정렬 되어야 합니다 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 맞춰져야 접두사).</span><span class="sxs-lookup"><span data-stu-id="c233f-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="c233f-2981">주소를 반환 하는 모든 MSIL 명령 결과 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 및 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="c233f-2982">데이터 형식이 1 바이트 보다 큰, 바이트 순서는 대상 CPU에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="c233f-2983">바이트 순서에 의존 하는 코드는 모든 플랫폼에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="c233f-2984"><xref:System.NullReferenceException> 잘못 된 주소가 검색 되 면 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="c233f-2985">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-2987">0부터 시작하는 1차원 배열의 요소 수를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-2988">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-2989">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2989">Format</span></span>|<span data-ttu-id="c233f-2990">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-2990">Assembly Format</span></span>|<span data-ttu-id="c233f-2991">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-2992">8E</span><span class="sxs-lookup"><span data-stu-id="c233f-2992">8E</span></span>|<span data-ttu-id="c233f-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="c233f-2993">ldlen</span></span>|<span data-ttu-id="c233f-2994">길이 푸시합니다 (형식의 `natural unsigned int`) 스택에 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-2995">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-2996">배열에 대 한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-2997">배열 참조가 스택에서 팝 되 고 길이가 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="c233f-2998">길이 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-2999">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3000">길이는 `natural unsigned int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="c233f-3001"><xref:System.NullReferenceException> 가 null 참조 인 배열 참조 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3002">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldlen` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3004">특정 인덱스에 있는 지역 변수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3004">Loads the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3005">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3006">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3006">Format</span></span>|<span data-ttu-id="c233f-3007">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3007">Assembly Format</span></span>|<span data-ttu-id="c233f-3008">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3009">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-3010">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-3010">ldloc `index`</span></span>|<span data-ttu-id="c233f-3011">인덱스에 있는 지역 변수 로드 `index` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="c233f-3012">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3013">지정된 된 인덱스에 있는 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3014">`ldloc` 명령 푸시하는 지역 변수 번호의 내용을 계산 스택에 전달된 된 인덱스에 있는 지역 변수에 있는 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-3015">지역 변수는 방법에 초기화 플래그가 true 인 경우에 메서드를 입력 하기 전에 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="c233f-3016">65, 535 (2 ^16-1) 가능한 한 지역 변수 (0-65534)입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="c233f-3017">구현 2 바이트 정수를 사용 하 여 지정된 된 메서드에 대 한 지역의 총 수와 함께 두는 지역 변수의 인덱스를 추적 하는 인덱스 65, 535은 유효 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="c233f-3018">인덱스 65535 된가 유효한 경우 이러한 메서드의 지역 변수의 개수를 추적 하는 넓은 정수를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="c233f-3019">`ldloc.0`, `ldloc.1`, `ldloc.2`, 및 `ldloc.3` 지침 제공 처음 4 개는 로컬 변수에 액세스 하는 것에 대 한 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="c233f-3020">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3021">4 바이트 형식으로 확장 되는 것 보다 작은 파티션이 9. 지역 변수 참조 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3022">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3023">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="c233f-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="c233f-3025">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3026">인덱스 0의 지역 변수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3026">Loads the local variable at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3027">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3028">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3028">Format</span></span>|<span data-ttu-id="c233f-3029">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3029">Assembly Format</span></span>|<span data-ttu-id="c233f-3030">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3031">06</span><span class="sxs-lookup"><span data-stu-id="c233f-3031">06</span></span>|<span data-ttu-id="c233f-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="c233f-3032">ldloc.0</span></span>|<span data-ttu-id="c233f-3033">인덱스 0의 지역 변수를 계산 스택으로 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="c233f-3034">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3035">인덱스 0에 있는 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3036">`ldloc.0` 에 대 한 효과적인 인코딩입니다 <xref:System.Reflection.Emit.OpCodes.Ldloc>를 인덱스 0에 있는 지역 변수에 대 한 액세스를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="c233f-3037">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3038">4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3039">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3040">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3042">인덱스 1의 지역 변수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3042">Loads the local variable at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3043">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3044">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3044">Format</span></span>|<span data-ttu-id="c233f-3045">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3045">Assembly Format</span></span>|<span data-ttu-id="c233f-3046">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3047">07</span><span class="sxs-lookup"><span data-stu-id="c233f-3047">07</span></span>|<span data-ttu-id="c233f-3048">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="c233f-3048">ldloc.1</span></span>|<span data-ttu-id="c233f-3049">인덱스 1의 지역 변수를 계산 스택으로 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="c233f-3050">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3051">인덱스 1에 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3052">`ldloc.1` 에 대 한 효과적인 인코딩입니다 <xref:System.Reflection.Emit.OpCodes.Ldloc>을 인덱스 1에 있는 지역 변수에 대 한 액세스를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="c233f-3053">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3054">4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3055">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3056">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3058">인덱스 2의 지역 변수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3058">Loads the local variable at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3059">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3060">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3060">Format</span></span>|<span data-ttu-id="c233f-3061">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3061">Assembly Format</span></span>|<span data-ttu-id="c233f-3062">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3063">08</span><span class="sxs-lookup"><span data-stu-id="c233f-3063">08</span></span>|<span data-ttu-id="c233f-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="c233f-3064">ldloc.2</span></span>|<span data-ttu-id="c233f-3065">인덱스 2의 지역 변수를 계산 스택으로 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="c233f-3066">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3067">인덱스 2에 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3068">`ldloc.2` 에 대 한 효과적인 인코딩입니다 <xref:System.Reflection.Emit.OpCodes.Ldloc>를 인덱스 2에 있는 지역 변수에 대 한 액세스를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="c233f-3069">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3070">4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3071">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3072">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3074">인덱스 3의 지역 변수를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3074">Loads the local variable at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3075">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3076">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3076">Format</span></span>|<span data-ttu-id="c233f-3077">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3077">Assembly Format</span></span>|<span data-ttu-id="c233f-3078">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3079">09</span><span class="sxs-lookup"><span data-stu-id="c233f-3079">09</span></span>|<span data-ttu-id="c233f-3080">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="c233f-3080">ldloc.3</span></span>|<span data-ttu-id="c233f-3081">인덱스 3의 지역 변수를 계산 스택으로 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="c233f-3082">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3083">인덱스 3에 있는 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3084">`ldloc.3` 에 대 한 효과적인 인코딩입니다 <xref:System.Reflection.Emit.OpCodes.Ldloc>, 인덱스 3에 있는 지역 변수에 대 한 액세스를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="c233f-3085">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3086">4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3087">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3088">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3090">특정 인덱스에 있는 지역 변수를 계산 스택에 약식으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3091">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3092">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3092">Format</span></span>|<span data-ttu-id="c233f-3093">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3093">Assembly Format</span></span>|<span data-ttu-id="c233f-3094">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-3096">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-3096">ldloc.s `index`</span></span>|<span data-ttu-id="c233f-3097">인덱스에 있는 지역 변수 로드 `index` 스택에 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="c233f-3098">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3099">지정된 된 인덱스에 있는 지역 변수 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3100">`ldloc.s` 명령 푸시하는 지역 변수 번호의 내용을 계산 스택에 전달된 된 인덱스에 있는 지역 변수에 있는 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-3101">지역 변수는 방법에 초기화 플래그가 true 인 경우 메서드를 입력 하기 전에 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="c233f-3102">256 가지 (2 ^8) 가능한 한 지역 변수 (0-255) 약식으로 보다 효과적인 인코딩입니다 변수인 `ldloc`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="c233f-3103">값 형식은 메서드 헤더에 지정 된 지역 변수의 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="c233f-3104">4 바이트 형식으로 확장 되는 것 보다 작은 파티션이 9. 지역 변수 참조 `int32` 스택에 로드 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="c233f-3105">부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="c233f-3106">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="c233f-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="c233f-3108">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3109">특정 인덱스에 있는 지역 변수의 주소를 계산 스택으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3110">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3111">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3111">Format</span></span>|<span data-ttu-id="c233f-3112">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3112">Assembly Format</span></span>|<span data-ttu-id="c233f-3113">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3114">FE OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-3115">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-3115">ldloca `index`</span></span>|<span data-ttu-id="c233f-3116">에 지역 변수의 주소를 로드 `index` 를 계산 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="c233f-3117">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3118">지정된 된 인덱스에서 지역 변수에 저장 된 주소의 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3119">`ldloca` 명령 푸시하는 지역 변수 번호의 주소는 스택에 전달된 된 인덱스에 있는 지역 변수는 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-3120">스택에 값은 이미 올바르게 정렬 사용 하기 위해 같은 명령 <xref:System.Reflection.Emit.OpCodes.Ldind_I> 및 <xref:System.Reflection.Emit.OpCodes.Stind_I>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="c233f-3121">결과 임시 포인터 (형식 `*`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="c233f-3122">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloca` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3123">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3124">특정 인덱스에 있는 지역 변수의 주소를 계산 스택에 약식으로 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3125">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3126">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3126">Format</span></span>|<span data-ttu-id="c233f-3127">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3127">Assembly Format</span></span>|<span data-ttu-id="c233f-3128">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-3130">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-3130">ldloca.s `index`</span></span>|<span data-ttu-id="c233f-3131">에 지역 변수의 주소를 로드 `index` 계산 스택에 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="c233f-3132">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3133">지정된 된 인덱스에서 지역 변수에 저장 된 주소의 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3134">`ldloca.s` 명령 푸시하는 지역 변수 번호의 주소는 스택에 전달된 된 인덱스에 있는 지역 변수는 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-3135">스택에 값은 이미 올바르게 정렬 사용 하기 위해 같은 명령 <xref:System.Reflection.Emit.OpCodes.Ldind_I> 및 <xref:System.Reflection.Emit.OpCodes.Stind_I>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="c233f-3136">결과 임시 포인터 (형식 `*`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="c233f-3137">`ldloca.s` 명령은 0부터 255 지역 변수와 함께 사용 하기 위해 효과적인 인코딩을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="c233f-3138">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloca.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3139">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3140">null 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3141">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3142">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3142">Format</span></span>|<span data-ttu-id="c233f-3143">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3143">Assembly Format</span></span>|<span data-ttu-id="c233f-3144">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3145">14</span><span class="sxs-lookup"><span data-stu-id="c233f-3145">14</span></span>|<span data-ttu-id="c233f-3146">수</span><span class="sxs-lookup"><span data-stu-id="c233f-3146">ldnull</span></span>|<span data-ttu-id="c233f-3147">null 참조를 스택으로 푸시</span><span class="sxs-lookup"><span data-stu-id="c233f-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="c233f-3148">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3149">Null 개체 참조를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3150">`ldnull` null 참조를 푸시합니다 (형식 `O`) 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="c233f-3151">이 위치를 초기화 데이터로 채워지기 전에 또는 사용 되지 않을 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="c233f-3152">`ldnull` 크기와 별개의 null 참조를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="c233f-3153">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldnull` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3155">주소가 가리키는 값 형식 개체를 계산 스택 맨 위로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3156">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3157">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3157">Format</span></span>|<span data-ttu-id="c233f-3158">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3158">Assembly Format</span></span>|<span data-ttu-id="c233f-3159">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3160">71 < `T` ></span></span>|<span data-ttu-id="c233f-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-3161">ldobj `class`</span></span>|<span data-ttu-id="c233f-3162">값 형식의 인스턴스 복사본 `class` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3163">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3164">값 형식 개체의 주소를 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3165">스택에서 팝 되는 주소 및 특정 주소에서 해당 인스턴스에 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="c233f-3166">해당 주소에 저장 된 개체의 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3167">`ldobj` 명령을 사용 하는 값 형식을 매개 변수로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="c233f-3168">`ldobj` 가리키는 값을 복사 하는 명령 `addrOfValObj` (형식의 `&`, `*`, 또는 `native int`)는 스택의 맨 위로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="c233f-3169">복사 된 바이트 수 클래스의 크기에 따라 다릅니다 (에 지정 된 대로 `class` 매개 변수).</span><span class="sxs-lookup"><span data-stu-id="c233f-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="c233f-3170">`class` 매개 변수는 값 형식을 나타내는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="c233f-3171">작업은 `ldobj` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-3172"><xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="c233f-3173">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령 런타임이 아닌 네이티브 코드로 변환 되 면 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-3174">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3175">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3176">정적 필드의 값을 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3176">Pushes the value of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3177">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3178">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3178">Format</span></span>|<span data-ttu-id="c233f-3179">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3179">Assembly Format</span></span>|<span data-ttu-id="c233f-3180">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3181">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3181">7E < `T` ></span></span>|<span data-ttu-id="c233f-3182">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-3182">ldsfld `field`</span></span>|<span data-ttu-id="c233f-3183">값을 밀어 `field` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3184">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3185">특정 필드의 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3186">`ldsfld` 명령 (클래스의 모든 인스턴스 간에 공유 됨) 정적 값에서 푸시하는 스택에 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="c233f-3187">반환 형식이 전달 된 메타 데이터 토큰을 연관 `field`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="c233f-3188">`ldsfld` 명령 있을 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="c233f-3189">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldsfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3190">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3191">정적 필드의 주소를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3191">Pushes the address of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3192">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3193">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3193">Format</span></span>|<span data-ttu-id="c233f-3194">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3194">Assembly Format</span></span>|<span data-ttu-id="c233f-3195">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3196">7F < `T` ></span></span>|<span data-ttu-id="c233f-3197">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-3197">ldsflda `field`</span></span>|<span data-ttu-id="c233f-3198">주소를 푸시 `field` 스택에</span><span class="sxs-lookup"><span data-stu-id="c233f-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="c233f-3199">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3200">특정 필드의 주소를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3201">`ldsflda` (클래스의 모든 인스턴스 간에 공유 됨) 정적 주소를 푸시합니다 스택에 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="c233f-3202">임시 포인터도 주소를 나타낼 수 있습니다 (형식 `*`) 하는 경우 메타 데이터 토큰 `field` 메모리 관리 되는 형식을 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="c233f-3203">그렇지 않으면 관리 되지 않는 포인터에 해당 (형식 `native int`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="c233f-3204">`field` 전역 상대 가상 주소 (필드는 오프셋)가 할당 된 변수는 정적 될 수 있습니다는 메모리는 관리 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="c233f-3205">`ldsflda` 명령 있을 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="c233f-3206"><xref:System.MissingFieldException> 메타 데이터에는 필드를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="c233f-3207">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임에 하지 네이티브 코드로 변환 될 때 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="c233f-3208">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldsflda` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3209">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3210">새 개체 참조를 메타데이터에 저장된 문자열 리터럴로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3210">Pushes a new object reference to a string literal stored in the metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3211">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3212">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3212">Format</span></span>|<span data-ttu-id="c233f-3213">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3213">Assembly Format</span></span>|<span data-ttu-id="c233f-3214">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3215">72 < `T` ></span></span>|<span data-ttu-id="c233f-3216">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="c233f-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="c233f-3217">메타 데이터 문자열이 토큰에 대 한 문자열 개체를 푸시합니다 `mdToken`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="c233f-3218">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3219">문자열에 대 한 개체 참조를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3220">`ldstr` 개체 참조를 푸시합니다 (형식 `O`)를 나타내는 메타 데이터에 저장 된 특정 문자열 리터럴를 새 string 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="c233f-3221">`ldstr` 명령은 메모리 양을 할당 하 고 문자열 리터럴 문자열 형식 런타임에 필요한 파일에 사용 되는 형식에서 변환 하는 데 필요한 형식 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="c233f-3222">공용 언어 인프라 (CLI)에서는 두 개의 `ldstr` 참조 두 메타 데이터 토큰을 동일한 문자 시퀀스 하는 개체를 반환 동일한 문자열 ("문자열 인터닝"로 알려진 프로세스).</span><span class="sxs-lookup"><span data-stu-id="c233f-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="c233f-3223">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldstr` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3224">ILGenerator.Emit(OpCode, string)</span><span class="sxs-lookup"><span data-stu-id="c233f-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3225">메타데이터 토큰을 런타임 표현으로 변환하여 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3226">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3227">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3227">Format</span></span>|<span data-ttu-id="c233f-3228">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3228">Assembly Format</span></span>|<span data-ttu-id="c233f-3229">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3230">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3230">D0 < `T` ></span></span>|<span data-ttu-id="c233f-3231">이전에 ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="c233f-3231">ldtoken `token`</span></span>|<span data-ttu-id="c233f-3232">메타 데이터 토큰을 런타임 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="c233f-3233">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3234">전달 된 토큰으로 변환 됩니다는 `RuntimeHandle` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3235">`ldtoken` 명령 푸시는 `RuntimeHandle` 지정한 메타 데이터 토큰에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="c233f-3236">A `RuntimeHandle` 수는 `fieldref/fielddef`, `methodref/methoddef`, 또는 `typeref/typedef`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="c233f-3237">에 대 한 호출 스택에 푸시된 값을 사용할 수 `Reflection` 시스템 클래스 라이브러리의 메서드.</span><span class="sxs-lookup"><span data-stu-id="c233f-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="c233f-3238">런타임 핸들에 대 한 자세한 내용은 다음 클래스를 참조 하십시오.: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, 및 <xref:System.RuntimeMethodHandle>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="c233f-3239">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldtoken` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3240">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="c233f-3241">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="c233f-3242">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3243">지정된 개체와 관련된 특정 가상 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3244">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3245">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3245">Format</span></span>|<span data-ttu-id="c233f-3246">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3246">Assembly Format</span></span>|<span data-ttu-id="c233f-3247">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3248">FE 07 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="c233f-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="c233f-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="c233f-3250">개체의 가상 메서드를 포인터 푸시합니다 `method` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3251">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3252">한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3253">개체 참조가 메서드에 스택과 진입점의 주소에서 제공 됩니다 (메타 데이터 토큰이 지정 된 대로 `method`)를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="c233f-3254">에 대 한 포인터 `method` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3255">관리 되지 않는 결과 포인터에서 스택에 밀어 넣은 `ldvirtftn` 명령을 사용 하 여 호출할 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Calli> 관리 되는 메서드 (또는 비관리 코드에 관리 코드에서 전환 하는 스텁을)를 참조 하는 경우 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="c233f-3256">관리 되지 않는 포인터 CLR 호출 규칙을 사용 하 여 네이티브 코드를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="c233f-3257">이 메서드가 포인터 콜백 루틴으로 관리 되지 않는 네이티브 코드에 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="c233f-3258">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldvirtftn` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3259">ILGenerator.Emit(OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3260">조건에 관계없이 특정 대상 명령으로 제어를 전송하여 보호되는 코드 영역을 종료합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3261">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3262">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3262">Format</span></span>|<span data-ttu-id="c233f-3263">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3263">Assembly Format</span></span>|<span data-ttu-id="c233f-3264">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3265">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3265">DD < `int32` ></span></span>|<span data-ttu-id="c233f-3266">둡니다 `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-3266">leave `target`</span></span>|<span data-ttu-id="c233f-3267">보호 된 코드 영역을 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="c233f-3268">이 명령에 대해 지정 된 스택 전환 동작은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-3269">`leave` 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 4 바이트 오프셋으로 표시는 특정 대상 명령으로 제어를 무조건 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-3270">`leave` 비슷하지만 `br` 명령과 종료 하려면 사용할 수는 `try`, `filter`, 또는 `catch` 일반 분기 지침만 사용할 수 해당 블록에서 내에서 제어를 전달 하는 반면 차단 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="c233f-3271">`leave` 명령 계산 스택 비우고 적절 한 주변 되도록 `finally` 블록 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="c233f-3272">사용할 수 없습니다는 `leave` 종료 하는 명령을 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="c233f-3273">쉽게 사용 하는 catch 블록 내부에서 예외 처리기에 대 한 코드 생성을 `leave` 연결 된 모든 명령으로 제어를 전송 하는 명령을 `try` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="c233f-3274">명령에 하나 이상의 접두사 코드를 첫 번째도 컨트롤 전송만 수 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="c233f-3275">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `leave` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3276">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3277">조건에 관계없이 대상 명령(약식)으로 제어를 전송하여 보호되는 코드 영역을 종료합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3278">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3279">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3279">Format</span></span>|<span data-ttu-id="c233f-3280">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3280">Assembly Format</span></span>|<span data-ttu-id="c233f-3281">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3282">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3282">DE < `int8` ></span></span>|<span data-ttu-id="c233f-3283">leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="c233f-3283">leave.s `target`</span></span>|<span data-ttu-id="c233f-3284">코드 (약식)의 보호 된 영역을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="c233f-3285">이 명령에 대해 지정 된 스택 전환 동작은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-3286">`leave.s` 명령이 현재 명령에는 다음의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 되는 전달 된 대상 명령으로 제어를 무조건 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="c233f-3287">`leave.s` 비슷하지만 `br` 명령과 종료 하려면 사용할 수는 `try`, `filter`, 또는 `catch` 일반 분기 지침만 사용할 수 해당 블록에서 내에서 제어를 전달 하는 반면 차단 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="c233f-3288">`leave.s` 명령 계산 스택 비우고 적절 한 주변 되도록 `finally` 블록 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="c233f-3289">사용할 수 없습니다는 `leave.s` 종료 하는 명령을 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="c233f-3290">쉽게 사용 하는 catch 블록 내부에서 예외 처리기에 대 한 코드 생성을 `leave.s` 연결 된 모든 명령으로 제어를 전송 하는 명령을 `try` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="c233f-3291">명령에 하나 이상의 접두사 코드를 첫 번째도 컨트롤 전송만 수 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="c233f-3292">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `leave.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3293">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3294">로컬 동적 메모리 풀에서 특정 바이트 수를 할당하고 처음 할당된 바이트의 주소(임시 포인터, <see langword="*" /> 형식)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3295">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3296">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3296">Format</span></span>|<span data-ttu-id="c233f-3297">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3297">Assembly Format</span></span>|<span data-ttu-id="c233f-3298">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="c233f-3299">FE 0F</span></span>|<span data-ttu-id="c233f-3300">localloc</span><span class="sxs-lookup"><span data-stu-id="c233f-3300">localloc</span></span>|<span data-ttu-id="c233f-3301">로컬 힙에서 공간을 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="c233f-3302">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3303">에 할당할 바이트 수를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3304">바이트 수가 스택에서 팝 됩니다. 에 해당 하는 크기는 메모리 양은 로컬 힙에서 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="c233f-3305">할당된 된 메모리의 첫 번째 바이트에 대 한 포인터를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3306">`localloc` 명령 할당 `size` (형식 `natural unsigned int`) 로컬 동적 메모리에서 바이트 풀 및 주소를 반환 (임시 포인터, 형식 `*`) 처음 할당 된 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="c233f-3307">메모리 블록 메서드에 initialize 플래그는 경우에 0으로 초기화 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="c233f-3308">현재 메서드가 실행 될 때는 <xref:System.Reflection.Emit.OpCodes.Ret>, 로컬 메모리 풀을 다시 사용할 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="c233f-3309">결과 주소가 기본 데이터 형식을 저장할 수 있습니다를 사용 하 여 있도록 정렬 됩니다는 `stind` 지침 (같은 <xref:System.Reflection.Emit.OpCodes.Stind_I4>) 사용 하 여 로드 하 고는 `ldind` 지침 (같은 <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="c233f-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="c233f-3310">`localloc` 명령 내에서 발생할 수 없습니다는 `filter`, `catch`, `finally`, 또는 `fault` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="c233f-3311"><xref:System.StackOverflowException> 요청을 처리할 메모리가 부족 한 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="c233f-3312">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `localloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3314">특정 형식의 인스턴스에 대한 형식화된 참조를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3315">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3316">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3316">Format</span></span>|<span data-ttu-id="c233f-3317">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3317">Assembly Format</span></span>|<span data-ttu-id="c233f-3318">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3319">C6 < `T` ></span></span>|<span data-ttu-id="c233f-3320">mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-3320">mkrefany `class`</span></span>|<span data-ttu-id="c233f-3321">형식화 된 참조 형식의 푸시합니다 `class` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3322">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3323">에 대 한 포인터 데이터 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3324">포인터는 팝 하 고 형식화 된 참조 형식으로 변환 `class`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="c233f-3325">형식화 된 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3326">`mkrefany` 명령 동적으로 형식화 된 참조를 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="c233f-3327">포인터 형식 이어야 합니다 `&`, `*`, 또는 `native int`, 데이터의 유효한 주소를 보유 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="c233f-3328">`Class` 포인터에서 참조 데이터의 형식을 설명 하 클래스 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="c233f-3329">`Mkrefany` 형식화 된 참조를 제공 포인터 형식과의 불투명 설명자 스택에 푸시합니다 `class`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="c233f-3330">작업만 허용 형식화 된 참조에 전달 하는 것을 매개 변수로 형식화 된 참조 해야 하는 방법에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="c233f-3331">호출 수신자를 유도할 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Refanytype> 및 <xref:System.Reflection.Emit.OpCodes.Refanyval> 유형 (클래스) 및 주소를 각각 검색 하는 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="c233f-3332"><xref:System.TypeLoadException> 이 throw 됩니다 `class` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="c233f-3333">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-3334">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mkrefany` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3335">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3336">두 값을 곱하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3336">Multiplies two values and pushes the result on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3337">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3338">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3338">Format</span></span>|<span data-ttu-id="c233f-3339">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3339">Assembly Format</span></span>|<span data-ttu-id="c233f-3340">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3341">5A</span><span class="sxs-lookup"><span data-stu-id="c233f-3341">5A</span></span>|<span data-ttu-id="c233f-3342">mul</span><span class="sxs-lookup"><span data-stu-id="c233f-3342">mul</span></span>|<span data-ttu-id="c233f-3343">스택에 두 값을 곱합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3344">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3345">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3346">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3347">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="c233f-3348">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3349">`mul` 명령 곱합니다 `value1` 여 `value2` 고 결과 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="c233f-3350">정수 연산 오버플로에 상위 비트를 자동으로 자릅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="c233f-3351">참조 <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> 곱하기 연산 오버플로 처리에는 정수 관련에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="c233f-3352">부동 소수점 형식, 0에 대 한 \* 무한대 = NaN입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="c233f-3353">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3355">두 정수 값을 곱하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3356">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3357">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3357">Format</span></span>|<span data-ttu-id="c233f-3358">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3358">Assembly Format</span></span>|<span data-ttu-id="c233f-3359">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3360">D8</span><span class="sxs-lookup"><span data-stu-id="c233f-3360">D8</span></span>|<span data-ttu-id="c233f-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="c233f-3361">mul.ovf</span></span>|<span data-ttu-id="c233f-3362">오버플로 검사 하 여 스택에서 두 정수 값을 곱합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-3363">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3364">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3365">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3366">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`, 오버플로 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="c233f-3367">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3368">`mul.ovf` 명령 정수를 곱하는 `value1` 정수 `value2` 고 결과 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="c233f-3369">결과 결과 형식에 맞지 않을 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="c233f-3370"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-3371">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3373">부호 없는 두 정수 값을 곱하고 오버플로를 검사한 후 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3374">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3375">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3375">Format</span></span>|<span data-ttu-id="c233f-3376">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3376">Assembly Format</span></span>|<span data-ttu-id="c233f-3377">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3378">D9</span><span class="sxs-lookup"><span data-stu-id="c233f-3378">D9</span></span>|<span data-ttu-id="c233f-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="c233f-3379">mul.ovf.un</span></span>|<span data-ttu-id="c233f-3380">오버플로 검사 하 여 스택에서 두 개의 부호 없는 값을 곱합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-3381">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3382">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3383">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3384">`value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`, 오버플로 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="c233f-3385">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3386">`mul.ovf.un` 명령 부호 없는 정수를 곱하는 `value1` 을 부호 없는 정수 `value2` 고 결과 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="c233f-3387">결과 결과 형식에 맞지 않을 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="c233f-3388"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-3389">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3391">값을 음수로 만들고 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3391">Negates a value and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3392">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3393">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3393">Format</span></span>|<span data-ttu-id="c233f-3394">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3394">Assembly Format</span></span>|<span data-ttu-id="c233f-3395">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3396">65</span><span class="sxs-lookup"><span data-stu-id="c233f-3396">65</span></span>|<span data-ttu-id="c233f-3397">neg</span><span class="sxs-lookup"><span data-stu-id="c233f-3397">neg</span></span>|<span data-ttu-id="c233f-3398">현재 스택의 맨 위에 값을 부정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3399">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3400">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3401">값은 스택에서 팝 되며이 무효화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="c233f-3402">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3403">`neg` 명령 값을 부정 하 고 스택 맨 위에 결과 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="c233f-3404">반환 형식은 피연산자 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="c233f-3405">표준 정수 계열 값의 부정은 2의 보수 부정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="c233f-3406">특히, 부정 (없는 양의 정수) 가장 음수가 최대한의 음의 번호를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="c233f-3407">사용 하 여가 오버플로 감지 하 고 <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> 명령 대신 (즉, 0에서 빼기).</span><span class="sxs-lookup"><span data-stu-id="c233f-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="c233f-3408">부동 소수점 숫자 부정, 오버플로가 발생 하 고 NaN 부정 NaN을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="c233f-3409">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `neg` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3411">0부터 시작하고 요소가 특정 형식인 새 1차원 배열에 대한 개체 참조를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3412">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3413">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3413">Format</span></span>|<span data-ttu-id="c233f-3414">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3414">Assembly Format</span></span>|<span data-ttu-id="c233f-3415">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3416">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3416">8D < `T` ></span></span>|<span data-ttu-id="c233f-3417">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="c233f-3417">newarr `etype`</span></span>|<span data-ttu-id="c233f-3418">형식의 요소가 포함 된 새 배열을 만듭니다 `etype`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="c233f-3419">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3420">배열의 요소 수를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3421">요소의 수는 스택에서 팝 하 고 배열의 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="c233f-3422">새 배열에 대 한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3423">`newarr` 개체 참조를 푸시합니다 (형식 `O`) 형식의 요소가 새 차원 배열에 `etype` (유형을 설명 하는 메타 데이터 토큰)입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="c233f-3424">새 배열의 요소 수로 지정 해야는 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="c233f-3425">유효한 배열 인덱스 범위는 0에서 1을 뺀 요소의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="c233f-3426">배열 요소에는 값 형식을 포함 한 형식일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="c233f-3427">적절 한 값 형식을 참조 하는 메타 데이터 토큰을 사용 하 여 숫자의 0부터 시작 1 차원 배열의 만들어집니다 (<xref:System.Int32>등).</span><span class="sxs-lookup"><span data-stu-id="c233f-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="c233f-3428">배열의 요소는 적절 한 형식의 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="c233f-3429">0부터 1 차원 배열과 다차원 배열을 사용 하 여을 만들어집니다 <xref:System.Reflection.Emit.OpCodes.Newobj> 대신 `newarr`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="c233f-3430">메서드를 사용 하 여 만든 더 일반적으로 <xref:System.Array> .NET Framework의 클래스.</span><span class="sxs-lookup"><span data-stu-id="c233f-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="c233f-3431"><xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="c233f-3432"><xref:System.OverflowException> 이 throw 됩니다 `numElems` 0 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="c233f-3433">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `newarr` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3434">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3435">개체 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시하여 값 형식의 새 개체나 새 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3436">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3437">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3437">Format</span></span>|<span data-ttu-id="c233f-3438">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3438">Assembly Format</span></span>|<span data-ttu-id="c233f-3439">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3440">73 < `T` ></span></span>|<span data-ttu-id="c233f-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="c233f-3441">newobj `ctor`</span></span>|<span data-ttu-id="c233f-3442">초기화 되지 않은 개체 또는 값 형식을 할당 하 고 생성자 메서드를 호출 `ctor`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="c233f-3443">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3444">인수 `arg1` 통해 `argn` 시퀀스에는 스택에서 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="c233f-3445">인수 `argn` 통해 `arg1` 스택에서 팝 되며에 전달 된 `ctor` 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="c233f-3446">새 개체에 대 한 참조를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3447">`newobj` 명령은 새 개체 또는 값 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="c233f-3448">`Ctor` 메타 데이터 토큰 (한 `methodref` 또는 `methoddef` 생성자로 표시 해야 하는) 이름, 클래스 및 호출할 생성자의 시그니처를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="c233f-3449">`newobj` 명령와 관련 된 클래스의 새 인스턴스를 할당 `ctor` 모든 필드 (올바른 형식의)는 0 또는 null 참조를 적절 하 게 새 인스턴스를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="c233f-3450">그런 다음 생성자를 호출 `ctor` 새로 만든 인스턴스와 지정 된 인수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="c233f-3451">개체 참조 초기화 된 생성자가 호출 된 후 (형식 `O`) 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="c233f-3452">생성자의 관점에서 초기화 되지 않은 개체는 인수 0 및 newobj 전달 되는 다른 인수를 순서 대로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="c233f-3453">사용 하 여 모든 차원 배열의 만들어집니다 <xref:System.Reflection.Emit.OpCodes.Newarr>이 아니라 `newobj`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="c233f-3454">반면에 더 차원이 두 개 또는 않는 차원 0부터 시작 하지 다른 모든 배열을 사용 하 여 만들어집니다 `newobj`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="c233f-3455">값 형식을 일반적으로 만드는 경우는 사용 하 여 `newobj`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="c233f-3456">대개 인수 또는 지역 변수를 사용 하 여 할당 됩니다 `newarr` (0부터 시작 하는 1 차원 배열의 경우)에 대 한 개체의 필드로 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="c233f-3457">사용 하 여 초기화 된다고 할당 된 후 <xref:System.Reflection.Emit.OpCodes.Initobj>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="c233f-3458">그러나는 `newobj` 명령에에서 저장 된 로컬 드라이브에 인수로 전달 될 수 있는 스택에 값 형식의 새 인스턴스를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="c233f-3459"><xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="c233f-3460"><xref:System.MissingMethodException> 없으면 생성자 메서드 예외가 `ctor` 표시 이름으로 클래스 및 서명을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="c233f-3461">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-3462">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `newobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3464">opcode가 패치되면 공간을 채웁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3464">Fills space if opcodes are patched.</span>
          </span>
          <span data-ttu-id="c233f-3465">처리 주기가 사용되더라도 의미 있는 연산이 수행되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3465">No meaningful operation is performed although a processing cycle can be consumed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3466">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3467">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3467">Format</span></span>|<span data-ttu-id="c233f-3468">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3468">Assembly Format</span></span>|<span data-ttu-id="c233f-3469">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3470">00</span><span class="sxs-lookup"><span data-stu-id="c233f-3470">00</span></span>|<span data-ttu-id="c233f-3471">nop</span><span class="sxs-lookup"><span data-stu-id="c233f-3471">nop</span></span>|<span data-ttu-id="c233f-3472">동작 없이 연산을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="c233f-3473">이 명령에 대해 정의 된 스택 전환 동작이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-3474">`nop` 연산은 아무 작업도 수행 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="c233f-3475">Opcode가 패치 되 면 공간을 작성 하는 것이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="c233f-3476">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `nop` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3478">스택 맨 위에 있는 정수 값의 비트 보수를 계산하고 결과를 같은 형식으로 계산 스택에 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3479">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3480">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3480">Format</span></span>|<span data-ttu-id="c233f-3481">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3481">Assembly Format</span></span>|<span data-ttu-id="c233f-3482">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3483">66</span><span class="sxs-lookup"><span data-stu-id="c233f-3483">66</span></span>|<span data-ttu-id="c233f-3484">not</span><span class="sxs-lookup"><span data-stu-id="c233f-3484">not</span></span>|<span data-ttu-id="c233f-3485">값의 비트 보수를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="c233f-3486">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3487">`value` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3488">`value` 이 고 해당 비트 팝 보수를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="c233f-3489">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3490">`not` 명령은 정수 값의 비트 보수를 계산 하 고 결과 스택으로 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="c233f-3491">반환 형식은 피연산자 형식과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="c233f-3492">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `not` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3494">스택 맨 위에 있는 두 정수 값의 비트 보수를 계산하고 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3495">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3496">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3496">Format</span></span>|<span data-ttu-id="c233f-3497">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3497">Assembly Format</span></span>|<span data-ttu-id="c233f-3498">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3499">60</span><span class="sxs-lookup"><span data-stu-id="c233f-3499">60</span></span>|<span data-ttu-id="c233f-3500">또는</span><span class="sxs-lookup"><span data-stu-id="c233f-3500">or</span></span>|<span data-ttu-id="c233f-3501">비트를 계산 하거나 두 정수 값의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="c233f-3502">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3503">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3504">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3505">`value2` 및 `value1` 고 비트 OR 팝 되 고 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="c233f-3506">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3507">`or` 명령이 결과 스택으로 푸시하는 스택의 맨 위에 있는 두 값의 비트 OR을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3508">`Or` 정수 관련 작업이입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="c233f-3509">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `or` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3511">현재 계산 스택 맨 위에 있는 값을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3511">Removes the value currently on top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3512">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3513">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3513">Format</span></span>|<span data-ttu-id="c233f-3514">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3514">Assembly Format</span></span>|<span data-ttu-id="c233f-3515">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3516">26</span><span class="sxs-lookup"><span data-stu-id="c233f-3516">26</span></span>|<span data-ttu-id="c233f-3517">pop</span><span class="sxs-lookup"><span data-stu-id="c233f-3517">pop</span></span>|<span data-ttu-id="c233f-3518">스택에서 맨 위에 있는 값을 팝합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3519">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3520">맨 위에 있는 값은 스택에서 팝 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="c233f-3521">`pop` 명령이 스택에서 맨 위에 있는 요소를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="c233f-3522">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `pop` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3524">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3524">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3525">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3525">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3526">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3526">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3527">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3527">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3528">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3528">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3529">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3529">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3530">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3530">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3531">이 명령은 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3531">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3532">후속 배열 주소 연산에서 런타임에 형식 검사를 수행하지 않고 가변성이 제한된 관리되는 포인터를 반환하도록 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3533">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft MSIL (intermediate language) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3534">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3534">Format</span></span>|<span data-ttu-id="c233f-3535">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3535">Assembly Format</span></span>|<span data-ttu-id="c233f-3536">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="c233f-3537">FE 1E</span></span>|<span data-ttu-id="c233f-3538">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3538">readonly.</span></span>|<span data-ttu-id="c233f-3539">후속 배열 주소 연산 런타임 시 형식 검사를 수행 하 고 가변성이 제한 된 관리 되는 포인터를 반환을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="c233f-3540">이 접두사만 바로 이전 나타날 수 있습니다는 `ldelema` 명령에 대 한 호출과 특수 `Address` 배열에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="c233f-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="c233f-3541">후속 작업에 대 한 효과 다음과 같이 두 가지:</span><span class="sxs-lookup"><span data-stu-id="c233f-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="c233f-3542">런타임 시 형식 검사 작업이 수행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="c233f-3543">에 대 한 암시적 형식 검사는 일반적으로는 `ldelema` 및 `stelem` 지침 참조에 사용 되는 경우 형식 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="c233f-3544">없습니다 값 클래스에 대 한 런타임 형식 검사 하므로 `readonly` 경우에 아무 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="c233f-3545">검증 도구 가변성이 제한 된 관리 되는 포인터의 주소 연산의 결과 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="c233f-3546">정의 하는 형식 값이 변경 될 수 있는지 여부를 제어 하기 때문에 방법으로도 제한 된 포인터 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="c233f-3547">공용 필드 또는 값을 업데이트 하는 메서드를 노출 하는 값 클래스에 대 한 포인터는 읽기 전용 (따라서 접두사의 이름).</span><span class="sxs-lookup"><span data-stu-id="c233f-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="c233f-3548">특히, 기본 형식 (예: System.Int32)를 나타내는 클래스를 노출 하지 않고 mutator 되므로 읽기 전용으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="c233f-3549">이렇게 제한 하는 관리 되는 포인터는 다음과 같은 방식 으로만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="c233f-3550">로 `object` 에 대 한 매개 변수는 `ldfld`, `ldflda`, `stfld`, `call`, 또는`constrained callvirt` 지침.</span><span class="sxs-lookup"><span data-stu-id="c233f-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="c233f-3551">로 `pointer` 매개 변수를는 `ldobj` 명령 또는 중 하나에 `ldind` 지시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="c233f-3552">로 `source` 매개 변수는 `cpobj` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="c233f-3553">다른 모든 작업 disallowed, 포함 하는 `stobj`, `initobj`, 또는 `mkrefany` 작업 또는 중 하나는 `stind` 지침.</span><span class="sxs-lookup"><span data-stu-id="c233f-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="c233f-3554">용도 `readonly` 제네릭 코드의 배열에서 요소를 인출할 때 형식 검사를 방지 하는 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="c233f-3555">예를 들어 식 `arr[i].m()`, 여기서 요소는 배열 입력 `arr` 메서드로 인터페이스를 제한 된 제네릭 형식이 `m`, 다음 MSIL로 컴파일할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="c233f-3556">없이 `readonly` 접두사는 `ldelema` 명령의 경우에서 형식 검사를 수행 합니다 여기서! 0이 참조 형식이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="c233f-3557">이 형식 검사 효율적 할 뿐만 아니라 의미 체계가 잘못 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="c233f-3558">에 대 한 형식 검사 `ldelema` 정확 하 게 일치 하는 데 너무 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="c233f-3559">배열 형식의 하위 클래스를 보유 하는 경우! 0, 위의 코드에서 형식 검사를 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="c233f-3560">배열 요소의 주소를 페치 않으면 요소 자체를 하는 대신에 대 한 핸들을 가지려면 `arr[i]` 모두에 대해 작동 값 형식과 참조 형식이 고 따라서에 전달 될 수는 `constrained callvirt` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="c233f-3561">일반적 것은 안전 하지 않을 수 배열 참조 형식의 요소를 보유 하는 경우 런타임 검사를 건너뛰도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="c233f-3562">안전을 배열을 수정 하지 않고도이 포인터를 통해 수행 됩니다 되도록 해야만 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="c233f-3563">검증 규칙이를 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="c233f-3564">엄격히 말해 값 형식에 대 한 읽기 전용 없지만 값 형식에 대 한 형식 안전 생기지 않습니다 하므로 인스턴스 메서드 호출의 개체로 제한 된 관리 되는 포인터를 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="c233f-3565">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `readonly` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3567">형식화된 참조에 포함된 형식 토큰을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3567">Retrieves the type token embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3568">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3569">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3569">Format</span></span>|<span data-ttu-id="c233f-3570">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3570">Assembly Format</span></span>|<span data-ttu-id="c233f-3571">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3572">FE 1 D</span><span class="sxs-lookup"><span data-stu-id="c233f-3572">FE 1D</span></span>|<span data-ttu-id="c233f-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="c233f-3573">refanytype</span></span>|<span data-ttu-id="c233f-3574">형식화 된 참조에 저장 된 형식 토큰을 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="c233f-3575">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3576">값 형식 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3577">형식화 된 참조는 스택에서 팝 하 고 해당 형식 토큰이 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="c233f-3578">형식 토큰 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3579">형식화 된 참조 형식 토큰 및 주소 개체 인스턴스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="c233f-3580">`refanytype` 명령 형식화 된 참조에 포함 된 형식 토큰을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="c233f-3581">참조는 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 명령 만들기에 대 한 참조를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="c233f-3582">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `refanytype` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3584">형식화된 참조에 포함된 주소(<see langword="&amp;" /> 형식)를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3585">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3586">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3586">Format</span></span>|<span data-ttu-id="c233f-3587">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3587">Assembly Format</span></span>|<span data-ttu-id="c233f-3588">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3589">C2 < `T` ></span></span>|<span data-ttu-id="c233f-3590">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="c233f-3590">refanyval `type`</span></span>|<span data-ttu-id="c233f-3591">형식화 된 참조에 저장 된 주소의 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="c233f-3592">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3593">값 형식 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3594">형식화 된 참조는 스택에서 팝 하 고 해당 주소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="c233f-3595">주소가 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3596">형식화 된 참조 형식 토큰 및 주소 개체 인스턴스를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="c233f-3597">`refanyval` 명령 검색에 포함 된 주소는 형식화 된 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="c233f-3598">스택에 제공 하는 형식화 된 참조에 포함 된 형식은 지정 된 형식과 일치 해야 `type` (메타 데이터 토큰는 `typedef` 또는 `typeref`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="c233f-3599">참조는 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 관련된 내용에 대 한 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="c233f-3600"><xref:System.InvalidCastException> 이 throw 됩니다 `type` 형식 참조에 저장 된 형식과 일치 하지 않습니다 (이 경우 `type` 에 제공 되는 클래스는 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 된 있다고 형식화 된 참조).</span><span class="sxs-lookup"><span data-stu-id="c233f-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="c233f-3601"><xref:System.TypeLoadException> 이 throw 됩니다 `type` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="c233f-3602">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `refanyval` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3603">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3604">두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3604">Divides two values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3605">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3606">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3606">Format</span></span>|<span data-ttu-id="c233f-3607">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3607">Assembly Format</span></span>|<span data-ttu-id="c233f-3608">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3609">5D</span><span class="sxs-lookup"><span data-stu-id="c233f-3609">5D</span></span>|<span data-ttu-id="c233f-3610">rem</span><span class="sxs-lookup"><span data-stu-id="c233f-3610">rem</span></span>|<span data-ttu-id="c233f-3611">나눈 나머지를 푸시합니다 `value1` 여 `value2` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c233f-3612">ReplaceThisText</span><span class="sxs-lookup"><span data-stu-id="c233f-3612">ReplaceThisText</span></span>  
  
 <span data-ttu-id="c233f-3613">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3614">A `value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3615">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3616">`value2` 및 `value1` 이 스택과의 나머지 부분에서 표시 되 면 `value1` `div` `value2` 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="c233f-3617">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3618">`result` = `value1` `rem` `value2` 다음 조건을 충족 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="c233f-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), 및:</span><span class="sxs-lookup"><span data-stu-id="c233f-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="c233f-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, 기호 (`result`) 기호 = (`value1`) 여기서 `div` 은 자르는 한 나누기 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="c233f-3621">경우 `value2` 은 0 또는 `value1` 무한대 결과 NaN이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="c233f-3622">경우 `value2` 이 무한대 결과 `value1` (에 대 한 부정 `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="c233f-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="c233f-3623">정수 연산 throw <xref:System.DivideByZeroException> 경우 `value2` 은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="c233f-3624">Intel 기반 플랫폼에서 유의 <xref:System.OverflowException> 를 계산할 때 throw 됩니다 (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="c233f-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="c233f-3625">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rem` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3627">부호 없는 두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3628">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3629">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3629">Format</span></span>|<span data-ttu-id="c233f-3630">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3630">Assembly Format</span></span>|<span data-ttu-id="c233f-3631">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3632">5E</span><span class="sxs-lookup"><span data-stu-id="c233f-3632">5E</span></span>|<span data-ttu-id="c233f-3633">rem.un</span><span class="sxs-lookup"><span data-stu-id="c233f-3633">rem.un</span></span>|<span data-ttu-id="c233f-3634">나누기의 나머지 부분에서는 서명 되지 않은 푸시 `value1` 을 부호 없는 `value2` 스택으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3635">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3636">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3637">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3638">`value2` 및 `value1` 이 스택과의 나머지 부분에서 표시 되 면 `value1` `div` `value2` 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="c233f-3639">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3640">`result` = `value1` `rem.un` `value2` 다음 조건을 충족 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="c233f-3641">`result` = `value1` - `value2` x (`value1` `div.un` `value2`), 및:</span><span class="sxs-lookup"><span data-stu-id="c233f-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="c233f-3642">0 = `result`  <  `value2`여기서 `div.un` 은 부호 없는 나누기 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="c233f-3643">`rem.un` 명령 계산 `result` 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="c233f-3644">`Rem.un` 부호 없는 정수로 구성으로 해당 인수를 처리 하는 동안 <xref:System.Reflection.Emit.OpCodes.Rem> 부호 있는 정수로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="c233f-3645">`Rem.un` 부동 소수점 숫자에 대 한 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="c233f-3646">정수 연산 throw <xref:System.DivideByZeroException> 경우 `value2` 은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="c233f-3647">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rem.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3649">현재 메서드에서 제어를 반환하고 반환 값이 있을 경우 호출 수신자의 계산 스택에서 호출자의 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3650">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3651">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3651">Format</span></span>|<span data-ttu-id="c233f-3652">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3652">Assembly Format</span></span>|<span data-ttu-id="c233f-3653">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3654">2A</span><span class="sxs-lookup"><span data-stu-id="c233f-3654">2A</span></span>|<span data-ttu-id="c233f-3655">ret</span><span class="sxs-lookup"><span data-stu-id="c233f-3655">ret</span></span>|<span data-ttu-id="c233f-3656">가능한 값을 반환 하는 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="c233f-3657">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3658">반환 값은 호출 수신자 계산 스택에서 팝 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3659">1 단계에서 얻은 반환 값은 호출자에 게 계산 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="c233f-3660">반환 값은 호출 수신자 계산 스택에 없으면 값이 없습니다 (호출자 나 호출 수신자에 대 한 없는 스택의 전환 동작) 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="c233f-3661">반환 값 유형의 경우 현재 메서드의 결정 스택 맨 및 현재 메서드를 호출한 메서드의 스택으로 복사에서 가져와야 하는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="c233f-3662">현재 메서드에 대 한 계산 스택에 반환 될 값을 제외 하 고 비어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="c233f-3663">`ret` 명령 밖으로 제어를 전송에 사용할 수 없습니다는`try`, `filter`, `catch`, 또는 `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="c233f-3664">내에서 한 `try` 또는 `catch`를 사용 하 여는 <xref:System.Reflection.Emit.OpCodes.Leave> 의 대상 사용 하 여 명령을 `ret` 모든 바깥쪽 예외 블록 외부에 있는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="c233f-3665">때문에 `filter` 및 `finally` 올바르게 생성 된 Microsoft MSIL (Intermediate Language) 명령 내에서 반환 되는 메서드를 수행 하지 않습니다, 블록은 예외 처리 및 코드가 포함 된 메서드가 아니라 일부 논리적으로 `filter` 또는 `finally`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="c233f-3666">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ret` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3668">현재 예외를 다시 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3668">Rethrows the current exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3669">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3670">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3670">Format</span></span>|<span data-ttu-id="c233f-3671">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3671">Assembly Format</span></span>|<span data-ttu-id="c233f-3672">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3673">FE 1A</span><span class="sxs-lookup"><span data-stu-id="c233f-3673">FE 1A</span></span>|<span data-ttu-id="c233f-3674">rethrow</span><span class="sxs-lookup"><span data-stu-id="c233f-3674">rethrow</span></span>|<span data-ttu-id="c233f-3675">현재 예외를 다시 throw</span><span class="sxs-lookup"><span data-stu-id="c233f-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="c233f-3676">스택 전환 동작이 없습니다이 명령에 대해 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-3677">`rethrow` 명령은의 본문 내 에서만 허용 됩니다.는 `catch` 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="c233f-3678">이 처리기에 의해 발견 된 동일한 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="c233f-3679">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rethrow` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3681">결과를 계산 스택으로 푸시하여 지정된 비트 수만큼 정수 값을 0에서 왼쪽으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3682">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3683">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3683">Format</span></span>|<span data-ttu-id="c233f-3684">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3684">Assembly Format</span></span>|<span data-ttu-id="c233f-3685">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3686">62</span><span class="sxs-lookup"><span data-stu-id="c233f-3686">62</span></span>|<span data-ttu-id="c233f-3687">shl</span><span class="sxs-lookup"><span data-stu-id="c233f-3687">shl</span></span>|<span data-ttu-id="c233f-3688">정수 (0으로 시프트) 왼쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="c233f-3689">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3690">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3691">이동할 비트 양은 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3692">이동할 비트 수와 값은 스택에서 팝 됩니다. 값은 만큼 왼쪽으로 이동 지정 된 비트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="c233f-3693">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3694">`shl` 값으로 변경 하는 명령 (형식 `int32`, `int64` 또는 `native int`) 비트의 지정 된 수 만큼 왼쪽으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="c233f-3695">비트 수가 형식의 값 `int32` 또는 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="c233f-3696">이동할 비트 수는 (비트)의 너비는 제공 된 값 보다 크거나 경우 반환 값은 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="c233f-3697">`Shl` 각 위치의 가장 낮은에 0 비트를 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="c233f-3698">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shl` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3700">결과를 계산 스택으로 푸시하여 부호 안에 있는 정수 값을 지정된 비트 수만큼 오른쪽으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3701">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3702">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3702">Format</span></span>|<span data-ttu-id="c233f-3703">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3703">Assembly Format</span></span>|<span data-ttu-id="c233f-3704">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3705">63</span><span class="sxs-lookup"><span data-stu-id="c233f-3705">63</span></span>|<span data-ttu-id="c233f-3706">shr</span><span class="sxs-lookup"><span data-stu-id="c233f-3706">shr</span></span>|<span data-ttu-id="c233f-3707">정수 (부호의 이동) 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="c233f-3708">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3709">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3710">이동할 비트 양은 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3711">이동할 비트 수와 값은 스택에서 팝 됩니다. 값은 지정 된 수의 비트 오른쪽으로 시프트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="c233f-3712">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3713">`shr.un` 값으로 변경 하는 명령 (형식 `int32`, `int64` 또는 `native int`) 지정 된 비트 수 오른쪽으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="c233f-3714">비트 수가 형식의 값 `int32` 또는 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="c233f-3715">이동할 비트 수는 (비트)의 너비는 제공 된 값 보다 크거나 경우 반환 값은 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="c233f-3716">`Shr` 복제의 원래 값의 부호를 보존 하는 각 교대조에에 상위 비트는 `result`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="c233f-3717">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shr` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3719">결과를 계산 스택으로 푸시하여 부호 없는 정수 값을 지정된 비트 수만큼 0에서 오른쪽으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3720">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3721">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3721">Format</span></span>|<span data-ttu-id="c233f-3722">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3722">Assembly Format</span></span>|<span data-ttu-id="c233f-3723">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3724">64</span><span class="sxs-lookup"><span data-stu-id="c233f-3724">64</span></span>|<span data-ttu-id="c233f-3725">shr.un</span><span class="sxs-lookup"><span data-stu-id="c233f-3725">shr.un</span></span>|<span data-ttu-id="c233f-3726">정수 (0에서 이동) 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="c233f-3727">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3728">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3729">이동할 비트 양은 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3730">이동할 비트 수와 값은 스택에서 팝 됩니다. 값은 지정 된 수의 비트 오른쪽으로 시프트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="c233f-3731">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3732">`shr.un` 값으로 변경 하는 명령 (형식 `int32`, `int64` 또는 `native int`) 지정 된 비트 수 오른쪽으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="c233f-3733">비트 수가 형식의 값 `int32`, `int64` 또는 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="c233f-3734">이동할 비트 수는 (비트)의 너비는 제공 된 값 보다 크거나 경우 반환 값은 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="c233f-3735">`Shr.un` 각 위치의 가장 높은에 0 비트를 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="c233f-3736">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shr.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3738">주어진 값 형식의 크기(바이트)를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3739">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3740">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3740">Format</span></span>|<span data-ttu-id="c233f-3741">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3741">Assembly Format</span></span>|<span data-ttu-id="c233f-3742">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3743">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="c233f-3744">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="c233f-3744">sizeof `valType`</span></span>|<span data-ttu-id="c233f-3745">크기 (바이트)는 값 형식으로 강제 한 `unsigned int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="c233f-3746">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3747">제공 된 값 형식의 바이트 단위로 크기 (`valType`) 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3748">`valType` 메타 데이터 토큰 이어야 합니다 (한 `typeref` 또는 `typedef`) 값 형식, 참조 형식 또는 제네릭 형식 매개 변수를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="c233f-3749">참조 형식에 대 한 반환 되는 크기는 해당 하는 참조 값의 크기 (32 비트 시스템에서 4 바이트)를 참조 값에서 참조 하는 개체에 저장 된 데이터의 크기가 아니라 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="c233f-3750">형식이 나 정의 하는 메서드의 본문에만 제네릭 형식 매개 변수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="c233f-3751">해당 형식 또는 메서드의 인스턴스화되는 제네릭 형식 매개 변수 값 형식 또는 참조 형식으로 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="c233f-3752">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sizeof` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3753">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3754">지정된 인덱스에 있는 인수 슬롯에 계산 스택 맨 위에 있는 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3755">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3756">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3756">Format</span></span>|<span data-ttu-id="c233f-3757">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3757">Assembly Format</span></span>|<span data-ttu-id="c233f-3758">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3759">FE 0B < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-3760">starg `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-3760">starg `num`</span></span>|<span data-ttu-id="c233f-3761">스택에서 맨 위에 있는 값을 팝 하 고 인수 슬롯에 저장 `num`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="c233f-3762">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3763">현재 스택의 맨 위에 값이 팝 되 고 인수 슬롯에 배치 `num`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="c233f-3764">`starg` 명령은 스택에서 값을 팝 하 고 인수 슬롯에 배치 `num`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="c233f-3765">값의 형식을 현재 메서드의 시그니처에 지정 된 인수의 형식이 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-3766">가변 인수 목록을 사용 하는 프로시저는 `starg` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="c233f-3767">인수에는 스택에서 이동할 때 값을 잘립니다 4 바이트 보다 작은 정수 값을 포함 하는 인수는 저장소를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="c233f-3768">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-3769">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `starg` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3770">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3771">계산 스택 맨 위의 값을 약식인 지정된 인덱스의 인수 슬롯에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3772">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3773">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3773">Format</span></span>|<span data-ttu-id="c233f-3774">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3774">Assembly Format</span></span>|<span data-ttu-id="c233f-3775">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-3777">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="c233f-3777">starg.s `num`</span></span>|<span data-ttu-id="c233f-3778">스택에서 맨 위에 있는 값을 팝 하 고 인수 슬롯에 저장 `num`, 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="c233f-3779">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3780">현재 스택의 맨 위에 값이 팝 되 고 인수 슬롯에 배치 `num`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="c233f-3781">`starg.s` 명령은 스택에서 값을 팝 하 고 인수 슬롯에 배치 `num`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="c233f-3782">값의 형식을 현재 메서드의 시그니처에 지정 된 인수의 형식이 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="c233f-3783">`starg.s` 명령은 처음 256 인수에 사용할 수 있는 효율적인 인코딩을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="c233f-3784">가변 인수 목록을 사용 하는 프로시저는 `starg.s` 명령 인수 서명의 변수 부분에서 고정 된 초기에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="c233f-3785">인수에는 스택에서 이동할 때 값을 잘립니다 4 바이트 보다 작은 정수 값을 포함 하는 인수는 저장소를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="c233f-3786">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-3787">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `starg.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3788">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3789">지정된 인덱스에 있는 배열 요소를 명령에 지정된 형식을 갖는 계산 스택의 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3790">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft MSIL (intermediate language) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3791">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3791">Format</span></span>|<span data-ttu-id="c233f-3792">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3792">Assembly Format</span></span>|<span data-ttu-id="c233f-3793">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3794">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3794">A4 < `T` ></span></span>|<span data-ttu-id="c233f-3795">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="c233f-3795">stelem `typeTok`</span></span>|<span data-ttu-id="c233f-3796">형식의 값으로 제공 된 인덱스에 있는 배열 요소를 바꿉니다 `typeTok` 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3797">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3798">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3799">인덱스 값을 `index`, 요소에 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3800">명령에 지정 된 형식의 값으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3801">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3802">`stelem` 명령 1 차원 배열에서 제공 된 0부터 시작 인덱스에 있는 요소의 값을 대체 `array` 값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="c233f-3803">값은 토큰에서 지정 된 형식의 `typeTok` 명령에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="c233f-3804">배열 개체 및 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3805">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3806"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3807"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3808"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3809">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3810">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3811">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="native int" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3812">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3813">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3813">Format</span></span>|<span data-ttu-id="c233f-3814">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3814">Assembly Format</span></span>|<span data-ttu-id="c233f-3815">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3816">9B</span><span class="sxs-lookup"><span data-stu-id="c233f-3816">9B</span></span>|<span data-ttu-id="c233f-3817">stelem.i</span><span class="sxs-lookup"><span data-stu-id="c233f-3817">stelem.i</span></span>|<span data-ttu-id="c233f-3818">와 제공 된 인덱스에 있는 배열 요소는 `native int` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3819">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3820">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3821">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3822">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3823">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3824">`stelem.i` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `native int` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3825">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3826">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3827"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3828"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3829"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3830">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3832">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int8" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3833">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3834">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3834">Format</span></span>|<span data-ttu-id="c233f-3835">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3835">Assembly Format</span></span>|<span data-ttu-id="c233f-3836">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3837">9C</span><span class="sxs-lookup"><span data-stu-id="c233f-3837">9C</span></span>|<span data-ttu-id="c233f-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-3838">stelem.i1</span></span>|<span data-ttu-id="c233f-3839">와 제공 된 인덱스에 있는 배열 요소는 `int8` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3840">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3841">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3842">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3843">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3844">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3845">`stelem.i1` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `int8` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3846">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3847">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3848"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3849"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3850"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3851">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3853">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int16" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3854">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3855">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3855">Format</span></span>|<span data-ttu-id="c233f-3856">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3856">Assembly Format</span></span>|<span data-ttu-id="c233f-3857">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3858">9D</span><span class="sxs-lookup"><span data-stu-id="c233f-3858">9D</span></span>|<span data-ttu-id="c233f-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-3859">stelem.i2</span></span>|<span data-ttu-id="c233f-3860">와 제공 된 인덱스에 있는 배열 요소는 `int16` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3861">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3862">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3863">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3864">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3865">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3866">`stelem.i2` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `int16` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3867">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3868">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3869"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3870"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3871"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3872">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3874">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int32" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3875">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3876">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3876">Format</span></span>|<span data-ttu-id="c233f-3877">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3877">Assembly Format</span></span>|<span data-ttu-id="c233f-3878">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3879">9E</span><span class="sxs-lookup"><span data-stu-id="c233f-3879">9E</span></span>|<span data-ttu-id="c233f-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-3880">stelem.i4</span></span>|<span data-ttu-id="c233f-3881">와 제공 된 인덱스에 있는 배열 요소는 `int32` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3882">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3883">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3884">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3885">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3886">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3887">`stelem.i4` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `int32` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3888">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3889">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3890"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3891"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3892"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3893">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3895">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int64" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3896">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3897">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3897">Format</span></span>|<span data-ttu-id="c233f-3898">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3898">Assembly Format</span></span>|<span data-ttu-id="c233f-3899">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3900">9F</span><span class="sxs-lookup"><span data-stu-id="c233f-3900">9F</span></span>|<span data-ttu-id="c233f-3901">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-3901">stelem.i8</span></span>|<span data-ttu-id="c233f-3902">와 제공 된 인덱스에 있는 배열 요소는 `int64` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3903">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3904">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3905">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3906">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3907">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3908">`stelem.i8` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `int64` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3909">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3910">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3911"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3912"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3913"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3914">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3916">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float32" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3917">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3918">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3918">Format</span></span>|<span data-ttu-id="c233f-3919">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3919">Assembly Format</span></span>|<span data-ttu-id="c233f-3920">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3921">A0</span><span class="sxs-lookup"><span data-stu-id="c233f-3921">A0</span></span>|<span data-ttu-id="c233f-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="c233f-3922">stelem.r4</span></span>|<span data-ttu-id="c233f-3923">와 제공 된 인덱스에 있는 배열 요소는 `float32` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3924">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3925">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3926">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3927">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3928">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3929">`stelem.r4` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `float32` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3930">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3931">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3932"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3933"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3934"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3935">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3937">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float64" /> 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3938">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3939">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3939">Format</span></span>|<span data-ttu-id="c233f-3940">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3940">Assembly Format</span></span>|<span data-ttu-id="c233f-3941">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3942">A1</span><span class="sxs-lookup"><span data-stu-id="c233f-3942">A1</span></span>|<span data-ttu-id="c233f-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="c233f-3943">stelem.r8</span></span>|<span data-ttu-id="c233f-3944">와 제공 된 인덱스에 있는 배열 요소는 `float64` 스택의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3945">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3946">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3947">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3948">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3949">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3950">`stelem.r8` 명령 요소의 값을 대체 `index` 1 차원 배열에서 `array` 와 `float64` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3951">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3952">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3953"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3954"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3955"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3956">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3958">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 개체 참조 값(<see langword="O" /> 형식)으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3959">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3960">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3960">Format</span></span>|<span data-ttu-id="c233f-3961">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3961">Assembly Format</span></span>|<span data-ttu-id="c233f-3962">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3963">A2</span><span class="sxs-lookup"><span data-stu-id="c233f-3963">A2</span></span>|<span data-ttu-id="c233f-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="c233f-3964">stelem.ref</span></span>|<span data-ttu-id="c233f-3965">와 제공 된 인덱스에 있는 배열 요소는 `ref` 값 (유형 `O`) 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="c233f-3966">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3967">배열에 대 한 개체 참조 `array`, 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3968">요소에 유효한 인덱스가 `array` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3969">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="c233f-3970">스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="c233f-3971">`stelem.ref` 명령 1 차원 배열에서 지정된 된 인덱스에 있는 요소의 값을 대체 `array` 와 `ref` (형식 `O`) 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-3972">배열이 개체가 고 이므로 형식의 값으로 표시 `O`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="c233f-3973">인덱스 형식이 `native int`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="c233f-3974">`stelem.ref` 의 요소 형식에 제공 된 값을 암시적으로 캐스팅 `array` 배열 요소에 값을 할당 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="c233f-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="c233f-3975">확인 된 코드에 대해서도이 캐스팅에 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="c233f-3976">따라서는 `stelem.ref` 명령 throw 할 수 있습니다 <xref:System.InvalidCastException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="c233f-3977">0부터 시작 하지 않는 1 차원 배열이 나 다차원 배열에는 <xref:System.Array> 클래스를 제공는 <xref:System.Array.SetValue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c233f-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="c233f-3978"><xref:System.NullReferenceException> 이 throw 됩니다 `array` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-3979"><xref:System.IndexOutOfRangeException> 이 throw 됩니다 `index` 가 음수 이거나 더 큰의 범위 보다 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="c233f-3980"><xref:System.ArrayTypeMismatchException> 이 throw 됩니다 `array` 필요한 형식의 요소를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="c233f-3981">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-3983">개체 참조나 포인터의 필드에 저장된 값을 새 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-3984">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-3985">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3985">Format</span></span>|<span data-ttu-id="c233f-3986">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-3986">Assembly Format</span></span>|<span data-ttu-id="c233f-3987">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-3988">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-3988">7D < `T` ></span></span>|<span data-ttu-id="c233f-3989">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-3989">stfld `field`</span></span>|<span data-ttu-id="c233f-3990">값을 대체 `field` 새 값을 가진 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="c233f-3991">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-3992">개체 참조 나 포인터 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-3993">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-3994">값 및 개체 참조 포인터가 스택에서 팝 되 고 값 `field` 개체에서는 제공 된 값으로 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="c233f-3995">`stfld` 명령 개체의 필드의 값을 바꿉니다 (형식 `O`) 또는 포인터를 통해 (형식 `native int`, `&`, 또는 `*`) 지정된 된 값으로.</span><span class="sxs-lookup"><span data-stu-id="c233f-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="c233f-3996">`Field` 필드 멤버 참조를 참조 하는 메타 데이터 토큰이입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="c233f-3997">`stfld` 명령 중 하나 또는 모두의 접두사가 수 <xref:System.Reflection.Emit.OpCodes.Unaligned> 및 <xref:System.Reflection.Emit.OpCodes.Volatile>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="c233f-3998"><xref:System.NullReferenceException> 개체 참조 나 포인터가 null 참조 및 정적 필드가 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="c233f-3999"><xref:System.MissingFieldException> 이 throw 됩니다 `field` 메타 데이터를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="c233f-4000">이 값은 Microsoft MSIL (Intermediate Language) 명령 하지 런타임에 네이티브 코드를 변환할 때 일반적으로 검사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="c233f-4001">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4002">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4003">주어진 주소에 <see langword="native int" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4004">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4005">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4005">Format</span></span>|<span data-ttu-id="c233f-4006">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4006">Assembly Format</span></span>|<span data-ttu-id="c233f-4007">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4008">DF</span><span class="sxs-lookup"><span data-stu-id="c233f-4008">DF</span></span>|<span data-ttu-id="c233f-4009">stind.i</span><span class="sxs-lookup"><span data-stu-id="c233f-4009">stind.i</span></span>|<span data-ttu-id="c233f-4010">저장소는 `native int` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4011">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4012">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4013">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4014">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4015">`stind.i` 명령 저장소는 `native int` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4016">형식이 안전한 연산에서 `stind.i` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4017">작업은 `stind.i` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4018"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4019">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4021">주어진 주소에 <see langword="int8" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4022">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4023">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4023">Format</span></span>|<span data-ttu-id="c233f-4024">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4024">Assembly Format</span></span>|<span data-ttu-id="c233f-4025">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4026">52</span><span class="sxs-lookup"><span data-stu-id="c233f-4026">52</span></span>|<span data-ttu-id="c233f-4027">stind.i1</span><span class="sxs-lookup"><span data-stu-id="c233f-4027">stind.i1</span></span>|<span data-ttu-id="c233f-4028">저장소는 `int8` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4029">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4030">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4031">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4032">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4033">`stind.i1` 명령 저장소는 `int8` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4034">형식이 안전한 연산에서 `stind.i1` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4035">작업은 `stind.i1` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4036"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4037">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4039">주어진 주소에 <see langword="int16" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4040">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4041">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4041">Format</span></span>|<span data-ttu-id="c233f-4042">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4042">Assembly Format</span></span>|<span data-ttu-id="c233f-4043">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4044">53</span><span class="sxs-lookup"><span data-stu-id="c233f-4044">53</span></span>|<span data-ttu-id="c233f-4045">stind.i2</span><span class="sxs-lookup"><span data-stu-id="c233f-4045">stind.i2</span></span>|<span data-ttu-id="c233f-4046">저장소는 `int16` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4047">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4048">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4049">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4050">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4051">`stind.i2` 명령 저장소는 `int16` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4052">형식이 안전한 연산에서 `stind.2i` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4053">작업은 `stind.i2` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4054"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4055">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4057">주어진 주소에 <see langword="int32" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4058">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4059">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4059">Format</span></span>|<span data-ttu-id="c233f-4060">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4060">Assembly Format</span></span>|<span data-ttu-id="c233f-4061">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4062">54</span><span class="sxs-lookup"><span data-stu-id="c233f-4062">54</span></span>|<span data-ttu-id="c233f-4063">stind.i4</span><span class="sxs-lookup"><span data-stu-id="c233f-4063">stind.i4</span></span>|<span data-ttu-id="c233f-4064">저장소는 `int32` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4065">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4066">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4067">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4068">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4069">`stind.i4` 명령 저장소는 `int32` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4070">형식이 안전한 연산에서 `stind.i4` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4071">작업은 `stind.i4` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4072"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4073">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4075">주어진 주소에 <see langword="int64" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4076">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4077">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4077">Format</span></span>|<span data-ttu-id="c233f-4078">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4078">Assembly Format</span></span>|<span data-ttu-id="c233f-4079">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4080">55</span><span class="sxs-lookup"><span data-stu-id="c233f-4080">55</span></span>|<span data-ttu-id="c233f-4081">stind.i8</span><span class="sxs-lookup"><span data-stu-id="c233f-4081">stind.i8</span></span>|<span data-ttu-id="c233f-4082">저장소는 `int64` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4083">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4084">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4085">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4086">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4087">`stind.i8` 명령 저장소는 `int64` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4088">형식이 안전한 연산에서 `stind.i8` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4089">작업은 `stind.i` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4090"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4091">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4093">주어진 주소에 <see langword="float32" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4094">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4095">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4095">Format</span></span>|<span data-ttu-id="c233f-4096">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4096">Assembly Format</span></span>|<span data-ttu-id="c233f-4097">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4098">56</span><span class="sxs-lookup"><span data-stu-id="c233f-4098">56</span></span>|<span data-ttu-id="c233f-4099">stind.r4</span><span class="sxs-lookup"><span data-stu-id="c233f-4099">stind.r4</span></span>|<span data-ttu-id="c233f-4100">저장소는 `float32` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4101">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4102">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4103">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4104">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4105">`stind.r4` 명령 저장소는 `float32` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4106">형식이 안전한 연산에서 `stind.r4` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4107">작업은 `stind.r4` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4108"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4109">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.r4` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4111">주어진 주소에 <see langword="float64" /> 형식의 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4112">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4113">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4113">Format</span></span>|<span data-ttu-id="c233f-4114">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4114">Assembly Format</span></span>|<span data-ttu-id="c233f-4115">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4116">57</span><span class="sxs-lookup"><span data-stu-id="c233f-4116">57</span></span>|<span data-ttu-id="c233f-4117">stind.r8</span><span class="sxs-lookup"><span data-stu-id="c233f-4117">stind.r8</span></span>|<span data-ttu-id="c233f-4118">저장소는 `float64` 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4119">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4120">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4121">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4122">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4123">`stind.r8` 명령 저장소는 `float64` 제공 된 주소에 값 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4124">형식이 안전한 연산에서 `stind.r8` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4125">작업은 `stind.r8` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4126"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4127">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.r8` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4129">제공된 주소에 개체 참조 값을 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4129">Stores a object reference value at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4130">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4131">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4131">Format</span></span>|<span data-ttu-id="c233f-4132">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4132">Assembly Format</span></span>|<span data-ttu-id="c233f-4133">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4134">51</span><span class="sxs-lookup"><span data-stu-id="c233f-4134">51</span></span>|<span data-ttu-id="c233f-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="c233f-4135">stind.ref</span></span>|<span data-ttu-id="c233f-4136">개체 참조를 저장 합니다. (형식 `O`) 주어진된 주소에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="c233f-4137">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4138">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4139">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4140">스택에서 팝 되 고 값 및 주소 값의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4141">`stind.ref` 제공 된 주소에서 개체 참조 값을 저장 하는 명령 (형식 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="c233f-4142">형식이 안전한 연산에서 `stind.ref` 포인터의 형식과 동일한 방식으로 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="c233f-4143">작업은 `stind.ref` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4144"><xref:System.NullReferenceException> 이 throw 됩니다 `addr` 자연스럽 게 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 정렬 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="c233f-4145">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.ref` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4147">계산 스택 맨 위에서 현재 값을 팝하고 지정된 인덱스에 있는 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4148">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4149">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4149">Format</span></span>|<span data-ttu-id="c233f-4150">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4150">Assembly Format</span></span>|<span data-ttu-id="c233f-4151">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4152">FE 0E < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="c233f-4153">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-4153">stloc `index`</span></span>|<span data-ttu-id="c233f-4154">스택에서 값을 팝 하 고 로컬 변수에 저장 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="c233f-4155">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4156">값은 스택에서 팝 하 고 로컬 변수에 배치 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="c233f-4157">`stloc` 명령 최고 값을 계산 스택에서 되 고 지역 변수 번호로 이동 `index`에서 지역 변수가 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-4158">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4159">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4160">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4161">올바른 언어 MSIL (Microsoft Intermediate) 지침을 수행 하려면 있는 `index` 올바른 로컬 인덱스 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="c233f-4162">에 대 한는 `stloc` 명령 `index` 포괄 0부터 65534 범위 내에서에 있어야 합니다 (특히, 65535 올바르지 않습니다).</span><span class="sxs-lookup"><span data-stu-id="c233f-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="c233f-4163">65535를 제외 하는 데는: 구현 2 바이트 정수를 사용 하 여 지정된 된 메서드에 대 한 지역의 총 수와 지역 변수의 인덱스 모두 추적할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="c233f-4164">인덱스 65535 된가 유효한 경우 이러한 메서드의 지역 변수의 개수를 추적 하는 넓은 정수를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="c233f-4165">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="c233f-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="c233f-4167">ILGenerator.Emit(OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="c233f-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4168">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 0에 있는 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4169">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4170">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4170">Format</span></span>|<span data-ttu-id="c233f-4171">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4171">Assembly Format</span></span>|<span data-ttu-id="c233f-4172">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4173">0A</span><span class="sxs-lookup"><span data-stu-id="c233f-4173">0A</span></span>|<span data-ttu-id="c233f-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="c233f-4174">stloc.0</span></span>|<span data-ttu-id="c233f-4175">지역 변수 0으로 스택에서 값을 팝합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="c233f-4176">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4177">값이 스택에서 팝 되 고 0으로 인덱싱된 로컬 변수에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="c233f-4178">`stloc.0` 명령 최고 값을 계산 스택에서 되 고 지역 변수를 0으로 인덱싱된로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="c233f-4179">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4180">`stloc.0` 지역 변수 0에에서 값을 저장 하는 데 효과적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="c233f-4181">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4182">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4183">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.0` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4185">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 1에 있는 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4186">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4187">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4187">Format</span></span>|<span data-ttu-id="c233f-4188">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4188">Assembly Format</span></span>|<span data-ttu-id="c233f-4189">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4190">0B</span><span class="sxs-lookup"><span data-stu-id="c233f-4190">0B</span></span>|<span data-ttu-id="c233f-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="c233f-4191">stloc.1</span></span>|<span data-ttu-id="c233f-4192">지역 변수 1로 스택에서 값을 팝합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="c233f-4193">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4194">값이 스택에서 팝 되 고 1로 인덱싱된 로컬 변수에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="c233f-4195">`stloc.1` 명령 최고 값을 계산 스택에서 되 고 지역 변수를 1로 인덱싱된로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="c233f-4196">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4197">`stloc.1` 지역 변수 1에에서 값을 저장 하는 데 효과적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="c233f-4198">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4199">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4200">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.1` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4202">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 2에 있는 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4203">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4204">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4204">Format</span></span>|<span data-ttu-id="c233f-4205">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4205">Assembly Format</span></span>|<span data-ttu-id="c233f-4206">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4207">0C</span><span class="sxs-lookup"><span data-stu-id="c233f-4207">0C</span></span>|<span data-ttu-id="c233f-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="c233f-4208">stloc.2</span></span>|<span data-ttu-id="c233f-4209">지역 변수 2로 스택에서 값을 팝합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="c233f-4210">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4211">값이 스택에서 팝 되 고 2로 인덱싱된 로컬 변수에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="c233f-4212">`stloc.2` 명령 최고 값을 계산 스택에서 되 고 지역 변수를 2로 인덱싱된로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="c233f-4213">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4214">`stloc.2` 지역 변수 2에에서 값을 저장 하는 데 효과적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="c233f-4215">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4216">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4217">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.2` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4219">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 3에 있는 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4220">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4221">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4221">Format</span></span>|<span data-ttu-id="c233f-4222">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4222">Assembly Format</span></span>|<span data-ttu-id="c233f-4223">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4224">0D</span><span class="sxs-lookup"><span data-stu-id="c233f-4224">0D</span></span>|<span data-ttu-id="c233f-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="c233f-4225">stloc.3</span></span>|<span data-ttu-id="c233f-4226">지역 변수 3으로 스택에서 값을 팝합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="c233f-4227">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4228">값이 스택에서 팝 되 고 3으로 인덱싱된 로컬 변수에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="c233f-4229">`stloc.3` 지침 최고 값을 계산 스택 및 3으로 인덱싱된 지역 변수로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="c233f-4230">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4231">`stloc.3` 지역 변수 3에에서 값을 저장 하는 데 효과적인 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="c233f-4232">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4233">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4234">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.3` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4236">계산 스택 맨 위에서 현재 값을 팝하여 <paramref name="index" />(약식)의 지역 변수 목록에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4237">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4238">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4238">Format</span></span>|<span data-ttu-id="c233f-4239">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4239">Assembly Format</span></span>|<span data-ttu-id="c233f-4240">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-4242">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="c233f-4242">stloc.s `index`</span></span>|<span data-ttu-id="c233f-4243">스택에서 값을 팝 하 고 로컬 변수에 저장 `index`, 약식 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="c233f-4244">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4245">값은 스택에서 팝 하 고 로컬 변수에 배치 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="c233f-4246">`stloc.s` 명령 최고 값을 계산 스택에서 되 고 지역 변수 번호로 이동 `index`에서 지역 변수가 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="c233f-4247">값의 형식에는 현재 메서드의 지역 시그니처에 지정 된 지역 변수의 형식과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="c233f-4248">`stloc.s` 명령은 로컬 변수가 0부터 255에 대 한 효과적인 인코딩을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="c233f-4249">4 바이트 보다 작은 정수 값을 포함 하는 로컬 항목을 저장 하는 지역 변수 스택에서 이동할 때 값을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="c233f-4250">부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 인수와 관련 된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="c233f-4251">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.s` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="c233f-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="c233f-4253">ILGenerator.Emit(OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4254">지정된 형식의 값을 계산 스택에서 주어진 메모리 주소로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4255">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4256">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4256">Format</span></span>|<span data-ttu-id="c233f-4257">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4257">Assembly Format</span></span>|<span data-ttu-id="c233f-4258">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4259">81 < `T` ></span></span>|<span data-ttu-id="c233f-4260">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="c233f-4260">stobj `class`</span></span>|<span data-ttu-id="c233f-4261">형식의 값을 저장 `class` 스택에서 메모리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="c233f-4262">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4263">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4264">형식의 값 형식 개체 `class` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4265">개체와 주소 스택에서 팝 되 고 값 형식 개체의 주소에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="c233f-4266">`stobj` 주소에서 지정 된 주소를 값 형식 개체를 복사 하는 명령 (형식의 포인터 `native int`, `*`, 또는 `&`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="c233f-4267">복사 된 바이트 수가 나타내는 클래스의 크기에 따라 `class`값 형식을 나타내는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="c233f-4268">작업은 `stobj` 명령 바로 앞으로 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="c233f-4269"><xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="c233f-4270">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="c233f-4271">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stobj` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4272">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4273">정적 필드의 값을 계산 스택에 있는 값으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4273">Replaces the value of a static field with a value from the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4274">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4275">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4275">Format</span></span>|<span data-ttu-id="c233f-4276">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4276">Assembly Format</span></span>|<span data-ttu-id="c233f-4277">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4278">80 < `T` ></span></span>|<span data-ttu-id="c233f-4279">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="c233f-4279">stsfld `field`</span></span>|<span data-ttu-id="c233f-4280">값을 대체 `field` 제공 된 값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="c233f-4281">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4282">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4283">값이 스택에서 팝 되 고에 저장 된 `field`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="c233f-4284">`stsfld` 명령은 정적 필드의 값을 스택에서 값으로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="c233f-4285">`field` 정적 필드 멤버를 참조 하는 메타 데이터 토큰이입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="c233f-4286">`stsfld` 명령 접두사로 수 <xref:System.Reflection.Emit.OpCodes.Volatile>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="c233f-4287"><xref:System.MissingFieldException> 메타 데이터에는 필드를 찾을 수 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="c233f-4288">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 실행 시 하지 네이티브 코드로 변환 될 때 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="c233f-4289">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stsfld` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4290">ILGenerator.Emit(OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="c233f-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4291">값에서 다른 값을 빼고 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4292">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4293">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4293">Format</span></span>|<span data-ttu-id="c233f-4294">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4294">Assembly Format</span></span>|<span data-ttu-id="c233f-4295">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4296">59</span><span class="sxs-lookup"><span data-stu-id="c233f-4296">59</span></span>|<span data-ttu-id="c233f-4297">sub</span><span class="sxs-lookup"><span data-stu-id="c233f-4297">sub</span></span>|<span data-ttu-id="c233f-4298">값에서 새 숫자 값을 반환 합니다. 다른 값을 뺍니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="c233f-4299">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4300">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4301">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4302">`value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺀 `value1`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="c233f-4303">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4304">정수 연산에 오버플로 인식 되지 않습니다 (적절 한 오버플로 처리를 위해 참조 <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="c233f-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="c233f-4305">정수 빼기 포화 되지 않고 래핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="c233f-4306">예를 들어: 8 비트 정수의 여기서 `value1` 0으로 설정 하 고 `value2` 설정 되어 1, "래핑된" 결과 255 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="c233f-4307">부동 소수점 오버플로가 반환 `+inf` (`PositiveInfinity`) 또는 `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="c233f-4308">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4310">정수 값에서 다른 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4311">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4312">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4312">Format</span></span>|<span data-ttu-id="c233f-4313">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4313">Assembly Format</span></span>|<span data-ttu-id="c233f-4314">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4315">DA</span><span class="sxs-lookup"><span data-stu-id="c233f-4315">DA</span></span>|<span data-ttu-id="c233f-4316">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="c233f-4316">sub.ovf</span></span>|<span data-ttu-id="c233f-4317">텍스트 값에서 오버플로 검사 하는 다른 정수 값을 뺍니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-4318">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4319">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4320">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4321">`value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺀 `value1` 오버플로 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="c233f-4322">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4323"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-4324">부호 있는 정수;에이 작업을 수행 하는 부동 소수점 값에 대 한 사용 <xref:System.Reflection.Emit.OpCodes.Sub>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="c233f-4325">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub.ovf` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4327">부호 없는 정수 값에서 다른 부호 없는 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4328">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4329">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4329">Format</span></span>|<span data-ttu-id="c233f-4330">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4330">Assembly Format</span></span>|<span data-ttu-id="c233f-4331">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4332">DB</span><span class="sxs-lookup"><span data-stu-id="c233f-4332">DB</span></span>|<span data-ttu-id="c233f-4333">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="c233f-4333">sub.ovf.un</span></span>|<span data-ttu-id="c233f-4334">텍스트 값에서 오버플로 검사 하는 다른 부호 없는 정수 값을 뺍니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="c233f-4335">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4336">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4337">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4338">`value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺀 `value1` 오버플로 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="c233f-4339">결과를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4340"><xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="c233f-4341">부호 있는 정수;에이 작업을 수행 하는 부동 소수점 값에 대 한 사용 <xref:System.Reflection.Emit.OpCodes.Sub>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="c233f-4342">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub.ovf.un` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4344">점프 테이블을 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4344">Implements a jump table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4345">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4346">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4346">Format</span></span>|<span data-ttu-id="c233f-4347">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4347">Assembly Format</span></span>|<span data-ttu-id="c233f-4348">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="c233f-4350">전환 (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="c233f-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="c233f-4351">중 하나로 점프 `N` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="c233f-4352">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4353">값이 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4354">값은 스택에서 팝 되 고 해당 값은 해당 값으로 인덱싱된 오프셋에서 명령으로 실행이 넘어갑니다 보다 작은 `N`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="c233f-4355">`switch` 명령 점프 테이블을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="c233f-4356">명령 형식은 `unsigned int32` 대상의 수를 나타내는 `N`옵니다 `N` 점프 대상을 지정 하는 int32 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="c233f-4357">이러한 대상을이 다음의 시작 부분에서 오프셋 (양수 또는 음수)으로 표시 됩니다 `switch` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="c233f-4358">`switch` 명령 값은 스택에서 해시와 비교, 부호 없는 정수로 `N`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="c233f-4359">값이 보다 작은 `N`, 실행이 대상으로 전송 된 값으로 인덱싱된 0에서 대상으로 번호가 매겨집니다 여기서 (예를 들어 0 값이 첫 번째 대상 우선, 1의 값이 고 두 번째 대상 우선).</span><span class="sxs-lookup"><span data-stu-id="c233f-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="c233f-4360">보다 크거나 같은 값이 `N`, 다음 명령 (제어 이동)에서 실행이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="c233f-4361">첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드 있으면 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="c233f-4362">내부 / 외부로 전송을 제어 `try`, `catch`, `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="c233f-4363">(이러한 전송 하 게 제한 되므로 leave 명령을 대신 사용 해야 합니다).</span><span class="sxs-lookup"><span data-stu-id="c233f-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="c233f-4364">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `switch` opcode입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="c233f-4365">`Label[]` 인수는 32 비트 오프셋을 나타내는 Label의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="c233f-4366">ILGenerator.Emit(OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="c233f-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c233f-4367">다음 코드 샘플에서는 `Switch` 배열을 사용 하 여 점프 테이블을 생성 하는 opcode <xref:System.Reflection.Emit.Label>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4368">실제 호출 명령이 실행되기 전에 현재 메서드의 스택 프레임이 제거되도록 후위 메서드 호출 명령을 수행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4369">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4370">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4370">Format</span></span>|<span data-ttu-id="c233f-4371">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4371">Assembly Format</span></span>|<span data-ttu-id="c233f-4372">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="c233f-4373">FE 14</span></span>|<span data-ttu-id="c233f-4374">마무리 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4374">tail.</span></span>|<span data-ttu-id="c233f-4375">이후의 호출에서는 현재 메서드를 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="c233f-4376">이 명령에 대해 정의 된 스택 전환 동작은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="c233f-4377">`tail` 접두사 명령의 바로 앞에 있어야는 <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, 또는 <xref:System.Reflection.Emit.OpCodes.Callvirt> 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="c233f-4378">호출 명령을 실행 하기 전에 현재 메서드의 스택 프레임을 제거할 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="c233f-4379">다음 호출에서 반환 된 값이 현재 메서드에 의해 반환 되는 값 및 호출이 메서드 크로스 점프로 변환 될 따라서 의미 하기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="c233f-4380">스택의 다음 호출에서 전달 하는 인수를 제외 하 고 비어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="c233f-4381">명령 호출 다음에 ret 이어야 합니다. 따라서 유효한 코드 시퀀스는 `tail. call` (또는 `calli` 또는 `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="c233f-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="c233f-4382">올바른 언어 MSIL (Microsoft Intermediate) 지침으로 분기할 해야는 `call` 명령 있지만 후속로 분기할 수 <xref:System.Reflection.Emit.OpCodes.Ret>합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="c233f-4383">컨트롤에서에서 전송 될 때 신뢰할 수 없는 코드가 신뢰할 수 있는 코드를 코드 id의 보안을 위협할 수 있기 때문에 현재 프레임을 취소할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="c233f-4384">.NET Framework 보안 검사 따라서 발생할 수 있습니다는 `tail` 무시 되도록 표준 두면 <xref:System.Reflection.Emit.OpCodes.Call> 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="c233f-4385">마찬가지로, 위해 호출이 반환 된 후 발생 하는 동기화 영역이 종료를 허용 하는, `tail` 동기화 상태로 표시 하는 메서드를 종료 하는 데 사용 하는 경우 접두사는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="c233f-4386">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `tail` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">
          <span data-ttu-id="c233f-4388">Opcode 개체의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4388">An instance of an Opcode object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c233f-4389">제공된 opcode가 단일 바이트 인수를 사용할 경우 true나 false를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4389">Returns true or false if the supplied opcode takes a single byte argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c233f-4390">
            <see langword="True" /> 또는 <see langword="false" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4390">
              <see langword="True" /> or <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4391">이 메서드는 지정 된 MSIL opcode는 최적화 된 코드에 "약식"를 사용 하기 위해를 찾는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="c233f-4392">`TakesSingleByteArgument` 반환 `true` 경우는 <xref:System.Reflection.Emit.OpCode> 다음과 같은 경우에는 단일 바이트 인수를 사용 하는 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="c233f-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="c233f-4393">Opcode 바이트 크기의 주소에는 분기 명령이 수행 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Br_S> 및 <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="c233f-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="c233f-4394">Opcode 바이트 값을 스택으로 푸시합니다 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="c233f-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="c233f-4395">Opcode 참조 변수 또는 인수를 통해 바이트 크기의 "약식" (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloc_S> 및 <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="c233f-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="c233f-4396">그 외의 경우 `false`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="c233f-4397">다음 예제에서는 사용 `TakesSingleByteArgument` 에 반영 하 여는 `OpCodes` 클래스 및 테스트 하 있는지 여부를 각 `OpCode` 필드는 단일 바이트 인수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4398">현재 계산 스택에 있는 예외 개체를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4398">Throws the exception object currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4399">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4400">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4400">Format</span></span>|<span data-ttu-id="c233f-4401">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4401">Assembly Format</span></span>|<span data-ttu-id="c233f-4402">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4403">7A</span><span class="sxs-lookup"><span data-stu-id="c233f-4403">7A</span></span>|<span data-ttu-id="c233f-4404">throw</span><span class="sxs-lookup"><span data-stu-id="c233f-4404">throw</span></span>|<span data-ttu-id="c233f-4405">예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="c233f-4406">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4407">개체 참조 (예외)를 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4408">개체 참조가 스택과 throw 된 예외에서 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="c233f-4409">`throw` 예외 개체를 throw 하는 명령 (형식 `O`) 현재 스택에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="c233f-4410"><xref:System.NullReferenceException> 개체 참조는 null 참조 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-4411">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `throw` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4413">현재 계산 스택의 맨 위에 있는 주소가 바로 다음에 오는 <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> 또는 <see langword="cpblk" /> 명령의 기본 크기에 따라 정렬될 수 없음을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4414">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4415">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4415">Format</span></span>|<span data-ttu-id="c233f-4416">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4416">Assembly Format</span></span>|<span data-ttu-id="c233f-4417">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4418">FE 12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="c233f-4419">정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="c233f-4420">나타냅니다는 후속 포인터 명령이 맞춰지지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="c233f-4421">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4422">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4423">`Unaligned` 지정 하는 주소 (관리 되지 않는 포인터로 `native int`) 스택에 맞춰지지 않을 수 바로 다음의 원래 크기에 `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, 또는 `cpblk` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="c233f-4424">즉,에 대 한 한 <xref:System.Reflection.Emit.OpCodes.Ldind_I4> 명령 주소 맞춤은 4 바이트 경계에 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="c233f-4425">에 대 한 `initblk` 및 `cpblk` 기본 정렬은 아키텍처 종속 (4 바이트에서 cpu가 32 비트, 64 비트 Cpu에서 8 바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="c233f-4426">32 비트 단어 크기에 해당 출력을 제한 하지 않는 코드 생성기를 사용 해야 `unaligned` 맞춤은 알 수 없는 경우 컴파일 타임에 8 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="c233f-4427">1, 2 또는 4 및 생성 된 코드는 주소는 바이트, 더블 바이트 또는 각각 쿼드 바이트 맞춤 것으로 간주 해야 함을 의미 정렬 값 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="c233f-4428">일시적이 지 해당 참고 포인터 (형식 `*`)는 항상 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="c233f-4429">에 대 한 맞춤 하는 동안는 `cpblk` 명령 (원본에 대해 각각 하나씩) 및 대상에 대해 하나씩 두 개의 숫자 필요 논리적으로, 하나만 낮은 값을 지정 하는 경우 성능에 거의 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="c233f-4430">`unaligned` 및 `volatile` 순서를 바꿔서 접두사를 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="c233f-4431">해야 바로 앞에 `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, 또는 `cpblk` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="c233f-4432">만 <xref:System.Reflection.Emit.OpCodes.Volatile> 에 대 한 접두사를 사용할 수는 <xref:System.Reflection.Emit.OpCodes.Ldsfld> 및 <xref:System.Reflection.Emit.OpCodes.Stsfld> 지침.</span><span class="sxs-lookup"><span data-stu-id="c233f-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="c233f-4433">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unaligned` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4434">ILGenerator.Emit(OpCode, Label)</span><span class="sxs-lookup"><span data-stu-id="c233f-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="c233f-4435">ILGenerator.Emit(Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="c233f-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4436">boxed로 표시되는 값 형식을 unboxed 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4436">Converts the boxed representation of a value type to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4437">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4438">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4438">Format</span></span>|<span data-ttu-id="c233f-4439">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4439">Assembly Format</span></span>|<span data-ttu-id="c233f-4440">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4441">79 < `T` ></span></span>|<span data-ttu-id="c233f-4442">unbox `valType`</span><span class="sxs-lookup"><span data-stu-id="c233f-4442">unbox `valType`</span></span>|<span data-ttu-id="c233f-4443">값 형식 데이터를 추출 `obj`, 해당 boxed로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="c233f-4444">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4445">한 개체 참조가 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4446">개체 참조가 스택에서 팝 하 고 unboxed 값 형식 포인터로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="c233f-4447">값 형식 포인터 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4448">값 형식에 공용 언어 인프라 (CLI) 내에서 두 개의 별도 표현:</span><span class="sxs-lookup"><span data-stu-id="c233f-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="c233f-4449">값 형식이 다른 개체에 포함 될 때 사용 되는 '원시' 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="c233f-4450">값 형식의 데이터 줄 바꿈되는 위치 (boxed) 개체로 독립 엔터티로 존재할 수 있는 'boxed' 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="c233f-4451">`unbox` 명령으로 개체 참조를 변환 (형식 `O`), 값 형식 포인터를 값 형식으로 나타낸 boxed (관리 되는 포인터 형식 `&`), 해당 unboxed 형식인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="c233f-4452">값 형식 (`valType`)는 boxed 개체에 포함 된 값 형식의 종류를 나타내는 메타 데이터 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="c233f-4453">와 달리 <xref:System.Reflection.Emit.OpCodes.Box>, 개체에서 사용 하기 위해 값 형식을 복사할 수는 데 필요한 `unbox` 개체에서 값 형식을 복사할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="c233f-4454">일반적으로 boxed 개체 안에 있는 값 형식의 주소를 단순히 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="c233f-4455"><xref:System.InvalidCastException> 개체가으로 boxed 하지 없으면 예외가 `valType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="c233f-4456"><xref:System.NullReferenceException> 개체 참조는 null 참조 하는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-4457"><xref:System.TypeLoadException> 값을 입력 하는 경우 throw 되 `valType` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="c233f-4458">이 상황은 일반적으로 Microsoft MSIL (Intermediate Language) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 발견 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="c233f-4459">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unbox` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4460">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4461">명령에 지정된 형식의 boxed 표현을 unboxed 형식으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4462">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft MSIL (intermediate language) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4463">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4463">Format</span></span>|<span data-ttu-id="c233f-4464">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4464">Assembly Format</span></span>|<span data-ttu-id="c233f-4465">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4466">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="c233f-4466">A5 < `T` ></span></span>|<span data-ttu-id="c233f-4467">unbox.any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="c233f-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="c233f-4468">데이터를 추출할 `obj`, 해당 boxed로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="c233f-4469">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4470">개체 참조 `obj` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4471">개체 참조가 스택에서 팝 하 고 명령에 지정 된 형식과 unboxed 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="c233f-4472">결과 개체 참조 또는 값 형식으로 스택에 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4473">Boxed 값 형식이 형식에 적용 될 때는 `unbox.any` 내에 포함 된 값을 추출 하는 명령 `obj` (형식의 `O`), 같음 되므로 `unbox` 뒤 `ldobj`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="c233f-4474">참조 형식에 적용할 경우의 `unbox.any` 명령 것과 동일한 결과가 `castclass` `typeTok`합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="c233f-4475">경우 피연산자 `typeTok` 제네릭 형식 매개 변수를이 런타임 동작은 해당 제네릭 형식 매개 변수에 대해 지정 된 유형에 의해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="c233f-4476"><xref:System.InvalidCastException> 이 throw 됩니다 `obj` boxed 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="c233f-4477"><xref:System.NullReferenceException> 이 throw 됩니다 `obj` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="c233f-4478">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unbox.any` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4479">ILGenerator.Emit(OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="c233f-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4480">현재 계산 스택 맨 위에 있는 주소가 휘발성이고, 해당 위치를 읽은 결과가 캐시되지 않으며 이 위치에 여러 번 저장할 수 있음을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4481">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4482">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4482">Format</span></span>|<span data-ttu-id="c233f-4483">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4483">Assembly Format</span></span>|<span data-ttu-id="c233f-4484">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="c233f-4485">FE 13</span></span>|<span data-ttu-id="c233f-4486">휘발성입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4486">volatile.</span></span>|<span data-ttu-id="c233f-4487">후속 포인터 참조가 일시적 임을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="c233f-4488">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4489">주소 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4490">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="c233f-4490">`volatile`.</span></span> <span data-ttu-id="c233f-4491">주소 휘발성 주소 인지를 지정 합니다 (즉, 참조 하려면 외부에서 실행의 현재 스레드에) 및 결과의 위치를 캐시할 수 없는 읽거나 해당 위치에 여러 개의 저장소를 억제할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="c233f-4492">로 액세스 표시 `volatile` single; 액세스 하는 동일한 위치에 대 한 다른 액세스를 개별적으로 표시 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="c233f-4493">원자적으로 휘발성 위치에 액세스할 필요 수행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="c233f-4494"><xref:System.Reflection.Emit.OpCodes.Unaligned> 및 `volatile` 순서를 바꿔서 접두사를 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="c233f-4495">해야 바로 앞에 `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, 또는 `cpblk` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="c233f-4496">만 `volatile` 에 대 한 접두사를 사용할 수는 <xref:System.Reflection.Emit.OpCodes.Ldsfld> 및 <xref:System.Reflection.Emit.OpCodes.Stsfld> 지침.</span><span class="sxs-lookup"><span data-stu-id="c233f-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="c233f-4497">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `volatile` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c233f-4499">계산 스택의 맨 위에 있는 두 값의 배타적 비트 OR을 계산하고 결과를 스택으로 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c233f-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c233f-4500">다음 표에 지침의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="c233f-4501">형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4501">Format</span></span>|<span data-ttu-id="c233f-4502">어셈블리 형식</span><span class="sxs-lookup"><span data-stu-id="c233f-4502">Assembly Format</span></span>|<span data-ttu-id="c233f-4503">설명</span><span class="sxs-lookup"><span data-stu-id="c233f-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="c233f-4504">61</span><span class="sxs-lookup"><span data-stu-id="c233f-4504">61</span></span>|<span data-ttu-id="c233f-4505">xor</span><span class="sxs-lookup"><span data-stu-id="c233f-4505">xor</span></span>|<span data-ttu-id="c233f-4506">두 정수 값의 배타적 비트 OR을 계산 하 고는 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="c233f-4507">스택 전환 동작은에 순차적으로입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="c233f-4508">`value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="c233f-4509">`value2` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="c233f-4510">`value2` 및 `value1` 이 고 해당 비트 표시 되 면 XOR 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="c233f-4511">비트 배타적 or `value2` 및 `value1` 스택으로 푸시됩니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="c233f-4512">`xor` 명령이 계산 맨 위의 두의 비트 배타적 or 스택의 값 및 결과 스택에 남겨 둡니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="c233f-4513">`Xor` 정수 관련 작업이입니다.</span><span class="sxs-lookup"><span data-stu-id="c233f-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="c233f-4514">다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `xor` opcode:</span><span class="sxs-lookup"><span data-stu-id="c233f-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="c233f-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="c233f-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>