<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EnumBuilder.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac526937c284a17b2cf04e4df8c5f7d41e5f2f65d5b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26937c284a17b2cf04e4df8c5f7d41e5f2f65d5b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Describes and represents an enumeration type.</source>
          <target state="translated">열거형 형식을 설명하고 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1을 사용 하 여 열거형을 정의 하는 데 필요한은 <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> 때문에 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> 요소가 형식의 열거형을 내보내는 <ph id="ph3">&lt;xref:System.Int32&gt;</ph> 열거형 형식 대신 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.</source>
          <target state="translated">.NET Framework 버전 2.0에서에서 <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> 올바른 형식이 있는 요소를 포함 하는 열거형을 내보냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <ph id="ph1">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 예제를 사용 하 여 동적 어셈블리를 내에서 열거형 생성 <ph id="ph1">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>The example defines an enumeration named <ph id="ph1">`Elevation`</ph>, with an underlying type of <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and creates two elements: <ph id="ph3">`Low`</ph>, with a value of 0, and <ph id="ph4">`High`</ph>, with a value of 1.</source>
          <target state="translated">이 예제에서는 란 이름의 열거형 정의 <ph id="ph1">`Elevation`</ph>, 기본 유형으로 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, 요소를 만듭니다: <ph id="ph3">`Low`</ph>, 값이 0 인 및 <ph id="ph4">`High`</ph>, 값이 1 인 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>After the type has been created, the assembly is saved with the name <ph id="ph1">`TempAssembly.dll`</ph>.</source>
          <target state="translated">어셈블리의 이름으로 저장 됩니다 종류를 만든 후 <ph id="ph1">`TempAssembly.dll`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of this assembly.</source>
          <target state="translated">사용할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 이 어셈블리의 내용을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</source>
          <target state="translated">.NET Framework 버전 2.0에서는 하기 전에이 코드 예제는 올바른 열거형을 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>Retrieves the dynamic assembly that contains this enum definition.</source>
          <target state="translated">이 열거형 정의를 포함하는 동적 어셈블리를 검색합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>The dynamic assembly that contains this enum definition.</source>
          <target state="translated">이 열거형 정의를 포함하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Assembly">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Assembly`</ph> property to reference the parent assembly of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`Assembly`</ph> 현재의 부모 어셈블리를 참조 하도록 <ph id="ph2">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Returns the full path of this enum qualified by the display name of the parent assembly.</source>
          <target state="translated">부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로를 반환합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The full path of this enum qualified by the display name of the parent assembly.</source>
          <target state="translated">부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The format of the returned string is:</source>
          <target state="translated">반환된 된 문자열의 형식은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source><ph id="ph1">\&lt;</ph>FullTypeName&gt;, <ph id="ph2">\&lt;</ph>AssemblyDisplayName&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>FullTypeName&gt;, <ph id="ph2">\&lt;</ph>AssemblyDisplayName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 에 대 한 설명은 형식의 어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.</source>
          <target state="translated">.NET framework 버전 1.1이 경우이 속성의 반환 값 문화권 또는 공개 키를 포함 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`AssemblyQualifiedName`</ph> property to reference the qualified parent assembly name of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`AssemblyQualifiedName`</ph> 현재의 정규화 된 부모 어셈블리 이름을 참조 하는 속성 <ph id="ph2">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>Returns the parent <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of this type which is always <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>인 이 형식의 부모 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.BaseType">
          <source>The parent <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of this type.</source>
          <target state="translated">이 형식의 부모 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for this enum.</source>
          <target state="translated">이 열거형에 대한 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for this enum.</source>
          <target state="translated">이 열거형에 대한 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>This type has been previously created.</source>
          <target state="translated">이 형식은 이전에 작성되었습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateType">
          <source>The enclosing type has not been created.</source>
          <target state="translated">바깥쪽 형식이 만들어지지 않았습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> object that represents this enumeration.</source>
          <target state="translated">이 열거형을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
          <source>An object that represents this enumeration.</source>
          <target state="translated">이 열거형을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>Returns the type that declared this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>를 선언한 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
          <source>The type that declared this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>를 선언한 형식입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The name of the static field.</source>
          <target state="translated">정적 필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The constant value of the literal.</source>
          <target state="translated">리터럴의 상수 값입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>Defines the named static field in an enumeration type with the specified constant value.</source>
          <target state="translated">지정된 상수 값을 사용하여 열거형의 명명된 정적 필드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The defined field.</source>
          <target state="translated">정의된 필드입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The defined field will have the field attributes <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Public&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.Static&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldAttributes.Literal&gt;</ph> set.</source>
          <target state="translated">정의 된 필드는 필드 특성을 갖습니다 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Public&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.Static&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Reflection.FieldAttributes.Literal&gt;</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1을 사용 하 여 열거형을 정의 하는 데 필요한은 <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> 때문에 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> 요소가 형식의 열거형을 내보내는 <ph id="ph3">&lt;xref:System.Int32&gt;</ph> 열거형 형식 대신 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.</source>
          <target state="translated">.NET Framework 버전 2.0에서에서 <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> 올바른 형식이 있는 요소를 포함 하는 열거형을 내보냅니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <ph id="ph1">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 예제를 사용 하 여 동적 어셈블리를 내에서 열거형 생성 <ph id="ph1">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>The example defines an enumeration named <ph id="ph1">`Elevation`</ph>, with an underlying type of <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and creates two elements: <ph id="ph3">`Low`</ph>, with a value of 0, and <ph id="ph4">`High`</ph>, with a value of 1.</source>
          <target state="translated">이 예제에서는 란 이름의 열거형 정의 <ph id="ph1">`Elevation`</ph>, 기본 유형으로 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, 요소를 만듭니다: <ph id="ph3">`Low`</ph>, 값이 0 인 및 <ph id="ph4">`High`</ph>, 값이 1 인 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>After the type has been created, the assembly is saved with the name <ph id="ph1">`TempAssembly.dll`</ph>.</source>
          <target state="translated">어셈블리의 이름으로 저장 됩니다 종류를 만든 후 <ph id="ph1">`TempAssembly.dll`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of this assembly.</source>
          <target state="translated">사용할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 이 어셈블리의 내용을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
          <source>Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</source>
          <target state="translated">.NET Framework 버전 2.0에서는 하기 전에이 코드 예제는 올바른 열거형을 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>Returns the full path of this enum.</source>
          <target state="translated">이 열거의 전체 경로를 반환합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>The full path of this enum.</source>
          <target state="translated">이 열거의 전체 경로입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.FullName">
          <source>The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</source>
          <target state="translated">반환 된 형식은 중첩된 형식 및 중첩 되지 않은 형식에 대 한 "typeName"에 대 한 "enclosingTypeFullName + nestedTypeName"입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing the public and non-public constructors defined for this class, as specified.</source>
          <target state="translated">지정된 것처럼, 이 클래스에 대해 정의된 공용 및 비공용 생성자를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing the specified constructors defined for this class.</source>
          <target state="translated">이 클래스에 대해 정의된 지정된 생성자를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">생성자가 정의되지 않은 경우 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">문제를 해결 완료 된 형식의 생성자를 검색 하려면 검색할 수 있습니다를 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Returns the custom attributes defined for this constructor.</source>
          <target state="translated">이 생성자에 대해 정의된 사용자 지정 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this constructor.</source>
          <target state="translated">이 생성자에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of objects representing all the custom attributes of the constructor represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> instance.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ConstructorBuilder" /&gt;</ph> 인스턴스가 나타내는 생성자의 모든 사용자 지정 특성을 나타내는 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 사용자 지정 특성을 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> 반환 된 <ph id="ph3">&lt;xref:System.Type&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>The following code sample illustrates the use of <ph id="ph1">`GetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.</source>
          <target state="translated">다음 코드 샘플에서는 <ph id="ph1">`GetCustomAttribute`</ph> 의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">사용자 지정 특성이 적용되는 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes identified by the given type.</source>
          <target state="translated">지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of objects representing the attributes of this constructor that are of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph><ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph><ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>인 해당 생성자의 특성을 나타내는 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 사용자 지정 특성을 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> 반환 된 <ph id="ph3">&lt;xref:System.Type&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The following code sample illustrates the use of <ph id="ph1">`GetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.</source>
          <target state="translated">다음 코드 샘플에서는 <ph id="ph1">`GetCustomAttribute`</ph> 의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출하면 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>이 항상 throw됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>This method is not supported.</source>
          <target state="translated">이 메서드는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>No value is returned.</source>
          <target state="translated">값이 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetElementType">
          <source>This method is not currently supported.</source>
          <target state="translated">이 메서드는 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
          <source>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</source>
          <target state="translated">열거형 작성기가 정의될 때 설정된 현재 열거형의 기본 정수 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
          <source>The underlying type.</source>
          <target state="translated">기본 형식입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The name of the event to get.</source>
          <target state="translated">가져올 이벤트의 이름입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This invocation attribute.</source>
          <target state="translated">이 호출의 특성입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns the event with the specified name.</source>
          <target state="translated">지정된 이름의 이벤트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">지정된 이름의 형식으로 선언되거나 상속된 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>If there are no matches, <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned.</source>
          <target state="translated">일치하는 항목이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the event of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 이벤트를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>This method is not supported on types that have not been completed.</source>
          <target state="translated">이 메서드는 완료되지 않은 형식에 대해 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>Returns the events for the public events declared or inherited by this type.</source>
          <target state="translated">이 형식에 의해 선언되거나 상속되는 public 이벤트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public events declared or inherited by this type.</source>
          <target state="translated">이 형식으로 선언되거나 상속된 공용 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>An empty array is returned if there are no public events.</source>
          <target state="translated">public 이벤트가 없는 경우 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 이벤트를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public events that are declared by this type.</source>
          <target state="translated">이 형식으로 선언되는 public 이벤트 및 public이 아닌 이벤트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public and non-public events declared or inherited by this type.</source>
          <target state="translated">이 형식으로 선언되거나 상속된 공용 및 비공용 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no events, as specified.</source>
          <target state="translated">이벤트가 없으면 지정된 대로 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type to retrieve the events.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 이벤트를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 검색된 형식에 대해 리플렉션을 사용 하 여 이벤트를 검색 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of the field to get.</source>
          <target state="translated">가져올 필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns the field specified by the given name.</source>
          <target state="translated">지정된 이름에 지정된 필드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</source>
          <target state="translated">지정된 이름 또는 비공용 한정자의 형식으로 선언되거나 상속된 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>If there are no matches, then null is returned.</source>
          <target state="translated">일치하는 항목이 없으면 null이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 필드를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as InvokeMethod, NonPublic, and so on.</source>
          <target state="translated">이것은 InvokeMethod, NonPublic 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public fields that are declared by this type.</source>
          <target state="translated">이 형식으로 선언되는 public 필드 및 public이 아닌 필드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects representing the public and non-public fields declared or inherited by this type.</source>
          <target state="translated">이 형식으로 선언되거나 상속된 공용 및 비공용 필드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no fields, as specified.</source>
          <target state="translated">필드가 없으면 지정된 대로 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 필드를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.EnumBuilder.GetFields%2A&gt;</ph> 메서드 반환 하지 않습니다 필드는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">이 순서는 달라질 수 있으므로 코드 필드가 반환 되는 순서에 종속 되지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>The name of the interface.</source>
          <target state="translated">인터페이스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the search is case-insensitive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>인 경우 검색은 대/소문자를 구분하지 않습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the search is case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 검색은 대/소문자를 구분합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</source>
          <target state="translated">지정된 정규화된 이름을 사용하여 이 형식에 의해 (직접 또는 간접적으로) 구현된 인터페이스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the implemented interface.</source>
          <target state="translated">구현된 인터페이스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>Returns null if no interface matching name is found.</source>
          <target state="translated">이름이 일치하는 인터페이스를 찾을 수 없으면 null을 반환합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 인터페이스를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The type of the interface for which the interface mapping is to be retrieved.</source>
          <target state="translated">인터페이스 매핑을 검색할 인터페이스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>Returns an interface mapping for the interface requested.</source>
          <target state="translated">요청된 인터페이스에 대한 인터페이스 매핑을 반환합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The requested interface mapping.</source>
          <target state="translated">요청된 인터페이스 매핑입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 인터페이스 매핑을 종류를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
          <source>The type does not implement the interface.</source>
          <target state="translated">형식이 인터페이스를 구현하지 않습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>Returns an array of all the interfaces implemented on this a class and its base classes.</source>
          <target state="translated">이 클래스와 해당 기본 클래스에 대해 구현된 모든 인터페이스 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects representing the implemented interfaces.</source>
          <target state="translated">구현된 인터페이스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">정의된 것이 없으면 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
          <source>As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 인터페이스를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name of the member.</source>
          <target state="translated">멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The type of member that is to be returned.</source>
          <target state="translated">반환되어야 할 멤버 형식입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</source>
          <target state="translated">이 형식에 의해 선언되거나 상속된 지정된 이름, 형식 및 바인딩과 함께 모든 멤버를 반환합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects representing the public and non-public members defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public members are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph>을 사용한 경우 이 형식에 정의된 공용 및 비공용 멤버를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 개체의 배열을 반환합니다. 그렇지 않으면 공개 멤버만 반환됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the member of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 멤버를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns the specified members declared or inherited by this type,.</source>
          <target state="translated">이 형식에 의해 선언되거나 상속되는 지정된 멤버를 반환합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects representing the public and non-public members declared or inherited by this type.</source>
          <target state="translated">이 형식으로 선언되거나 상속된 공용 및 비공용 멤버를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 개체의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no matching members.</source>
          <target state="translated">일치하는 멤버가 없으면 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the members of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 멤버를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns all the public and non-public methods declared or inherited by this type, as specified.</source>
          <target state="translated">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects representing the public and non-public methods defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public methods are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph>을 사용한 경우 이 형식에 정의된 공용 및 비공용 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체의 배열을 반환합니다. 그렇지 않으면 공개 메서드만 반환됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the methods of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 메서드를 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of the nested type to get.</source>
          <target state="translated">가져올 중첩 형식의 이름이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask comprised of one or more <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> that specify how the search is conducted.</source>
          <target state="translated">검색 방법을 지정하는 하나 이상의 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>로 구성된 비트 마스크입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Zero, to conduct a case-sensitive search for public methods.</source>
          <target state="translated">public 메서드에 대해 대소문자 구분 검색을 수행하는 경우 0입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Returns the specified nested type that is declared by this type.</source>
          <target state="translated">이 형식에 의해 선언된 지정된 중첩 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the nested type that matches the specified requirements, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 요구 사항과 일치하는 중첩 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체가 있으면 이 개체를 반환하고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the nested type of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 중첩된 형식을 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>, such as <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Returns the public and non-public nested types that are declared or inherited by this type.</source>
          <target state="translated">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 중첩된 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects representing all the types nested within the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that match the specified binding constraints.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 내의 중첩 형식 중 지정된 바인딩 제약 조건과 일치하는 모든 중첩 형식을 나타내는 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An empty array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, if no types are nested within the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, or if none of the nested types match the binding constraints.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 내에 중첩 형식이 없거나 중첩 형식 중 해당 바인딩 제약 조건과 일치하는 중첩 형식이 없을 경우 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 형식의 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the nested types of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 중첩된 형식은 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This invocation attribute.</source>
          <target state="translated">이 호출의 특성입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">이것은 <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 등과 같은 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns all the public and non-public properties declared or inherited by this type, as specified.</source>
          <target state="translated">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 non-public 속성을 모두 반환합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects representing the public and non-public properties defined on this type if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is used; otherwise, only the public properties are returned.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph>을 사용한 경우 이 형식에 정의된 공용 및 비공용 속성을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 개체의 배열을 반환합니다. 그렇지 않으면 공개 속성만 반환됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>As a workaround, to retrieve the properties of a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">이 문제를 해결 완료 된 형식의 속성을 검색 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>Returns the GUID of this enum.</source>
          <target state="translated">이 열거형의 GUID를 반환합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>The GUID of this enum.</source>
          <target state="translated">이 열거형의 GUID입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`GUID`</ph> property to reference the associated <ph id="ph2">&lt;xref:System.Guid&gt;</ph> of the current <ph id="ph3">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`GUID`</ph> 참조할 연결 된 속성 <ph id="ph2">&lt;xref:System.Guid&gt;</ph> 현재 <ph id="ph3">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.GUID">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The name of the member to invoke.</source>
          <target state="translated">호출할 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This can be a constructor, method, property, or field.</source>
          <target state="translated">이 항목은 생성자, 메서드, 속성 또는 필드일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">적합한 호출 특성을 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</source>
          <target state="translated">빈 문자열을 멤버의 이름으로 전달하여 클래스의 기본 멤버를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The invocation attribute.</source>
          <target state="translated">호출 특성입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph>.</source>
          <target state="translated">이것은 <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph>의 비트 플래그여야 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 개체의 검색을 가능하게 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If binder is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">바인더가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 기본 바인더가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">지정한 멤버를 호출할 개체입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the member is static, this parameter is ignored.</source>
          <target state="translated">멤버가 정적이면 이 매개 변수가 무시됩니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An argument list.</source>
          <target state="translated">인수 목록입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">이 항목은 호출해야 할 멤버의 매개 변수 개수, 순서 및 형식을 포함하는 개체 배열입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If there are no parameters this should be null.</source>
          <target state="translated">매개 변수가 없으면 이 값이 null이어야 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of the same length as <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">호출할 멤버의 인수와 연결된 특성을 나타내는 요소를 가진 <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>와 길이가 동일한 배열입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A parameter has attributes associated with it in the metadata.</source>
          <target state="translated">메타데이터에 있는 매개 변수에 특성이 연결되어 있습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>They are used by various interoperability services.</source>
          <target state="translated">이러한 항목은 다양한 상호 운용성 서비스에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See the metadata specs for details such as this.</source>
          <target state="translated">이와 같은 사항에 대한 자세한 내용은 메타데이터 사양을 참조하세요.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An instance of <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">형식의 강제 변환을 제어하는 데 사용되는 <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph>의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If this is null, the <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">이 인스턴스가 null이면 현재 스레드의 <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph>가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>(Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)</source>
          <target state="translated">예를 들어 1,000은 각 문화권마다 다르게 표현되므로 1,000을 나타내는 문자열을 배정도 값으로 변환하려면 이 매개 변수가 필요합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Each parameter in the <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept> array gets the value in the corresponding element in the <bpt id="p2">&lt;c&gt;</bpt>args<ept id="p2">&lt;/c&gt;</ept> array.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept> 배열의 각 매개 변수는 <bpt id="p2">&lt;c&gt;</bpt>args<ept id="p2">&lt;/c&gt;</ept> 배열의 해당 요소에 있는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the length of <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> is greater than the length of <bpt id="p2">&lt;c&gt;</bpt>namedParameters<ept id="p2">&lt;/c&gt;</ept>, the remaining argument values are passed in order.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>의 길이가 <bpt id="p2">&lt;c&gt;</bpt>namedParameters<ept id="p2">&lt;/c&gt;</ept>의 길이보다 크면 남은 인수 값이 순서대로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invokes the specified member.</source>
          <target state="translated">지정된 멤버를 호출합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</source>
          <target state="translated">호출해야 할 메서드에 액세스할 수 있어야 하며 이 메서드가 지정된 바인더 및 호출 특성의 제약 조건 하에서 지정된 인수 목록과 가장 구체적으로 일치하는 항목을 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Returns the return value of the invoked member.</source>
          <target state="translated">호출된 멤버의 반환 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>You can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">사용 하 여 형식을 검색할 수 있습니다 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The object to test.</source>
          <target state="translated">테스트할 개체입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Gets a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> object can be assigned to this object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> 개체를 이 개체에 할당할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="typeInfo" /&gt;</ph> can be assigned to this object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="typeInfo" /&gt;</ph>를 이 개체에 할당할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 할당할 수 없으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 개체가 생성된 제네릭 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">사용자 지정 특성이 적용되는 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Checks if the specified custom attribute type is defined.</source>
          <target state="translated">지정된 사용자 지정 특성 유형이 정의되었는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instance of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined on this member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 인스턴스가 하나 이상 정의되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> and call <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">이 문제를 해결 완료 형식에 대 한 사용자 지정 특성은 정의 확인 하려면 검색을 사용 하 여 형식을 <ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> 반환 된 <ph id="ph3">&lt;xref:System.Type&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not currently supported in types that are not complete.</source>
          <target state="translated">이 메서드는 완전하지 않은 형식에서 현재 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing an array of the current type.</source>
          <target state="translated">현재 형식의 배열을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.</source>
          <target state="translated">하한이 0인 현재 형식의 1차원 배열을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.</source>
          <target state="translated">하한이 0인 현재 형식의 1차원 배열을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>The number of dimensions for the array.</source>
          <target state="translated">배열의 차수입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>This number must be less than or equal to 32.</source>
          <target state="translated">이 수는 32보다 작거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing an array of the current type, with the specified number of dimensions.</source>
          <target state="translated">지정된 차수의 현재 형식 배열을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source>An object representing an array of the current type, with the specified number of dimensions.</source>
          <target state="translated">지정된 차수의 현재 형식 배열을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rank" /&gt;</ph>가 1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current type when passed as a <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> parameter (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> parameter in Visual Basic).</source>
          <target state="translated"><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> 매개 변수(Visual Basic의 경우 <bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> 매개 변수)로 전달될 때 현재 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current type when passed as a <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> parameter (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> parameter in Visual Basic).</source>
          <target state="translated"><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> 매개 변수(Visual Basic의 경우 <bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> 매개 변수)로 전달될 때 현재 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current type.</source>
          <target state="translated">현재 형식에 대한 포인터를 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current type.</source>
          <target state="translated">현재 형식에 대한 포인터를 나타내는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>Retrieves the dynamic module that contains this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> definition.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> 정의를 포함하는 동적 모듈을 검색합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>The dynamic module that contains this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> definition.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> 정의를 포함하는 동적 모듈입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Module">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Module`</ph> property to reference the parent module of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`Module`</ph> 현재의 부모 모듈 참조할 속성 <ph id="ph2">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>Returns the name of this enum.</source>
          <target state="translated">이 열거형의 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>The name of this enum.</source>
          <target state="translated">이 열거형의 이름입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Name">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Name`</ph> property to reference the name of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`Name`</ph> 현재의 이름을 참조 하는 속성 <ph id="ph2">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>Returns the namespace of this enum.</source>
          <target state="translated">이 열거형의 네임스페이스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>The namespace of this enum.</source>
          <target state="translated">이 열거형의 네임스페이스입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.Namespace">
          <source>The following code sample demonstrates the use of the <ph id="ph1">`Namespace`</ph> property to reference the associated namespace of the current <ph id="ph2">`EnumBuilder`</ph>.</source>
          <target state="translated">다음 코드 샘플의 사용법을 보여줍니다는 <ph id="ph1">`Namespace`</ph> 현재 연결된 된 네임 스페이스를 참조 하도록 <ph id="ph2">`EnumBuilder`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>Returns the type that was used to obtain this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>를 얻는 데 사용된 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
          <source>The type that was used to obtain this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>를 얻는 데 사용된 형식입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.EnumBuilder">
          <source>Sets custom attributes for this constructor.</source>
          <target state="translated">이 생성자에 대한 사용자 지정 특성을 설정합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to define the custom attribute.</source>
          <target state="translated">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Sets a custom attribute using a custom attribute builder.</source>
          <target state="translated">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>, passing a <ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>.</source>
          <target state="translated">다음 코드 샘플에서는 <ph id="ph1">`SetCustomAttribute`</ph> 의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>전달 하는 <ph id="ph3">&lt;xref:System.Reflection.Emit.CustomAttributeBuilder&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">사용자 지정 특성에 대한 생성자입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">특성을 나타내는 바이트 blob입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Sets a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">서식을 지정 하는 방법에 대 한 자세한 내용은 ECMA Partition II 설명서에서 메타 데이터 사양을 참조 <ph id="ph1">`binaryAttribute`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인으로 제공됩니다. MSDN의 <bpt id="p1">[</bpt>ECMA C# 및 공용 언어 인프라 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> 및 Ecma International 웹 사이트의 <bpt id="p2">[</bpt>표준 ECMA-335 - CLI(공용 언어 인프라)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The following code sample illustrates the use of <ph id="ph1">`SetCustomAttribute`</ph> in the context of <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>, passing a byte blob.</source>
          <target state="translated">다음 코드 샘플에서는 <ph id="ph1">`SetCustomAttribute`</ph> 의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>, 바이트 blob을 전달 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">매핑할 전달된 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">매핑할 이름의 수입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">이름을 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">이 메서드는 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">반환할 형식 정보입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">형식 정보의 로캘 식별자입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">요청된 형식 정보 개체에 대한 포인터를 받습니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">이 메서드는 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">이 메서드는 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">멤버를 식별합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">인수를 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">호출의 컨텍스트를 설명하는 플래그입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">결과를 저장할 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">예외 정보가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">오류가 있는 첫 번째 인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::Invoke`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">이 메서드는 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Retrieves the internal handle for this enum.</source>
          <target state="translated">이 열거형에 대한 내부 핸들을 검색합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>The internal handle for this enum.</source>
          <target state="translated">이 열거형에 대한 내부 핸들입니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>You can retrieve the type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> and use reflection on the retrieved type.</source>
          <target state="translated">사용 하 여 형식을 검색할 수 있습니다 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> 된 형식에 대해 리플렉션을 사용 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">이 핸들을 사용하여 내부 메타데이터 핸들에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
          <source>This property is not currently supported.</source>
          <target state="translated">현재 이 속성이 지원되지 않는 경우</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>Returns the internal metadata type token of this enum.</source>
          <target state="translated">이 열거형의 내부 메타데이터 형식 토큰을 반환합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.TypeToken">
          <source>The type token of this enum.</source>
          <target state="translated">이 열거형의 형식 토큰입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>Returns the underlying field for this enum.</source>
          <target state="translated">이 열거형에 대한 내부 필드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
          <source>The underlying field for this enum.</source>
          <target state="translated">이 열거형에 대한 내부 필드입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Returns the underlying system type for this enum.</source>
          <target state="translated">이 열거형에 대한 내부 시스템 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Read-only.</source>
          <target state="translated">읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
          <source>Returns the underlying system type.</source>
          <target state="translated">내부 시스템 형식을 반환합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>