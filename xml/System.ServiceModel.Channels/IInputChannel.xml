<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInputChannel.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c1491efafc1411697f4583e7dbfb438a0f2d5afc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1491efafc1411697f4583e7dbfb438a0f2d5afc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Defines the interface that a channel must implement to receive a message.</source>
          <target state="translated">메시지를 수신하기 위해 채널이 구현해야 할 인터페이스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> 계약에는 메시지 수신, 수신 시도 및 수신 대기 기능의 동기 및 비동기 variant가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The pull model is used typically with an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> to receive messages: you call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> (to "pull" a message out of the channel) and then wait for a message to arrive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>과 함께 끌어오기 모델을 사용하여 메시지를 수신합니다. <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 호출하여 채널로부터 메시지를 "끌어온" 후 메시지가 도착할 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An alternative usage pattern is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>, and then call <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29&gt;</ph>.</source>
          <target state="translated">대체 사용 패턴은 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>를 호출한 후 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29&gt;</ph>를 호출하는 것입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>This approach is common for transactional usages where you start the transaction between the calls to <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
          <target state="translated">이 방법은 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 호출 사이에 트랜잭션을 시작하는 트랜잭션에 일반적으로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> is not necessarily bound to a single sender.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>이 반드시 단일 발신자에 바인딩될 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Other channels and channel interfaces can provide a correlation between particular senders and an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, but the base contract makes no such restriction.</source>
          <target state="translated">다른 채널과 채널 인터페이스도 특정 발신자와 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> 간의 상관 관계를 제공할 수 있지만 기본 계약에는 이와 같은 제한이 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An implementation can create a new <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for each message or reuse the same <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for multiple messages and senders.</source>
          <target state="translated">각 메시지에 새 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>을 만들거나 여러 메시지와 발신자에 대해 동일한 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>을 다시 사용할 수 있도록 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Begins an asynchronous receive operation.</source>
          <target state="translated">비동기 수신 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">비동기 작업 완료에 대한 알림을 수신하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">응용 프로그램에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a state object associated with it.</source>
          <target state="translated">연결된 상태 개체가 있는 메시지를 수신하기 위해 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous message reception.</source>
          <target state="translated">비동기 메시지 수신을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The operation is not complete until a message becomes available in the channel.</source>
          <target state="translated">채널에서 메시지를 사용할 수 있을 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">비동기 작업 완료에 대한 알림을 수신하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">응용 프로그램에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
          <target state="translated">지정된 시간 제한이 있는 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive operation.</source>
          <target state="translated">비동기 수신 작업을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation throws a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded before it completes.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 초과되면 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">비동기 작업 완료에 대한 알림을 수신하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">응용 프로그램에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
          <target state="translated">지정된 시간 제한이 있는 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive operation.</source>
          <target state="translated">비동기 수신 작업을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method when you want the application processing to continue without waiting.</source>
          <target state="translated">대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</source>
          <target state="translated">요청 메시지에 응답하는 동안 또는 시간 제한 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the timeout occurs.</source>
          <target state="translated">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>을 다시 throw하거나 래핑하지 않고 시간 제한을 처리하려면 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 대신 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>, otherwise you lose error information.</source>
          <target state="translated">시간 제한을 특별히 처리하지 않으려면 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>만 호출합니다. 그렇지 않으면 오류 정보가 손실됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> from <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /&gt;</ph> if the specified <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과된 경우 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /&gt;</ph> 작업에서 <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">비동기 작업 완료에 대한 알림을 수신하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">응용 프로그램에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</source>
          <target state="translated">지정된 시간 제한 및 연결된 상태 개체가 있는 비동기 메시지 도착 대기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous operation to wait for a message to arrive.</source>
          <target state="translated">요청 메시지의 도착을 대기하기 위해 비동기 작업을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method if you need the application processing to continue without waiting for the message to arrive.</source>
          <target state="translated">메시지가 도착할 때까지 대기하지 않고 응용 프로그램 처리를 계속해야 하는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">`timeout`</ph>까지 스레드가 차단됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded, not a timeout exception.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과되었고 시간 제한 예외가 아닌 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드 중 하나를 호출하면 반환되는 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>Completes an asynchronous operation to receive a message.</source>
          <target state="translated">메시지를 수신하기 위한 비동기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드를 호출하여 반환된 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>Completes the specified asynchronous operation to receive a message.</source>
          <target state="translated">메시지를 수신하기 위해 지정된 비동기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 메시지가 수신되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that identifies the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> operation to finish, and from which to retrieve an end result.</source>
          <target state="translated">완료한 후 최종 결과를 검색할 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 작업을 식별하는 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>Completes the specified asynchronous wait-for-a-message operation.</source>
          <target state="translated">지정된 비동기 메시지 대기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message has arrived before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이 초과되기 전에 메시지가 도착하면 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>Gets the address on which the input channel receives messages.</source>
          <target state="translated">입력 채널이 메시지를 수신하는 주소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph> on which the input channel receives messages.</source>
          <target state="translated">입력 채널이 메시지를 수신하는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 입력 채널에 독립형 주소가 없으면(예: 클라이언트에서 시작된 TCP 채널의 입력측인 경우) 이 속성은 <ph id="ph1">`null`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>This property can be used by higher-level channels for correlation purposes.</source>
          <target state="translated">이 속성은 상관 관계를 위해 상위 수준 채널에서 사용될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>For example, if a higher-level channel implements request-reply on top of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>, it can use the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A&gt;</ph> property in the WS-Addressing ReplyTo header.</source>
          <target state="translated">예를 들어 상위 수준 채널이 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>의 맨 위에서 요청-회신을 구현하면 WS-Addressing ReplyTo 헤더에서 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A&gt;</ph> 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>The following code illustrates how to implement this property:</source>
          <target state="translated">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The operation did not complete with the timeout interval.</source>
          <target state="translated">작업이 시간 제한 간격으로 완료되지 않은 경우</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel failed.</source>
          <target state="translated">입력 채널이 실패한 경우</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel has been aborted.</source>
          <target state="translated">입력 채널이 중단된 경우</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel faulted.</source>
          <target state="translated">입력 채널에 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</source>
          <target state="translated">명시적 또는 암시적으로 정의된 시간 간격에 메시지가 사용 가능한 경우 입력 채널에서 수신된 메시지를 반환합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you need the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속해야 하는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Returns the message received, if one is available.</source>
          <target state="translated">메시지가 사용 가능한 경우 수신된 메시지를 반환합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>If a message is not available, blocks for a default interval of time.</source>
          <target state="translated">메시지를 사용할 수 없는 경우 기본 시간 간격 동안 차단합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 여러 번 또는 동시에 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
          <target state="translated">수신된 각 메시지에 대해 하나의 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 호출만 완료할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive operation has to complete before timing out and throwing a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph>.</source>
          <target state="translated">시간 제한이 초과되어 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>이 throw되기 전에 수신 작업이 완료되어야 하는 기간을 지정하는 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Returns the message received, if one is available.</source>
          <target state="translated">메시지가 사용 가능한 경우 수신된 메시지를 반환합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>If a message is not available, blocks for a specified interval of time.</source>
          <target state="translated">메시지를 사용할 수 없는 경우 지정된 시간 간격 동안 차단합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">요청 메시지를 수신하거나 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph2">`timeout`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">요청 수신을 대기하지 않고 응용 프로그램 처리를 계속하려는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 여러 번 또는 동시에 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
          <target state="translated">수신된 각 메시지에 대해 하나의 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 호출만 완료할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드 중 하나를 호출하면 반환되는 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>Tries to receive a message within a specified interval of time.</source>
          <target state="translated">지정된 시간 간격 내에 메시지를 수신하려고 시도합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message is received before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>이 초과되기 전에 메시지를 수신하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>을 다시 throw하거나 래핑하지 않고 시간 제한을 처리하려면 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> 대신 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>, otherwise you will lose error information.</source>
          <target state="translated">시간 제한을 특별히 처리하지 않으려면 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>만 호출합니다. 그렇지 않으면 오류 정보가 손실됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> specifies the maximum interval of time to wait for a message to arrive before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>은 시간 제한 전에 메시지 도착을 대기하는 최대 시간 간격을 지정합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Returns a value that indicates whether a message has arrived within a specified interval of time.</source>
          <target state="translated">지정된 시간 간격 내에 메시지가 도착했는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message has arrived before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이 초과되기 전에 메시지가 도착하면 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> does not result in a message being received or processed in any other way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph>를 호출하면 다른 어떤 방법으로든 요청 메시지가 수신되거나 처리되지 않습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> 메서드는 주로 사용자가 트랜잭션을 사용하여 메시지를 수신하려는 트랜잭션 처리 시나리오에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>When using just <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> normally for this, the user must create the transaction and then call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and hope the message arrives before the transaction times out, which may not be possible.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> 메서드를 일반적으로 사용하면, 사용자는 트랜잭션을 만들고 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 호출한 후 트랜잭션 시간 제한 전에 메시지가 도착하기를 기대해야 하는데 이것이 항상 가능하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Instead, the user can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and be confident that they can get the message back before the transaction expires.</source>
          <target state="translated">대신 사용자는 원하는 시간 제한(무한도 가능)을 사용하여 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph>를 호출할 수 있습니다. 그러면 메시지가 도착할 때 트랜잭션을 열고 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>를 호출한 후 트랜잭션이 만료되기 전에 메시지를 확실히 돌려받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</source>
          <target state="translated">이 메서드는 동기적이므로 메시지를 사용할 수 있거나 시간 제한이 발생할 때까지 현재 스레드를 차단합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단하는 것이 허용되는 경우에만 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">`timeout`</ph>까지 스레드가 차단됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">대기하지 않고 응용 프로그램 처리를 계속하려면 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph>이 초과된 경우</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">지정된 시간 제한이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded, not a timeout exception.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과되었고 시간 제한 예외가 아닌 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>