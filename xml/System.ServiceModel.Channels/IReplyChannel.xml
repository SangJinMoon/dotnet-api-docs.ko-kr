<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ba8f7-101">메시징 끝점 간 요청-회신 통신의 수신측에 있도록 하기 위해 채널이 구현해야 할 인터페이스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-102"><xref:System.ServiceModel.Channels.IReplyChannel> 인터페이스에는 수신된 요청에 대한 응답을 생성하는 데 사용할 수 있는 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>를 반환하는 <xref:System.ServiceModel.Channels.RequestContext> 메서드의 동기 및 비동기 variant가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="ba8f7-103">계약에는 메시지 수신, 수신 시도, 수신 대기 기능의 동기 및 비동기 variant가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="ba8f7-104"><xref:System.ServiceModel.Channels.IReplyChannel>이 반드시 단일 발신자에 바인딩될 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="ba8f7-105">다른 채널과 채널 인터페이스는 발신자와 응답 채널 간의 상관 관계를 제공하지만 기본 계약에는 이와 같은 제한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="ba8f7-106"><xref:System.ServiceModel.Channels.IReplyChannel>과 함께 끌어오기 모델을 사용하여 메시지를 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="ba8f7-107">이 모델은 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 또는 해당 variant 중 하나를 호출한 후 메시지 도착을 대기하는 작업으로 구성됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ba8f7-108">사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-108">Begins an asynchronous operation to receive an available request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="ba8f7-109">비동기 요청 수신 작업 완료에 대한 알림을 받는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="ba8f7-110">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="ba8f7-111">기본 시간 제한으로 사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-111">Begins an asynchronous operation to receive an available request with a default timeout.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-112">비동기 요청 수신을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-113"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> 메서드를 호출 하기 위한 표준 패턴을 구현 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> 비동기적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="ba8f7-114">기본 시간 제한은 1분입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="ba8f7-115">연결을 구성하는 데 사용되는 바인딩에 수신 시간 제한이 설정되면 이 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="ba8f7-116">이 다른 값을 재정의하는 호출을 사용하여 명시적 시간 제한을 지정하려는 경우 <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="ba8f7-117">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ba8f7-118">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ba8f7-119">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-120">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-121">사용 가능한 요청의 수신을 대기할 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="ba8f7-122">비동기 요청 수신 작업 완료에 대한 알림을 받는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="ba8f7-123">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="ba8f7-124">지정된 시간 제한으로 사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-125">비동기 요청 수신을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-126"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 호출 하기 위한 표준 패턴을 구현 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> 비동기적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="ba8f7-127">이 메서드에 설정된 시간 제한은 연결을 구성하는 데 사용되는 바인딩에 설정된 수신 시간 제한을 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="ba8f7-128">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ba8f7-129">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ba8f7-130">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-131">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-132">제한 시간이 초과되어 <see cref="T:System.TimeSpan" />가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="ba8f7-133">비동기 요청 수신 작업 완료에 대한 알림을 받는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="ba8f7-134">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="ba8f7-135">지정된 시간 제한이 있는 요청 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-136">비동기 요청 수신 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-137">대기하지 않고 응용 프로그램 처리를 계속해야 하는 경우 비동기 <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="ba8f7-138">요청 메시지에 응답하는 동안 또는 시간 제한 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> 메서드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="ba8f7-139">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="ba8f7-140">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-141">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="ba8f7-142">지정된 <see langword="false" />이 초과된 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-143">사용 가능한 요청의 수신을 대기할 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="ba8f7-144">비동기 요청 수신 작업 완료에 대한 알림을 받는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="ba8f7-145">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="ba8f7-146">지정된 시간 제한 및 연결된 상태 개체가 있는 비동기 요청 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-147">요청 메시지의 도착을 대기하기 위해 비동기 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-148">요청 메시지가 큐에 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 동기 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="ba8f7-149">지정된 `timeout`까지 스레드가 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="ba8f7-150">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="ba8f7-151">채널에서 요청 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-152">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="ba8f7-153">지정된 <see langword="false" />이 초과된 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ba8f7-154"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="ba8f7-155">사용 가능한 요청을 수신하기 위한 비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-155">Completes an asynchronous operation to receive an available request.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-156">요청에 대한 응답을 생성하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.RequestContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-157">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ba8f7-158">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ba8f7-159">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-160">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="ba8f7-161">작업을 완료하기 전에 지정된 <see cref="T:System.TimeoutException" />이 초과된 경우 작업에서 <paramref name="timeout" />을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ba8f7-162"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="context"><span data-ttu-id="ba8f7-163">수신된 <see cref="T:System.ServiceModel.Channels.RequestContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="ba8f7-164">지정된 비동기 요청 메시지 수신 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-164">Completes the specified asynchronous operation to receive a request message.</span></span></summary>
        <returns>
          <span data-ttu-id="ba8f7-165">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-165"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ba8f7-166">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ba8f7-167">완료한 후 최종 결과를 검색할 <see cref="T:System.IAsyncResult" /> 작업을 식별하는 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="ba8f7-168">지정된 비동기 요청 메시지 대기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-168">Completes the specified asynchronous wait-for-a-request message operation.</span></span></summary>
        <returns>
          <span data-ttu-id="ba8f7-169">지정된 시간 간격이 경과되기 전에 요청이 수신되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-169"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ba8f7-170">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba8f7-171">이 응답 채널이 메시지를 수신하는 주소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-171">Gets the address on which this reply channel receives messages.</span></span></summary>
        <value><span data-ttu-id="ba8f7-172">이 응답 채널이 메시지를 수신하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ba8f7-173">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ba8f7-174">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-174">Returns the context of the request received, if one is available</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba8f7-175">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-175">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="ba8f7-176">컨텍스트를 사용할 수 없는 경우 사용 가능할 때까지 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-176">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-177">응답을 생성하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.RequestContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-178"><xref:System.ServiceModel.Channels.RequestContext>는 요청 메시지와 이 메시지에 응답하기 위한 메커니즘을 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="ba8f7-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>를 여러 번 또는 동시에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="ba8f7-180">수신된 요청별로 하나의 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 호출만 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="ba8f7-181">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ba8f7-182">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ba8f7-183">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-184">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-185">제한 시간이 초과되어 <see cref="T:System.TimeSpan" />가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ba8f7-186">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-186">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="ba8f7-187">컨텍스트를 사용할 수 없는 경우 사용 가능할 때까지 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-187">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="ba8f7-188">응답을 생성하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.RequestContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-189"><xref:System.ServiceModel.Channels.RequestContext>는 요청 메시지와 이 메시지에 응답하기 위한 메커니즘을 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="ba8f7-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>를 여러 번 또는 동시에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="ba8f7-191">수신된 요청별로 하나의 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 호출만 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="ba8f7-192">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ba8f7-193">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ba8f7-194">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-195">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-196">제한 시간이 초과되어 <see cref="T:System.TimeSpan" />가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="context"><span data-ttu-id="ba8f7-197">수신된 <see cref="T:System.ServiceModel.Channels.RequestContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="ba8f7-198">지정된 시간 간격이 경과되기 전에 요청이 수신되는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span></span></summary>
        <returns>
          <span data-ttu-id="ba8f7-199">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-199"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-200">요청 메시지가 큐에 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="ba8f7-201">지정된 `timeout`까지 스레드가 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="ba8f7-202">대기하지 않고 응용 프로그램 처리를 계속하려면 비동기 <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-203">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="ba8f7-204">지정된 <see langword="false" />이 초과된 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ba8f7-205">제한 시간이 초과되어 <see cref="T:System.TimeSpan" />가 반환되기 전에 요청 작업이 완료되어야 하는 기간을 지정하는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ba8f7-206">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span></span></summary>
        <returns>
          <span data-ttu-id="ba8f7-207">지정된 시간 간격이 경과되기 전에 요청이 수신되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-207"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba8f7-208"><xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>를 호출하면 어떤 방법으로든 요청 메시지가 수신되거나 처리되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="ba8f7-209"><xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드는 주로 사용자가 트랜잭션을 사용하여 메시지를 수신하려는 트랜잭션 처리 시나리오에서 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="ba8f7-210">이 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 메서드를 일반적으로 사용하면, 사용자는 트랜잭션을 만들고 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>를 호출한 후 트랜잭션 시간 제한 전에 메시지가 도착하기를 기대해야 하는데 이것이 항상 가능하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="ba8f7-211">대신 사용자는 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>를 호출하고 시간 제한을 지정(무한도 가능)할 수 있습니다. 그러면 메시지가 도착할 때 트랜잭션을 열고 <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>를 호출한 후 트랜잭션이 만료되기 전에 메시지를 확실히 돌려받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="ba8f7-212">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단하는 것이 허용되는 경우에만 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="ba8f7-213">지정된 `timeout`까지 스레드가 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="ba8f7-214">대기하지 않고 응용 프로그램 처리를 계속하려면 비동기 <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba8f7-215">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="ba8f7-216">지정된 <see langword="false" />이 초과된 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="ba8f7-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>