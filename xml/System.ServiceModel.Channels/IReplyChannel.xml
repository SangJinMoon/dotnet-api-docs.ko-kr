<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IReplyChannel.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac559a62b5af42b1a06346ccd412414096f0908aa4f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59a62b5af42b1a06346ccd412414096f0908aa4f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</source>
          <target state="translated">메시징 끝점 간 요청-회신 통신의 수신측에 있도록 하기 위해 채널이 구현해야 할 인터페이스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> interface includes synchronous and asynchronous variants of a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> method return an <ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> that can be used to construct replies to received requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> 인터페이스에는 수신된 요청에 대한 응답을 생성하는 데 사용할 수 있는 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>를 반환하는 <ph id="ph3">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> 메서드의 동기 및 비동기 variant가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</source>
          <target state="translated">계약에는 메시지 수신, 수신 시도, 수신 대기 기능의 동기 및 비동기 variant가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> is not necessarily bound to a single sender.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>이 반드시 단일 발신자에 바인딩될 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</source>
          <target state="translated">다른 채널과 채널 인터페이스는 발신자와 응답 채널 간의 상관 관계를 제공하지만 기본 계약에는 이와 같은 제한이 없습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>The pull model is used with an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> to receive messages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>과 함께 끌어오기 모델을 사용하여 메시지를 수신합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>This model consists of calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> (or one of its variants) and then waiting for a message to arrive.</source>
          <target state="translated">이 모델은 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 또는 해당 variant 중 하나를 호출한 후 메시지 도착을 대기하는 작업으로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Begins an asynchronous operation to receive an available request.</source>
          <target state="translated">사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated">비동기 요청 수신 작업 완료에 대한 알림을 받는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive an available request with a default timeout.</source>
          <target state="translated">기본 시간 제한으로 사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous reception of the request.</source>
          <target state="translated">비동기 요청 수신을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29&gt;</ph> method implements the standard pattern for invoking <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest&gt;</ph> asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 호출 하기 위한 표준 패턴을 구현 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest&gt;</ph> 비동기적으로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The default timeout is 1 minute.</source>
          <target state="translated">기본 시간 제한은 1분입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>If a receive timeout is set on the binding used to configure the connection, then that value is used.</source>
          <target state="translated">연결을 구성하는 데 사용되는 바인딩에 수신 시간 제한이 설정되면 이 값이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> if you want to specify an explicit timeout with the call that overrides these other values.</source>
          <target state="translated">이 다른 값을 재정의하는 호출을 사용하여 명시적 시간 제한을 지정하려는 경우 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">최대 메시지 크기는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 속성에서 설정됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">기본값은 65536 바이트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for the reception of an available request.</source>
          <target state="translated">사용 가능한 요청의 수신을 대기할 시간 간격을 지정하는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated">비동기 요청 수신 작업 완료에 대한 알림을 받는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive an available request with a specified timeout.</source>
          <target state="translated">지정된 시간 제한으로 사용 가능한 요청을 수신하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous reception of the request.</source>
          <target state="translated">비동기 요청 수신을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method implements the standard pattern for invoking <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29&gt;</ph> asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 호출 하기 위한 표준 패턴을 구현 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29&gt;</ph> 비동기적으로 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</source>
          <target state="translated">이 메서드에 설정된 시간 제한은 연결을 구성하는 데 사용되는 바인딩에 설정된 수신 시간 제한을 재정의합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">최대 메시지 크기는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 속성에서 설정됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">기본값은 65536 바이트입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제한 시간이 초과되어 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated">비동기 요청 수신 작업 완료에 대한 알림을 받는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</source>
          <target state="translated">지정된 시간 제한이 있는 요청 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive request operation.</source>
          <target state="translated">비동기 요청 수신 작업을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method when you need the application processing to continue without waiting.</source>
          <target state="translated">대기하지 않고 응용 프로그램 처리를 계속해야 하는 경우 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use one of the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</source>
          <target state="translated">요청 메시지에 응답하는 동안 또는 시간 제한 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> 메서드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과된 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for the reception of an available request.</source>
          <target state="translated">사용 가능한 요청의 수신을 대기할 시간 간격을 지정하는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous receive that a request operation completes.</source>
          <target state="translated">비동기 요청 수신 작업 완료에 대한 알림을 받는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</source>
          <target state="translated">응용 프로그램에 의해 지정되는 개체로, 비동기 요청 수신 작업과 연결된 상태 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous request operation that has a specified time out and state object associated with it.</source>
          <target state="translated">지정된 시간 제한 및 연결된 상태 개체가 있는 비동기 요청 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous operation to wait for a request message to arrive.</source>
          <target state="translated">요청 메시지의 도착을 대기하기 위해 비동기 작업을 참조하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</source>
          <target state="translated">요청 메시지가 큐에 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">`timeout`</ph>까지 스레드가 차단됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a request message becomes available in the channel or the time out occurs.</source>
          <target state="translated">채널에서 요청 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과된 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드를 호출하여 반환된 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>Completes an asynchronous operation to receive an available request.</source>
          <target state="translated">사용 가능한 요청을 수신하기 위한 비동기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct a reply to the request.</source>
          <target state="translated">요청에 대한 응답을 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">최대 메시지 크기는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 속성에서 설정됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">기본값은 65536 바이트입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
          <source>The operation should throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">작업을 완료하기 전에 지정된 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 초과된 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>을 throw해야 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드를 호출하여 반환된 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>Completes the specified asynchronous operation to receive a request message.</source>
          <target state="translated">지정된 비동기 요청 메시지 수신 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that identifies the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> operation to finish, and from which to retrieve an end result.</source>
          <target state="translated">완료한 후 최종 결과를 검색할 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 작업을 식별하는 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>Completes the specified asynchronous wait-for-a-request message operation.</source>
          <target state="translated">지정된 비동기 요청 메시지 대기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청이 수신되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>Gets the address on which this reply channel receives messages.</source>
          <target state="translated">이 응답 채널이 메시지를 수신하는 주소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph> on which this reply channel receives messages.</source>
          <target state="translated">이 응답 채널이 메시지를 수신하는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
          <source>The following code illustrates how to implement this property:</source>
          <target state="translated">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IReplyChannel">
          <source>Returns the context of the request received, if one is available</source>
          <target state="translated">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>Returns the context of the request received, if one is available.</source>
          <target state="translated">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>If a context is not available, waits until there is one available.</source>
          <target state="translated">컨텍스트를 사용할 수 없는 경우 사용 가능할 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct replies.</source>
          <target state="translated">응답을 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> encapsulates the request message and a mechanism for replying to that message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph>는 요청 메시지와 이 메시지에 응답하기 위한 메커니즘을 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>를 여러 번 또는 동시에 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> call completes per request received.</source>
          <target state="translated">수신된 요청별로 하나의 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 호출만 완료됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">최대 메시지 크기는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 속성에서 설정됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">기본값은 65536 바이트입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive of a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제한 시간이 초과되어 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>Returns the context of the request received, if one is available.</source>
          <target state="translated">사용 가능한 경우 수신된 요청의 컨텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>If a context is not available, waits until there is one available.</source>
          <target state="translated">컨텍스트를 사용할 수 없는 경우 사용 가능할 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> used to construct replies.</source>
          <target state="translated">응답을 생성하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> encapsulates the request message and a mechanism for replying to that message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph>는 요청 메시지와 이 메시지에 응답하기 위한 메커니즘을 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>를 여러 번 또는 동시에 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> call completes per request received.</source>
          <target state="translated">수신된 요청별로 하나의 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 호출만 완료됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>If the request message received is larger that the maximum message size allowed by the binding being used, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> is thrown.</source>
          <target state="translated">수신된 요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The maximum message size is set by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> property.</source>
          <target state="translated">최대 메시지 크기는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> 속성에서 설정됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The default value is 65536 bytes.</source>
          <target state="translated">기본값은 65536 바이트입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive of a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제한 시간이 초과되어 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>가 반환되기 전에 요청 수신 작업이 완료되어야 하는 기간을 지정하는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph> received.</source>
          <target state="translated">수신된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.RequestContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>Returns a value that indicates whether a request is received before a specified interval of time elapses.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청이 수신되는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</source>
          <target state="translated">요청 메시지가 큐에 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">`timeout`</ph>까지 스레드가 차단됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">대기하지 않고 응용 프로그램 처리를 계속하려면 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과된 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long a request operation has to complete before timing out and returning <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제한 시간이 초과되어 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>가 반환되기 전에 요청 작업이 완료되어야 하는 기간을 지정하는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Returns a value that indicates whether a request message is received before a specified interval of time elapses.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청 메시지가 수신되는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a request is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 시간 간격이 경과되기 전에 요청이 수신되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> does not result in a request message being received or processed in any way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph>를 호출하면 어떤 방법으로든 요청 메시지가 수신되거나 처리되지 않습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드는 주로 사용자가 트랜잭션을 사용하여 메시지를 수신하려는 트랜잭션 처리 시나리오에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>When using just <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> normally for this, the user must create the transaction, and then call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> and hope the message arrives before the transaction times out, which may not be possible.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> 메서드를 일반적으로 사용하면, 사용자는 트랜잭션을 만들고 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>를 호출한 후 트랜잭션 시간 제한 전에 메시지가 도착하기를 기대해야 하는데 이것이 항상 가능하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Instead, the user can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph> and be confident that they can get the message back before the transaction expires.</source>
          <target state="translated">대신 사용자는 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph>를 호출하고 시간 제한을 지정(무한도 가능)할 수 있습니다. 그러면 메시지가 도착할 때 트랜잭션을 열고 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt;</ph>를 호출한 후 트랜잭션이 만료되기 전에 메시지를 확실히 돌려받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단하는 것이 허용되는 경우에만 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">`timeout`</ph>까지 스레드가 차단됩니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">대기하지 않고 응용 프로그램 처리를 계속하려면 비동기 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이 초과된 경우 작업에서 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>가 반환됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>