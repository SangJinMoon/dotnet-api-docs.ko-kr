<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TcpListener.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac570b4efe2d402b27e3285b56bb7a50aff7def9e09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70b4efe2d402b27e3285b56bb7a50aff7def9e09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Listens for connections from TCP network clients.</source>
          <target state="translated">TCP 네트워크 클라이언트에서 연결을 수신합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 클래스에 대 한 수신 대기 하 고 차단 동기 모드에서 들어오는 연결 요청을 수락 하는 간단한 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You can use either a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> or a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to connect with a <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">하나를 사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 와 연결 하는 데는 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Create a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, a Local IP address and port number, or just a port number.</source>
          <target state="translated">만들기는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, 로컬 IP 주소와 포트 번호 또는 포트 번호만 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</source>
          <target state="translated">지정 <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> 로컬 IP 주소와 사용자에 대 한 해당 값을 할당 하려면 기본 서비스 공급자를 원하는 경우 로컬 포트 번호에 대 한 0에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you choose to do this, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the assigned information, after the socket has connected.</source>
          <target state="translated">이 작업을 수행 하려는 경우 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> 소켓에 연결한 후에 할당된 된 정보를 식별 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 연결 요청을 수신 대기를 시작 하는 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue incoming connections until you either call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method or it has queued <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 호출할 때까지 들어오는 연결을 대기는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드 또는 해당 큐에 대기 했음을 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use either <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> to pull a connection from the incoming connection request queue.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 끌어오려면 들어오는 연결 요청 큐에서 연결 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>These two methods will block.</source>
          <target state="translated">이 두 메서드가 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you want to avoid blocking, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method first to determine if connection requests are available in the queue.</source>
          <target state="translated">차단 되지 않도록 하려는 경우 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> 하려면 먼저 연결 요청이 큐에서 사용할 수 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 을 닫는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method does not close any accepted connections.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드 승인 된 모든 연결을 닫지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You are responsible for closing these separately.</source>
          <target state="translated">이러한 작업을 개별적으로 닫아야 책임이 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>See <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for a client example.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 클라이언트 예제에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>to establish an outgoing connection or accept an incoming request.</source>
          <target state="translated">나가는 연결을 설정 하거나 들어오는 요청을 수락 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens on the specified port.</source>
          <target state="translated">지정된 포트에서 수신하는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor is obsolete.</source>
          <target state="translated">이 생성자는 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph> constructors.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor allows you to specify the port number on which to listen for incoming connection attempts.</source>
          <target state="translated">이 생성자를 사용 하면 들어오는 연결 시도를 수신 대기할 포트 번호를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>With this constructor, the underlying service provider assigns the most appropriate network address.</source>
          <target state="translated">이 생성자를 사용 하 여 내부 서비스 공급자는 가장 적합 한 네트워크 주소를 할당합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">사용 되는 로컬 포트는 중요 하지 않은 경우에 0에서 포트 번호를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">이 경우 서비스 공급자는 사용 가능한 임시 포트 번호를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using a local port number.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 로컬 포트 번호를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="port" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph>와 <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph> 사이에 없는 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph> that represents the local endpoint to which to bind the listener <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph> 수신기를 바인딩할 로컬 끝점을 나타내는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class with the specified local endpoint.</source>
          <target state="translated">지정된 로컬 끝점을 사용하여 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">이 생성자를 사용 하면 로컬 IP 주소를 지정 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Before using this constructor, you must create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the desired local IP address and port number.</source>
          <target state="translated">이 생성자를 사용 하기 전에 만들어야는 <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> 원하는 로컬 IP 주소와 포트 번호를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> to the constructor as the <ph id="ph2">`localEP`</ph> parameter.</source>
          <target state="translated">이 전달할 <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> 으로 생성자에는 <ph id="ph2">`localEP`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local address is assigned, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using <ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> as the address parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">할당 되는 로컬 주소는 중요 하지 않은 경우 만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> 를 사용 하 여 <ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> 주소 매개 변수 및 기본 서비스 공급자 가장 적합 한 네트워크 주소를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">이렇게 하면 여러 개의 네트워크 인터페이스가 있는 경우 응용 프로그램을 단순화 하는 데 도움이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local port is used, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using 0 for the port number.</source>
          <target state="translated">사용 되는 로컬 포트는 중요 하지 않은 경우 만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> 에서 포트 번호 0을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">이 경우 서비스 공급자는 사용 가능한 임시 포트 번호를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using the local endpoint.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만듭니다.는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 클래스 로컬 끝점을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> that represents the local IP address.</source>
          <target state="translated">로컬 IP 주소를 나타내는 <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens for incoming connection attempts on the specified local IP address and port number.</source>
          <target state="translated">지정된 로컬 IP 주소와 포트 번호에서 들어오는 연결 시도를 수신하는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">이 생성자를 사용 하면 로컬 IP 주소를 지정 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Before calling this constructor you must first create an <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> using the desired local address.</source>
          <target state="translated">이 생성자를 호출 하기 전에 먼저 만들어야 합니다는 <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 원하는 로컬 주소를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> to the constructor as the <ph id="ph2">`localaddr`</ph> parameter.</source>
          <target state="translated">이 전달할 <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 으로 생성자에는 <ph id="ph2">`localaddr`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local address is assigned, specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">`localaddr`</ph> parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">할당 되는 로컬 주소는 중요 하지 않은 경우 지정 <ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> 에 대 한는 <ph id="ph2">`localaddr`</ph> 매개 변수 및 기본 서비스 공급자는 가장 적합 한 네트워크 주소를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">이렇게 하면 여러 개의 네트워크 인터페이스가 있는 경우 응용 프로그램을 단순화 하는 데 도움이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">사용 되는 로컬 포트는 중요 하지 않은 경우에 0에서 포트 번호를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>In this case, the service provider will assign an available port number between 1024 and 5000.</source>
          <target state="translated">이 경우 서비스 공급자에는 1024과 5000 사이의 사용 가능한 포트 번호를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using a local IP address and port number.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만듭니다.는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 클래스 로컬 IP 주소와 포트 번호를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="port" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph>와 <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph> 사이에 없는 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>Accepts a pending connection request.</source>
          <target state="translated">보류 중인 연결 요청을 받아들입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">데이터를 보내고 받는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 반환 하는 차단 방법는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If you want to avoid blocking, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue.</source>
          <target state="translated">사용 하 여 차단을 방지 하려는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> 연결 요청이 수신 연결 큐에서 사용할 수 있는지 확인 하는 메서드.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned is initialized with the IP address and port number of the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 반환 된 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">하나를 사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> 에서 사용할 수 있는 메서드는 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 원격 호스트와 통신 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">완료 되 면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>를를 호출 해야 해당 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램 상대적으로 간단한 경우에 사용 하 여 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드 보다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 보내고 차단 동기 모드에서 네트워크를 통해 데이터를 받기 위한 간단한 방법으로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드를 사용 하 여 반환 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>의 호출과 함께 수신기가 시작하지 않은 경우</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">보류 중인 연결 요청을 비동기 작업으로 허용합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 데이터를 보내고 받는 데 사용하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the socket connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> 개체 소켓 연결이 승인 된 후 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned in <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is initialized with the IP address and port number of the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 에 반환 된 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">하나를 사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> 에서 사용할 수 있는 메서드는 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 원격 호스트와 통신 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">완료 되 면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>를를 호출 해야 해당 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램 상대적으로 간단한 경우에 사용 하 여 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드 보다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 보내고 차단 동기 모드에서 네트워크를 통해 데이터를 받기 위한 간단한 방법으로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>의 호출과 함께 수신기가 시작하지 않은 경우</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Accepts a pending connection request.</source>
          <target state="translated">보류 중인 연결 요청을 받아들입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">데이터를 보내고 받는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 반환 하는 차단 방법는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> 메서드를 차단 되지 않도록 하려는 경우 연결 요청이 수신 연결 큐에서 사용할 수 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> 메서드 내부 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 반환 된 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 알려 메서드를 원격 호스트와 주고받는 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">후에와 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>를를 호출 해야 해당 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">보다 유연 하 게 하려는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 제공 서비스를 사용 하 여 고려 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드를 사용 하 여 반환 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>의 호출과 함께 수신기가 시작하지 않은 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 속성을 사용하여 특정 오류 코드를 가져오십시오.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">보류 중인 연결 요청을 비동기 작업으로 허용합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 데이터를 보내고 받는 데 사용하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the TCP connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> TCP 연결을 수락 개체가 완성 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> in the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> 메서드 내부 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 반환 된 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 에 <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 알려 메서드를 원격 호스트와 주고받는 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">후에와 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>를를 호출 해야 해당 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>.</source>
          <target state="translated">보다 유연 하 게 하려는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 제공 서비스를 사용 하 여 고려 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>의 호출과 함께 수신기가 시작하지 않은 경우</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 속성을 사용하여 특정 오류 코드를 가져오십시오.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening for client connections.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>가 클라이언트 연결을 실제로 수신하고 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>가 실제로 수신하고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to determine if the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is currently listening for incoming connection attempts.</source>
          <target state="translated">파생 된 클래스 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 여부를 확인 하려면이 속성을 사용할 수는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 들어오는 연결 시도 대 한 현재 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> property can be used to avoid redundant <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> 속성에서 중복을 방지 하기 위해 사용할 수 있습니다 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 시도 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Boolean value that specifies whether to enable or disable NAT traversal.</source>
          <target state="translated">NAT 통과를 설정 또는 해제할지를 지정하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Enables or disables Network Address Translation (NAT) traversal on a <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 인스턴스에 대해 NAT(Network Address Translation) 통과를 설정하거나 해제합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is used to enable or disable NAT traversal for a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> 메서드 설정 또는 해제에 대 한 NAT 통과를 사용 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</source>
          <target state="translated">Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is false, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`allowed`</ph> 매개 변수는 false는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> 관련된 소켓의 옵션을 설정 <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This explicitly disables NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated">이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 한 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is true, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`allowed`</ph> 매개 변수는 true 이면는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> 관련된 소켓의 옵션을 설정 <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This may allow NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> depending on firewall rules in place on the system.</source>
          <target state="translated">에 대 한 NAT 통과 허용할 수 있습니다이 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 시스템의 방화벽 규칙에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method must be invoked prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests (before the socket is bound).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> 메서드를 호출 하기 전에 호출 되어야 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드 (소켓을 바인딩해야) 전에 들어오는 연결 요청에 대 한 수신을 시작 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is called after the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method, then an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> 사이 호출 됩니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드를 아니라면 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Teredo 주소는 IPv6 주소 2001 접두사로:: / 32입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거 수 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> method was called after calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> method</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> 메서드를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> 메서드를 호출한 경우입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">작업이 완료되었을 때 호출할 메서드를 참조하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">이 개체는 작업이 완료되면 <bpt id="p1">&lt;c&gt;</bpt>콜백<ept id="p1">&lt;/c&gt;</ept> 대리자에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>의 비동기 생성을 참조하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">비동기 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> 호출 하 여 작업을 완료 해야는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">메서드는 일반적으로 <ph id="ph1">`callback`</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">작업이 완료 될 때까지 차단 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> 반환 된 속성 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> 통해 설명을 대 한 오류에 대 한 설명입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> 메서드를 만들고 소켓을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">콜백 호출 대리자는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> 메서드 비동기 요청을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">작업이 완료되었을 때 호출할 메서드를 참조하는 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">이 개체는 작업이 완료되면 <bpt id="p1">&lt;c&gt;</bpt>콜백<ept id="p1">&lt;/c&gt;</ept> 대리자에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>의 비동기 생성을 참조하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">비동기 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> 호출 하 여 작업을 완료 해야는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">메서드는 일반적으로 <ph id="ph1">`callback`</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">작업이 완료 될 때까지 차단 된 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> 통해 설명을 대 한 오류에 대 한 설명입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> 메서드를 만들고 소켓을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">콜백 호출 대리자는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> 메서드 비동기 요청을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">지정된 포트에서 수신 대기할 새 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">지정된 포트에서 수신 대기할 새 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드를 호출하여 반환된 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>을 만듭니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">데이터를 보내고 받는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">이 메서드 차단 작업이 때까지 완료 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">이 작업을 동기적으로 수행 하려면는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> 반환 된 속성 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> 통해 설명을 대 한 오류에 대 한 설명입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> 메서드를 만들고 소켓을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">콜백 호출 대리자는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> 메서드 비동기 요청을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter was not created by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> 메서드를 호출하여 <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 매개 변수를 만들지 못한 경우</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> method was previously called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> 메서드가 이미 호출된 경우</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An error occurred while attempting to access the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에 액세스하려고 시도하는 동안 오류가 발생한 경우.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 메서드를 호출하여 반환된 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>을 만듭니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">데이터를 보내고 받는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">이 메서드 차단 작업이 때까지 완료 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">이 작업을 동기적으로 수행 하려면는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the underlying socket (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) to identify the remote host's network address and port number.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> 기본 소켓의 속성 (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> 통해 설명을 대 한 오류에 대 한 설명입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> 메서드를 만들고 소켓을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">콜백 호출 대리자는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> 메서드 비동기 요청을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value that specifies whether the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one underlying socket to listen to a specific port.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>가 특정 포트를 하나의 내부 소켓에서만 수신하는 것을 허용하는지 여부를 지정하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> to listen to a specific port; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>가 특정 포트를 하나의 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>에서만 수신하는 것을 허용하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id="ph2">&lt;see langword="false" /&gt;</ph> for all other versions.</source>
          <target state="translated">Windows Server 2003 및 Windows XP 서비스 팩 2 이상에서는 기본값이 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 다른 모든 버전에서는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>By default, multiple listeners can listen to a specific port.</source>
          <target state="translated">기본적으로 여러 명의 수신기는 특정 포트를 수신할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>However, only one of the listeners can perform operations on the network traffic sent to the port.</source>
          <target state="translated">그러나 수신기 중 하나에만 포트에 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</source>
          <target state="translated">둘 이상의 수신기를 특정 포트에 바인딩할 하려고 하는 경우 보다 구체적인 IP 주소를 가진 한 해당 포트로 전송 되는 네트워크 트래픽을 처리 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple listeners from listening to a specific port.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph> 속성을 여러 명의 수신기 특정 포트를 수신 하지 않도록 방지 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Set this property before calling <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>, or call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method and then set this property.</source>
          <target state="translated">호출 하기 전에이 속성을 설정 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>, 하거나 호출 된 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드가이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The following code example gets and sets the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> has been started.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>가 시작된 경우.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Call the <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method and then set the <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> 메서드를 호출한 다음 <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph> 속성을 설정하십시오.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>An error occurred when attempting to access the underlying socket.</source>
          <target state="translated">내부 소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> of the current <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph>의 내부 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> to which the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is bound.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph>이 바인딩될 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> 소켓 연결을 만든 후 들어오는 클라이언트 연결 요청을 수신 대기 하는 데 사용 되는 로컬 네트워크 인터페이스 및 포트 번호를 식별 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You must first cast this <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> to an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</source>
          <target state="translated">이 먼저 캐스팅 해야 <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can then call the <ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local IP address, and the <ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local port number.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph> 로컬 IP 주소를 검색 하는 속성 및 <ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph> 로컬 포트 번호를 검색 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The following code example displays the local IP address and port number on which the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> is listening for incoming connection requests.</source>
          <target state="translated">다음 코드 예제에서는 로컬 IP 주소와 포트 번호를 표시 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 들어오는 연결 요청을 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Determines if there are pending connection requests.</source>
          <target state="translated">보류 중인 연결 요청이 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if connections are pending; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">연결이 보류 중이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>This non-blocking method determines if there are any pending connection requests.</source>
          <target state="translated">이 비 블록 킹 메서드는 보류 중인 연결 요청이 있는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Because the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> methods block execution until the <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method has queued an incoming connection request, the <ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method can be used to determine if connections are available before attempting to accept them.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 될 때까지 실행을 차단 하는 메서드는 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드는 들어오는 연결 요청을 큐에 대기 했음을 <ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> 메서드 동의 하기 전에 연결을 사용할 수 있으면 확인 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The following code example checks the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>If a connection request is waiting to be accepted, then a call to the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is made.</source>
          <target state="translated">연결 요청을 수락 되도록 대기 되는 경우 다음에 대 한 호출은 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>의 호출과 함께 수신기가 시작하지 않은 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Gets the underlying network <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">내부 네트워크 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to listen for incoming client connection requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 만듭니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 들어오는 클라이언트 연결 요청을 수신 대기 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to get this <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">파생 된 클래스 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 이이 속성을 사용할 수 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> provides.</source>
          <target state="translated">기본 사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> 필요한 경우 속성에 액세스 하는 것 이상의 <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 제공 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property only returns the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used to listen for incoming client connection requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> 속성만 반환 합니다.는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 들어오는 클라이언트 연결 요청을 수신 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> for sending and receiving data.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 가져오고, 보류 중인 연결 요청을 수락 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 데이터 보내기 및 받기에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for sending and receiving data.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 가져오고, 보류 중인 연결 요청을 수락 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 데이터 보내기 및 받기에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is retrieved and the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 검색 되 고 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph> <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 옵션이 구성 된 제한 시간이 초과 10 초 후 데이터의 네트워크 버퍼에 연결을 닫은 후 계속 남아 있으면 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">들어오는 연결 요청의 수신을 시작합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">들어오는 연결 요청의 수신을 시작합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드 내부 초기화 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>로컬 끝점에 바인딩합니다 하 고 들어오는 연결 시도를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If a connection request is received, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">연결 요청이 수신 되는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드 요청을 대기 하 고 요청을 계속 수신 추가 호출할 때까지 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections, it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 연결 요청을 받으면 throw 이미 최대 연결 수 큐에 대기 했음을, 후는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> 클라이언트에서.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드 또는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드는 큐에서 연결을 제거 하 고 반환 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드는 반환 된 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 동일한 작업을 수행 하는 데 사용할 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If your application only requires synchronous I/O, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 응용 프로그램만 필요한 경우 동기 I/O, <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">자세한 동작 제어를 사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">두이 방법 모두 연결 요청을 큐에 사용할 수 있을 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 을 닫는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 수신을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">개별적으로 허용 된 연결을 닫아야 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">다음 코드 예제에서는 어떻게 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 클라이언트 연결 시도 대 한 수신 대기 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 속성을 사용하여 특정 오류 코드를 가져오십시오.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The maximum length of the pending connections queue.</source>
          <target state="translated">보류 중인 연결 큐의 최대 길이입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Starts listening for incoming connection requests with a maximum number of pending connection.</source>
          <target state="translated">최대 보류 연결 수로 들어오는 연결 요청에 대한 수신을 시작합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 메서드 내부 초기화 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>로컬 끝점에 바인딩합니다 하 고 들어오는 연결 시도를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If a connection request is received, <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">연결 요청을 받으면 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 에서 요청을 대기 하 고 계속를 호출할 때까지 추가 요청을 수신 대기 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 가 연결의 최대 수를 대기열 이미 후 연결 요청을 받으면는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> 클라이언트에서.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드 또는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> 메서드는 큐에서 연결을 제거 하 고 반환 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드는 반환 된 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 동일한 작업을 수행 하는 데 사용할 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If your application only requires synchronous I/O, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 응용 프로그램 동기 I/O를 해야 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">자세한 동작 제어를 사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">두이 방법 모두 연결 요청을 큐에 사용할 수 있을 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 을 닫는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> 수신을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">개별적으로 허용 된 연결을 닫아야 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph2">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 <bpt id="p1">[</bpt> <ph id="ph2">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> 오류에 대 한 자세한 설명은 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">다음 코드 예제에서는 어떻게 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> 들어오는 클라이언트 연결 시도 대 한 수신 대기 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>An error occurred while accessing the socket.</source>
          <target state="translated">소켓에 액세스하는 동안 오류가 발생한 경우.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> parameter is less than zero or exceeds the maximum number of permitted connections.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> 매개 변수가 0보다 작거나 허용된 최대 연결 수를 초과한 경우.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is null.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 null인 경우</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Closes the listener.</source>
          <target state="translated">수신기를 닫습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> closes the listener.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 수신기를 닫습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Any unaccepted connection requests in the queue will be lost.</source>
          <target state="translated">큐에 허용 되지 않은 연결 요청은 손실 됩니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Remote hosts waiting for a connection to be accepted will throw a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">원격 호스트 연결 대기 동의를 throw 합니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">개별적으로 허용 된 연결을 닫아야 합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> 메서드를 기본 닫습니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 속성을 사용하여 특정 오류 코드를 가져오십시오.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method also closes the underlying <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>, and creates a new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> for the <ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> 메서드는 또한 기본 종료 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>, 새 및 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 에 대 한는 <ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>If you set any properties on the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> prior to calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method, those properties will not carry over to the new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">기본 속성을 설정 하는 경우 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 호출 하기 전에 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> 메서드를 이러한 속성은 탭으로 이전 되지 새 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>