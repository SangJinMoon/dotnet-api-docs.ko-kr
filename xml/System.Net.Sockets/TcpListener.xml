<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bd66b-101">TCP 네트워크 클라이언트에서 연결을 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-101">Listens for connections from TCP network clients.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-102"><xref:System.Net.Sockets.TcpListener> 클래스에 대 한 수신 대기 하 고 차단 동기 모드에서 들어오는 연결 요청을 수락 하는 간단한 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="bd66b-103">하나를 사용할 수는 <xref:System.Net.Sockets.TcpClient> 또는 <xref:System.Net.Sockets.Socket> 와 연결 하는 데는 <xref:System.Net.Sockets.TcpListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="bd66b-104">만들기는 <xref:System.Net.Sockets.TcpListener> 를 사용 하는 <xref:System.Net.IPEndPoint>, 로컬 IP 주소와 포트 번호 또는 포트 번호만 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="bd66b-105">지정 <xref:System.Net.IPAddress.Any> 로컬 IP 주소와 사용자에 대 한 해당 값을 할당 하려면 기본 서비스 공급자를 원하는 경우 로컬 포트 번호에 대 한 0에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="bd66b-106">이 작업을 수행 하려는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 소켓에 연결한 후에 할당된 된 정보를 식별 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="bd66b-107">사용 하 여 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 연결 요청을 수신 대기를 시작 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="bd66b-108"><xref:System.Net.Sockets.TcpListener.Start%2A> 호출할 때까지 들어오는 연결을 대기는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드 또는 해당 큐에 대기 했음을 <xref:System.Net.Sockets.SocketOptionName.MaxConnections>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="bd66b-109">사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 또는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 끌어오려면 들어오는 연결 요청 큐에서 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="bd66b-110">이 두 메서드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-110">These two methods will block.</span></span> <span data-ttu-id="bd66b-111">차단 되지 않도록 하려는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 하려면 먼저 연결 요청이 큐에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="bd66b-112">호출 된 <xref:System.Net.Sockets.TcpListener.Stop%2A> 을 닫는 메서드는 <xref:System.Net.Sockets.TcpListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-113"><xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드 승인 된 모든 연결을 닫지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="bd66b-114">이러한 작업을 개별적으로 닫아야 책임이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-115">다음 코드 예제는 <xref:System.Net.Sockets.TcpListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="bd66b-116">참조 <xref:System.Net.Sockets.TcpClient> 클라이언트 예제에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="bd66b-117">나가는 연결을 설정 하거나 들어오는 요청을 수락 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-117">to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bd66b-118"><see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="bd66b-119">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-119">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="bd66b-120">지정된 포트에서 수신하는 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-121">이 생성자는 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-121">This constructor is obsolete.</span></span> <span data-ttu-id="bd66b-122">사용 하 여 <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> 또는 <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="bd66b-123">이 생성자를 사용 하면 들어오는 연결 시도를 수신 대기할 포트 번호를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-124">이 생성자를 사용 하 여 내부 서비스 공급자는 가장 적합 한 네트워크 주소를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="bd66b-125">사용 되는 로컬 포트는 중요 하지 않은 경우에 0에서 포트 번호를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="bd66b-126">이 경우 서비스 공급자는 사용 가능한 임시 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="bd66b-127">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="bd66b-128">호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-129">다음 코드 예제에서는 한 <xref:System.Net.Sockets.TcpListener> 로컬 포트 번호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bd66b-130"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-130"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="bd66b-131"><see cref="T:System.Net.IPEndPoint" /> 수신기를 바인딩할 로컬 끝점을 나타내는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="bd66b-132">지정된 로컬 끝점을 사용하여 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-133">이 생성자를 사용 하면 로컬 IP 주소를 지정 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-134">이 생성자를 사용 하기 전에 만들어야는 <xref:System.Net.IPEndPoint> 원하는 로컬 IP 주소와 포트 번호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="bd66b-135">이 전달할 <xref:System.Net.IPEndPoint> 으로 생성자에는 `localEP` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="bd66b-136">할당 되는 로컬 주소는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 를 사용 하 여 <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> 주소 매개 변수 및 기본 서비스 공급자 가장 적합 한 네트워크 주소를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="bd66b-137">이렇게 하면 여러 개의 네트워크 인터페이스가 있는 경우 응용 프로그램을 단순화 하는 데 도움이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="bd66b-138">사용 되는 로컬 포트는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 에서 포트 번호 0을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="bd66b-139">이 경우 서비스 공급자는 사용 가능한 임시 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="bd66b-140">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="bd66b-141">호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-142">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-143">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-144">다음 코드 예제에서는의 인스턴스를 만듭니다.는 <xref:System.Net.Sockets.TcpListener> 클래스 로컬 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bd66b-145"><paramref name="localEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-145"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><span data-ttu-id="bd66b-146">로컬 IP 주소를 나타내는 <see cref="T:System.Net.IPAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span></span></param>
        <param name="port"><span data-ttu-id="bd66b-147">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-147">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="bd66b-148">지정된 로컬 IP 주소와 포트 번호에서 들어오는 연결 시도를 수신하는 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-149">이 생성자를 사용 하면 로컬 IP 주소를 지정 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-150">이 생성자를 호출 하기 전에 먼저 만들어야 합니다는 <xref:System.Net.IPAddress> 원하는 로컬 주소를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="bd66b-151">이 전달할 <xref:System.Net.IPAddress> 으로 생성자에는 `localaddr` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="bd66b-152">할당 되는 로컬 주소는 중요 하지 않은 경우 지정 <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> 에 대 한는 `localaddr` 매개 변수 및 기본 서비스 공급자는 가장 적합 한 네트워크 주소를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="bd66b-153">이렇게 하면 여러 개의 네트워크 인터페이스가 있는 경우 응용 프로그램을 단순화 하는 데 도움이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="bd66b-154">사용 되는 로컬 포트는 중요 하지 않은 경우에 0에서 포트 번호를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="bd66b-155">이 경우 서비스 공급자에는 1024과 5000 사이의 사용 가능한 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="bd66b-156">사용 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="bd66b-157">호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 연결 시도 대 한 수신을 시작 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-158">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-159">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-160">다음 코드 예제에서는의 인스턴스를 만듭니다.는 <xref:System.Net.Sockets.TcpListener> 클래스 로컬 IP 주소와 포트 번호를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bd66b-161"><paramref name="localaddr" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-161"><paramref name="localaddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="bd66b-162"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-162"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-163">보류 중인 연결 요청을 받아들입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-163">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="bd66b-164">데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 반환 하는 차단 방법는 <xref:System.Net.Sockets.Socket> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="bd66b-166">사용 하 여 차단을 방지 하려는 경우는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 연결 요청이 수신 연결 큐에서 사용할 수 있는지 확인 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="bd66b-167"><xref:System.Net.Sockets.Socket> 반환 된 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="bd66b-168">하나를 사용할 수는 <xref:System.Net.Sockets.Socket.Send%2A> 및 <xref:System.Net.Sockets.Socket.Receive%2A> 에서 사용할 수 있는 메서드는 <xref:System.Net.Sockets.Socket> 원격 호스트와 통신 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="bd66b-169">완료 되 면 사용 하는 <xref:System.Net.Sockets.Socket>를를 호출 해야 해당 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="bd66b-170">응용 프로그램 상대적으로 간단한 경우에 사용 하 여 여는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 보다는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="bd66b-171"><xref:System.Net.Sockets.TcpClient> 보내고 차단 동기 모드에서 네트워크를 통해 데이터를 받기 위한 간단한 방법으로 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-172">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-173">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-174">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드를 사용 하 여 반환 하는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="bd66b-175">이 <xref:System.Net.Sockets.Socket> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-176"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-177">보류 중인 연결 요청을 비동기 작업으로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-177">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="bd66b-178"><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-178">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span></span>  
  
 <span data-ttu-id="bd66b-179">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-179">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="bd66b-180">작업 개체의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Sockets.Socket" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-180">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-181">이 작업을 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-181">This operation will not block.</span></span> <span data-ttu-id="bd66b-182">반환 된 <xref:System.Threading.Tasks.Task%601> 개체 소켓 연결이 승인 된 후 완료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-182">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="bd66b-183"><xref:System.Net.Sockets.Socket> 에 반환 된 <xref:System.Threading.Tasks.Task%601> 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-183">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="bd66b-184">하나를 사용할 수는 <xref:System.Net.Sockets.Socket.Send%2A> 및 <xref:System.Net.Sockets.Socket.Receive%2A> 에서 사용할 수 있는 메서드는 <xref:System.Net.Sockets.Socket> 원격 호스트와 통신 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-184">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="bd66b-185">완료 되 면 사용 하는 <xref:System.Net.Sockets.Socket>를를 호출 해야 해당 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-185">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="bd66b-186">응용 프로그램 상대적으로 간단한 경우에 사용 하 여 여는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 보다는 <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-186">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="bd66b-187"><xref:System.Net.Sockets.TcpClient> 보내고 차단 동기 모드에서 네트워크를 통해 데이터를 받기 위한 간단한 방법으로 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-187"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-188">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-188">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-189">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-189">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-190"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-190">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-191">보류 중인 연결 요청을 받아들입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-191">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="bd66b-192">데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-192">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 반환 하는 차단 방법는 <xref:System.Net.Sockets.TcpClient> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="bd66b-194">사용 하 여는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 메서드를 차단 되지 않도록 하려는 경우 연결 요청이 수신 연결 큐에서 사용할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-194">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="bd66b-195">사용 하 여는 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> 메서드 내부 <xref:System.Net.Sockets.NetworkStream> 반환 된 <xref:System.Net.Sockets.TcpClient>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-195">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="bd66b-196"><xref:System.Net.Sockets.NetworkStream> 알려 메서드를 원격 호스트와 주고받는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-196">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="bd66b-197">후에와 <xref:System.Net.Sockets.TcpClient>를를 호출 해야 해당 <xref:System.Net.Sockets.TcpClient.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-197">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="bd66b-198">보다 유연 하 게 하려는 경우는 <xref:System.Net.Sockets.TcpClient> 제공 서비스를 사용 하 여 고려 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-198">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-199">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-199">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-200">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-200">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-201">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드를 사용 하 여 반환 하는 <xref:System.Net.Sockets.TcpClient>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-201">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="bd66b-202">이 <xref:System.Net.Sockets.TcpClient> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-202">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-203"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-203">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-204"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오.</span><span class="sxs-lookup"><span data-stu-id="bd66b-204">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="bd66b-205">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-205">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-206">보류 중인 연결 요청을 비동기 작업으로 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-206">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="bd66b-207"><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-207">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span></span>  
  
 <span data-ttu-id="bd66b-208">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-208">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="bd66b-209">작업 개체의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Sockets.TcpClient" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-209">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-210">이 작업을 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-210">This operation will not block.</span></span> <span data-ttu-id="bd66b-211">반환 된 <xref:System.Threading.Tasks.Task%601> TCP 연결을 수락 개체가 완성 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-211">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="bd66b-212">사용 하 여는 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> 메서드 내부 <xref:System.Net.Sockets.NetworkStream> 반환 된 <xref:System.Net.Sockets.TcpClient> 에 <xref:System.Threading.Tasks.Task%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-212">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="bd66b-213"><xref:System.Net.Sockets.NetworkStream> 알려 메서드를 원격 호스트와 주고받는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-213">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="bd66b-214">후에와 <xref:System.Net.Sockets.TcpClient>를를 호출 해야 해당 <xref:System.Net.Sockets.TcpClient.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-214">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="bd66b-215">보다 유연 하 게 하려는 경우는 <xref:System.Net.Sockets.TcpClient> 제공 서비스를 사용 하 여 고려 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-215">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-216">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-217">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-218"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-218">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-219"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오.</span><span class="sxs-lookup"><span data-stu-id="bd66b-219">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="bd66b-220">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-220">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd66b-221"><see cref="T:System.Net.Sockets.TcpListener" />가 클라이언트 연결을 실제로 수신하고 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-221">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span></span></summary>
        <value>
          <span data-ttu-id="bd66b-222"><see cref="T:System.Net.Sockets.TcpListener" />가 실제로 수신하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-222"><see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-223">파생 된 클래스 <xref:System.Net.Sockets.TcpListener> 여부를 확인 하려면이 속성을 사용할 수는 <xref:System.Net.Sockets.Socket> 들어오는 연결 시도 대 한 현재 수신 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-223">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-224"><xref:System.Net.Sockets.TcpClient.Active%2A> 속성에서 중복을 방지 하기 위해 사용할 수 있습니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-224">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="bd66b-225">NAT 통과를 설정 또는 해제할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-225">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="bd66b-226"><see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스에 대해 NAT(Network Address Translation) 통과를 설정하거나 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-226">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-227"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 메서드 설정 또는 해제에 대 한 NAT 통과를 사용 하는 <xref:System.Net.Sockets.TcpListener> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="bd66b-227">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="bd66b-228">Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-228">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="bd66b-229">경우는 `allowed` 매개 변수는 false는 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 관련된 소켓의 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-229">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="bd66b-230">이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 한 <xref:System.Net.Sockets.TcpListener> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="bd66b-230">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="bd66b-231">경우는 `allowed` 매개 변수는 true 이면는 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 관련된 소켓의 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-231">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="bd66b-232">에 대 한 NAT 통과 허용할 수 있습니다이 <xref:System.Net.Sockets.TcpListener> 시스템의 방화벽 규칙에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-232">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="bd66b-233"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 메서드를 호출 하기 전에 호출 되어야 합니다는 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 (소켓을 바인딩해야) 전에 들어오는 연결 요청에 대 한 수신을 시작 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-233">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="bd66b-234">경우 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 사이 호출 됩니다는 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드를 아니라면 <xref:System.InvalidOperationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-234">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="bd66b-235">Teredo 주소는 IPv6 주소 2001 접두사로:: / 32입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-235">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="bd66b-236">Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-236">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-237"><see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 메서드를 호출한 후 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 메서드를 호출한 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-237">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="bd66b-238">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-238">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="bd66b-239">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-239">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="bd66b-240">이 개체는 작업이 완료되면 <c>콜백</c> 대리자에 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-240">This object is passed to the <c>callback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="bd66b-241">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-241">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="bd66b-242"><see cref="T:System.IAsyncResult" />의 비동기 생성을 참조하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-242">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-243">비동기 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-243">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="bd66b-244">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-244">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="bd66b-245">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-245">This method does not block until the operation completes.</span></span> <span data-ttu-id="bd66b-246">작업이 완료 될 때까지 차단 된 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-246">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="bd66b-247">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-247">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-248">호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-248">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-249">표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) 통해 설명을 대 한 오류에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-249">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-250">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-250">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-251">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-251">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-252">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 메서드를 만들고 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-252">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="bd66b-253">콜백 호출 대리자는 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 메서드 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-253">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-254">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-254">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="bd66b-255"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-255">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="bd66b-256">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-256">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="bd66b-257">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-257">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="bd66b-258">이 개체는 작업이 완료되면 <c>콜백</c> 대리자에 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-258">This object is passed to the <c>callback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="bd66b-259">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-259">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="bd66b-260"><see cref="T:System.IAsyncResult" />의 비동기 생성을 참조하는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-260">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-261">비동기 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-261">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="bd66b-262">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-262">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="bd66b-263">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-263">This method does not block until the operation completes.</span></span> <span data-ttu-id="bd66b-264">작업이 완료 될 때까지 차단 된 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-264">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="bd66b-265">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-265">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-266">표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) 통해 설명을 대 한 오류에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-266">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-267">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-267">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-268">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-268">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-269">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 메서드를 만들고 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-269">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="bd66b-270">콜백 호출 대리자는 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 메서드 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-270">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-271">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-271">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="bd66b-272"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-272">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="bd66b-273">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-273">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="bd66b-274">지정된 포트에서 수신 대기할 새 <see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-274">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></summary>
        <returns><span data-ttu-id="bd66b-275"><see cref="T:System.Net.Sockets.TcpListener" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-275">Returns <see cref="T:System.Net.Sockets.TcpListener" />.</span></span>  
  
 <span data-ttu-id="bd66b-276">지정된 포트에서 수신 대기할 새 <see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-276">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="bd66b-277"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-277">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="bd66b-278">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <see cref="T:System.Net.Sockets.Socket" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-278">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="bd66b-279"><see cref="T:System.Net.Sockets.Socket" /></span><span class="sxs-lookup"><span data-stu-id="bd66b-279">A <see cref="T:System.Net.Sockets.Socket" />.</span></span>  
  
 <span data-ttu-id="bd66b-280">데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-280">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-281">이 메서드 차단 작업이 때까지 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-281">This method blocks until the operation is complete.</span></span> <span data-ttu-id="bd66b-282">이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-282">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-283">호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-283">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-284">표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) 통해 설명을 대 한 오류에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-284">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-285">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-285">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-286">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-286">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-287">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 메서드를 만들고 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-287">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="bd66b-288">콜백 호출 대리자는 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 메서드 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-288">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="bd66b-289">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-289">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bd66b-290"><paramref name="asyncResult" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-290">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bd66b-291"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 메서드를 호출하여 <paramref name="asyncResult" /> 매개 변수를 만들지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-291">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-292"><see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 메서드가 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-292">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-293"><see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-293">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="bd66b-294"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-294">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="bd66b-295">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <see cref="T:System.Net.Sockets.TcpClient" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-295">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="bd66b-296"><see cref="T:System.Net.Sockets.TcpClient" /></span><span class="sxs-lookup"><span data-stu-id="bd66b-296">A <see cref="T:System.Net.Sockets.TcpClient" />.</span></span>  
  
 <span data-ttu-id="bd66b-297">데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-297">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-298">이 메서드 차단 작업이 때까지 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-298">This method blocks until the operation is complete.</span></span> <span data-ttu-id="bd66b-299">이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-299">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-300">호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 기본 소켓의 속성 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-300">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-301">표시 되 면는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) 통해 설명을 대 한 오류에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-301">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-302">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-302">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-303">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-303">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-304">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 메서드를 만들고 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-304">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="bd66b-305">콜백 호출 대리자는 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 메서드 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-305">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd66b-306"><see cref="T:System.Boolean" />가 특정 포트를 하나의 내부 소켓에서만 수신하는 것을 허용하는지 여부를 지정하는 <see cref="T:System.Net.Sockets.TcpListener" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-306">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span></span></summary>
        <value>
          <span data-ttu-id="bd66b-307"><see cref="T:System.Net.Sockets.TcpListener" />가 특정 포트를 하나의 <see cref="T:System.Net.Sockets.TcpListener" />에서만 수신하는 것을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-307"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bd66b-308">이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-308">.</span></span> <span data-ttu-id="bd66b-309">Windows Server 2003 및 Windows XP 서비스 팩 2 이상에서는 기본값이 <see langword="true" />이고, 다른 모든 버전에서는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-309">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-310">기본적으로 여러 명의 수신기는 특정 포트를 수신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-310">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="bd66b-311">그러나 수신기 중 하나에만 포트에 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-311">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="bd66b-312">둘 이상의 수신기를 특정 포트에 바인딩할 하려고 하는 경우 보다 구체적인 IP 주소를 가진 한 해당 포트로 전송 되는 네트워크 트래픽을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-312">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="bd66b-313">사용할 수는 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> 속성을 여러 명의 수신기 특정 포트를 수신 하지 않도록 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-313">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="bd66b-314">호출 하기 전에이 속성을 설정 <xref:System.Net.Sockets.TcpListener.Start%2A>, 하거나 호출 된 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드가이 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-314">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-315">다음 코드 예제는 <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-315">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-316"><see cref="T:System.Net.Sockets.TcpListener" />가 시작된 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-316">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span></span> <span data-ttu-id="bd66b-317"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드를 호출한 다음 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 속성을 설정하십시오.</span><span class="sxs-lookup"><span data-stu-id="bd66b-317">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-318">내부 소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-318">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="bd66b-319">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-319">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd66b-320">현재 <see cref="T:System.Net.EndPoint" />의 내부 <see cref="T:System.Net.Sockets.TcpListener" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-320">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span></span></summary>
        <value><span data-ttu-id="bd66b-321"><see cref="T:System.Net.EndPoint" />이 바인딩될 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-321">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-322">사용할 수는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 소켓 연결을 만든 후 들어오는 클라이언트 연결 요청을 수신 대기 하는 데 사용 되는 로컬 네트워크 인터페이스 및 포트 번호를 식별 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-322">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="bd66b-323">이 먼저 캐스팅 해야 <xref:System.Net.EndPoint> 에 <xref:System.Net.IPEndPoint>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-323">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="bd66b-324">호출할 수 있습니다는 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> 로컬 IP 주소를 검색 하는 속성 및 <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> 로컬 포트 번호를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-324">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-325">다음 코드 예제에서는 로컬 IP 주소와 포트 번호를 표시 하는 <xref:System.Net.Sockets.TcpListener> 들어오는 연결 요청을 수신 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-325">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-326">보류 중인 연결 요청이 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-326">Determines if there are pending connection requests.</span></span></summary>
        <returns>
          <span data-ttu-id="bd66b-327">연결이 보류 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-327"><see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-328">이 비 블록 킹 메서드는 보류 중인 연결 요청이 있는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-328">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="bd66b-329">때문에 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 및 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 될 때까지 실행을 차단 하는 메서드는 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드는 들어오는 연결 요청을 큐에 대기 했음을 <xref:System.Net.Sockets.TcpListener.Pending%2A> 메서드 동의 하기 전에 연결을 사용할 수 있으면 확인 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-329">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-330">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-330">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="bd66b-331">연결 요청을 수락 되도록 대기 되는 경우 다음에 대 한 호출은 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-331">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-332"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-332">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd66b-333">내부 네트워크 <see cref="T:System.Net.Sockets.Socket" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-333">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="bd66b-334">내부 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-334">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-335"><xref:System.Net.Sockets.TcpListener> 만듭니다는 <xref:System.Net.Sockets.Socket> 들어오는 클라이언트 연결 요청을 수신 대기 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-335"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="bd66b-336">파생 된 클래스 <xref:System.Net.Sockets.TcpListener> 이이 속성을 사용할 수 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-336">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="bd66b-337">기본 사용 하 여 <xref:System.Net.Sockets.Socket> 에서 반환 되는 <xref:System.Net.Sockets.TcpListener.Server%2A> 필요한 경우 속성에 액세스 하는 것 이상의 <xref:System.Net.Sockets.TcpListener> 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-337">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-338"><xref:System.Net.Sockets.TcpListener.Server%2A> 속성만 반환 합니다.는 <xref:System.Net.Sockets.Socket> 들어오는 클라이언트 연결 요청을 수신 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-338">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="bd66b-339">사용 하 여는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 가져오고, 보류 중인 연결 요청을 수락 하는 메서드는 <xref:System.Net.Sockets.Socket> 데이터 보내기 및 받기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-339">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="bd66b-340">사용할 수도 있습니다는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 가져오고, 보류 중인 연결 요청을 수락 하는 메서드는 <xref:System.Net.Sockets.TcpClient> 데이터 보내기 및 받기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-340">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-341">다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.Server%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-341">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="bd66b-342">내부 <xref:System.Net.Sockets.Socket> 검색 되 고 <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket> 옵션이 구성 된 제한 시간이 초과 10 초 후 데이터의 네트워크 버퍼에 연결을 닫은 후 계속 남아 있으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-342">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bd66b-343">들어오는 연결 요청의 수신을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-343">Starts listening for incoming connection requests.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-344">들어오는 연결 요청의 수신을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-344">Starts listening for incoming connection requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-345"><xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 내부 초기화 <xref:System.Net.Sockets.Socket>로컬 끝점에 바인딩합니다 하 고 들어오는 연결 시도를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-345">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-346">연결 요청이 수신 되는 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 요청을 대기 하 고 요청을 계속 수신 추가 호출할 때까지 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-346">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="bd66b-347">경우 <xref:System.Net.Sockets.TcpListener> 연결 요청을 받으면 throw 이미 최대 연결 수 큐에 대기 했음을, 후는 <xref:System.Net.Sockets.SocketException> 클라이언트에서.</span><span class="sxs-lookup"><span data-stu-id="bd66b-347">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="bd66b-348">들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-348">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="bd66b-349"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드는 큐에서 연결을 제거 하 고 반환 합니다는 <xref:System.Net.Sockets.TcpClient> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-349">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="bd66b-350"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드는 반환 된 <xref:System.Net.Sockets.Socket> 동일한 작업을 수행 하는 데 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-350">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="bd66b-351">사용 하 여 응용 프로그램만 필요한 경우 동기 I/O, <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-351">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="bd66b-352">자세한 동작 제어를 사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-352">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="bd66b-353">두이 방법 모두 연결 요청을 큐에 사용할 수 있을 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-353">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="bd66b-354">사용 하 여는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 을 닫는 메서드는 <xref:System.Net.Sockets.TcpListener> 수신을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-354">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="bd66b-355">개별적으로 허용 된 연결을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-355">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-356">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-357">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-358">다음 코드 예제에서는 어떻게 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 클라이언트 연결 시도 대 한 수신 대기 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-358">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-359"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오.</span><span class="sxs-lookup"><span data-stu-id="bd66b-359">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="bd66b-360">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-360">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="bd66b-361">보류 중인 연결 큐의 최대 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-361">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="bd66b-362">최대 보류 연결 수로 들어오는 연결 요청에 대한 수신을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-362">Starts listening for incoming connection requests with a maximum number of pending connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-363"><xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 내부 초기화 <xref:System.Net.Sockets.Socket>로컬 끝점에 바인딩합니다 하 고 들어오는 연결 시도를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-363">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="bd66b-364">연결 요청을 받으면 <xref:System.Net.Sockets.TcpListener.Start%2A> 에서 요청을 대기 하 고 계속를 호출할 때까지 추가 요청을 수신 대기 하는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-364">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="bd66b-365">경우 <xref:System.Net.Sockets.TcpListener> 가 연결의 최대 수를 대기열 이미 후 연결 요청을 받으면는 <xref:System.Net.Sockets.SocketException> 클라이언트에서.</span><span class="sxs-lookup"><span data-stu-id="bd66b-365">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="bd66b-366">들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-366">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="bd66b-367"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드는 큐에서 연결을 제거 하 고 반환 합니다는 <xref:System.Net.Sockets.TcpClient> 데이터를 받거나 보내기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-367">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="bd66b-368"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드는 반환 된 <xref:System.Net.Sockets.Socket> 동일한 작업을 수행 하는 데 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-368">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="bd66b-369">사용 하 여 응용 프로그램 동기 I/O를 해야 하는 경우는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-369">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="bd66b-370">자세한 동작 제어를 사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd66b-370">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="bd66b-371">두이 방법 모두 연결 요청을 큐에 사용할 수 있을 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-371">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="bd66b-372">사용 하 여는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 을 닫는 메서드는 <xref:System.Net.Sockets.TcpListener> 수신을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-372">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="bd66b-373">개별적으로 허용 된 연결을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-373">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-374">사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 MSDN library에서 Windows 소켓 버전 2 API 오류 코드 설명서를 참조 하 고 특정 오류 코드를 [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) 오류에 대 한 자세한 설명은 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-374">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-375">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-375">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-376">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-376">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-377">다음 코드 예제에서는 어떻게 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 클라이언트 연결 시도 대 한 수신 대기 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-377">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-378">소켓에 액세스하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-378">An error occurred while accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bd66b-379"><paramref name="backlog" /> 매개 변수가 0보다 작거나 허용된 최대 연결 수를 초과한 경우.</span><span class="sxs-lookup"><span data-stu-id="bd66b-379">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd66b-380">내부 <see cref="T:System.Net.Sockets.Socket" />이 null인 경우</span><span class="sxs-lookup"><span data-stu-id="bd66b-380">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd66b-381">수신기를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-381">Closes the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd66b-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> 수신기를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="bd66b-383">큐에 허용 되지 않은 연결 요청은 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-383">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="bd66b-384">원격 호스트 연결 대기 동의를 throw 합니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-384">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="bd66b-385">개별적으로 허용 된 연결을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-385">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd66b-386">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-386">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="bd66b-387">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-387">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd66b-388">다음 코드 예제는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드를 기본 닫습니다 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-388">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="bd66b-389"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오.</span><span class="sxs-lookup"><span data-stu-id="bd66b-389">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="bd66b-390">이 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-390">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="bd66b-391"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드는 또한 기본 종료 <see cref="T:System.Net.Sockets.Socket" />, 새 및 <see cref="T:System.Net.Sockets.Socket" /> 에 대 한는 <see cref="T:System.Net.Sockets.TcpListener" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-391">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span></span> <span data-ttu-id="bd66b-392">기본 속성을 설정 하는 경우 <see cref="T:System.Net.Sockets.Socket" /> 호출 하기 전에 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드를 이러한 속성은 탭으로 이전 되지 새 <see cref="T:System.Net.Sockets.Socket" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bd66b-392">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span></span></para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>