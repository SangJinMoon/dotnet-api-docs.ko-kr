<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NetworkStream.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Provides the underlying stream of data for network access.</source>
          <target state="translated">네트워크 액세스를 위한 데이터의 기본 스트림을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class provides methods for sending and receiving data over <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets in blocking mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 클래스 메서드를 통해 데이터를 송수신 제공 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> 블로킹 모드에서 소켓 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about blocking versus nonblocking <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, see <bpt id="p1">[</bpt>Using an Asynchronous Client Socket<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</source>
          <target state="translated">블로킹 및에 대 한 자세한 내용은 비블로킹 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, 참조 <bpt id="p1">[</bpt>비동기 클라이언트 소켓을 사용 하 여<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class for both synchronous and asynchronous data transfer.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 동기 및 비동기 데이터 전송 모두에 대 한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about synchronous and asynchronous communication, see <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</source>
          <target state="translated">동기 및 비동기 통신에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>소켓<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>To create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you must provide a connected <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">만들려는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, 연결 된 제공 해야 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can also specify what <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> permission the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> has over the provided <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">지정할 수도 있습니다 <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> 권한은 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 에 제공 된 동안 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>By default, closing the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">기본적으로 닫는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 제공 된 닫히지 않습니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to have permission to close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, you must specify <ph id="ph3">`true`</ph> for the value of the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">원하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 제공 된 닫을 수 있는 권한이 있어야 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>를 지정 해야 합니다 <ph id="ph3">`true`</ph> 의 값에 대 한는 <ph id="ph4">`ownsSocket`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> methods for simple single thread synchronous blocking I/O.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 단순한 단일 스레드 차단 동기 I/O입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want to process your I/O using separate threads, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> methods, or the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> methods for communication.</source>
          <target state="translated">사용 하 여 별도 스레드를 사용 하 여 I/O를 처리 하려는 경우 고려해는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 메서드 또는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 통신 하기 위한 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not support random access to the network data stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 네트워크 데이터 스트림에 대 한 임의 액세스를 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property, which indicates whether the stream supports seeking, is always <ph id="ph2">`false`</ph>; reading the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> property, reading the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> property, or calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> method will throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> 스트림이 검색을 지원 여부를 나타내는 속성은 항상 <ph id="ph2">`false`</ph>; 읽기는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> 속성을 읽는 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> 속성 또는 호출의 <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> 메서드는 는throw<ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">읽기 및 쓰기 작업의 인스턴스에서 동시에 수행할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 동기화에 대 한 필요 없이 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">가 쓰기 작업에 대 한 하나의 고유 스레드 및 읽기 작업에 대해 하나의 고유한 스레드도 읽기 사이의 방해 하지 됩니다 되며 쓰기 스레드 및 동기화가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The following code example demonstrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from a connected <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and perform basic synchronous blocking I/O.</source>
          <target state="translated">다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 연결 된 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 기본 동기 차단 I/O를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에서 데이터를 보내고 받는 데 사용할 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 지정 된에 대 한 읽기/쓰기 액세스를 사용 하 여 만들어집니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 내부 소유 하지 않는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>를 호출 하므로 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 닫히지 않습니다는 <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The following code example illustrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제를 만드는 예제는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 연결되지 않은 경우</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> 속성이 <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 비블로킹 상태인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에서 데이터를 보내고 받는 데 사용할 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>을 소유하도록 나타내려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 소유권을 사용하여 지정된 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에 대한 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 지정 된에 대 한 읽기/쓰기 액세스를 사용 하 여 만들어집니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>If the value of <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">`ownsSocket`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 내부의 소유권을 갖습니다 <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, 호출의 <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 메서드 내부도 닫힙니다 <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with ownership of the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 의 소유권을 갖는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 연결되지 않은 경우</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the value of the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> 속성 값이 <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 비블로킹 상태인 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에서 데이터를 보내고 받는 데 사용할 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specify the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">제공된 <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>을 통해 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 부여되는 액세스 권한 유형을 지정하는 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights.</source>
          <target state="translated">지정된 액세스 권한을 사용하여 지정된 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with the specified access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 지정 된 지정된 된 액세스를 사용 하 여 만들어집니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 내부 소유 하지 않는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>를 호출 하므로 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 닫히지 않습니다 내부 <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`access`</ph> 매개 변수 집합의 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 의 속성은 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, 하면 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, 하면 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, 두 메서드 호출을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 읽고 쓸 수는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 연결되지 않은 경우</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> 속성이 <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 비블로킹 상태인 경우</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에서 데이터를 보내고 받는 데 사용할 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specifies the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 값의 비트 조합으로, 제공된 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 대해 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에 부여된 액세스 권한 유형을 지정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>을 소유하도록 나타내려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights and the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">지정된 액세스 권한과 지정된 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 소유권을 사용하여 지정된 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>에 대한 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 지정 된에 대 한 읽기/쓰기 액세스를 사용 하 여 만들어집니다 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">경우의 값은 <ph id="ph1">`ownsSocket`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 내부의 소유권을 갖습니다 <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, 호출는 <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 메서드 내부도 닫힙니다 <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`access`</ph> 매개 변수 집합의 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 의 속성은 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, 하면 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, 하면 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">지정 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, 두 메서드 호출을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 읽고 쓸 수는 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Ownership of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is given to this <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> by specifying <ph id="ph3">`true`</ph> for the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">소유권은 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 이 가리키는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 지정 하 여 <ph id="ph3">`true`</ph> 에 대 한는 <ph id="ph4">`ownsSocket`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 연결되지 않은 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> 속성이 <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> 매개 변수가 비블로킹 상태인 경우</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>에서 읽은 데이터를 저장하기 위한 메모리 내의 위치에 해당하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data.</source>
          <target state="translated">데이터를 저장하기 시작하는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept> 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 읽을 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>가 완료될 때 실행되는 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">추가 사용자 정의 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 비동기 읽기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">비동기 호출을 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method starts asynchronously reading data from the incoming network buffers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드가 비동기적으로 들어오는 네트워크 버퍼에서 데이터를 읽기 시작 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method gives you the ability to receive data within a separate execution thread.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드는 별도 실행 스레드 내에서 데이터를 수신할 수 제공 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">구현 하는 콜백 메서드를 만들어야 합니다는 <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> 대리자를 전달 하 고 이름을 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">최소한, 프로그램 <ph id="ph1">`state`</ph> 매개 변수를 포함 해야 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information.</source>
          <target state="translated">콜백 메서드 내에서 받은 데이터 하려고 하므로 작은 클래스 또는 읽기 버퍼 및 기타 유용한 정보를 저장할 구조를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">구조체 또는 클래스 인스턴스를 전달 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 통해 메서드는 <ph id="ph2">`state`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">콜백 메서드를 호출 해야는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> until the provided <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> reads data or throws an exception.</source>
          <target state="translated">응용 프로그램 호출 하는 경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, 시스템 또는 데이터를 수신 하 고, 오류가 발생 하 고, 시스템에서 지정 된 콜백 메서드 및 블록을 실행 하는 별도 스레드로 사용 됩니다 다음 때까지 기다립니다 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 까지 제공 된 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 읽기 데이터 또는 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">콜백 메서드를 작성 하는 방법에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>콜백 메서드로 대리자 마샬링<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드에 지정 된 바이트 수까지 사용 가능한 많은 데이터를 읽습니다.는 <ph id="ph2">`size`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">그렇다면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">읽기 및 쓰기 작업의 인스턴스에서 동시에 수행할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 동기화에 대 한 필요 없이 클래스입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">가 쓰기 작업에 대 한 하나의 고유 스레드 및 읽기 작업에 대해 하나의 고유한 스레드도 읽기 사이의 방해 하지 됩니다 되며 쓰기 스레드 및 동기화가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> to read data asynchronously from the network stream.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 네트워크 스트림에서 비동기적으로 데이터를 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myReadCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated"><ph id="ph1">`myReadCallBack`</ph> 메서드 구현에서 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 위임 하 고 시스템에 의해 호출 때 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> paramater.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 매개 변수의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이에서 <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> 매개 변수의 값을 뺀 값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while reading from the network.</source>
          <target state="translated">네트워크에서 읽는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>에 쓸 데이터를 포함하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin sending the data.</source>
          <target state="translated">데이터를 보내기 시작하는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept> 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>가 완료될 때 실행되는 <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">추가 사용자 정의 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write to a stream.</source>
          <target state="translated">스트림에 비동기 쓰기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">비동기 호출을 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method starts an asynchronous send operation to the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드 원격 호스트에 비동기 발신 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method gives you the ability to send data within a separate execution thread.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">구현 하는 콜백 메서드를 만들어야 합니다는 <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> 대리자를 전달 하 고 이름을 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">최소한, 프로그램 <ph id="ph1">`state`</ph> 매개 변수를 포함 해야 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If your callback needs more information, you can create a small class or structure to hold the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> and the other required information.</source>
          <target state="translated">콜백에 자세한 정보를 작은 클래스 또는 저장할 구조를 만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 및 기타 필요한 정보입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">구조체 또는 클래스 인스턴스를 전달 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 통해 메서드는 <ph id="ph2">`state`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should implement the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">콜백 메서드를 구현 해야는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, the system uses a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> until the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> sends the number of bytes requested or throws an exception.</source>
          <target state="translated">응용 프로그램 호출 하는 경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, 시스템 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 될 때까지 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드를 사용 하 여는 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">콜백 메서드를 작성 하는 방법에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>콜백 메서드로 대리자 마샬링<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">그렇다면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">읽기 및 쓰기 작업의 인스턴스에서 동시에 수행할 수 있습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 동기화에 대 한 필요 없이 클래스입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">가 쓰기 작업에 대 한 하나의 고유 스레드 및 읽기 작업에 대해 하나의 고유한 스레드도 읽기 사이의 방해 하지 됩니다 되며 쓰기 스레드 및 동기화가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> to write data asynchronously to a network stream.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 네트워크 스트림에 비동기적으로 데이터를 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myWriteCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated"><ph id="ph1">`myWriteCallBack`</ph> 메서드 구현에서 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 위임 하 고 시스템에 의해 호출 때 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이에서 <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> 매개 변수의 값을 뺀 값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">네트워크에 쓰는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports reading.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 읽기를 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be read from the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림에서 데이터를 읽을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">적절 한 제공 <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> 열거형 값 읽기 및 쓰기 가능성을 설정 하는 생성자에는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 속성을 설정 하는 경우는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 되었는지 확인 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>It then performs a read operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">다음에 읽기 작업을 수행할는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>Gets a value that indicates whether the stream supports seeking.</source>
          <target state="translated">스트림이 검색을 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>This property is not currently supported.This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 속성은 현재 지원되지 않습니다. 이 속성은 항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases to indicate that <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> cannot seek a specific location in the stream.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 스트림에서 특정 위치를 검색할 수 없음을 나타내기 위해 항상<ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>Indicates whether timeout properties are usable for <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 제한 시간 속성을 사용할 수 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">모든 경우에 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>This property is present because it is inherited from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</source>
          <target state="translated">상속 하기 때문에이 속성은 현재 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports writing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 쓰기를 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 데이터를 쓸 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">적절 한 제공 <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> 열거형 값 읽기 및 쓰기 가능성을 설정 하는 생성자에는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 속성을 설정 하는 경우는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 되었는지 확인 하는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>It then performs a write operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">다음에 쓰기 작업을 수행할는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</source>
          <target state="translated">닫기 전까지 남은 데이터를 보내기 위한 대기 시간(밀리초)을 지정하는 부호 있는 32비트 정수입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> after waiting the specified time to allow data to be sent.</source>
          <target state="translated">데이터를 보낼 수 있도록 지정된 시간 동안 기다린 후에 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>을 닫습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method frees both unmanaged and managed resources associated with the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 와 연결 된 관리 되지 않는 및 관리 되는 리소스를 해제 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> owns the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, it is closed as well.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 내부 소유 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, 함께 닫힙니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> was associated with a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method will close the TCP connection, but not dispose of the associated <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 연결 된 한 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> 메서드는 TCP 연결을 종료 하지만 연결 된 삭제 하지 <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> 매개 변수가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Gets a value that indicates whether data is available on the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> to be read.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>의 데이터를 읽을 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data is available on the stream to be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">읽을 스트림에서 데이터를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> property to determine if data is ready to be read.</source>
          <target state="translated">사용 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> 데이터를 읽을 수 인지 확인 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a call to <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> returns immediately.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>에 대 한 호출 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If the remote host shuts down or closes the connection, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> may throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">원격 호스트 종료 되거나 연결이 닫히면 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> throw 될 수 있습니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The following code example reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> as long as data is available.</source>
          <target state="translated">다음 코드 예제에서 읽고는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 으로 데이터를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> 속성을 사용하여 특정 오류 코드를 가져온 다음 MSDN의 Windows 소켓 버전 2 API 오류 코드 설명서에서 오류에 대한 자세한 설명을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>를 재정의할 때 이전 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Finalize 메서드를 재정의<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents an asynchronous call.</source>
          <target state="translated">비동기 호출을 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Handles the end of an asynchronous read.</source>
          <target state="translated">비동기 읽기의 끝을 처리합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 읽은 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes the asynchronous read operation started in the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 시작 비동기 읽기 작업을 완료 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">호출 하기 전에 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>를 구현 하는 콜백 메서드를 만들어야 할는 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">콜백 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드에 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to obtain the state object passed to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">콜백 메서드 내에서 <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 에 전달 된 상태 개체를 가져올 수는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Extract the receiving <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from this state object.</source>
          <target state="translated">수신 추출 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 에서이 상태 개체입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method to successfully complete the read operation and return the number of bytes read.</source>
          <target state="translated">가져온 후는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, 호출의 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 메서드를 성공적으로 읽기 작업을 완료 하 고 읽은 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method blocks until data is available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 메서드 데이터를 사용할 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method reads as much data as is available up to the number of bytes specified in the <ph id="ph2">`size`</ph> parameter of the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 메서드에 지정 된 바이트 수까지 사용 가능한 많은 데이터를 읽습니다.는 <ph id="ph2">`size`</ph> 의 매개 변수는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If the remote host shuts down the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> connection and all available data has been received, the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes immediately and returns zero bytes.</source>
          <target state="translated">원격 호스트를 종료 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 연결 및 사용 가능한 모든 데이터 수신 되기는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 메서드가 즉시 완료 되 고 0 바이트가 반환 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>To obtain the received data, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, and extract the buffer contained in the resulting state object.</source>
          <target state="translated">호출을 받은 데이터를 가져오려면는 <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> 의 속성은 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, 결과 상태 개체에 포함 된 버퍼를 추출 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">그렇다면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myReadCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> as the callback method.</source>
          <target state="translated">다음 코드 예에서 <ph id="ph1">`myReadCallback`</ph> 에 제공 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 콜백 메서드로 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> is implemented in <ph id="ph2">`myReadCallback`</ph> to complete the asynchronous read call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 구현 되는 <ph id="ph2">`myReadCallback`</ph> 읽기에 의해 시작 하는 호출을 비동기 끝나기를 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">비동기 호출을 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Handles the end of an asynchronous write.</source>
          <target state="translated">비동기 쓰기의 끝을 처리합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> completes the asynchronous send operation started in <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 시작 비동기 발신 작업을 완료 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">호출 하기 전에 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>를 구현 하는 콜백 메서드를 만들어야 할는 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">콜백 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드에 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">`IAsyncResult`</ph> parameter to obtain the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">콜백 메서드 내에서 <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> 속성은 <ph id="ph2">`IAsyncResult`</ph> 를 가져오려면는 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you can call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method to successfully complete the send operation and return the number of bytes sent.</source>
          <target state="translated">가져온 후의 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>를 호출할 수 있습니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 메서드를 성공적으로 송신 작업을 완료 하 고 보낸 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method blocks until the requested number of bytes are sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 메서드는 바이트 수가 요청 된 전송 될 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">그렇다면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myWriteCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> as the callback method.</source>
          <target state="translated">다음 코드 예에서 <ph id="ph1">`myWriteCallback`</ph> 에 제공 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 콜백 메서드로 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> is implemented in <ph id="ph2">`myWriteCallback`</ph> to complete the asynchronous write call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 구현 되는 <ph id="ph2">`myWriteCallback`</ph> 에 의해 시작 된 비동기 쓰기 호출을 완료 하려면 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred while writing to the network.</source>
          <target state="translated">네트워크에 쓰는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">응용 프로그램 코드,이 메서드를 호출 하지 않아야 개체의 <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드를 호출 하 여 가비지 수집기의 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지 수집 중 호출 됩니다는 <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>For more information about using the Finalize method, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Finalize 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Finalize 메서드 및 소멸자<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>관리 되지 않는 리소스 정리<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, 및 <bpt id="p3">[</bpt>Finalize 메서드를 재정의<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept> .</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Flushes data from the stream.</source>
          <target state="translated">스트림에서 데이터를 플러시합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>This method is reserved for future use.</source>
          <target state="translated">@FSHO2@이 메서드는 나중에 사용할 수 있도록 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> method; however, because <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is not buffered, it has no affect on network streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> 메서드 구현은 <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> 메서드 소비량이 적어지지만 때문에 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 은 영향을 주지 않습니다 네트워크 스트림을에 아무런 버퍼링 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> 메서드 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">이 작업을 취소해야 한다는 알림을 전파하는 데 사용되는 취소 토큰입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Flushes data from the stream as an asynchronous operation.</source>
          <target state="translated">스트림에서 데이터를 비동기 작업으로 플러시합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after data has been flushed from the stream for the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instance.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> 개체에 대 한 스트림에서 데이터가 플러시된 완성 합니다는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Gets the length of the data available on the stream.</source>
          <target state="translated">스트림에서 사용할 수 있는 데이터의 길이를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">이 속성은 현재 지원되지 않으며 항상 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>The length of the data available on the stream.</source>
          <target state="translated">스트림에서 사용 가능한 데이터의 길이입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Any use of this property.</source>
          <target state="translated">이 속성을 사용한 경우</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Gets or sets the current position in the stream.</source>
          <target state="translated">스트림 내의 현재 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">이 속성은 현재 지원되지 않으며 항상 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">스트림 내의 현재 위치입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Any use of this property.</source>
          <target state="translated">이 속성을 사용한 경우</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>에서 읽은 데이터를 저장하기 위한 메모리 내의 위치에 해당하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data to.</source>
          <target state="translated">데이터를 저장하기 시작하는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept> 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 읽을 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads data from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 데이터를 읽습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, or 0 if the socket is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에서 읽은 바이트 수이며 소켓이 닫힌 경우 0입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads data into the <ph id="ph1">`buffer`</ph> parameter and returns the number of bytes successfully read.</source>
          <target state="translated">이 메서드는 데이터를 읽습니다는 <ph id="ph1">`buffer`</ph> 매개 변수 및 성공적으로 읽은 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the socket is closed, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method returns 0.</source>
          <target state="translated">소켓 닫혀 있는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드에서 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> operation reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 작업에 지정 된 바이트 수까지 사용 가능한 데이터를 읽습니다는 <ph id="ph2">`size`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the remote host shuts down the connection, and all available data has been received, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method completes immediately and return zero bytes.</source>
          <target state="translated">원격 호스트 연결을 종료 하 고 사용 가능한 모든 데이터를 받았습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드 즉시 완료 되 고 0 바이트를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출 하 여 읽을 수는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to read from a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not readable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">읽을 하려고 하면는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 읽을 수 없는, 받아볼 수는 <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">그렇다면 사용 하는 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> to determine if data is available to be read.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> 읽을 수 있는 데이터 인지 확인 하려면.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If data is available, it reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">읽을 데이터를 사용할 수 있으면는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이에서 <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> 매개 변수의 값을 뺀 값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">내부 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>There is a failure reading from the network.</source>
          <target state="translated">네트워크에서 읽는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>을 읽을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>을 읽을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property.</source>
          <target state="translated">파생 되어야 합니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 사용 하는 클래스는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">확인할 수도 있습니다 여부는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 가 공개적으로 액세스할 수를 확인 하 여 읽을 수 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> 속성을 설정 하는 경우는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">`CanCommunicate`</ph> 속성 검사는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> 여부를 확인 하는 속성은 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>Gets or sets the amount of time that a read operation blocks waiting for data.</source>
          <target state="translated">데이터를 기다리는 중 읽기 작업이 차단되는 시간을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</source>
          <target state="translated">읽기 작업의 제한 시간(밀리초)을 지정하는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>입니다. 이 시간이 경과하면 읽기 작업이 실패합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the read operation does not time out.</source>
          <target state="translated">기본값인 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>는 읽기 작업에 제한 시간이 없음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>If the read operation does not complete within the time specified by this property, the read operation throws an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">이 속성에서 지정한 시간 내에 읽기 작업이 완료 되지 않으면, 읽기 작업에서 throw 한 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property affects only synchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">이 속성은 적용 동기 읽기에만 호출 하 여 수행 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property does not affect asynchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">이 속성은 비동기 읽기를 호출 하 여 수행에 영향을 주지 않습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The following code example sets the read time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">다음 코드 예제에서는 10 밀리초 네트워크 스트림에 대 한 읽기 제한 시간을 설정합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">지정한 값이 0보다 작거나 같고 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>가 아닌 경우</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">이 매개 변수는 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">이 매개 변수는 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the stream to the given value.</source>
          <target state="translated">스트림의 현재 위치를 주어진 값으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">이 메서드는 현재 지원되지 않으며 항상 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The position in the stream.</source>
          <target state="translated">스트림 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Any use of this property.</source>
          <target state="translated">이 속성을 사용한 경우</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This parameter is not used.</source>
          <target state="translated">이 매개 변수는 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Sets the length of the stream.</source>
          <target state="translated">스트림의 길이를 설정합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This method always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">이 메서드는 항상 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Any use of this property.</source>
          <target state="translated">이 속성을 사용한 경우</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">기본 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that represents the underlying network connection.</source>
          <target state="translated">내부 네트워크 연결을 나타내는 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> can use this property to get the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">파생 된 클래스 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 이 속성을 사용 하 여 기본 가져올 수 <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> provides.</source>
          <target state="translated">기본 사용 하 여 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> 는 그 외에도 필요 하면 액세스 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 제공 합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>This property is accessible only through this class or a derived class.</source>
          <target state="translated">이 속성은이 클래스 또는 파생된 클래스를 통해서만 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>The following code example retrieves the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to verify an active connection.</source>
          <target state="translated">다음 코드 예제에서는 기본 검색 <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 활성 연결을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>에 쓸 데이터를 포함하는 <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to start writing data.</source>
          <target state="translated">데이터를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept> 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes data to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>에 데이터를 씁니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method starts at the specified <ph id="ph2">`offset`</ph> and sends <ph id="ph3">`size`</ph> bytes from the contents of <ph id="ph4">`buffer`</ph> to the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드를 지정 된 위치에서 시작 <ph id="ph2">`offset`</ph> 보냅니다 <ph id="ph3">`size`</ph> 의 내용에서 바이트 <ph id="ph4">`buffer`</ph> 네트워크에 있습니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method blocks until the requested number of bytes is sent or a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드가 요청 된 바이트 수를 보낼 때까지 또는 차단 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">표시 되 면 한 <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> 속성을 특정 오류 코드는 Windows 소켓 버전 2 API 오류 코드 MSDN 설명서에서에서 오류에 대 한 자세한 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by accessing the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 이 액세스 하 여 쓰기 가능한는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to write to a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not writable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">에 쓰기를 시도 하는 경우는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 쓰기 가능 하지 않습니다, 받아볼 수는 <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">표시 되 면는 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 것 인 한 것을 확인 하는 <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example checks to see whether the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">다음 코드 예제에서는 볼 수 있는지 여부를 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If it is, then <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> is used to write a small message.</source>
          <target state="translated">인 경우 다음 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 작은 메시지를 기록 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>의 길이에서 <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> 매개 변수의 값을 뺀 값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">네트워크에 쓰는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">소켓에 액세스할 때 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure reading from the network.</source>
          <target state="translated">네트워크에서 읽는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is writable.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>이 쓰기 가능한지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림에 데이터를 쓸 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property.</source>
          <target state="translated">파생 되어야 합니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 사용 하는 클래스는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 를 호출할 수 있습니다는 <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">확인할 수도 있습니다 여부는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 공개적으로 액세스할 수 있는 검사 하 여 쓰기 가능한가 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> 속성을 설정 하는 경우는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">`CanCommunicate`</ph> 속성 검사는 <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> 여부를 확인 하는 속성은 <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>Gets or sets the amount of time that a write operation blocks waiting for data.</source>
          <target state="translated">데이터를 기다리는 중 쓰기 작업이 차단되는 시간을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails.</source>
          <target state="translated">쓰기 작업의 제한 시간(밀리초)을 지정하는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>입니다. 이 시간이 경과하면 쓰기 작업이 실패합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the write operation does not time out.</source>
          <target state="translated">기본값인 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>는 쓰기 작업에 제한 시간이 없음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>If the write operation does not complete within the time specified by this property, the write operation throws a <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">이 속성에서 지정한 시간 내에 쓰기 작업이 완료 되지 않으면, 쓰기 작업이 throw 한 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property affects only synchronous write operations performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">이 속성에는 호출 하 여 수행 하는 동기 쓰기 작업에 적용 된 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property does not affect asynchronous writes performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">이 속성은 호출 하 여 수행 된 비동기 쓰기 영향을 주지 않습니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The following code example sets the write time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">다음 코드 예제에서는 10 밀리초 네트워크 스트림에 쓰기 제한 시간을 설정합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">지정한 값이 0보다 작거나 같고 <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>가 아닌 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>